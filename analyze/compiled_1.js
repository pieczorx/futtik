function isAndroidStockBrowser() {
    var t = navigator.userAgent,
        i = t.indexOf("Android") > -1 && t.indexOf("Mozilla/5.0") > -1 && t.indexOf("AppleWebKit") > -1,
        s = new RegExp(/AppleWebKit\/([\d.]+)/),
        o = null === s.exec(t) ? null : parseFloat(s.exec(t)[1]);
    return i && null !== o && o < 537
}

function isSupportedBrowser() {
    return !isAndroidStockBrowser() && function testWebGl(t) {
        try {
            return !(!window.WebGLRenderingContext || !t.getContext("webgl") && !t.getContext("experimental-webgl"))
        } catch (t) {
            return !1
        }
    }(document.createElement("canvas"))
}

function FUTObject() {
    this.className = this.constructor.name || "", Object.defineProperty(this, "className", {
        writable: !1
    }), this.superclass = null
}

function FUTHashTable(t) {
    this._collection = {}, Object.defineProperty(this, "_collection", {
        writable: !0,
        enumerable: !1
    }), this.length = 0, Object.defineProperty(this, "length", {
        get: function get() {
            return Object.keys(this._collection).length
        }
    });
    var i;
    for (i in t) t.hasOwnProperty(i) && (this._collection[i] = t[i])
}

function FUTIterator(t) {
    FUTObject.call(this), this._collection = t, Object.defineProperty(this, "_collection", {
        writable: !0,
        enumerable: !1
    }), this._index = 0, Object.defineProperty(this, "_index", {
        writable: !0,
        enumerable: !1
    }), this.length = 0, Object.defineProperty(this, "length", {
        get: this.getLength,
        enumerable: !0
    }), this.startOfList = !0, Object.defineProperty(this, "startOfList", {
        get: this._atFirstIndex,
        enumerable: !0
    }), this.endOfList = !1, Object.defineProperty(this, "endOfList", {
        get: this._atLastIndex,
        enumerable: !0
    })
}

function FUTObservable() {
    FUTObject.call(this), this._observers = []
}

function FUTStorageAlternative() {
    FUTObject.call(this), this._localStorage = {}, this.length = 0, Object.defineProperty(this, "length", {
        get: function() {
            return Object.keys(this._localStorage).length
        }
    })
}

function FUTNotificationDispatcher() {
    FUTObject.call(this), this._observers = new FUTHashTable({})
}

function FUIResponder() {
    FUTObject.call(this);
    var t = new valueobjects.NumberVO;
    Object.defineProperty(this, "_touchID", {
        get: t.get.bind(t),
        set: t.set.bind(t),
        enumerable: !1
    });
    var i = new valueobjects.NumberVO;
    Object.defineProperty(this, "_touchOriginX", {
        get: i.get.bind(i),
        set: i.set.bind(i),
        enumerable: !1
    });
    var s = new valueobjects.NumberVO;
    Object.defineProperty(this, "_touchOriginY", {
        get: s.get.bind(s),
        set: s.set.bind(s),
        enumerable: !1
    });
    var o = new valueobjects.BooleanVO;
    Object.defineProperty(this, "_hasMoved", {
        get: o.get.bind(o),
        set: o.set.bind(o),
        enumerable: !1
    });
    var l = new valueobjects.NumberVO;
    Object.defineProperty(this, "moveDistanceThreshold", {
        get: l.get.bind(l),
        set: l.set.bind(l),
        enumerable: !0
    });
    var u = new valueobjects.BooleanVO;
    Object.defineProperty(this, "allowLegacyPropagation", {
        get: u.get.bind(u),
        set: u.set.bind(u),
        enumerable: !0
    }), Object.defineProperty(this, "_eventElement", {
        writable: !0,
        enumerable: !1
    }), Object.defineProperty(this, "_eventListeners", {
        writable: !0,
        enumerable: !1
    }), Object.defineProperty(this, "_scrollPositions", {
        writable: !0,
        enumerable: !1
    }), Object.defineProperty(this, "_eventDelegates", {
        writable: !0,
        enumerable: !1
    }), this._eventDelegates = [], this._eventElement = null, this._eventElementClientRect = null, this._eventListeners = [], this._touchID = -1, this._touchOriginX = 0, this._touchOriginY = 0, this._scrollPositions = [], this._hasMoved = !1, this.moveDistanceThreshold = 8, this.allowLegacyPropagation = !1
}

function FUTTouchHandler() {
    var t = !0;
    Object.defineProperty(this, "endTouchOnLeave", {
        get: function() {
            return t
        },
        set: function(i) {
            utils.JS.isBoolean(i) && (t = i)
        }
    });
    var i = !0;
    Object.defineProperty(this, "bubbleEvent", {
        get: function() {
            return i
        },
        set: function(t) {
            utils.JS.isBoolean(t) && (i = t)
        }
    }), this._element = null, this._touchID = -1, this._originalX = 0, this._originalY = 0, this._scrollPositions = [], this.endTouchOnLeave = !0, this.bubbleEvent = !0, this.preventDefault = !1, this._hasMoved = !1;
    var s = !0;
    Object.defineProperty(this, "moveDistanceThreshold", {
        get: function() {
            return s
        },
        set: function(t) {
            utils.JS.isNumber(t) && (s = t)
        }
    }), this.moveDistanceThreshold = 8, this._listeners = [], this.touchstart = new FUTObservable, Object.defineProperty(this, "touchstart", {
        writable: !1
    }), this.touchmove = new FUTObservable, Object.defineProperty(this, "touchmove", {
        writable: !1
    }), this.touchend = new FUTObservable, Object.defineProperty(this, "touchend", {
        writable: !1
    }), this.tap = new FUTObservable, Object.defineProperty(this, "tap", {
        writable: !1
    })
}

function FUTHttpRequest() {
    FUTObservable.call(this), this._url = "", Object.defineProperty(this, "_url", {
        writable: !0,
        enumerable: !1
    }), this._contentType = enums.HTTPContentType.JSON, Object.defineProperty(this, "_contentType", {
        writable: !0,
        enumerable: !1
    }), this._requestType = enums.HTTPRequestMethod.GET, Object.defineProperty(this, "_requestType", {
        writable: !0,
        enumerable: !1
    }), this._mimeOverride = "", Object.defineProperty(this, "_mimeOverride", {
        writable: !0,
        enumerable: !1
    }), this._urlVariables = "", Object.defineProperty(this, "_urlVariables", {
        writable: !0,
        enumerable: !1
    }), this._requestHeaders = [], Object.defineProperty(this, "_requestHeaders", {
        writable: !0,
        enumerable: !1
    }), this._requestBody = null, this._timeout = 2e4, Object.defineProperty(this, "_requestHeaders", {
        writable: !0,
        enumerable: !1
    }), this._cache = !0, this._http = new XMLHttpRequest, Object.defineProperty(this, "_http", {
        writable: !1,
        enumerable: !1
    })
}

function FUTUtasHttpRequest(t) {
    FUTHttpRequest.call(this), this._delegate = t, Object.defineProperty(this, "_delegate", {
        writable: !1,
        enumerable: !1
    }), this._doReauth = !0, Object.defineProperty(this, "_doReauth", {
        writable: !0,
        enumerable: !1
    })
}

function ItemRepository() {
    FUTHashTable.call(this, {}), this.endOfList = !1, Object.defineProperty(this, "endOfList", {
        writable: !0
    })
}

function ClubRepository() {
    this._players = new ItemRepository, this._staff = new ItemRepository, this._consumables = new ItemRepository, this._badges = new ItemRepository, this._balls = new ItemRepository, this._kits = new ItemRepository, this._stadiums = new ItemRepository, this._activeItems = new FUTHashTable({})
}

function FUIView() {
    FUIResponder.call(this);
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "_interactionState", {
        get: t.get.bind(t),
        set: t.set.bind(t)
    }), this._interactionState = !1, this._subviews = [], Object.defineProperty(this, "_subviews", {
        writable: !0,
        enumerable: !1
    }), this._superview = null, Object.defineProperty(this, "_superview", {
        writable: !0,
        enumerable: !1
    }), this._defaultDisplay = "", Object.defineProperty(this, "_defaultDisplay", {
        writable: !0,
        enumerable: !1
    })
}

function FUITargetActionView() {
    FUIView.call(this), this._targets = new FUTHashTable({})
}

function FUIControl() {
    FUITargetActionView.call(this)
}

function FUIButton() {
    FUIControl.call(this)
}

function FUIViewController() {
    FUIResponder.call(this);
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "isLoading", {
        get: t.get.bind(t),
        set: t.set.bind(t)
    });
    var i = new valueobjects.BooleanVO;
    Object.defineProperty(this, "hasLoaded", {
        get: i.get.bind(i),
        set: i.set.bind(i)
    }), this._view = null, this._parentViewController = null, this._childViewControllers = [], this.isLoading = !1, this.hasLoaded = !1, this.initialized = !1
}

function EADPIdentityManager() {
    FUTObject.call(this), this.connectHost = "https://accounts.ea.com", this.portalHost = "https://signin.ea.com", this.proxyHost = "https://gateway.ea.com", this.redirect_uri = "", this.mobile_client_scope = "basic.identity+offline+signin", this.locale = "", this.device_id = "", this.mobile_client_id = "", this.mobile_client_secret = "", this.error = {
        REFRESH_TOKEN: "NEED_LOGIN_AGAIN",
        LOCAL_STORAGE: "BROWSER_DOES_NOT_SUPPORT",
        SERVER: "SERVER_ERROR"
    }, this.exchangeAccessTokenSuccessCallback = null, this.exchangeAccessTokenFailCallback = null
}

function eadpAuthSuccess(code) {
    eadp && eadp.identity && eadp.identity.exchangeAccessToken(code, eadp.identity.exchangeAccessTokenSuccessCallback, eadp.identity.exchangeAccessTokenFailCallback)
}

function EADPIdentityManager_Web() {
    EADPIdentityManager.call(this)
}

function FUINavigationController(t, toolbar) {
    FUIViewController.call(this);
    var i = new valueobjects.BooleanVO;
    Object.defineProperty(this, "isToolbarVisible", {
        get: i.get.bind(i),
        set: i.set.bind(i)
    });
    var s = new valueobjects.BooleanVO;
    Object.defineProperty(this, "isNavVisible", {
        get: s.get.bind(s),
        set: s.set.bind(s)
    }), this._navigationBar = t || new views.NavigationBar, this._toolbar = toolbar || new views.Toolbar, this._backButton = new views.buttons.NavigationButton, this._rootController = null, this._currentController = null, this._currentView = null, this.isNavVisible = !1, this.isToolbarVisible = !1, this._isTransitioning = !1
}

function FUISplitViewController() {
    FUIViewController.call(this), this._leftController = null, this._rightController = null
}

function UTPopupDTO(title, message, t) {
    this.title = title, this.message = message, this.buttonLabels = t
}
if (!isSupportedBrowser()) throw new Error("Browser not supported");
! function() {
    function _name() {
        var match, name;
        return this === Function || this === Function.prototype.constructor ? name = "Function" : this !== Function.prototype && (name = (match = ("" + this).match(t)) && match[1]), name || ""
    }
    var t = /^\s*function\s+([^\(\s]*)\s*/,
        i = !("name" in Function.prototype && "name" in function x() {}),
        s = "function" == typeof Object.defineProperty && function() {
            var result;
            try {
                Object.defineProperty(Function.prototype, "_xyz", {
                    get: function() {
                        return "blah"
                    },
                    configurable: !0
                }), result = "blah" === Function.prototype._xyz, delete Function.prototype._xyz
            } catch (t) {
                result = !1
            }
            return result
        }(),
        o = "function" == typeof Object.prototype.__defineGetter__ && function() {
            var result;
            try {
                Function.prototype.__defineGetter__("_abc", function() {
                    return "foo"
                }), result = "foo" === Function.prototype._abc, delete Function.prototype._abc
            } catch (t) {
                result = !1
            }
            return result
        }();
    Function.prototype._name = _name, i && (s ? Object.defineProperty(Function.prototype, "name", {
        get: function() {
            var name = _name.call(this);
            return this !== Function.prototype && Object.defineProperty(this, "name", {
                value: name,
                configurable: !0
            }), name
        },
        configurable: !0
    }) : o && Function.prototype.__defineGetter__("name", function() {
        var name = _name.call(this);
        return this !== Function.prototype && this.__defineGetter__("name", function() {
            return name
        }), name
    }))
}(),
function() {
    function DOMKit() {}
    DOMKit.prototype.addClass = function addClass(t, i) {
        "" !== i && i.split(" ").forEach(function _addClass(className) {
            if (t instanceof HTMLCollection)
                for (var i = t.length; i-- > 0;) t.item(i).classList.add(className);
            else t.classList.add(className)
        }, this)
    }, DOMKit.prototype.removeClass = function removeClass(t, i) {
        "" !== i && i.split(" ").forEach(function _removeClass(className) {
            if (t instanceof HTMLCollection)
                for (var i = t.length; i-- > 0;) t.item(i).classList.remove(className);
            else t.classList.remove(className)
        }, this)
    }, DOMKit.prototype.toggleClass = function toggleClass(t, i, s) {
        utils.JS.isBoolean(s) || (s = !this.hasClass(t, i)), s ? this.addClass(t, i) : this.removeClass(t, i)
    }, DOMKit.prototype.hasClass = function hasClass(t, i) {
        return "" !== i && t.classList.contains(i)
    }, DOMKit.prototype.remove = function remove(t) {
        function _remove(t) {
            t.parentNode && t.parentNode.removeChild(t)
        }
        if (t instanceof HTMLCollection)
            for (var i = t.length; i-- > 0;) _remove(t.item(i));
        else _remove(t)
    }, DOMKit.prototype.empty = function empty(t) {
        for (; t.hasChildNodes();) t.removeChild(t.lastChild)
    }, DOMKit.prototype.insertBefore = function insertBefore(t, i) {
        i.parentNode && i.parentNode.insertBefore(t, i)
    }, DOMKit.prototype.insertAfter = function insertAfter(t, i) {
        i.parentNode && i.parentNode.insertBefore(t, i.nextSibling)
    }, DOMKit.prototype.toggleDisplayStyle = function toggleDisplayStyle(t, i) {
        t.style.display = i ? "" : "none"
    }, DOMKit.prototype.HTMLCollectionToArray = function HTMLCollectionToArray(t) {
        return Array.prototype.slice.call(t)
    }, window.DOMKit || (window.DOMKit = new DOMKit)
}(),
function(window, undefined) {
    function isArraylike(t) {
        var length = t.length,
            type = I.type(t);
        return !I.isWindow(t) && (!(1 !== t.nodeType || !length) || ("array" === type || "function" !== type && (0 === length || "number" == typeof length && length > 0 && length - 1 in t)))
    }

    function createOptions(options) {
        var object = V[options] = {};
        return I.each(options.match(A) || [], function(t, i) {
            object[i] = !0
        }), object
    }

    function internalData(t, name, data, i) {
        if (I.acceptData(t)) {
            var s, o, l = I.expando,
                u = t.nodeType,
                h = u ? I.cache : t,
                id = u ? t[l] : t[l] && l;
            if (id && h[id] && (i || h[id].data) || data !== undefined || "string" != typeof name) return id || (id = u ? t[l] = p.pop() || I.guid++ : l), h[id] || (h[id] = u ? {} : {
                toJSON: I.noop
            }), "object" != typeof name && "function" != typeof name || (i ? h[id] = I.extend(h[id], name) : h[id].data = I.extend(h[id].data, name)), o = h[id], i || (o.data || (o.data = {}), o = o.data), data !== undefined && (o[I.camelCase(name)] = data), "string" == typeof name ? null == (s = o[name]) && (s = o[I.camelCase(name)]) : s = o, s
        }
    }

    function internalRemoveData(t, name, i) {
        if (I.acceptData(t)) {
            var s, o, l = t.nodeType,
                u = l ? I.cache : t,
                id = l ? t[I.expando] : I.expando;
            if (u[id]) {
                if (name && (s = i ? u[id] : u[id].data)) {
                    o = (name = I.isArray(name) ? name.concat(I.map(name, I.camelCase)) : name in s ? [name] : (name = I.camelCase(name)) in s ? [name] : name.split(" ")).length;
                    for (; o--;) delete s[name[o]];
                    if (i ? !isEmptyDataObject(s) : !I.isEmptyObject(s)) return
                }(i || (delete u[id].data, isEmptyDataObject(u[id]))) && (l ? I.cleanData([t], !0) : I.support.deleteExpando || u != u.window ? delete u[id] : u[id] = null)
            }
        }
    }

    function dataAttr(t, key, data) {
        if (data === undefined && 1 === t.nodeType) {
            var name = "data-" + key.replace(G, "-$1").toLowerCase();
            if ("string" == typeof(data = t.getAttribute(name))) {
                try {
                    data = "true" === data || "false" !== data && ("null" === data ? null : +data + "" === data ? +data : $.test(data) ? I.parseJSON(data) : data)
                } catch (t) {}
                I.data(t, key, data)
            } else data = undefined
        }
        return data
    }

    function isEmptyDataObject(t) {
        var name;
        for (name in t)
            if (("data" !== name || !I.isEmptyObject(t[name])) && "toJSON" !== name) return !1;
        return !0
    }

    function returnTrue() {
        return !0
    }

    function returnFalse() {
        return !1
    }

    function safeActiveElement() {
        try {
            return document.activeElement
        } catch (t) {}
    }

    function sibling(t, dir) {
        do {
            t = t[dir]
        } while (t && 1 !== t.nodeType);
        return t
    }

    function winnow(elements, qualifier, t) {
        if (I.isFunction(qualifier)) return I.grep(elements, function(i, s) {
            return !!qualifier.call(i, s, i) !== t
        });
        if (qualifier.nodeType) return I.grep(elements, function(i) {
            return i === qualifier !== t
        });
        if ("string" == typeof qualifier) {
            if (ae.test(qualifier)) return I.filter(qualifier, elements, t);
            qualifier = I.filter(qualifier, elements)
        }
        return I.grep(elements, function(i) {
            return I.inArray(i, qualifier) >= 0 !== t
        })
    }

    function createSafeFragment(document) {
        var list = ue.split("|"),
            t = document.createDocumentFragment();
        if (t.createElement)
            for (; list.length;) t.createElement(list.pop());
        return t
    }

    function manipulationTarget(t, content) {
        return I.nodeName(t, "table") && I.nodeName(1 === content.nodeType ? content : content.firstChild, "tr") ? t.getElementsByTagName("tbody")[0] || t.appendChild(t.ownerDocument.createElement("tbody")) : t
    }

    function disableScript(t) {
        return t.type = (null !== I.find.attr(t, "type")) + "/" + t.type, t
    }

    function restoreScript(t) {
        var match = Ce.exec(t.type);
        return match ? t.type = match[1] : t.removeAttribute("type"), t
    }

    function setGlobalEval(t, i) {
        for (var s, o = 0; null != (s = t[o]); o++) I._data(s, "globalEval", !i || I._data(i[o], "globalEval"))
    }

    function cloneCopyEvent(src, t) {
        if (1 === t.nodeType && I.hasData(src)) {
            var type, i, s, o = I._data(src),
                l = I._data(t, o),
                u = o.events;
            if (u) {
                delete l.handle, l.events = {};
                for (type in u)
                    for (i = 0, s = u[type].length; i < s; i++) I.event.add(t, type, u[type][i])
            }
            l.data && (l.data = I.extend({}, l.data))
        }
    }

    function fixCloneNodeIssues(src, t) {
        var nodeName, e, data;
        if (1 === t.nodeType) {
            if (nodeName = t.nodeName.toLowerCase(), !I.support.noCloneEvent && t[I.expando]) {
                data = I._data(t);
                for (e in data.events) I.removeEvent(t, e, data.handle);
                t.removeAttribute(I.expando)
            }
            "script" === nodeName && t.text !== src.text ? (disableScript(t).text = src.text, restoreScript(t)) : "object" === nodeName ? (t.parentNode && (t.outerHTML = src.outerHTML), I.support.html5Clone && src.innerHTML && !I.trim(t.innerHTML) && (t.innerHTML = src.innerHTML)) : "input" === nodeName && ve.test(src.type) ? (t.defaultChecked = t.checked = src.checked, t.value !== src.value && (t.value = src.value)) : "option" === nodeName ? t.defaultSelected = t.selected = src.defaultSelected : "input" !== nodeName && "textarea" !== nodeName || (t.defaultValue = src.defaultValue)
        }
    }

    function getAll(context, tag) {
        var t, i, o = 0,
            l = typeof context.getElementsByTagName !== s ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== s ? context.querySelectorAll(tag || "*") : undefined;
        if (!l)
            for (l = [], t = context.childNodes || context; null != (i = t[o]); o++) !tag || I.nodeName(i, tag) ? l.push(i) : I.merge(l, getAll(i, tag));
        return tag === undefined || tag && I.nodeName(context, tag) ? I.merge([context], l) : l
    }

    function fixDefaultChecked(t) {
        ve.test(t.type) && (t.defaultChecked = t.checked)
    }

    function vendorPropName(style, name) {
        if (name in style) return name;
        for (var t = name.charAt(0).toUpperCase() + name.slice(1), i = name, s = xe.length; s--;)
            if ((name = xe[s] + t) in style) return name;
        return i
    }

    function isHidden(t, i) {
        return t = i || t, "none" === I.css(t, "display") || !I.contains(t.ownerDocument, t)
    }

    function showHide(elements, show) {
        for (var display, t, hidden, values = [], index = 0, length = elements.length; index < length; index++)(t = elements[index]).style && (values[index] = I._data(t, "olddisplay"), display = t.style.display, show ? (values[index] || "none" !== display || (t.style.display = ""), "" === t.style.display && isHidden(t) && (values[index] = I._data(t, "olddisplay", css_defaultDisplay(t.nodeName)))) : values[index] || (hidden = isHidden(t), (display && "none" !== display || !hidden) && I._data(t, "olddisplay", hidden ? display : I.css(t, "display"))));
        for (index = 0; index < length; index++)(t = elements[index]).style && (show && "none" !== t.style.display && "" !== t.style.display || (t.style.display = show ? values[index] || "" : "none"));
        return elements
    }

    function setPositiveNumber(t, value, i) {
        var matches = Be.exec(value);
        return matches ? Math.max(0, matches[1] - (i || 0)) + (matches[2] || "px") : value
    }

    function augmentWidthOrHeight(t, name, i, s, o) {
        for (var l = i === (s ? "border" : "content") ? 4 : "width" === name ? 1 : 0, u = 0; l < 4; l += 2) "margin" === i && (u += I.css(t, i + Ve[l], !0, o)), s ? ("content" === i && (u -= I.css(t, "padding" + Ve[l], !0, o)), "margin" !== i && (u -= I.css(t, "border" + Ve[l] + "Width", !0, o))) : (u += I.css(t, "padding" + Ve[l], !0, o), "padding" !== i && (u += I.css(t, "border" + Ve[l] + "Width", !0, o)));
        return u
    }

    function getWidthOrHeight(t, name, i) {
        var s = !0,
            o = "width" === name ? t.offsetWidth : t.offsetHeight,
            l = Le(t),
            u = I.support.boxSizing && "border-box" === I.css(t, "boxSizing", !1, l);
        if (o <= 0 || null == o) {
            if (((o = Ae(t, name, l)) < 0 || null == o) && (o = t.style[name]), Ue.test(o)) return o;
            s = u && (I.support.boxSizingReliable || o === t.style[name]), o = parseFloat(o) || 0
        }
        return o + augmentWidthOrHeight(t, name, i || (u ? "border" : "content"), s, l) + "px"
    }

    function css_defaultDisplay(nodeName) {
        var t = document,
            display = Fe[nodeName];
        return display || ("none" !== (display = actualDisplay(nodeName, t)) && display || ((t = ((we = (we || I("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(t.documentElement))[0].contentWindow || we[0].contentDocument).document).write("<!doctype html><html><body>"), t.close(), display = actualDisplay(nodeName, t), we.detach()), Fe[nodeName] = display), display
    }

    function actualDisplay(name, t) {
        var i = I(t.createElement(name)).appendTo(t.body),
            display = I.css(i[0], "display");
        return i.remove(), display
    }

    function buildParams(prefix, t, i, add) {
        var name;
        if (I.isArray(t)) I.each(t, function(t, s) {
            i || Ge.test(prefix) ? add(prefix, s) : buildParams(prefix + "[" + ("object" == typeof s ? t : "") + "]", s, i, add)
        });
        else if (i || "object" !== I.type(t)) add(prefix, t);
        else
            for (name in t) buildParams(prefix + "[" + name + "]", t[name], i, add)
    }

    function addToPrefiltersOrTransports(t) {
        return function(i, s) {
            "string" != typeof i && (s = i, i = "*");
            var o, l = 0,
                u = i.toLowerCase().match(A) || [];
            if (I.isFunction(s))
                for (; o = u[l++];) "+" === o[0] ? (o = o.slice(1) || "*", (t[o] = t[o] || []).unshift(s)) : (t[o] = t[o] || []).push(s)
        }
    }

    function inspectPrefiltersOrTransports(t, options, i, s) {
        function inspect(u) {
            var selected;
            return o[u] = !0, I.each(t[u] || [], function(t, u) {
                var h = u(options, i, s);
                return "string" != typeof h || l || o[h] ? l ? !(selected = h) : void 0 : (options.dataTypes.unshift(h), inspect(h), !1)
            }), selected
        }
        var o = {},
            l = t === at;
        return inspect(options.dataTypes[0]) || !o["*"] && inspect("*")
    }

    function ajaxExtend(target, src) {
        var t, key, i = I.ajaxSettings.flatOptions || {};
        for (key in src) src[key] !== undefined && ((i[key] ? target : t || (t = {}))[key] = src[key]);
        return t && I.extend(!0, target, t), target
    }

    function ajaxHandleResponses(t, i, s) {
        for (var o, l, u, type, h = t.contents, p = t.dataTypes;
            "*" === p[0];) p.shift(), l === undefined && (l = t.mimeType || i.getResponseHeader("Content-Type"));
        if (l)
            for (type in h)
                if (h[type] && h[type].test(l)) {
                    p.unshift(type);
                    break
                }
        if (p[0] in s) u = p[0];
        else {
            for (type in s) {
                if (!p[0] || t.converters[type + " " + p[0]]) {
                    u = type;
                    break
                }
                o || (o = type)
            }
            u = u || o
        }
        if (u) return u !== p[0] && p.unshift(u), s[u]
    }

    function ajaxConvert(t, response, i, s) {
        var o, l, u, h, p, m = {},
            _ = t.dataTypes.slice();
        if (_[1])
            for (u in t.converters) m[u.toLowerCase()] = t.converters[u];
        for (l = _.shift(); l;)
            if (t.responseFields[l] && (i[t.responseFields[l]] = response), !p && s && t.dataFilter && (response = t.dataFilter(response, t.dataType)), p = l, l = _.shift())
                if ("*" === l) l = p;
                else if ("*" !== p && p !== l) {
            if (!(u = m[p + " " + l] || m["* " + l]))
                for (o in m)
                    if ((h = o.split(" "))[1] === l && (u = m[p + " " + h[0]] || m["* " + h[0]])) {
                        !0 === u ? u = m[o] : !0 !== m[o] && (l = h[0], _.unshift(h[1]));
                        break
                    }
            if (!0 !== u)
                if (u && t.throws) response = u(response);
                else try {
                    response = u(response)
                } catch (t) {
                    return {
                        state: "parsererror",
                        error: u ? t : "No conversion from " + p + " to " + l
                    }
                }
        }
        return {
            state: "success",
            data: response
        }
    }

    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest
        } catch (t) {}
    }

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP")
        } catch (t) {}
    }

    function createFxNow() {
        return setTimeout(function() {
            _t = undefined
        }, 0), _t = I.now()
    }

    function createTween(value, t, animation) {
        for (var i, s = (Tt[t] || []).concat(Tt["*"]), index = 0, length = s.length; index < length; index++)
            if (i = s[index].call(animation, t, value)) return i
    }

    function Animation(t, properties, options) {
        var result, i, index = 0,
            length = yt.length,
            s = I.Deferred().always(function() {
                delete o.elem
            }),
            o = function() {
                if (i) return !1;
                for (var currentTime = _t || createFxNow(), o = Math.max(0, animation.startTime + animation.duration - currentTime), l = 1 - (o / animation.duration || 0), index = 0, length = animation.tweens.length; index < length; index++) animation.tweens[index].run(l);
                return s.notifyWith(t, [animation, l, o]), l < 1 && length ? o : (s.resolveWith(t, [animation]), !1)
            },
            animation = s.promise({
                elem: t,
                props: I.extend({}, properties),
                opts: I.extend(!0, {
                    specialEasing: {}
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: _t || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function(i, end) {
                    var s = I.Tween(t, animation.opts, i, end, animation.opts.specialEasing[i] || animation.opts.easing);
                    return animation.tweens.push(s), s
                },
                stop: function(o) {
                    var index = 0,
                        length = o ? animation.tweens.length : 0;
                    if (i) return this;
                    for (i = !0; index < length; index++) animation.tweens[index].run(1);
                    return o ? s.resolveWith(t, [animation, o]) : s.rejectWith(t, [animation, o]), this
                }
            }),
            l = animation.props;
        for (propFilter(l, animation.opts.specialEasing); index < length; index++)
            if (result = yt[index].call(animation, t, l, animation.opts)) return result;
        return I.map(l, createTween, animation), I.isFunction(animation.opts.start) && animation.opts.start.call(t, animation), I.fx.timer(I.extend(o, {
            elem: t,
            anim: animation,
            queue: animation.opts.queue
        })), animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
    }

    function propFilter(t, i) {
        var index, name, s, value, o;
        for (index in t)
            if (name = I.camelCase(index), s = i[name], value = t[index], I.isArray(value) && (s = value[1], value = t[index] = value[0]), index !== name && (t[name] = value, delete t[index]), (o = I.cssHooks[name]) && "expand" in o) {
                value = o.expand(value), delete t[name];
                for (index in value) index in t || (t[index] = value[index], i[index] = s)
            } else i[name] = s
    }

    function Tween(t, options, i, end, s) {
        return new Tween.prototype.init(t, options, i, end, s)
    }

    function genFx(type, t) {
        var which, i = {
                height: type
            },
            s = 0;
        for (t = t ? 1 : 0; s < 4; s += 2 - t) i["margin" + (which = Ve[s])] = i["padding" + which] = type;
        return t && (i.opacity = i.width = type), i
    }

    function getWindow(t) {
        return I.isWindow(t) ? t : 9 === t.nodeType && (t.defaultView || t.parentWindow)
    }
    var t, i, s = typeof undefined,
        location = window.location,
        document = window.document,
        o = document.documentElement,
        l = window.jQuery,
        u = window.$,
        h = {},
        p = [],
        m = p.concat,
        _ = p.push,
        g = p.slice,
        S = p.indexOf,
        v = h.toString,
        T = h.hasOwnProperty,
        C = "1.10.1".trim,
        I = function(selector, context) {
            return new I.fn.init(selector, context, i)
        },
        L = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        A = /\S+/g,
        R = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        D = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
        P = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        N = /^[\],:{}\s]*$/,
        O = /(?:^|:|,)(?:\s*\[)+/g,
        B = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
        U = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,
        M = /^-ms-/,
        F = /-([\da-z])/gi,
        q = function(all, t) {
            return t.toUpperCase()
        },
        k = function(event) {
            (document.addEventListener || "load" === event.type || "complete" === document.readyState) && (detach(), I.ready())
        },
        detach = function() {
            document.addEventListener ? (document.removeEventListener("DOMContentLoaded", k, !1), window.removeEventListener("load", k, !1)) : (document.detachEvent("onreadystatechange", k), window.detachEvent("onload", k))
        };
    I.fn = I.prototype = {
            jquery: "1.10.1",
            constructor: I,
            init: function(selector, context, t) {
                var match, i;
                if (!selector) return this;
                if ("string" == typeof selector) {
                    if (!(match = "<" === selector.charAt(0) && ">" === selector.charAt(selector.length - 1) && selector.length >= 3 ? [null, selector, null] : D.exec(selector)) || !match[1] && context) return !context || context.jquery ? (context || t).find(selector) : this.constructor(context).find(selector);
                    if (match[1]) {
                        if (context = context instanceof I ? context[0] : context, I.merge(this, I.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, !0)), P.test(match[1]) && I.isPlainObject(context))
                            for (match in context) I.isFunction(this[match]) ? this[match](context[match]) : this.attr(match, context[match]);
                        return this
                    }
                    if ((i = document.getElementById(match[2])) && i.parentNode) {
                        if (i.id !== match[2]) return t.find(selector);
                        this.length = 1, this[0] = i
                    }
                    return this.context = document, this.selector = selector, this
                }
                return selector.nodeType ? (this.context = this[0] = selector, this.length = 1, this) : I.isFunction(selector) ? t.ready(selector) : (selector.selector !== undefined && (this.selector = selector.selector, this.context = selector.context), I.makeArray(selector, this))
            },
            selector: "",
            length: 0,
            toArray: function() {
                return g.call(this)
            },
            get: function(t) {
                return null == t ? this.toArray() : t < 0 ? this[this.length + t] : this[t]
            },
            pushStack: function(t) {
                var i = I.merge(this.constructor(), t);
                return i.prevObject = this, i.context = this.context, i
            },
            each: function(t, i) {
                return I.each(this, t, i)
            },
            ready: function(t) {
                return I.ready.promise().done(t), this
            },
            slice: function() {
                return this.pushStack(g.apply(this, arguments))
            },
            first: function() {
                return this.eq(0)
            },
            last: function() {
                return this.eq(-1)
            },
            eq: function(t) {
                var i = this.length,
                    s = +t + (t < 0 ? i : 0);
                return this.pushStack(s >= 0 && s < i ? [this[s]] : [])
            },
            map: function(t) {
                return this.pushStack(I.map(this, function(i, s) {
                    return t.call(i, s, i)
                }))
            },
            end: function() {
                return this.prevObject || this.constructor(null)
            },
            push: _,
            sort: [].sort,
            splice: [].splice
        }, I.fn.init.prototype = I.fn, I.extend = I.fn.extend = function() {
            var src, t, i, name, options, clone, target = arguments[0] || {},
                s = 1,
                length = arguments.length,
                o = !1;
            for ("boolean" == typeof target && (o = target, target = arguments[1] || {}, s = 2), "object" == typeof target || I.isFunction(target) || (target = {}), length === s && (target = this, --s); s < length; s++)
                if (null != (options = arguments[s]))
                    for (name in options) src = target[name], target !== (i = options[name]) && (o && i && (I.isPlainObject(i) || (t = I.isArray(i))) ? (t ? (t = !1, clone = src && I.isArray(src) ? src : []) : clone = src && I.isPlainObject(src) ? src : {}, target[name] = I.extend(o, clone, i)) : i !== undefined && (target[name] = i));
            return target
        }, I.extend({
            expando: "jQuery" + ("1.10.1" + Math.random()).replace(/\D/g, ""),
            noConflict: function(t) {
                return window.$ === I && (window.$ = u), t && window.jQuery === I && (window.jQuery = l), I
            },
            isReady: !1,
            readyWait: 1,
            holdReady: function(t) {
                t ? I.readyWait++ : I.ready(!0)
            },
            ready: function(i) {
                if (!0 === i ? !--I.readyWait : !I.isReady) {
                    if (!document.body) return setTimeout(I.ready);
                    I.isReady = !0, !0 !== i && --I.readyWait > 0 || (t.resolveWith(document, [I]), I.fn.trigger && I(document).trigger("ready").off("ready"))
                }
            },
            isFunction: function(t) {
                return "function" === I.type(t)
            },
            isArray: Array.isArray || function(t) {
                return "array" === I.type(t)
            },
            isWindow: function(t) {
                return null != t && t == t.window
            },
            isNumeric: function(t) {
                return !isNaN(parseFloat(t)) && isFinite(t)
            },
            type: function(t) {
                return null == t ? String(t) : "object" == typeof t || "function" == typeof t ? h[v.call(t)] || "object" : typeof t
            },
            isPlainObject: function(t) {
                var key;
                if (!t || "object" !== I.type(t) || t.nodeType || I.isWindow(t)) return !1;
                try {
                    if (t.constructor && !T.call(t, "constructor") && !T.call(t.constructor.prototype, "isPrototypeOf")) return !1
                } catch (t) {
                    return !1
                }
                if (I.support.ownLast)
                    for (key in t) return T.call(t, key);
                for (key in t);
                return key === undefined || T.call(t, key)
            },
            isEmptyObject: function(t) {
                var name;
                for (name in t) return !1;
                return !0
            },
            error: function(t) {
                throw new Error(t)
            },
            parseHTML: function(data, context, t) {
                if (!data || "string" != typeof data) return null;
                "boolean" == typeof context && (t = context, context = !1), context = context || document;
                var i = P.exec(data),
                    scripts = !t && [];
                return i ? [context.createElement(i[1])] : (i = I.buildFragment([data], context, scripts), scripts && I(scripts).remove(), I.merge([], i.childNodes))
            },
            parseJSON: function(data) {
                return window.JSON && window.JSON.parse ? window.JSON.parse(data) : null === data ? data : "string" == typeof data && (data = I.trim(data)) && N.test(data.replace(B, "@").replace(U, "]").replace(O, "")) ? new Function("return " + data)() : void I.error("Invalid JSON: " + data)
            },
            parseXML: function(data) {
                var t, i;
                if (!data || "string" != typeof data) return null;
                try {
                    window.DOMParser ? (i = new DOMParser, t = i.parseFromString(data, "text/xml")) : ((t = new ActiveXObject("Microsoft.XMLDOM")).async = "false", t.loadXML(data))
                } catch (i) {
                    t = undefined
                }
                return t && t.documentElement && !t.getElementsByTagName("parsererror").length || I.error("Invalid XML: " + data), t
            },
            noop: function() {},
            globalEval: function(data) {
                data && I.trim(data) && (window.execScript || function(data) {
                    window.eval.call(window, data)
                })(data)
            },
            camelCase: function(t) {
                return t.replace(M, "ms-").replace(F, q)
            },
            nodeName: function(t, name) {
                return t.nodeName && t.nodeName.toLowerCase() === name.toLowerCase()
            },
            each: function(t, i, s) {
                var o = 0,
                    length = t.length,
                    isArray = isArraylike(t);
                if (s) {
                    if (isArray)
                        for (; o < length && !1 !== i.apply(t[o], s); o++);
                    else
                        for (o in t)
                            if (!1 === i.apply(t[o], s)) break
                } else if (isArray)
                    for (; o < length && !1 !== i.call(t[o], o, t[o]); o++);
                else
                    for (o in t)
                        if (!1 === i.call(t[o], o, t[o])) break;
                return t
            },
            trim: C && !C.call("\ufeff ") ? function(text) {
                return null == text ? "" : C.call(text)
            } : function(text) {
                return null == text ? "" : (text + "").replace(R, "")
            },
            makeArray: function(t, i) {
                var s = i || [];
                return null != t && (isArraylike(Object(t)) ? I.merge(s, "string" == typeof t ? [t] : t) : _.call(s, t)), s
            },
            inArray: function(t, i, s) {
                var o;
                if (i) {
                    if (S) return S.call(i, t, s);
                    for (o = i.length, s = s ? s < 0 ? Math.max(0, o + s) : s : 0; s < o; s++)
                        if (s in i && i[s] === t) return s
                }
                return -1
            },
            merge: function(t, i) {
                var s = i.length,
                    o = t.length,
                    l = 0;
                if ("number" == typeof s)
                    for (; l < s; l++) t[o++] = i[l];
                else
                    for (; i[l] !== undefined;) t[o++] = i[l++];
                return t.length = o, t
            },
            grep: function(t, i, s) {
                var o = [],
                    l = 0,
                    length = t.length;
                for (s = !!s; l < length; l++) s !== !!i(t[l], l) && o.push(t[l]);
                return o
            },
            map: function(t, i, s) {
                var value, o = 0,
                    length = t.length,
                    l = [];
                if (isArraylike(t))
                    for (; o < length; o++) null != (value = i(t[o], o, s)) && (l[l.length] = value);
                else
                    for (o in t) null != (value = i(t[o], o, s)) && (l[l.length] = value);
                return m.apply([], l)
            },
            guid: 1,
            proxy: function(t, context) {
                var i, s, o;
                return "string" == typeof context && (o = t[context], context = t, t = o), I.isFunction(t) ? (i = g.call(arguments, 2), s = function() {
                    return t.apply(context || this, i.concat(g.call(arguments)))
                }, s.guid = t.guid = t.guid || I.guid++, s) : undefined
            },
            access: function(t, i, key, value, s, o, raw) {
                var l = 0,
                    length = t.length,
                    u = null == key;
                if ("object" === I.type(key)) {
                    s = !0;
                    for (l in key) I.access(t, i, l, key[l], !0, o, raw)
                } else if (value !== undefined && (s = !0, I.isFunction(value) || (raw = !0), u && (raw ? (i.call(t, value), i = null) : (u = i, i = function(t, key, value) {
                        return u.call(I(t), value)
                    })), i))
                    for (; l < length; l++) i(t[l], key, raw ? value : value.call(t[l], l, i(t[l], key)));
                return s ? t : u ? i.call(t) : length ? i(t[0], key) : o
            },
            now: function() {
                return (new Date).getTime()
            },
            swap: function(t, options, i, s) {
                var o, name, l = {};
                for (name in options) l[name] = t.style[name], t.style[name] = options[name];
                o = i.apply(t, s || []);
                for (name in options) t.style[name] = l[name];
                return o
            }
        }), I.ready.promise = function(i) {
            if (!t)
                if (t = I.Deferred(), "complete" === document.readyState) setTimeout(I.ready);
                else if (document.addEventListener) document.addEventListener("DOMContentLoaded", k, !1), window.addEventListener("load", k, !1);
            else {
                document.attachEvent("onreadystatechange", k), window.attachEvent("onload", k);
                var top = !1;
                try {
                    top = null == window.frameElement && document.documentElement
                } catch (t) {}
                top && top.doScroll && function doScrollCheck() {
                    if (!I.isReady) {
                        try {
                            top.doScroll("left")
                        } catch (t) {
                            return setTimeout(doScrollCheck, 50)
                        }
                        detach(), I.ready()
                    }
                }()
            }
            return t.promise(i)
        }, I.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(t, name) {
            h["[object " + name + "]"] = name.toLowerCase()
        }), i = I(document),
        function(window, undefined) {
            function Sizzle(selector, context, t, seed) {
                var match, s, o, nodeType, l, u, h, p, _, v;
                if ((context ? context.ownerDocument || context : T) !== document && m(context), context = context || document, t = t || [], !selector || "string" != typeof selector) return t;
                if (1 !== (nodeType = context.nodeType) && 9 !== nodeType) return [];
                if (g && !seed) {
                    if (match = X.exec(selector))
                        if (o = match[1]) {
                            if (9 === nodeType) {
                                if (!(s = context.getElementById(o)) || !s.parentNode) return t;
                                if (s.id === o) return t.push(s), t
                            } else if (context.ownerDocument && (s = context.ownerDocument.getElementById(o)) && contains(context, s) && s.id === o) return t.push(s), t
                        } else {
                            if (match[2]) return push.apply(t, context.getElementsByTagName(selector)), t;
                            if ((o = match[3]) && i.getElementsByClassName && context.getElementsByClassName) return push.apply(t, context.getElementsByClassName(o)), t
                        }
                    if (i.qsa && (!S || !S.test(selector))) {
                        if (p = h = expando, _ = context, v = 9 === nodeType && selector, 1 === nodeType && "object" !== context.nodeName.toLowerCase()) {
                            for (u = tokenize(selector), (h = context.getAttribute("id")) ? p = h.replace(te, "\\$&") : context.setAttribute("id", p), p = "[id='" + p + "'] ", l = u.length; l--;) u[l] = p + toSelector(u[l]);
                            _ = H.test(selector) && context.parentNode || context, v = u.join(",")
                        }
                        if (v) try {
                            return push.apply(t, _.querySelectorAll(v)), t
                        } catch (t) {} finally {
                            h || context.removeAttribute("id")
                        }
                    }
                }
                return select(selector.replace(V, "$1"), context, t, seed)
            }

            function isNative(t) {
                return J.test(t + "")
            }

            function createCache() {
                function cache(key, value) {
                    return keys.push(key += " ") > o.cacheLength && delete cache[keys.shift()], cache[key] = value
                }
                var keys = [];
                return cache
            }

            function markFunction(t) {
                return t[expando] = !0, t
            }

            function assert(t) {
                var i = document.createElement("div");
                try {
                    return !!t(i)
                } catch (t) {
                    return !1
                } finally {
                    i.parentNode && i.parentNode.removeChild(i), i = null
                }
            }

            function addHandle(t, i, test) {
                for (var s, l = (t = t.split("|")).length, u = test ? null : i; l--;)(s = o.attrHandle[t[l]]) && s !== i || (o.attrHandle[t[l]] = u)
            }

            function boolHandler(t, name) {
                var i = t.getAttributeNode(name);
                return i && i.specified ? i.value : !0 === t[name] ? name.toLowerCase() : null
            }

            function interpolationHandler(t, name) {
                return t.getAttribute(name, "type" === name.toLowerCase() ? 1 : 2)
            }

            function valueHandler(t) {
                if ("input" === t.nodeName.toLowerCase()) return t.defaultValue
            }

            function siblingCheck(a, b) {
                var t = b && a,
                    i = t && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || N) - (~a.sourceIndex || N);
                if (i) return i;
                if (t)
                    for (; t = t.nextSibling;)
                        if (t === b) return -1;
                return a ? 1 : -1
            }

            function createPositionalPseudo(t) {
                return markFunction(function(i) {
                    return i = +i, markFunction(function(seed, matches) {
                        for (var s, o = t([], seed.length, i), l = o.length; l--;) seed[s = o[l]] && (seed[s] = !(matches[s] = seed[s]))
                    })
                })
            }

            function tokenize(selector, t) {
                var i, match, s, type, l, u, h, p = A[selector + " "];
                if (p) return t ? 0 : p.slice(0);
                for (l = selector, u = [], h = o.preFilter; l;) {
                    i && !(match = $.exec(l)) || (match && (l = l.slice(match[0].length) || l), u.push(s = [])), i = !1, (match = G.exec(l)) && (i = match.shift(), s.push({
                        value: i,
                        type: match[0].replace(V, " ")
                    }), l = l.slice(i.length));
                    for (type in o.filter) !(match = W[type].exec(l)) || h[type] && !(match = h[type](match)) || (i = match.shift(), s.push({
                        value: i,
                        type: type,
                        matches: match
                    }), l = l.slice(i.length));
                    if (!i) break
                }
                return t ? l.length : l ? Sizzle.error(selector) : A(selector, u).slice(0)
            }

            function toSelector(t) {
                for (var i = 0, s = t.length, selector = ""; i < s; i++) selector += t[i].value;
                return selector
            }

            function addCombinator(t, i, o) {
                var dir = i.dir,
                    l = o && "parentNode" === dir,
                    u = done++;
                return i.first ? function(i, context, s) {
                    for (; i = i[dir];)
                        if (1 === i.nodeType || l) return t(i, context, s)
                } : function(i, context, o) {
                    var data, h, p, m = C + " " + u;
                    if (o) {
                        for (; i = i[dir];)
                            if ((1 === i.nodeType || l) && t(i, context, o)) return !0
                    } else
                        for (; i = i[dir];)
                            if (1 === i.nodeType || l)
                                if (p = i[expando] || (i[expando] = {}), (h = p[dir]) && h[0] === m) {
                                    if (!0 === (data = h[1]) || data === s) return !0 === data
                                } else if (h = p[dir] = [m], h[1] = t(i, context, o) || s, !0 === h[1]) return !0
                }
            }

            function elementMatcher(t) {
                return t.length > 1 ? function(i, context, s) {
                    for (var o = t.length; o--;)
                        if (!t[o](i, context, s)) return !1;
                    return !0
                } : t[0]
            }

            function condense(t, map, filter, context, i) {
                for (var s, o = [], l = 0, u = t.length, h = null != map; l < u; l++)(s = t[l]) && (filter && !filter(s, context, i) || (o.push(s), h && map.push(l)));
                return o
            }

            function setMatcher(t, selector, i, s, o, l) {
                return s && !s[expando] && (s = setMatcher(s)), o && !o[expando] && (o = setMatcher(o, l)), markFunction(function(seed, l, context, u) {
                    var h, p, m, _ = [],
                        g = [],
                        S = l.length,
                        v = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                        T = !t || !seed && selector ? v : condense(v, _, t, context, u),
                        C = i ? o || (seed ? t : S || s) ? [] : l : T;
                    if (i && i(T, C, context, u), s)
                        for (h = condense(C, g), s(h, [], context, u), p = h.length; p--;)(m = h[p]) && (C[g[p]] = !(T[g[p]] = m));
                    if (seed) {
                        if (o || t) {
                            if (o) {
                                for (h = [], p = C.length; p--;)(m = C[p]) && h.push(T[p] = m);
                                o(null, C = [], h, u)
                            }
                            for (p = C.length; p--;)(m = C[p]) && (h = o ? indexOf.call(seed, m) : _[p]) > -1 && (seed[h] = !(l[h] = m))
                        }
                    } else C = condense(C === l ? C.splice(S, C.length) : C), o ? o(null, l, C, u) : push.apply(l, C)
                })
            }

            function matcherFromTokens(t) {
                for (var i, s, l, u = t.length, p = o.relative[t[0].type], m = p || o.relative[" "], _ = p ? 1 : 0, g = addCombinator(function(t) {
                        return t === i
                    }, m, !0), S = addCombinator(function(t) {
                        return indexOf.call(i, t) > -1
                    }, m, !0), v = [function(t, context, s) {
                        return !p && (s || context !== h) || ((i = context).nodeType ? g(t, context, s) : S(t, context, s))
                    }]; _ < u; _++)
                    if (s = o.relative[t[_].type]) v = [addCombinator(elementMatcher(v), s)];
                    else {
                        if ((s = o.filter[t[_].type].apply(null, t[_].matches))[expando]) {
                            for (l = ++_; l < u && !o.relative[t[l].type]; l++);
                            return setMatcher(_ > 1 && elementMatcher(v), _ > 1 && toSelector(t.slice(0, _ - 1).concat({
                                value: " " === t[_ - 2].type ? "*" : ""
                            })).replace(V, "$1"), s, _ < l && matcherFromTokens(t.slice(_, l)), l < u && matcherFromTokens(t = t.slice(l)), l < u && toSelector(t))
                        }
                        v.push(s)
                    }
                return elementMatcher(v)
            }

            function matcherFromGroupMatchers(t, i) {
                var l = 0,
                    u = i.length > 0,
                    p = t.length > 0,
                    m = function(seed, context, m, _, g) {
                        var S, v, T, I = [],
                            L = 0,
                            A = "0",
                            R = seed && [],
                            D = null != g,
                            P = h,
                            N = seed || p && o.find.TAG("*", g && context.parentNode || context),
                            O = C += null == P ? 1 : Math.random() || .1;
                        for (D && (h = context !== document && context, s = l); null != (S = N[A]); A++) {
                            if (p && S) {
                                for (v = 0; T = t[v++];)
                                    if (T(S, context, m)) {
                                        _.push(S);
                                        break
                                    }
                                D && (C = O, s = ++l)
                            }
                            u && ((S = !T && S) && L--, seed && R.push(S))
                        }
                        if (L += A, u && A !== L) {
                            for (v = 0; T = i[v++];) T(R, I, context, m);
                            if (seed) {
                                if (L > 0)
                                    for (; A--;) R[A] || I[A] || (I[A] = pop.call(_));
                                I = condense(I)
                            }
                            push.apply(_, I), D && !seed && I.length > 0 && L + i.length > 1 && Sizzle.uniqueSort(_)
                        }
                        return D && (C = O, h = P), R
                    };
                return u ? markFunction(m) : m
            }

            function multipleContexts(selector, t, i) {
                for (var s = 0, o = t.length; s < o; s++) Sizzle(selector, t[s], i);
                return i
            }

            function select(selector, context, t, seed) {
                var s, l, u, type, find, match = tokenize(selector);
                if (!seed && 1 === match.length) {
                    if ((l = match[0] = match[0].slice(0)).length > 2 && "ID" === (u = l[0]).type && i.getById && 9 === context.nodeType && g && o.relative[l[1].type]) {
                        if (!(context = (o.find.ID(u.matches[0].replace(ie, se), context) || [])[0])) return t;
                        selector = selector.slice(l.shift().value.length)
                    }
                    for (s = W.needsContext.test(selector) ? 0 : l.length; s-- && (u = l[s], !o.relative[type = u.type]);)
                        if ((find = o.find[type]) && (seed = find(u.matches[0].replace(ie, se), H.test(l[0].type) && context.parentNode || context))) {
                            if (l.splice(s, 1), !(selector = seed.length && toSelector(l))) return push.apply(t, seed), t;
                            break
                        }
                }
                return compile(selector, match)(seed, context, !g, t, H.test(selector)), t
            }

            function setFilters() {}
            var t, i, s, o, l, u, compile, h, p, m, document, _, g, S, v, matches, contains, expando = "sizzle" + -new Date,
                T = window.document,
                C = 0,
                done = 0,
                L = createCache(),
                A = createCache(),
                R = createCache(),
                D = !1,
                P = function() {
                    return 0
                },
                N = 1 << 31,
                O = {}.hasOwnProperty,
                B = [],
                pop = B.pop,
                U = B.push,
                push = B.push,
                slice = B.slice,
                indexOf = B.indexOf || function(t) {
                    for (var i = 0, s = this.length; i < s; i++)
                        if (this[i] === t) return i;
                    return -1
                },
                M = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                F = "[\\x20\\t\\r\\n\\f]",
                q = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
                identifier = q.replace("w", "w#"),
                attributes = "\\[" + F + "*(" + q + ")" + F + "*(?:([*^$|!~]?=)" + F + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + F + "*\\]",
                k = ":(" + q + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)",
                V = new RegExp("^" + F + "+|((?:^|[^\\\\])(?:\\\\.)*)" + F + "+$", "g"),
                $ = new RegExp("^" + F + "*," + F + "*"),
                G = new RegExp("^" + F + "*([>+~]|" + F + ")" + F + "*"),
                H = new RegExp(F + "*[+~]"),
                j = new RegExp("=" + F + "*([^\\]'\"]*)" + F + "*\\]", "g"),
                Y = new RegExp(k),
                K = new RegExp("^" + identifier + "$"),
                W = {
                    ID: new RegExp("^#(" + q + ")"),
                    CLASS: new RegExp("^\\.(" + q + ")"),
                    TAG: new RegExp("^(" + q.replace("w", "w*") + ")"),
                    ATTR: new RegExp("^" + attributes),
                    PSEUDO: new RegExp("^" + k),
                    CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + F + "*(even|odd|(([+-]|)(\\d*)n|)" + F + "*(?:([+-]|)" + F + "*(\\d+)|))" + F + "*\\)|)", "i"),
                    bool: new RegExp("^(?:" + M + ")$", "i"),
                    needsContext: new RegExp("^" + F + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + F + "*((?:-\\d)?\\d*)" + F + "*\\)|)(?=[^-]|$)", "i")
                },
                J = /^[^{]+\{\s*\[native \w/,
                X = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                Z = /^(?:input|select|textarea|button)$/i,
                ee = /^h\d$/i,
                te = /'|\\/g,
                ie = new RegExp("\\\\([\\da-f]{1,6}" + F + "?|(" + F + ")|.)", "ig"),
                se = function(t, i, s) {
                    var high = "0x" + i - 65536;
                    return high !== high || s ? i : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320)
                };
            try {
                push.apply(B = slice.call(T.childNodes), T.childNodes);
                B[T.childNodes.length].nodeType
            } catch (t) {
                push = {
                    apply: B.length ? function(target, t) {
                        U.apply(target, slice.call(t))
                    } : function(target, t) {
                        for (var i = target.length, s = 0; target[i++] = t[s++];);
                        target.length = i - 1
                    }
                }
            }
            u = Sizzle.isXML = function(t) {
                var documentElement = t && (t.ownerDocument || t).documentElement;
                return !!documentElement && "HTML" !== documentElement.nodeName
            }, i = Sizzle.support = {}, m = Sizzle.setDocument = function(t) {
                var s = t ? t.ownerDocument || t : T,
                    parent = s.parentWindow;
                return s !== document && 9 === s.nodeType && s.documentElement ? (document = s, _ = s.documentElement, g = !u(s), parent && parent.frameElement && parent.attachEvent("onbeforeunload", function() {
                    m()
                }), i.attributes = assert(function(t) {
                    return t.innerHTML = "<a href='#'></a>", addHandle("type|href|height|width", interpolationHandler, "#" === t.firstChild.getAttribute("href")), addHandle(M, boolHandler, null == t.getAttribute("disabled")), t.className = "i", !t.getAttribute("className")
                }), i.input = assert(function(t) {
                    return t.innerHTML = "<input>", t.firstChild.setAttribute("value", ""), "" === t.firstChild.getAttribute("value")
                }), addHandle("value", valueHandler, i.attributes && i.input), i.getElementsByTagName = assert(function(t) {
                    return t.appendChild(s.createComment("")), !t.getElementsByTagName("*").length
                }), i.getElementsByClassName = assert(function(t) {
                    return t.innerHTML = "<div class='a'></div><div class='a i'></div>", t.firstChild.className = "i", 2 === t.getElementsByClassName("i").length
                }), i.getById = assert(function(t) {
                    return _.appendChild(t).id = expando, !s.getElementsByName || !s.getElementsByName(expando).length
                }), i.getById ? (o.find.ID = function(id, context) {
                    if (void 0 !== context.getElementById && g) {
                        var t = context.getElementById(id);
                        return t && t.parentNode ? [t] : []
                    }
                }, o.filter.ID = function(id) {
                    var t = id.replace(ie, se);
                    return function(i) {
                        return i.getAttribute("id") === t
                    }
                }) : (delete o.find.ID, o.filter.ID = function(id) {
                    var t = id.replace(ie, se);
                    return function(i) {
                        var s = void 0 !== i.getAttributeNode && i.getAttributeNode("id");
                        return s && s.value === t
                    }
                }), o.find.TAG = i.getElementsByTagName ? function(tag, context) {
                    if (void 0 !== context.getElementsByTagName) return context.getElementsByTagName(tag)
                } : function(tag, context) {
                    var t, i = [],
                        s = 0,
                        o = context.getElementsByTagName(tag);
                    if ("*" === tag) {
                        for (; t = o[s++];) 1 === t.nodeType && i.push(t);
                        return i
                    }
                    return o
                }, o.find.CLASS = i.getElementsByClassName && function(className, context) {
                    if (void 0 !== context.getElementsByClassName && g) return context.getElementsByClassName(className)
                }, v = [], S = [], (i.qsa = isNative(s.querySelectorAll)) && (assert(function(t) {
                    t.innerHTML = "<select><option selected=''></option></select>", t.querySelectorAll("[selected]").length || S.push("\\[" + F + "*(?:value|" + M + ")"), t.querySelectorAll(":checked").length || S.push(":checked")
                }), assert(function(t) {
                    var input = s.createElement("input");
                    input.setAttribute("type", "hidden"), t.appendChild(input).setAttribute("t", ""), t.querySelectorAll("[t^='']").length && S.push("[*^$]=" + F + "*(?:''|\"\")"), t.querySelectorAll(":enabled").length || S.push(":enabled", ":disabled"), t.querySelectorAll("*,:x"), S.push(",.*:")
                })), (i.matchesSelector = isNative(matches = _.webkitMatchesSelector || _.mozMatchesSelector || _.oMatchesSelector || _.msMatchesSelector)) && assert(function(t) {
                    i.disconnectedMatch = matches.call(t, "div"), matches.call(t, "[s!='']:x"), v.push("!=", k)
                }), S = S.length && new RegExp(S.join("|")), v = v.length && new RegExp(v.join("|")), contains = isNative(_.contains) || _.compareDocumentPosition ? function(a, b) {
                    var t = 9 === a.nodeType ? a.documentElement : a,
                        i = b && b.parentNode;
                    return a === i || !(!i || 1 !== i.nodeType || !(t.contains ? t.contains(i) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(i)))
                } : function(a, b) {
                    if (b)
                        for (; b = b.parentNode;)
                            if (b === a) return !0;
                    return !1
                }, i.sortDetached = assert(function(t) {
                    return 1 & t.compareDocumentPosition(s.createElement("div"))
                }), P = _.compareDocumentPosition ? function(a, b) {
                    if (a === b) return D = !0, 0;
                    var t = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
                    return t ? 1 & t || !i.sortDetached && b.compareDocumentPosition(a) === t ? a === s || contains(T, a) ? -1 : b === s || contains(T, b) ? 1 : p ? indexOf.call(p, a) - indexOf.call(p, b) : 0 : 4 & t ? -1 : 1 : a.compareDocumentPosition ? -1 : 1
                } : function(a, b) {
                    var t, i = 0,
                        o = a.parentNode,
                        l = b.parentNode,
                        u = [a],
                        h = [b];
                    if (a === b) return D = !0, 0;
                    if (!o || !l) return a === s ? -1 : b === s ? 1 : o ? -1 : l ? 1 : p ? indexOf.call(p, a) - indexOf.call(p, b) : 0;
                    if (o === l) return siblingCheck(a, b);
                    for (t = a; t = t.parentNode;) u.unshift(t);
                    for (t = b; t = t.parentNode;) h.unshift(t);
                    for (; u[i] === h[i];) i++;
                    return i ? siblingCheck(u[i], h[i]) : u[i] === T ? -1 : h[i] === T ? 1 : 0
                }, s) : document
            }, Sizzle.matches = function(t, elements) {
                return Sizzle(t, null, null, elements)
            }, Sizzle.matchesSelector = function(t, s) {
                if ((t.ownerDocument || t) !== document && m(t), s = s.replace(j, "='$1']"), i.matchesSelector && g && (!v || !v.test(s)) && (!S || !S.test(s))) try {
                    var o = matches.call(t, s);
                    if (o || i.disconnectedMatch || t.document && 11 !== t.document.nodeType) return o
                } catch (t) {}
                return Sizzle(s, document, null, [t]).length > 0
            }, Sizzle.contains = function(context, t) {
                return (context.ownerDocument || context) !== document && m(context), contains(context, t)
            }, Sizzle.attr = function(t, name) {
                (t.ownerDocument || t) !== document && m(t);
                var s = o.attrHandle[name.toLowerCase()],
                    l = s && O.call(o.attrHandle, name.toLowerCase()) ? s(t, name, !g) : void 0;
                return void 0 === l ? i.attributes || !g ? t.getAttribute(name) : (l = t.getAttributeNode(name)) && l.specified ? l.value : null : l
            }, Sizzle.error = function(t) {
                throw new Error("Syntax error, unrecognized expression: " + t)
            }, Sizzle.uniqueSort = function(t) {
                var s, o = [],
                    l = 0,
                    u = 0;
                if (D = !i.detectDuplicates, p = !i.sortStable && t.slice(0), t.sort(P), D) {
                    for (; s = t[u++];) s === t[u] && (l = o.push(u));
                    for (; l--;) t.splice(o[l], 1)
                }
                return t
            }, l = Sizzle.getText = function(t) {
                var i, s = "",
                    o = 0,
                    nodeType = t.nodeType;
                if (nodeType) {
                    if (1 === nodeType || 9 === nodeType || 11 === nodeType) {
                        if ("string" == typeof t.textContent) return t.textContent;
                        for (t = t.firstChild; t; t = t.nextSibling) s += l(t)
                    } else if (3 === nodeType || 4 === nodeType) return t.nodeValue
                } else
                    for (; i = t[o]; o++) s += l(i);
                return s
            }, o = Sizzle.selectors = {
                cacheLength: 50,
                createPseudo: markFunction,
                match: W,
                attrHandle: {},
                find: {},
                relative: {
                    ">": {
                        dir: "parentNode",
                        first: !0
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: !0
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },
                preFilter: {
                    ATTR: function(match) {
                        return match[1] = match[1].replace(ie, se), match[3] = (match[4] || match[5] || "").replace(ie, se), "~=" === match[2] && (match[3] = " " + match[3] + " "), match.slice(0, 4)
                    },
                    CHILD: function(match) {
                        return match[1] = match[1].toLowerCase(), "nth" === match[1].slice(0, 3) ? (match[3] || Sizzle.error(match[0]), match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3])), match[5] = +(match[7] + match[8] || "odd" === match[3])) : match[3] && Sizzle.error(match[0]), match
                    },
                    PSEUDO: function(match) {
                        var t, i = !match[5] && match[2];
                        return W.CHILD.test(match[0]) ? null : (match[3] && void 0 !== match[4] ? match[2] = match[4] : i && Y.test(i) && (t = tokenize(i, !0)) && (t = i.indexOf(")", i.length - t) - i.length) && (match[0] = match[0].slice(0, t), match[2] = i.slice(0, t)), match.slice(0, 3))
                    }
                },
                filter: {
                    TAG: function(t) {
                        var nodeName = t.replace(ie, se).toLowerCase();
                        return "*" === t ? function() {
                            return !0
                        } : function(t) {
                            return t.nodeName && t.nodeName.toLowerCase() === nodeName
                        }
                    },
                    CLASS: function(className) {
                        var pattern = L[className + " "];
                        return pattern || (pattern = new RegExp("(^|" + F + ")" + className + "(" + F + "|$)")) && L(className, function(t) {
                            return pattern.test("string" == typeof t.className && t.className || void 0 !== t.getAttribute && t.getAttribute("class") || "")
                        })
                    },
                    ATTR: function(name, operator, t) {
                        return function(i) {
                            var result = Sizzle.attr(i, name);
                            return null == result ? "!=" === operator : !operator || (result += "", "=" === operator ? result === t : "!=" === operator ? result !== t : "^=" === operator ? t && 0 === result.indexOf(t) : "*=" === operator ? t && result.indexOf(t) > -1 : "$=" === operator ? t && result.slice(-t.length) === t : "~=" === operator ? (" " + result + " ").indexOf(t) > -1 : "|=" === operator && (result === t || result.slice(0, t.length + 1) === t + "-"))
                        }
                    },
                    CHILD: function(type, t, i, s, o) {
                        var l = "nth" !== type.slice(0, 3),
                            forward = "last" !== type.slice(-4),
                            u = "of-type" === t;
                        return 1 === s && 0 === o ? function(t) {
                            return !!t.parentNode
                        } : function(t, context, i) {
                            var h, p, m, _, g, start, dir = l !== forward ? "nextSibling" : "previousSibling",
                                parent = t.parentNode,
                                name = u && t.nodeName.toLowerCase(),
                                S = !i && !u;
                            if (parent) {
                                if (l) {
                                    for (; dir;) {
                                        for (m = t; m = m[dir];)
                                            if (u ? m.nodeName.toLowerCase() === name : 1 === m.nodeType) return !1;
                                        start = dir = "only" === type && !start && "nextSibling"
                                    }
                                    return !0
                                }
                                if (start = [forward ? parent.firstChild : parent.lastChild], forward && S) {
                                    for (g = (h = (p = parent[expando] || (parent[expando] = {}))[type] || [])[0] === C && h[1], _ = h[0] === C && h[2], m = g && parent.childNodes[g]; m = ++g && m && m[dir] || (_ = g = 0) || start.pop();)
                                        if (1 === m.nodeType && ++_ && m === t) {
                                            p[type] = [C, g, _];
                                            break
                                        }
                                } else if (S && (h = (t[expando] || (t[expando] = {}))[type]) && h[0] === C) _ = h[1];
                                else
                                    for (;
                                        (m = ++g && m && m[dir] || (_ = g = 0) || start.pop()) && ((u ? m.nodeName.toLowerCase() !== name : 1 !== m.nodeType) || !++_ || (S && ((m[expando] || (m[expando] = {}))[type] = [C, _]), m !== t)););
                                return (_ -= o) === s || _ % s == 0 && _ / s >= 0
                            }
                        }
                    },
                    PSEUDO: function(t, i) {
                        var s, l = o.pseudos[t] || o.setFilters[t.toLowerCase()] || Sizzle.error("unsupported pseudo: " + t);
                        return l[expando] ? l(i) : l.length > 1 ? (s = [t, t, "", i], o.setFilters.hasOwnProperty(t.toLowerCase()) ? markFunction(function(seed, matches) {
                            for (var t, s = l(seed, i), o = s.length; o--;) seed[t = indexOf.call(seed, s[o])] = !(matches[t] = s[o])
                        }) : function(t) {
                            return l(t, 0, s)
                        }) : l
                    }
                },
                pseudos: {
                    not: markFunction(function(selector) {
                        var input = [],
                            t = [],
                            i = compile(selector.replace(V, "$1"));
                        return i[expando] ? markFunction(function(seed, matches, context, t) {
                            for (var s, o = i(seed, null, t, []), l = seed.length; l--;)(s = o[l]) && (seed[l] = !(matches[l] = s))
                        }) : function(s, context, o) {
                            return input[0] = s, i(input, null, o, t), !t.pop()
                        }
                    }),
                    has: markFunction(function(selector) {
                        return function(t) {
                            return Sizzle(selector, t).length > 0
                        }
                    }),
                    contains: markFunction(function(text) {
                        return function(t) {
                            return (t.textContent || t.innerText || l(t)).indexOf(text) > -1
                        }
                    }),
                    lang: markFunction(function(lang) {
                        return K.test(lang || "") || Sizzle.error("unsupported lang: " + lang), lang = lang.replace(ie, se).toLowerCase(),
                            function(t) {
                                var i;
                                do {
                                    if (i = g ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return (i = i.toLowerCase()) === lang || 0 === i.indexOf(lang + "-")
                                } while ((t = t.parentNode) && 1 === t.nodeType);
                                return !1
                            }
                    }),
                    target: function(t) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice(1) === t.id
                    },
                    root: function(t) {
                        return t === _
                    },
                    focus: function(t) {
                        return t === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(t.type || t.href || ~t.tabIndex)
                    },
                    enabled: function(t) {
                        return !1 === t.disabled
                    },
                    disabled: function(t) {
                        return !0 === t.disabled
                    },
                    checked: function(t) {
                        var nodeName = t.nodeName.toLowerCase();
                        return "input" === nodeName && !!t.checked || "option" === nodeName && !!t.selected
                    },
                    selected: function(t) {
                        if (t.parentNode) t.parentNode.selectedIndex;
                        return !0 === t.selected
                    },
                    empty: function(t) {
                        for (t = t.firstChild; t; t = t.nextSibling)
                            if (t.nodeName > "@" || 3 === t.nodeType || 4 === t.nodeType) return !1;
                        return !0
                    },
                    parent: function(t) {
                        return !o.pseudos.empty(t)
                    },
                    header: function(t) {
                        return ee.test(t.nodeName)
                    },
                    input: function(t) {
                        return Z.test(t.nodeName)
                    },
                    button: function(t) {
                        var name = t.nodeName.toLowerCase();
                        return "input" === name && "button" === t.type || "button" === name
                    },
                    text: function(t) {
                        var i;
                        return "input" === t.nodeName.toLowerCase() && "text" === t.type && (null == (i = t.getAttribute("type")) || i.toLowerCase() === t.type)
                    },
                    first: createPositionalPseudo(function() {
                        return [0]
                    }),
                    last: createPositionalPseudo(function(t, length) {
                        return [length - 1]
                    }),
                    eq: createPositionalPseudo(function(t, length, i) {
                        return [i < 0 ? i + length : i]
                    }),
                    even: createPositionalPseudo(function(t, length) {
                        for (var i = 0; i < length; i += 2) t.push(i);
                        return t
                    }),
                    odd: createPositionalPseudo(function(t, length) {
                        for (var i = 1; i < length; i += 2) t.push(i);
                        return t
                    }),
                    lt: createPositionalPseudo(function(t, length, i) {
                        for (var s = i < 0 ? i + length : i; --s >= 0;) t.push(s);
                        return t
                    }),
                    gt: createPositionalPseudo(function(t, length, i) {
                        for (var s = i < 0 ? i + length : i; ++s < length;) t.push(s);
                        return t
                    })
                }
            };
            for (t in {
                    radio: !0,
                    checkbox: !0,
                    file: !0,
                    password: !0,
                    image: !0
                }) o.pseudos[t] = function createInputPseudo(type) {
                return function(t) {
                    return "input" === t.nodeName.toLowerCase() && t.type === type
                }
            }(t);
            for (t in {
                    submit: !0,
                    reset: !0
                }) o.pseudos[t] = function createButtonPseudo(type) {
                return function(t) {
                    var name = t.nodeName.toLowerCase();
                    return ("input" === name || "button" === name) && t.type === type
                }
            }(t);
            compile = Sizzle.compile = function(selector, group) {
                var t, i = [],
                    s = [],
                    o = R[selector + " "];
                if (!o) {
                    for (group || (group = tokenize(selector)), t = group.length; t--;)(o = matcherFromTokens(group[t]))[expando] ? i.push(o) : s.push(o);
                    o = R(selector, matcherFromGroupMatchers(s, i))
                }
                return o
            }, o.pseudos.nth = o.pseudos.eq, setFilters.prototype = o.filters = o.pseudos, o.setFilters = new setFilters, i.sortStable = expando.split("").sort(P).join("") === expando, m(), [0, 0].sort(P), i.detectDuplicates = D, I.find = Sizzle, I.expr = Sizzle.selectors, I.expr[":"] = I.expr.pseudos, I.unique = Sizzle.uniqueSort, I.text = Sizzle.getText, I.isXMLDoc = Sizzle.isXML, I.contains = Sizzle.contains
        }(window);
    var V = {};
    I.Callbacks = function(options) {
        var t, memory, i, s, o, l, list = [],
            stack = !(options = "string" == typeof options ? V[options] || createOptions(options) : I.extend({}, options)).once && [],
            u = function(data) {
                for (memory = options.memory && data, i = !0, o = l || 0, l = 0, s = list.length, t = !0; list && o < s; o++)
                    if (!1 === list[o].apply(data[0], data[1]) && options.stopOnFalse) {
                        memory = !1;
                        break
                    }
                t = !1, list && (stack ? stack.length && u(stack.shift()) : memory ? list = [] : self.disable())
            },
            self = {
                add: function() {
                    if (list) {
                        var start = list.length;
                        ! function add(t) {
                            I.each(t, function(t, i) {
                                var type = I.type(i);
                                "function" === type ? options.unique && self.has(i) || list.push(i) : i && i.length && "string" !== type && add(i)
                            })
                        }(arguments), t ? s = list.length : memory && (l = start, u(memory))
                    }
                    return this
                },
                remove: function() {
                    return list && I.each(arguments, function(i, l) {
                        for (var index;
                            (index = I.inArray(l, list, index)) > -1;) list.splice(index, 1), t && (index <= s && s--, index <= o && o--)
                    }), this
                },
                has: function(t) {
                    return t ? I.inArray(t, list) > -1 : !(!list || !list.length)
                },
                empty: function() {
                    return list = [], s = 0, this
                },
                disable: function() {
                    return list = stack = memory = undefined, this
                },
                disabled: function() {
                    return !list
                },
                lock: function() {
                    return stack = undefined, memory || self.disable(), this
                },
                locked: function() {
                    return !stack
                },
                fireWith: function(context, s) {
                    return s = s || [], s = [context, s.slice ? s.slice() : s], !list || i && !stack || (t ? stack.push(s) : u(s)), this
                },
                fire: function() {
                    return self.fireWith(this, arguments), this
                },
                fired: function() {
                    return !!i
                }
            };
        return self
    }, I.extend({
        Deferred: function(t) {
            var i = [
                    ["resolve", "done", I.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", I.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", I.Callbacks("memory")]
                ],
                state = "pending",
                s = {
                    state: function() {
                        return state
                    },
                    always: function() {
                        return o.done(arguments).fail(arguments), this
                    },
                    then: function() {
                        var t = arguments;
                        return I.Deferred(function(l) {
                            I.each(i, function(i, u) {
                                var action = u[0],
                                    h = I.isFunction(t[i]) && t[i];
                                o[u[1]](function() {
                                    var t = h && h.apply(this, arguments);
                                    t && I.isFunction(t.promise) ? t.promise().done(l.resolve).fail(l.reject).progress(l.notify) : l[action + "With"](this === s ? l.promise() : this, h ? [t] : arguments)
                                })
                            }), t = null
                        }).promise()
                    },
                    promise: function(t) {
                        return null != t ? I.extend(t, s) : s
                    }
                },
                o = {};
            return s.pipe = s.then, I.each(i, function(t, l) {
                var list = l[2],
                    u = l[3];
                s[l[1]] = list.add, u && list.add(function() {
                    state = u
                }, i[1 ^ t][2].disable, i[2][2].lock), o[l[0]] = function() {
                    return o[l[0] + "With"](this === o ? s : this, arguments), this
                }, o[l[0] + "With"] = list.fireWith
            }), s.promise(o), t && t.call(o, o), o
        },
        when: function(t) {
            var i, s, o, l = 0,
                u = g.call(arguments),
                length = u.length,
                h = 1 !== length || t && I.isFunction(t.promise) ? length : 0,
                p = 1 === h ? t : I.Deferred(),
                m = function(t, s, values) {
                    return function(value) {
                        s[t] = this, values[t] = arguments.length > 1 ? g.call(arguments) : value, values === i ? p.notifyWith(s, values) : --h || p.resolveWith(s, values)
                    }
                };
            if (length > 1)
                for (i = new Array(length), s = new Array(length), o = new Array(length); l < length; l++) u[l] && I.isFunction(u[l].promise) ? u[l].promise().done(m(l, o, u)).fail(p.reject).progress(m(l, s, i)) : --h;
            return h || p.resolveWith(o, u), p.promise()
        }
    }), I.support = function(t) {
        var all, a, input, select, i, o, l, isSupported, u, h = document.createElement("div");
        if (h.setAttribute("className", "t"), h.innerHTML = " <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", all = h.getElementsByTagName("*") || [], !(a = h.getElementsByTagName("a")[0]) || !a.style || !all.length) return t;
        o = (select = document.createElement("select")).appendChild(document.createElement("option")), input = h.getElementsByTagName("input")[0], a.style.cssText = "top:1px;float:left;opacity:.5", t.getSetAttribute = "t" !== h.className, t.leadingWhitespace = 3 === h.firstChild.nodeType, t.tbody = !h.getElementsByTagName("tbody").length, t.htmlSerialize = !!h.getElementsByTagName("link").length, t.style = /top/.test(a.getAttribute("style")), t.hrefNormalized = "/a" === a.getAttribute("href"), t.opacity = /^0.5/.test(a.style.opacity), t.cssFloat = !!a.style.cssFloat, t.checkOn = !!input.value, t.optSelected = o.selected, t.enctype = !!document.createElement("form").enctype, t.html5Clone = "<:nav></:nav>" !== document.createElement("nav").cloneNode(!0).outerHTML, t.inlineBlockNeedsLayout = !1, t.shrinkWrapBlocks = !1, t.pixelPosition = !1, t.deleteExpando = !0, t.noCloneEvent = !0, t.reliableMarginRight = !0, t.boxSizingReliable = !0, input.checked = !0, t.noCloneChecked = input.cloneNode(!0).checked, select.disabled = !0, t.optDisabled = !o.disabled;
        try {
            delete h.test
        } catch (i) {
            t.deleteExpando = !1
        }(input = document.createElement("input")).setAttribute("value", ""), t.input = "" === input.getAttribute("value"), input.value = "t", input.setAttribute("type", "radio"), t.radioValue = "t" === input.value, input.setAttribute("checked", "t"), input.setAttribute("name", "t"), (i = document.createDocumentFragment()).appendChild(input), t.appendChecked = input.checked, t.checkClone = i.cloneNode(!0).cloneNode(!0).lastChild.checked, h.attachEvent && (h.attachEvent("onclick", function() {
            t.noCloneEvent = !1
        }), h.cloneNode(!0).click());
        for (u in {
                submit: !0,
                change: !0,
                focusin: !0
            }) h.setAttribute(l = "on" + u, "t"), t[u + "Bubbles"] = l in window || !1 === h.attributes[l].expando;
        h.style.backgroundClip = "content-box", h.cloneNode(!0).style.backgroundClip = "", t.clearCloneStyle = "content-box" === h.style.backgroundClip;
        for (u in I(t)) break;
        return t.ownLast = "0" !== u, I(function() {
            var i, o, l, u = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
                body = document.getElementsByTagName("body")[0];
            body && ((i = document.createElement("div")).style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px", body.appendChild(i).appendChild(h), h.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", (l = h.getElementsByTagName("td"))[0].style.cssText = "padding:0;margin:0;border:0;display:none", isSupported = 0 === l[0].offsetHeight, l[0].style.display = "", l[1].style.display = "none", t.reliableHiddenOffsets = isSupported && 0 === l[0].offsetHeight, h.innerHTML = "", h.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;", I.swap(body, null != body.style.zoom ? {
                zoom: 1
            } : {}, function() {
                t.boxSizing = 4 === h.offsetWidth
            }), window.getComputedStyle && (t.pixelPosition = "1%" !== (window.getComputedStyle(h, null) || {}).top, t.boxSizingReliable = "4px" === (window.getComputedStyle(h, null) || {
                width: "4px"
            }).width, (o = h.appendChild(document.createElement("div"))).style.cssText = h.style.cssText = u, o.style.marginRight = o.style.width = "0", h.style.width = "1px", t.reliableMarginRight = !parseFloat((window.getComputedStyle(o, null) || {}).marginRight)), typeof h.style.zoom !== s && (h.innerHTML = "", h.style.cssText = u + "width:1px;padding:1px;display:inline;zoom:1", t.inlineBlockNeedsLayout = 3 === h.offsetWidth, h.style.display = "block", h.innerHTML = "<div></div>", h.firstChild.style.width = "5px", t.shrinkWrapBlocks = 3 !== h.offsetWidth, t.inlineBlockNeedsLayout && (body.style.zoom = 1)), body.removeChild(i), i = h = l = o = null)
        }), all = select = i = o = a = input = null, t
    }({});
    var $ = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
        G = /([A-Z])/g;
    I.extend({
        cache: {},
        noData: {
            applet: !0,
            embed: !0,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(t) {
            return !!(t = t.nodeType ? I.cache[t[I.expando]] : t[I.expando]) && !isEmptyDataObject(t)
        },
        data: function(t, name, data) {
            return internalData(t, name, data)
        },
        removeData: function(t, name) {
            return internalRemoveData(t, name)
        },
        _data: function(t, name, data) {
            return internalData(t, name, data, !0)
        },
        _removeData: function(t, name) {
            return internalRemoveData(t, name, !0)
        },
        acceptData: function(t) {
            if (t.nodeType && 1 !== t.nodeType && 9 !== t.nodeType) return !1;
            var i = t.nodeName && I.noData[t.nodeName.toLowerCase()];
            return !i || !0 !== i && t.getAttribute("classid") === i
        }
    }), I.fn.extend({
        data: function(key, value) {
            var t, name, data = null,
                i = 0,
                s = this[0];
            if (key === undefined) {
                if (this.length && (data = I.data(s), 1 === s.nodeType && !I._data(s, "parsedAttrs"))) {
                    for (t = s.attributes; i < t.length; i++) 0 === (name = t[i].name).indexOf("data-") && dataAttr(s, name = I.camelCase(name.slice(5)), data[name]);
                    I._data(s, "parsedAttrs", !0)
                }
                return data
            }
            return "object" == typeof key ? this.each(function() {
                I.data(this, key)
            }) : arguments.length > 1 ? this.each(function() {
                I.data(this, key, value)
            }) : s ? dataAttr(s, key, I.data(s, key)) : null
        },
        removeData: function(key) {
            return this.each(function() {
                I.removeData(this, key)
            })
        }
    }), I.extend({
        queue: function(t, type, data) {
            var i;
            if (t) return type = (type || "fx") + "queue", i = I._data(t, type), data && (!i || I.isArray(data) ? i = I._data(t, type, I.makeArray(data)) : i.push(data)), i || []
        },
        dequeue: function(t, type) {
            type = type || "fx";
            var i = I.queue(t, type),
                s = i.length,
                o = i.shift(),
                l = I._queueHooks(t, type);
            "inprogress" === o && (o = i.shift(), s--), o && ("fx" === type && i.unshift("inprogress"), delete l.stop, o.call(t, function() {
                I.dequeue(t, type)
            }, l)), !s && l && l.empty.fire()
        },
        _queueHooks: function(t, type) {
            var key = type + "queueHooks";
            return I._data(t, key) || I._data(t, key, {
                empty: I.Callbacks("once memory").add(function() {
                    I._removeData(t, type + "queue"), I._removeData(t, key)
                })
            })
        }
    }), I.fn.extend({
        queue: function(type, data) {
            var t = 2;
            return "string" != typeof type && (data = type, type = "fx", t--), arguments.length < t ? I.queue(this[0], type) : data === undefined ? this : this.each(function() {
                var t = I.queue(this, type, data);
                I._queueHooks(this, type), "fx" === type && "inprogress" !== t[0] && I.dequeue(this, type)
            })
        },
        dequeue: function(type) {
            return this.each(function() {
                I.dequeue(this, type)
            })
        },
        delay: function(time, type) {
            return time = I.fx ? I.fx.speeds[time] || time : time, type = type || "fx", this.queue(type, function(next, t) {
                var timeout = setTimeout(next, time);
                t.stop = function() {
                    clearTimeout(timeout)
                }
            })
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", [])
        },
        promise: function(type, t) {
            var i, count = 1,
                defer = I.Deferred(),
                elements = this,
                s = this.length,
                resolve = function() {
                    --count || defer.resolveWith(elements, [elements])
                };
            for ("string" != typeof type && (t = type, type = undefined), type = type || "fx"; s--;)(i = I._data(elements[s], type + "queueHooks")) && i.empty && (count++, i.empty.add(resolve));
            return resolve(), defer.promise(t)
        }
    });
    var H, j, Y = /[\t\r\n\f]/g,
        K = /\r/g,
        W = /^(?:input|select|textarea|button|object)$/i,
        J = /^(?:a|area)$/i,
        X = /^(?:checked|selected)$/i,
        Z = I.support.getSetAttribute,
        ee = I.support.input;
    I.fn.extend({
        attr: function(name, value) {
            return I.access(this, I.attr, name, value, arguments.length > 1)
        },
        removeAttr: function(name) {
            return this.each(function() {
                I.removeAttr(this, name)
            })
        },
        prop: function(name, value) {
            return I.access(this, I.prop, name, value, arguments.length > 1)
        },
        removeProp: function(name) {
            return name = I.propFix[name] || name, this.each(function() {
                try {
                    this[name] = undefined, delete this[name]
                } catch (t) {}
            })
        },
        addClass: function(value) {
            var t, i, s, o, l, u = 0,
                h = this.length,
                p = "string" == typeof value && value;
            if (I.isFunction(value)) return this.each(function(t) {
                I(this).addClass(value.call(this, t, this.className))
            });
            if (p)
                for (t = (value || "").match(A) || []; u < h; u++)
                    if (i = this[u], s = 1 === i.nodeType && (i.className ? (" " + i.className + " ").replace(Y, " ") : " ")) {
                        for (l = 0; o = t[l++];) s.indexOf(" " + o + " ") < 0 && (s += o + " ");
                        i.className = I.trim(s)
                    }
            return this
        },
        removeClass: function(value) {
            var t, i, s, o, l, u = 0,
                h = this.length,
                p = 0 === arguments.length || "string" == typeof value && value;
            if (I.isFunction(value)) return this.each(function(t) {
                I(this).removeClass(value.call(this, t, this.className))
            });
            if (p)
                for (t = (value || "").match(A) || []; u < h; u++)
                    if (i = this[u], s = 1 === i.nodeType && (i.className ? (" " + i.className + " ").replace(Y, " ") : "")) {
                        for (l = 0; o = t[l++];)
                            for (; s.indexOf(" " + o + " ") >= 0;) s = s.replace(" " + o + " ", " ");
                        i.className = value ? I.trim(s) : ""
                    }
            return this
        },
        toggleClass: function(value, t) {
            var type = typeof value,
                i = "boolean" == typeof t;
            return I.isFunction(value) ? this.each(function(i) {
                I(this).toggleClass(value.call(this, i, this.className, t), t)
            }) : this.each(function() {
                if ("string" === type)
                    for (var className, o = 0, self = I(this), state = t, l = value.match(A) || []; className = l[o++];) self[(state = i ? state : !self.hasClass(className)) ? "addClass" : "removeClass"](className);
                else type !== s && "boolean" !== type || (this.className && I._data(this, "__className__", this.className), this.className = this.className || !1 === value ? "" : I._data(this, "__className__") || "")
            })
        },
        hasClass: function(selector) {
            for (var className = " " + selector + " ", t = 0, i = this.length; t < i; t++)
                if (1 === this[t].nodeType && (" " + this[t].className + " ").replace(Y, " ").indexOf(className) >= 0) return !0;
            return !1
        },
        val: function(value) {
            var t, i, s, o = this[0]; {
                if (arguments.length) return s = I.isFunction(value), this.each(function(t) {
                    var o;
                    1 === this.nodeType && (null == (o = s ? value.call(this, t, I(this).val()) : value) ? o = "" : "number" == typeof o ? o += "" : I.isArray(o) && (o = I.map(o, function(value) {
                        return null == value ? "" : value + ""
                    })), (i = I.valHooks[this.type] || I.valHooks[this.nodeName.toLowerCase()]) && "set" in i && i.set(this, o, "value") !== undefined || (this.value = o))
                });
                if (o) return (i = I.valHooks[o.type] || I.valHooks[o.nodeName.toLowerCase()]) && "get" in i && (t = i.get(o, "value")) !== undefined ? t : "string" == typeof(t = o.value) ? t.replace(K, "") : null == t ? "" : t
            }
        }
    }), I.extend({
        valHooks: {
            option: {
                get: function(t) {
                    var i = I.find.attr(t, "value");
                    return null != i ? i : t.text
                }
            },
            select: {
                get: function(t) {
                    for (var value, i, options = t.options, index = t.selectedIndex, s = "select-one" === t.type || index < 0, values = s ? null : [], max = s ? index + 1 : options.length, o = index < 0 ? max : s ? index : 0; o < max; o++)
                        if (((i = options[o]).selected || o === index) && (I.support.optDisabled ? !i.disabled : null === i.getAttribute("disabled")) && (!i.parentNode.disabled || !I.nodeName(i.parentNode, "optgroup"))) {
                            if (value = I(i).val(), s) return value;
                            values.push(value)
                        }
                    return values
                },
                set: function(t, value) {
                    for (var i, s, options = t.options, values = I.makeArray(value), o = options.length; o--;)((s = options[o]).selected = I.inArray(I(s).val(), values) >= 0) && (i = !0);
                    return i || (t.selectedIndex = -1), values
                }
            }
        },
        attr: function(t, name, value) {
            var i, o, l = t.nodeType;
            if (t && 3 !== l && 8 !== l && 2 !== l) return typeof t.getAttribute === s ? I.prop(t, name, value) : (1 === l && I.isXMLDoc(t) || (name = name.toLowerCase(), i = I.attrHooks[name] || (I.expr.match.bool.test(name) ? j : H)), value === undefined ? i && "get" in i && null !== (o = i.get(t, name)) ? o : null == (o = I.find.attr(t, name)) ? undefined : o : null !== value ? i && "set" in i && (o = i.set(t, value, name)) !== undefined ? o : (t.setAttribute(name, value + ""), value) : void I.removeAttr(t, name))
        },
        removeAttr: function(t, value) {
            var name, i, s = 0,
                o = value && value.match(A);
            if (o && 1 === t.nodeType)
                for (; name = o[s++];) i = I.propFix[name] || name, I.expr.match.bool.test(name) ? ee && Z || !X.test(name) ? t[i] = !1 : t[I.camelCase("default-" + name)] = t[i] = !1 : I.attr(t, name, ""), t.removeAttribute(Z ? name : i)
        },
        attrHooks: {
            type: {
                set: function(t, value) {
                    if (!I.support.radioValue && "radio" === value && I.nodeName(t, "input")) {
                        var i = t.value;
                        return t.setAttribute("type", value), i && (t.value = i), value
                    }
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        },
        prop: function(t, name, value) {
            var i, s, o = t.nodeType;
            if (t && 3 !== o && 8 !== o && 2 !== o) return (1 !== o || !I.isXMLDoc(t)) && (name = I.propFix[name] || name, s = I.propHooks[name]), value !== undefined ? s && "set" in s && (i = s.set(t, value, name)) !== undefined ? i : t[name] = value : s && "get" in s && null !== (i = s.get(t, name)) ? i : t[name]
        },
        propHooks: {
            tabIndex: {
                get: function(t) {
                    var i = I.find.attr(t, "tabindex");
                    return i ? parseInt(i, 10) : W.test(t.nodeName) || J.test(t.nodeName) && t.href ? 0 : -1
                }
            }
        }
    }), j = {
        set: function(t, value, name) {
            return !1 === value ? I.removeAttr(t, name) : ee && Z || !X.test(name) ? t.setAttribute(!Z && I.propFix[name] || name, name) : t[I.camelCase("default-" + name)] = t[name] = !0, name
        }
    }, I.each(I.expr.match.bool.source.match(/\w+/g), function(t, name) {
        var i = I.expr.attrHandle[name] || I.find.attr;
        I.expr.attrHandle[name] = ee && Z || !X.test(name) ? function(t, name, s) {
            var o = I.expr.attrHandle[name],
                l = s ? undefined : (I.expr.attrHandle[name] = undefined) != i(t, name, s) ? name.toLowerCase() : null;
            return I.expr.attrHandle[name] = o, l
        } : function(t, name, i) {
            return i ? undefined : t[I.camelCase("default-" + name)] ? name.toLowerCase() : null
        }
    }), ee && Z || (I.attrHooks.value = {
        set: function(t, value, name) {
            if (!I.nodeName(t, "input")) return H && H.set(t, value, name);
            t.defaultValue = value
        }
    }), Z || (H = {
        set: function(t, value, name) {
            var i = t.getAttributeNode(name);
            return i || t.setAttributeNode(i = t.ownerDocument.createAttribute(name)), i.value = value += "", "value" === name || value === t.getAttribute(name) ? value : undefined
        }
    }, I.expr.attrHandle.id = I.expr.attrHandle.name = I.expr.attrHandle.coords = function(t, name, i) {
        var s;
        return i ? undefined : (s = t.getAttributeNode(name)) && "" !== s.value ? s.value : null
    }, I.valHooks.button = {
        get: function(t, name) {
            var i = t.getAttributeNode(name);
            return i && i.specified ? i.value : undefined
        },
        set: H.set
    }, I.attrHooks.contenteditable = {
        set: function(t, value, name) {
            H.set(t, "" !== value && value, name)
        }
    }, I.each(["width", "height"], function(t, name) {
        I.attrHooks[name] = {
            set: function(t, value) {
                if ("" === value) return t.setAttribute(name, "auto"), value
            }
        }
    })), I.support.hrefNormalized || I.each(["href", "src"], function(t, name) {
        I.propHooks[name] = {
            get: function(t) {
                return t.getAttribute(name, 4)
            }
        }
    }), I.support.style || (I.attrHooks.style = {
        get: function(t) {
            return t.style.cssText || undefined
        },
        set: function(t, value) {
            return t.style.cssText = value + ""
        }
    }), I.support.optSelected || (I.propHooks.selected = {
        get: function(t) {
            var parent = t.parentNode;
            if (parent) {
                parent.selectedIndex;
                parent.parentNode && parent.parentNode.selectedIndex
            }
            return null
        }
    }), I.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        I.propFix[this.toLowerCase()] = this
    }), I.support.enctype || (I.propFix.enctype = "encoding"), I.each(["radio", "checkbox"], function() {
        I.valHooks[this] = {
            set: function(t, value) {
                if (I.isArray(value)) return t.checked = I.inArray(I(t).val(), value) >= 0
            }
        }, I.support.checkOn || (I.valHooks[this].get = function(t) {
            return null === t.getAttribute("value") ? "on" : t.value
        })
    });
    var te = /^(?:input|select|textarea)$/i,
        ie = /^key/,
        se = /^(?:mouse|contextmenu)|click/,
        ne = /^(?:focusinfocus|focusoutblur)$/,
        oe = /^([^.]*)(?:\.(.+)|)$/;
    I.event = {
        global: {},
        add: function(t, types, i, data, selector) {
            var o, l, u, h, p, m, _, g, type, namespaces, S, v = I._data(t);
            if (v) {
                for (i.handler && (i = (h = i).handler, selector = h.selector), i.guid || (i.guid = I.guid++), (l = v.events) || (l = v.events = {}), (m = v.handle) || ((m = v.handle = function(e) {
                        return typeof I === s || e && I.event.triggered === e.type ? undefined : I.event.dispatch.apply(m.elem, arguments)
                    }).elem = t), u = (types = (types || "").match(A) || [""]).length; u--;) type = S = (o = oe.exec(types[u]) || [])[1], namespaces = (o[2] || "").split(".").sort(), type && (p = I.event.special[type] || {}, type = (selector ? p.delegateType : p.bindType) || type, p = I.event.special[type] || {}, _ = I.extend({
                    type: type,
                    origType: S,
                    data: data,
                    handler: i,
                    guid: i.guid,
                    selector: selector,
                    needsContext: selector && I.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, h), (g = l[type]) || ((g = l[type] = []).delegateCount = 0, p.setup && !1 !== p.setup.call(t, data, namespaces, m) || (t.addEventListener ? t.addEventListener(type, m, !1) : t.attachEvent && t.attachEvent("on" + type, m))), p.add && (p.add.call(t, _), _.handler.guid || (_.handler.guid = i.guid)), selector ? g.splice(g.delegateCount++, 0, _) : g.push(_), I.event.global[type] = !0);
                t = null
            }
        },
        remove: function(t, types, i, selector, s) {
            var o, l, u, h, p, m, _, g, type, namespaces, S, v = I.hasData(t) && I._data(t);
            if (v && (m = v.events)) {
                for (p = (types = (types || "").match(A) || [""]).length; p--;)
                    if (u = oe.exec(types[p]) || [], type = S = u[1], namespaces = (u[2] || "").split(".").sort(), type) {
                        for (_ = I.event.special[type] || {}, g = m[type = (selector ? _.delegateType : _.bindType) || type] || [], u = u[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"), h = o = g.length; o--;) l = g[o], !s && S !== l.origType || i && i.guid !== l.guid || u && !u.test(l.namespace) || selector && selector !== l.selector && ("**" !== selector || !l.selector) || (g.splice(o, 1), l.selector && g.delegateCount--, _.remove && _.remove.call(t, l));
                        h && !g.length && (_.teardown && !1 !== _.teardown.call(t, namespaces, v.handle) || I.removeEvent(t, type, v.handle), delete m[type])
                    } else
                        for (type in m) I.event.remove(t, type + types[p], i, selector, !0);
                I.isEmptyObject(m) && (delete v.handle, I._removeData(t, "events"))
            }
        },
        trigger: function(event, data, t, i) {
            var s, o, l, u, h, p, m, _ = [t || document],
                type = T.call(event, "type") ? event.type : event,
                namespaces = T.call(event, "namespace") ? event.namespace.split(".") : [];
            if (l = p = t = t || document, 3 !== t.nodeType && 8 !== t.nodeType && !ne.test(type + I.event.triggered) && (type.indexOf(".") >= 0 && (type = (namespaces = type.split(".")).shift(), namespaces.sort()), o = type.indexOf(":") < 0 && "on" + type, event = event[I.expando] ? event : new I.Event(type, "object" == typeof event && event), event.isTrigger = i ? 2 : 3, event.namespace = namespaces.join("."), event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, event.result = undefined, event.target || (event.target = t), data = null == data ? [event] : I.makeArray(data, [event]), h = I.event.special[type] || {}, i || !h.trigger || !1 !== h.trigger.apply(t, data))) {
                if (!i && !h.noBubble && !I.isWindow(t)) {
                    for (u = h.delegateType || type, ne.test(u + type) || (l = l.parentNode); l; l = l.parentNode) _.push(l), p = l;
                    p === (t.ownerDocument || document) && _.push(p.defaultView || p.parentWindow || window)
                }
                for (m = 0;
                    (l = _[m++]) && !event.isPropagationStopped();) event.type = m > 1 ? u : h.bindType || type, (s = (I._data(l, "events") || {})[event.type] && I._data(l, "handle")) && s.apply(l, data), (s = o && l[o]) && I.acceptData(l) && s.apply && !1 === s.apply(l, data) && event.preventDefault();
                if (event.type = type, !i && !event.isDefaultPrevented() && (!h._default || !1 === h._default.apply(_.pop(), data)) && I.acceptData(t) && o && t[type] && !I.isWindow(t)) {
                    (p = t[o]) && (t[o] = null), I.event.triggered = type;
                    try {
                        t[type]()
                    } catch (t) {}
                    I.event.triggered = undefined, p && (t[o] = p)
                }
                return event.result
            }
        },
        dispatch: function(event) {
            event = I.event.fix(event);
            var t, i, s, o, l, u = [],
                h = g.call(arguments),
                p = (I._data(this, "events") || {})[event.type] || [],
                m = I.event.special[event.type] || {};
            if (h[0] = event, event.delegateTarget = this, !m.preDispatch || !1 !== m.preDispatch.call(this, event)) {
                for (u = I.event.handlers.call(this, event, p), t = 0;
                    (o = u[t++]) && !event.isPropagationStopped();)
                    for (event.currentTarget = o.elem, l = 0;
                        (s = o.handlers[l++]) && !event.isImmediatePropagationStopped();) event.namespace_re && !event.namespace_re.test(s.namespace) || (event.handleObj = s, event.data = s.data, (i = ((I.event.special[s.origType] || {}).handle || s.handler).apply(o.elem, h)) !== undefined && !1 === (event.result = i) && (event.preventDefault(), event.stopPropagation()));
                return m.postDispatch && m.postDispatch.call(this, event), event.result
            }
        },
        handlers: function(event, t) {
            var i, s, matches, o, l = [],
                u = t.delegateCount,
                h = event.target;
            if (u && h.nodeType && (!event.button || "click" !== event.type))
                for (; h != this; h = h.parentNode || this)
                    if (1 === h.nodeType && (!0 !== h.disabled || "click" !== event.type)) {
                        for (matches = [], o = 0; o < u; o++) matches[i = (s = t[o]).selector + " "] === undefined && (matches[i] = s.needsContext ? I(i, this).index(h) >= 0 : I.find(i, this, null, [h]).length), matches[i] && matches.push(s);
                        matches.length && l.push({
                            elem: h,
                            handlers: matches
                        })
                    }
            return u < t.length && l.push({
                elem: this,
                handlers: t.slice(u)
            }), l
        },
        fix: function(event) {
            if (event[I.expando]) return event;
            var t, i, s, type = event.type,
                o = event,
                l = this.fixHooks[type];
            for (l || (this.fixHooks[type] = l = se.test(type) ? this.mouseHooks : ie.test(type) ? this.keyHooks : {}), s = l.props ? this.props.concat(l.props) : this.props, event = new I.Event(o), t = s.length; t--;) event[i = s[t]] = o[i];
            return event.target || (event.target = o.srcElement || document), 3 === event.target.nodeType && (event.target = event.target.parentNode), event.metaKey = !!event.metaKey, l.filter ? l.filter(event, o) : event
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, t) {
                return null == event.which && (event.which = null != t.charCode ? t.charCode : t.keyCode), event
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(event, t) {
                var body, i, s, button = t.button,
                    fromElement = t.fromElement;
                return null == event.pageX && null != t.clientX && (s = (i = event.target.ownerDocument || document).documentElement, body = i.body, event.pageX = t.clientX + (s && s.scrollLeft || body && body.scrollLeft || 0) - (s && s.clientLeft || body && body.clientLeft || 0), event.pageY = t.clientY + (s && s.scrollTop || body && body.scrollTop || 0) - (s && s.clientTop || body && body.clientTop || 0)), !event.relatedTarget && fromElement && (event.relatedTarget = fromElement === event.target ? t.toElement : fromElement), event.which || button === undefined || (event.which = 1 & button ? 1 : 2 & button ? 3 : 4 & button ? 2 : 0), event
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) try {
                        return this.focus(), !1
                    } catch (t) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) return this.blur(), !1
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if (I.nodeName(this, "input") && "checkbox" === this.type && this.click) return this.click(), !1
                },
                _default: function(event) {
                    return I.nodeName(event.target, "a")
                }
            },
            beforeunload: {
                postDispatch: function(event) {
                    event.result !== undefined && (event.originalEvent.returnValue = event.result)
                }
            }
        },
        simulate: function(type, t, event, i) {
            var e = I.extend(new I.Event, event, {
                type: type,
                isSimulated: !0,
                originalEvent: {}
            });
            i ? I.event.trigger(e, null, t) : I.event.dispatch.call(t, e), e.isDefaultPrevented() && event.preventDefault()
        }
    }, I.removeEvent = document.removeEventListener ? function(t, type, i) {
        t.removeEventListener && t.removeEventListener(type, i, !1)
    } : function(t, type, i) {
        var name = "on" + type;
        t.detachEvent && (typeof t[name] === s && (t[name] = null), t.detachEvent(name, i))
    }, I.Event = function(src, t) {
        if (!(this instanceof I.Event)) return new I.Event(src, t);
        src && src.type ? (this.originalEvent = src, this.type = src.type, this.isDefaultPrevented = src.defaultPrevented || !1 === src.returnValue || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse) : this.type = src, t && I.extend(this, t), this.timeStamp = src && src.timeStamp || I.now(), this[I.expando] = !0
    }, I.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue, e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1)
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue, e && (e.stopPropagation && e.stopPropagation(), e.cancelBubble = !0)
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue, this.stopPropagation()
        }
    }, I.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(t, i) {
        I.event.special[t] = {
            delegateType: i,
            bindType: i,
            handle: function(event) {
                var t, target = this,
                    s = event.relatedTarget,
                    o = event.handleObj;
                return s && (s === target || I.contains(target, s)) || (event.type = o.origType, t = o.handler.apply(this, arguments), event.type = i), t
            }
        }
    }), I.support.submitBubbles || (I.event.special.submit = {
        setup: function() {
            if (I.nodeName(this, "form")) return !1;
            I.event.add(this, "click._submit keypress._submit", function(e) {
                var t = e.target,
                    form = I.nodeName(t, "input") || I.nodeName(t, "button") ? t.form : undefined;
                form && !I._data(form, "submitBubbles") && (I.event.add(form, "submit._submit", function(event) {
                    event._submit_bubble = !0
                }), I._data(form, "submitBubbles", !0))
            })
        },
        postDispatch: function(event) {
            event._submit_bubble && (delete event._submit_bubble, this.parentNode && !event.isTrigger && I.event.simulate("submit", this.parentNode, event, !0))
        },
        teardown: function() {
            if (I.nodeName(this, "form")) return !1;
            I.event.remove(this, "._submit")
        }
    }), I.support.changeBubbles || (I.event.special.change = {
        setup: function() {
            if (te.test(this.nodeName)) return "checkbox" !== this.type && "radio" !== this.type || (I.event.add(this, "propertychange._change", function(event) {
                "checked" === event.originalEvent.propertyName && (this._just_changed = !0)
            }), I.event.add(this, "click._change", function(event) {
                this._just_changed && !event.isTrigger && (this._just_changed = !1), I.event.simulate("change", this, event, !0)
            })), !1;
            I.event.add(this, "beforeactivate._change", function(e) {
                var t = e.target;
                te.test(t.nodeName) && !I._data(t, "changeBubbles") && (I.event.add(t, "change._change", function(event) {
                    !this.parentNode || event.isSimulated || event.isTrigger || I.event.simulate("change", this.parentNode, event, !0)
                }), I._data(t, "changeBubbles", !0))
            })
        },
        handle: function(event) {
            var t = event.target;
            if (this !== t || event.isSimulated || event.isTrigger || "radio" !== t.type && "checkbox" !== t.type) return event.handleObj.handler.apply(this, arguments)
        },
        teardown: function() {
            return I.event.remove(this, "._change"), !te.test(this.nodeName)
        }
    }), I.support.focusinBubbles || I.each({
        focus: "focusin",
        blur: "focusout"
    }, function(t, i) {
        var s = 0,
            o = function(event) {
                I.event.simulate(i, event.target, I.event.fix(event), !0)
            };
        I.event.special[i] = {
            setup: function() {
                0 == s++ && document.addEventListener(t, o, !0)
            },
            teardown: function() {
                0 == --s && document.removeEventListener(t, o, !0)
            }
        }
    }), I.fn.extend({
        on: function(types, selector, data, t, i) {
            var type, s;
            if ("object" == typeof types) {
                "string" != typeof selector && (data = data || selector, selector = undefined);
                for (type in types) this.on(type, selector, data, types[type], i);
                return this
            }
            if (null == data && null == t ? (t = selector, data = selector = undefined) : null == t && ("string" == typeof selector ? (t = data, data = undefined) : (t = data, data = selector, selector = undefined)), !1 === t) t = returnFalse;
            else if (!t) return this;
            return 1 === i && (s = t, (t = function(event) {
                return I().off(event), s.apply(this, arguments)
            }).guid = s.guid || (s.guid = I.guid++)), this.each(function() {
                I.event.add(this, types, t, data, selector)
            })
        },
        one: function(types, selector, data, t) {
            return this.on(types, selector, data, t, 1)
        },
        off: function(types, selector, t) {
            var i, type;
            if (types && types.preventDefault && types.handleObj) return i = types.handleObj, I(types.delegateTarget).off(i.namespace ? i.origType + "." + i.namespace : i.origType, i.selector, i.handler), this;
            if ("object" == typeof types) {
                for (type in types) this.off(type, selector, types[type]);
                return this
            }
            return !1 !== selector && "function" != typeof selector || (t = selector, selector = undefined), !1 === t && (t = returnFalse), this.each(function() {
                I.event.remove(this, types, t, selector)
            })
        },
        trigger: function(type, data) {
            return this.each(function() {
                I.event.trigger(type, data, this)
            })
        },
        triggerHandler: function(type, data) {
            var t = this[0];
            if (t) return I.event.trigger(type, data, t, !0)
        }
    });
    var ae = /^.[^:#\[\.,]*$/,
        re = /^(?:parents|prev(?:Until|All))/,
        le = I.expr.match.needsContext,
        ce = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
    I.fn.extend({
        find: function(selector) {
            var t, i = [],
                self = this,
                s = self.length;
            if ("string" != typeof selector) return this.pushStack(I(selector).filter(function() {
                for (t = 0; t < s; t++)
                    if (I.contains(self[t], this)) return !0
            }));
            for (t = 0; t < s; t++) I.find(selector, self[t], i);
            return i = this.pushStack(s > 1 ? I.unique(i) : i), i.selector = this.selector ? this.selector + " " + selector : selector, i
        },
        has: function(target) {
            var t, i = I(target, this),
                s = i.length;
            return this.filter(function() {
                for (t = 0; t < s; t++)
                    if (I.contains(this, i[t])) return !0
            })
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], !0))
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], !1))
        },
        is: function(selector) {
            return !!winnow(this, "string" == typeof selector && le.test(selector) ? I(selector) : selector || [], !1).length
        },
        closest: function(t, context) {
            for (var i, s = 0, o = this.length, l = [], u = le.test(t) || "string" != typeof t ? I(t, context || this.context) : 0; s < o; s++)
                for (i = this[s]; i && i !== context; i = i.parentNode)
                    if (i.nodeType < 11 && (u ? u.index(i) > -1 : 1 === i.nodeType && I.find.matchesSelector(i, t))) {
                        i = l.push(i);
                        break
                    }
            return this.pushStack(l.length > 1 ? I.unique(l) : l)
        },
        index: function(t) {
            return t ? "string" == typeof t ? I.inArray(this[0], I(t)) : I.inArray(t.jquery ? t[0] : t, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
        },
        add: function(selector, context) {
            var set = "string" == typeof selector ? I(selector, context) : I.makeArray(selector && selector.nodeType ? [selector] : selector),
                all = I.merge(this.get(), set);
            return this.pushStack(I.unique(all))
        },
        addBack: function(selector) {
            return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector))
        }
    }), I.each({
        parent: function(t) {
            var parent = t.parentNode;
            return parent && 11 !== parent.nodeType ? parent : null
        },
        parents: function(t) {
            return I.dir(t, "parentNode")
        },
        parentsUntil: function(t, i, s) {
            return I.dir(t, "parentNode", s)
        },
        next: function(t) {
            return sibling(t, "nextSibling")
        },
        prev: function(t) {
            return sibling(t, "previousSibling")
        },
        nextAll: function(t) {
            return I.dir(t, "nextSibling")
        },
        prevAll: function(t) {
            return I.dir(t, "previousSibling")
        },
        nextUntil: function(t, i, s) {
            return I.dir(t, "nextSibling", s)
        },
        prevUntil: function(t, i, s) {
            return I.dir(t, "previousSibling", s)
        },
        siblings: function(t) {
            return I.sibling((t.parentNode || {}).firstChild, t)
        },
        children: function(t) {
            return I.sibling(t.firstChild)
        },
        contents: function(t) {
            return I.nodeName(t, "iframe") ? t.contentDocument || t.contentWindow.document : I.merge([], t.childNodes)
        }
    }, function(name, t) {
        I.fn[name] = function(i, selector) {
            var s = I.map(this, t, i);
            return "Until" !== name.slice(-5) && (selector = i), selector && "string" == typeof selector && (s = I.filter(selector, s)), this.length > 1 && (ce[name] || (s = I.unique(s)), re.test(name) && (s = s.reverse())), this.pushStack(s)
        }
    }), I.extend({
        filter: function(t, i, s) {
            var o = i[0];
            return s && (t = ":not(" + t + ")"), 1 === i.length && 1 === o.nodeType ? I.find.matchesSelector(o, t) ? [o] : [] : I.find.matches(t, I.grep(i, function(t) {
                return 1 === t.nodeType
            }))
        },
        dir: function(t, dir, i) {
            for (var s = [], o = t[dir]; o && 9 !== o.nodeType && (i === undefined || 1 !== o.nodeType || !I(o).is(i));) 1 === o.nodeType && s.push(o), o = o[dir];
            return s
        },
        sibling: function(n, t) {
            for (var r = []; n; n = n.nextSibling) 1 === n.nodeType && n !== t && r.push(n);
            return r
        }
    });
    var ue = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        de = / jQuery\d+="(?:null|\d+)"/g,
        he = new RegExp("<(?:" + ue + ")[\\s/>]", "i"),
        pe = /^\s+/,
        me = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        _e = /<([\w:]+)/,
        ge = /<tbody/i,
        Se = /<|&#?\w+;/,
        fe = /<(?:script|style|link)/i,
        ve = /^(?:checkbox|radio)$/i,
        ye = /checked\s*(?:[^=]|=\s*.checked.)/i,
        Te = /^$|\/(?:java|ecma)script/i,
        Ce = /^true\/(.*)/,
        be = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
        Ee = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            area: [1, "<map>", "</map>"],
            param: [1, "<object>", "</object>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: I.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
        },
        Ie = createSafeFragment(document).appendChild(document.createElement("div"));
    Ee.optgroup = Ee.option, Ee.tbody = Ee.tfoot = Ee.colgroup = Ee.caption = Ee.thead, Ee.th = Ee.td, I.fn.extend({
        text: function(value) {
            return I.access(this, function(value) {
                return value === undefined ? I.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value))
            }, null, value, arguments.length)
        },
        append: function() {
            return this.domManip(arguments, function(t) {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || manipulationTarget(this, t).appendChild(t)
            })
        },
        prepend: function() {
            return this.domManip(arguments, function(t) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var target = manipulationTarget(this, t);
                    target.insertBefore(t, target.firstChild)
                }
            })
        },
        before: function() {
            return this.domManip(arguments, function(t) {
                this.parentNode && this.parentNode.insertBefore(t, this)
            })
        },
        after: function() {
            return this.domManip(arguments, function(t) {
                this.parentNode && this.parentNode.insertBefore(t, this.nextSibling)
            })
        },
        remove: function(selector, t) {
            for (var i, s = selector ? I.filter(selector, this) : this, o = 0; null != (i = s[o]); o++) t || 1 !== i.nodeType || I.cleanData(getAll(i)), i.parentNode && (t && I.contains(i.ownerDocument, i) && setGlobalEval(getAll(i, "script")), i.parentNode.removeChild(i));
            return this
        },
        empty: function() {
            for (var t, i = 0; null != (t = this[i]); i++) {
                for (1 === t.nodeType && I.cleanData(getAll(t, !1)); t.firstChild;) t.removeChild(t.firstChild);
                t.options && I.nodeName(t, "select") && (t.options.length = 0)
            }
            return this
        },
        clone: function(t, i) {
            return t = null != t && t, i = null == i ? t : i, this.map(function() {
                return I.clone(this, t, i)
            })
        },
        html: function(value) {
            return I.access(this, function(value) {
                var t = this[0] || {},
                    i = 0,
                    s = this.length;
                if (value === undefined) return 1 === t.nodeType ? t.innerHTML.replace(de, "") : undefined;
                if ("string" == typeof value && !fe.test(value) && (I.support.htmlSerialize || !he.test(value)) && (I.support.leadingWhitespace || !pe.test(value)) && !Ee[(_e.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = value.replace(me, "<$1></$2>");
                    try {
                        for (; i < s; i++) 1 === (t = this[i] || {}).nodeType && (I.cleanData(getAll(t, !1)), t.innerHTML = value);
                        t = 0
                    } catch (t) {}
                }
                t && this.empty().append(value)
            }, null, value, arguments.length)
        },
        replaceWith: function() {
            var t = I.map(this, function(t) {
                    return [t.nextSibling, t.parentNode]
                }),
                i = 0;
            return this.domManip(arguments, function(s) {
                var next = t[i++],
                    parent = t[i++];
                parent && (next && next.parentNode !== parent && (next = this.nextSibling), I(this).remove(), parent.insertBefore(s, next))
            }, !0), i ? this : this.remove()
        },
        detach: function(selector) {
            return this.remove(selector, !0)
        },
        domManip: function(t, i, s) {
            t = m.apply([], t);
            var o, l, u, scripts, h, p, _ = 0,
                g = this.length,
                set = this,
                S = g - 1,
                value = t[0],
                v = I.isFunction(value);
            if (v || !(g <= 1 || "string" != typeof value || I.support.checkClone) && ye.test(value)) return this.each(function(index) {
                var self = set.eq(index);
                v && (t[0] = value.call(this, index, self.html())), self.domManip(t, i, s)
            });
            if (g && (p = I.buildFragment(t, this[0].ownerDocument, !1, !s && this), o = p.firstChild, 1 === p.childNodes.length && (p = o), o)) {
                for (u = (scripts = I.map(getAll(p, "script"), disableScript)).length; _ < g; _++) l = p, _ !== S && (l = I.clone(l, !0, !0), u && I.merge(scripts, getAll(l, "script"))), i.call(this[_], l, _);
                if (u)
                    for (h = scripts[scripts.length - 1].ownerDocument, I.map(scripts, restoreScript), _ = 0; _ < u; _++) l = scripts[_], Te.test(l.type || "") && !I._data(l, "globalEval") && I.contains(h, l) && (l.src ? I._evalUrl(l.src) : I.globalEval((l.text || l.textContent || l.innerHTML || "").replace(be, "")));
                p = o = null
            }
            return this
        }
    }), I.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, t) {
        I.fn[name] = function(selector) {
            for (var i, s = 0, o = [], l = I(selector), u = l.length - 1; s <= u; s++) i = s === u ? this : this.clone(!0), I(l[s])[t](i), _.apply(o, i.get());
            return this.pushStack(o)
        }
    }), I.extend({
        clone: function(t, i, s) {
            var o, l, clone, u, h, p = I.contains(t.ownerDocument, t);
            if (I.support.html5Clone || I.isXMLDoc(t) || !he.test("<" + t.nodeName + ">") ? clone = t.cloneNode(!0) : (Ie.innerHTML = t.outerHTML, Ie.removeChild(clone = Ie.firstChild)), !(I.support.noCloneEvent && I.support.noCloneChecked || 1 !== t.nodeType && 11 !== t.nodeType || I.isXMLDoc(t)))
                for (o = getAll(clone), h = getAll(t), u = 0; null != (l = h[u]); ++u) o[u] && fixCloneNodeIssues(l, o[u]);
            if (i)
                if (s)
                    for (h = h || getAll(t), o = o || getAll(clone), u = 0; null != (l = h[u]); u++) cloneCopyEvent(l, o[u]);
                else cloneCopyEvent(t, clone);
            return (o = getAll(clone, "script")).length > 0 && setGlobalEval(o, !p && getAll(t, "script")), o = h = l = null, clone
        },
        buildFragment: function(t, context, scripts, selection) {
            for (var i, s, contains, o, tag, l, wrap, u = t.length, h = createSafeFragment(context), p = [], m = 0; m < u; m++)
                if ((s = t[m]) || 0 === s)
                    if ("object" === I.type(s)) I.merge(p, s.nodeType ? [s] : s);
                    else if (Se.test(s)) {
                for (o = o || h.appendChild(context.createElement("div")), tag = (_e.exec(s) || ["", ""])[1].toLowerCase(), wrap = Ee[tag] || Ee._default, o.innerHTML = wrap[1] + s.replace(me, "<$1></$2>") + wrap[2], i = wrap[0]; i--;) o = o.lastChild;
                if (!I.support.leadingWhitespace && pe.test(s) && p.push(context.createTextNode(pe.exec(s)[0])), !I.support.tbody)
                    for (i = (s = "table" !== tag || ge.test(s) ? "<table>" !== wrap[1] || ge.test(s) ? 0 : o : o.firstChild) && s.childNodes.length; i--;) I.nodeName(l = s.childNodes[i], "tbody") && !l.childNodes.length && s.removeChild(l);
                for (I.merge(p, o.childNodes), o.textContent = ""; o.firstChild;) o.removeChild(o.firstChild);
                o = h.lastChild
            } else p.push(context.createTextNode(s));
            for (o && h.removeChild(o), I.support.appendChecked || I.grep(getAll(p, "input"), fixDefaultChecked), m = 0; s = p[m++];)
                if ((!selection || -1 === I.inArray(s, selection)) && (contains = I.contains(s.ownerDocument, s), o = getAll(h.appendChild(s), "script"), contains && setGlobalEval(o), scripts))
                    for (i = 0; s = o[i++];) Te.test(s.type || "") && scripts.push(s);
            return o = null, h
        },
        cleanData: function(t, i) {
            for (var o, type, id, data, l = 0, u = I.expando, h = I.cache, m = I.support.deleteExpando, _ = I.event.special; null != (o = t[l]); l++)
                if ((i || I.acceptData(o)) && (id = o[u], data = id && h[id])) {
                    if (data.events)
                        for (type in data.events) _[type] ? I.event.remove(o, type) : I.removeEvent(o, type, data.handle);
                    h[id] && (delete h[id], m ? delete o[u] : typeof o.removeAttribute !== s ? o.removeAttribute(u) : o[u] = null, p.push(id))
                }
        },
        _evalUrl: function(url) {
            return I.ajax({
                url: url,
                type: "GET",
                dataType: "script",
                async: !1,
                global: !1,
                throws: !0
            })
        }
    }), I.fn.extend({
        wrapAll: function(t) {
            if (I.isFunction(t)) return this.each(function(i) {
                I(this).wrapAll(t.call(this, i))
            });
            if (this[0]) {
                var wrap = I(t, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && wrap.insertBefore(this[0]), wrap.map(function() {
                    for (var t = this; t.firstChild && 1 === t.firstChild.nodeType;) t = t.firstChild;
                    return t
                }).append(this)
            }
            return this
        },
        wrapInner: function(t) {
            return I.isFunction(t) ? this.each(function(i) {
                I(this).wrapInner(t.call(this, i))
            }) : this.each(function() {
                var self = I(this),
                    i = self.contents();
                i.length ? i.wrapAll(t) : self.append(t)
            })
        },
        wrap: function(t) {
            var i = I.isFunction(t);
            return this.each(function(s) {
                I(this).wrapAll(i ? t.call(this, s) : t)
            })
        },
        unwrap: function() {
            return this.parent().each(function() {
                I.nodeName(this, "body") || I(this).replaceWith(this.childNodes)
            }).end()
        }
    });
    var we, Le, Ae, Re = /alpha\([^)]*\)/i,
        De = /opacity\s*=\s*([^)]*)/,
        Pe = /^(top|right|bottom|left)$/,
        Ne = /^(none|table(?!-c[ea]).+)/,
        Oe = /^margin/,
        Be = new RegExp("^(" + L + ")(.*)$", "i"),
        Ue = new RegExp("^(" + L + ")(?!px)[a-z%]+$", "i"),
        Me = new RegExp("^([+-])=(" + L + ")", "i"),
        Fe = {
            BODY: "block"
        },
        qe = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        ke = {
            letterSpacing: 0,
            fontWeight: 400
        },
        Ve = ["Top", "Right", "Bottom", "Left"],
        xe = ["Webkit", "O", "Moz", "ms"];
    I.fn.extend({
        css: function(name, value) {
            return I.access(this, function(t, name, value) {
                var i, s, map = {},
                    o = 0;
                if (I.isArray(name)) {
                    for (s = Le(t), i = name.length; o < i; o++) map[name[o]] = I.css(t, name[o], !1, s);
                    return map
                }
                return value !== undefined ? I.style(t, name, value) : I.css(t, name)
            }, name, value, arguments.length > 1)
        },
        show: function() {
            return showHide(this, !0)
        },
        hide: function() {
            return showHide(this)
        },
        toggle: function(state) {
            var t = "boolean" == typeof state;
            return this.each(function() {
                (t ? state : isHidden(this)) ? I(this).show(): I(this).hide()
            })
        }
    }), I.extend({
        cssHooks: {
            opacity: {
                get: function(t, i) {
                    if (i) {
                        var s = Ae(t, "opacity");
                        return "" === s ? "1" : s
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            float: I.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(t, name, value, i) {
            if (t && 3 !== t.nodeType && 8 !== t.nodeType && t.style) {
                var s, type, o, l = I.camelCase(name),
                    style = t.style;
                if (name = I.cssProps[l] || (I.cssProps[l] = vendorPropName(style, l)), o = I.cssHooks[name] || I.cssHooks[l], value === undefined) return o && "get" in o && (s = o.get(t, !1, i)) !== undefined ? s : style[name];
                if (!("string" == (type = typeof value) && (s = Me.exec(value)) && (value = (s[1] + 1) * s[2] + parseFloat(I.css(t, name)), type = "number"), null == value || "number" === type && isNaN(value) || ("number" !== type || I.cssNumber[l] || (value += "px"), I.support.clearCloneStyle || "" !== value || 0 !== name.indexOf("background") || (style[name] = "inherit"), o && "set" in o && (value = o.set(t, value, i)) === undefined))) try {
                    style[name] = value
                } catch (t) {}
            }
        },
        css: function(t, name, i, s) {
            var o, l, u, h = I.camelCase(name);
            return name = I.cssProps[h] || (I.cssProps[h] = vendorPropName(t.style, h)), (u = I.cssHooks[name] || I.cssHooks[h]) && "get" in u && (l = u.get(t, !0, i)), l === undefined && (l = Ae(t, name, s)), "normal" === l && name in ke && (l = ke[name]), "" === i || i ? (o = parseFloat(l), !0 === i || I.isNumeric(o) ? o || 0 : l) : l
        }
    }), window.getComputedStyle ? (Le = function(t) {
        return window.getComputedStyle(t, null)
    }, Ae = function(t, name, i) {
        var width, minWidth, maxWidth, s = i || Le(t),
            o = s ? s.getPropertyValue(name) || s[name] : undefined,
            style = t.style;
        return s && ("" !== o || I.contains(t.ownerDocument, t) || (o = I.style(t, name)), Ue.test(o) && Oe.test(name) && (width = style.width, minWidth = style.minWidth, maxWidth = style.maxWidth, style.minWidth = style.maxWidth = style.width = o, o = s.width, style.width = width, style.minWidth = minWidth, style.maxWidth = maxWidth)), o
    }) : document.documentElement.currentStyle && (Le = function(t) {
        return t.currentStyle
    }, Ae = function(t, name, i) {
        var left, s, o, l = i || Le(t),
            u = l ? l[name] : undefined,
            style = t.style;
        return null == u && style && style[name] && (u = style[name]), Ue.test(u) && !Pe.test(name) && (left = style.left, (o = (s = t.runtimeStyle) && s.left) && (s.left = t.currentStyle.left), style.left = "fontSize" === name ? "1em" : u, u = style.pixelLeft + "px", style.left = left, o && (s.left = o)), "" === u ? "auto" : u
    }), I.each(["height", "width"], function(t, name) {
        I.cssHooks[name] = {
            get: function(t, i, s) {
                if (i) return 0 === t.offsetWidth && Ne.test(I.css(t, "display")) ? I.swap(t, qe, function() {
                    return getWidthOrHeight(t, name, s)
                }) : getWidthOrHeight(t, name, s)
            },
            set: function(t, value, i) {
                var s = i && Le(t);
                return setPositiveNumber(0, value, i ? augmentWidthOrHeight(t, name, i, I.support.boxSizing && "border-box" === I.css(t, "boxSizing", !1, s), s) : 0)
            }
        }
    }), I.support.opacity || (I.cssHooks.opacity = {
        get: function(t, i) {
            return De.test((i && t.currentStyle ? t.currentStyle.filter : t.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : i ? "1" : ""
        },
        set: function(t, value) {
            var style = t.style,
                currentStyle = t.currentStyle,
                opacity = I.isNumeric(value) ? "alpha(opacity=" + 100 * value + ")" : "",
                filter = currentStyle && currentStyle.filter || style.filter || "";
            style.zoom = 1, (value >= 1 || "" === value) && "" === I.trim(filter.replace(Re, "")) && style.removeAttribute && (style.removeAttribute("filter"), "" === value || currentStyle && !currentStyle.filter) || (style.filter = Re.test(filter) ? filter.replace(Re, opacity) : filter + " " + opacity)
        }
    }), I(function() {
        I.support.reliableMarginRight || (I.cssHooks.marginRight = {
            get: function(t, i) {
                if (i) return I.swap(t, {
                    display: "inline-block"
                }, Ae, [t, "marginRight"])
            }
        }), !I.support.pixelPosition && I.fn.position && I.each(["top", "left"], function(t, i) {
            I.cssHooks[i] = {
                get: function(t, s) {
                    if (s) return s = Ae(t, i), Ue.test(s) ? I(t).position()[i] + "px" : s
                }
            }
        })
    }), I.expr && I.expr.filters && (I.expr.filters.hidden = function(t) {
        return t.offsetWidth <= 0 && t.offsetHeight <= 0 || !I.support.reliableHiddenOffsets && "none" === (t.style && t.style.display || I.css(t, "display"))
    }, I.expr.filters.visible = function(t) {
        return !I.expr.filters.hidden(t)
    }), I.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        I.cssHooks[prefix + suffix] = {
            expand: function(value) {
                for (var t = 0, i = {}, s = "string" == typeof value ? value.split(" ") : [value]; t < 4; t++) i[prefix + Ve[t] + suffix] = s[t] || s[t - 2] || s[0];
                return i
            }
        }, Oe.test(prefix) || (I.cssHooks[prefix + suffix].set = setPositiveNumber)
    });
    var $e = /%20/g,
        Ge = /\[\]$/,
        He = /\r?\n/g,
        je = /^(?:submit|button|image|reset|file)$/i,
        ze = /^(?:input|select|textarea|keygen)/i;
    I.fn.extend({
        serialize: function() {
            return I.param(this.serializeArray())
        },
        serializeArray: function() {
            return this.map(function() {
                var elements = I.prop(this, "elements");
                return elements ? I.makeArray(elements) : this
            }).filter(function() {
                var type = this.type;
                return this.name && !I(this).is(":disabled") && ze.test(this.nodeName) && !je.test(type) && (this.checked || !ve.test(type))
            }).map(function(t, i) {
                var s = I(this).val();
                return null == s ? null : I.isArray(s) ? I.map(s, function(t) {
                    return {
                        name: i.name,
                        value: t.replace(He, "\r\n")
                    }
                }) : {
                    name: i.name,
                    value: s.replace(He, "\r\n")
                }
            }).get()
        }
    }), I.param = function(a, t) {
        var prefix, i = [],
            add = function(key, value) {
                value = I.isFunction(value) ? value() : null == value ? "" : value, i[i.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
            };
        if (t === undefined && (t = I.ajaxSettings && I.ajaxSettings.traditional), I.isArray(a) || a.jquery && !I.isPlainObject(a)) I.each(a, function() {
            add(this.name, this.value)
        });
        else
            for (prefix in a) buildParams(prefix, a[prefix], t, add);
        return i.join("&").replace($e, "+")
    }, I.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(t, name) {
        I.fn[name] = function(data, t) {
            return arguments.length > 0 ? this.on(name, null, data, t) : this.trigger(name)
        }
    }), I.fn.extend({
        hover: function(t, i) {
            return this.mouseenter(t).mouseleave(i || t)
        },
        bind: function(types, data, t) {
            return this.on(types, null, data, t)
        },
        unbind: function(types, t) {
            return this.off(types, null, t)
        },
        delegate: function(selector, types, data, t) {
            return this.on(types, selector, data, t)
        },
        undelegate: function(selector, types, t) {
            return 1 === arguments.length ? this.off(selector, "**") : this.off(types, selector || "**", t)
        }
    });
    var Ye, Ke, We = I.now(),
        Je = /\?/,
        Qe = /#.*$/,
        Xe = /([?&])_=[^&]*/,
        Ze = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
        et = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        tt = /^(?:GET|HEAD)$/,
        it = /^\/\//,
        st = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
        nt = I.fn.load,
        ot = {},
        at = {},
        rt = "*/".concat("*");
    try {
        Ke = location.href
    } catch (t) {
        (Ke = document.createElement("a")).href = "", Ke = Ke.href
    }
    Ye = st.exec(Ke.toLowerCase()) || [], I.fn.load = function(url, t, i) {
        if ("string" != typeof url && nt) return nt.apply(this, arguments);
        var selector, response, type, self = this,
            s = url.indexOf(" ");
        return s >= 0 && (selector = url.slice(s, url.length), url = url.slice(0, s)), I.isFunction(t) ? (i = t, t = undefined) : t && "object" == typeof t && (type = "POST"), self.length > 0 && I.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: t
        }).done(function(responseText) {
            response = arguments, self.html(selector ? I("<div>").append(I.parseHTML(responseText)).find(selector) : responseText)
        }).complete(i && function(t, status) {
            self.each(i, response || [t.responseText, status, t])
        }), this
    }, I.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(t, type) {
        I.fn[type] = function(t) {
            return this.on(type, t)
        }
    }), I.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: Ke,
            type: "GET",
            isLocal: et.test(Ye[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": rt,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": I.parseJSON,
                "text xml": I.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(target, t) {
            return t ? ajaxExtend(ajaxExtend(target, I.ajaxSettings), t) : ajaxExtend(I.ajaxSettings, target)
        },
        ajaxPrefilter: addToPrefiltersOrTransports(ot),
        ajaxTransport: addToPrefiltersOrTransports(at),
        ajax: function(url, options) {
            function done(status, t, i, headers) {
                var p, C, error, response, L, statusText = t;
                2 !== state && (state = 2, l && clearTimeout(l), h = undefined, o = headers || "", D.readyState = status > 0 ? 4 : 0, p = status >= 200 && status < 300 || 304 === status, i && (response = ajaxHandleResponses(m, D, i)), response = ajaxConvert(m, response, D, p), p ? (m.ifModified && ((L = D.getResponseHeader("Last-Modified")) && (I.lastModified[s] = L), (L = D.getResponseHeader("etag")) && (I.etag[s] = L)), 204 === status || "HEAD" === m.type ? statusText = "nocontent" : 304 === status ? statusText = "notmodified" : (statusText = response.state, C = response.data, p = !(error = response.error))) : (error = statusText, !status && statusText || (statusText = "error", status < 0 && (status = 0))), D.status = status, D.statusText = (t || statusText) + "", p ? S.resolveWith(_, [C, statusText, D]) : S.rejectWith(_, [D, statusText, error]), D.statusCode(T), T = undefined, u && g.trigger(p ? "ajaxSuccess" : "ajaxError", [D, m, p ? C : error]), v.fireWith(_, [D, statusText]), u && (g.trigger("ajaxComplete", [D, m]), --I.active || I.event.trigger("ajaxStop")))
            }
            "object" == typeof url && (options = url, url = undefined), options = options || {};
            var t, i, s, o, l, u, h, p, m = I.ajaxSetup({}, options),
                _ = m.context || m,
                g = m.context && (_.nodeType || _.jquery) ? I(_) : I.event,
                S = I.Deferred(),
                v = I.Callbacks("once memory"),
                T = m.statusCode || {},
                C = {},
                L = {},
                state = 0,
                R = "canceled",
                D = {
                    readyState: 0,
                    getResponseHeader: function(key) {
                        var match;
                        if (2 === state) {
                            if (!p)
                                for (p = {}; match = Ze.exec(o);) p[match[1].toLowerCase()] = match[2];
                            match = p[key.toLowerCase()]
                        }
                        return null == match ? null : match
                    },
                    getAllResponseHeaders: function() {
                        return 2 === state ? o : null
                    },
                    setRequestHeader: function(name, value) {
                        var t = name.toLowerCase();
                        return state || (name = L[t] = L[t] || name, C[name] = value), this
                    },
                    overrideMimeType: function(type) {
                        return state || (m.mimeType = type), this
                    },
                    statusCode: function(map) {
                        var code;
                        if (map)
                            if (state < 2)
                                for (code in map) T[code] = [T[code], map[code]];
                            else D.always(map[D.status]);
                        return this
                    },
                    abort: function(statusText) {
                        var t = statusText || R;
                        return h && h.abort(t), done(0, t), this
                    }
                };
            if (S.promise(D).complete = v.add, D.success = D.done, D.error = D.fail, m.url = ((url || m.url || Ke) + "").replace(Qe, "").replace(it, Ye[1] + "//"), m.type = options.method || options.type || m.method || m.type, m.dataTypes = I.trim(m.dataType || "*").toLowerCase().match(A) || [""], null == m.crossDomain && (t = st.exec(m.url.toLowerCase()), m.crossDomain = !(!t || t[1] === Ye[1] && t[2] === Ye[2] && (t[3] || ("http:" === t[1] ? "80" : "443")) === (Ye[3] || ("http:" === Ye[1] ? "80" : "443")))), m.data && m.processData && "string" != typeof m.data && (m.data = I.param(m.data, m.traditional)), inspectPrefiltersOrTransports(ot, m, options, D), 2 === state) return D;
            (u = m.global) && 0 == I.active++ && I.event.trigger("ajaxStart"), m.type = m.type.toUpperCase(), m.hasContent = !tt.test(m.type), s = m.url, m.hasContent || (m.data && (s = m.url += (Je.test(s) ? "&" : "?") + m.data, delete m.data), !1 === m.cache && (m.url = Xe.test(s) ? s.replace(Xe, "$1_=" + We++) : s + (Je.test(s) ? "&" : "?") + "_=" + We++)), m.ifModified && (I.lastModified[s] && D.setRequestHeader("If-Modified-Since", I.lastModified[s]), I.etag[s] && D.setRequestHeader("If-None-Match", I.etag[s])), (m.data && m.hasContent && !1 !== m.contentType || options.contentType) && D.setRequestHeader("Content-Type", m.contentType), D.setRequestHeader("Accept", m.dataTypes[0] && m.accepts[m.dataTypes[0]] ? m.accepts[m.dataTypes[0]] + ("*" !== m.dataTypes[0] ? ", " + rt + "; q=0.01" : "") : m.accepts["*"]);
            for (i in m.headers) D.setRequestHeader(i, m.headers[i]);
            if (m.beforeSend && (!1 === m.beforeSend.call(_, D, m) || 2 === state)) return D.abort();
            R = "abort";
            for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) D[i](m[i]);
            if (h = inspectPrefiltersOrTransports(at, m, options, D)) {
                D.readyState = 1, u && g.trigger("ajaxSend", [D, m]), m.async && m.timeout > 0 && (l = setTimeout(function() {
                    D.abort("timeout")
                }, m.timeout));
                try {
                    state = 1, h.send(C, done)
                } catch (t) {
                    if (!(state < 2)) throw t;
                    done(-1, t)
                }
            } else done(-1, "No Transport");
            return D
        },
        getJSON: function(url, data, t) {
            return I.get(url, data, t, "json")
        },
        getScript: function(url, t) {
            return I.get(url, undefined, t, "script")
        }
    }), I.each(["get", "post"], function(t, method) {
        I[method] = function(url, data, t, type) {
            return I.isFunction(data) && (type = type || t, t = data, data = undefined), I.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: t
            })
        }
    }), I.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(text) {
                return I.globalEval(text), text
            }
        }
    }), I.ajaxPrefilter("script", function(t) {
        t.cache === undefined && (t.cache = !1), t.crossDomain && (t.type = "GET", t.global = !1)
    }), I.ajaxTransport("script", function(t) {
        if (t.crossDomain) {
            var i, head = document.head || I("head")[0] || document.documentElement;
            return {
                send: function(s, o) {
                    (i = document.createElement("script")).async = !0, t.scriptCharset && (i.charset = t.scriptCharset), i.src = t.url, i.onload = i.onreadystatechange = function(t, s) {
                        (s || !i.readyState || /loaded|complete/.test(i.readyState)) && (i.onload = i.onreadystatechange = null, i.parentNode && i.parentNode.removeChild(i), i = null, s || o(200, "success"))
                    }, head.insertBefore(i, head.firstChild)
                },
                abort: function() {
                    i && i.onload(undefined, !0)
                }
            }
        }
    });
    var lt = [],
        ct = /(=)\?(?=&|$)|\?\?/;
    I.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var t = lt.pop() || I.expando + "_" + We++;
            return this[t] = !0, t
        }
    }), I.ajaxPrefilter("json jsonp", function(t, i, s) {
        var o, l, u, h = !1 !== t.jsonp && (ct.test(t.url) ? "url" : "string" == typeof t.data && !(t.contentType || "").indexOf("application/x-www-form-urlencoded") && ct.test(t.data) && "data");
        if (h || "jsonp" === t.dataTypes[0]) return o = t.jsonpCallback = I.isFunction(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, h ? t[h] = t[h].replace(ct, "$1" + o) : !1 !== t.jsonp && (t.url += (Je.test(t.url) ? "&" : "?") + t.jsonp + "=" + o), t.converters["script json"] = function() {
            return u || I.error(o + " was not called"), u[0]
        }, t.dataTypes[0] = "json", l = window[o], window[o] = function() {
            u = arguments
        }, s.always(function() {
            window[o] = l, t[o] && (t.jsonpCallback = i.jsonpCallback, lt.push(o)), u && I.isFunction(l) && l(u[0]), u = l = undefined
        }), "script"
    });
    var ut, dt, ht = 0,
        pt = window.ActiveXObject && function() {
            var key;
            for (key in ut) ut[key](undefined, !0)
        };
    I.ajaxSettings.xhr = window.ActiveXObject ? function() {
        return !this.isLocal && createStandardXHR() || createActiveXHR()
    } : createStandardXHR, dt = I.ajaxSettings.xhr(), I.support.cors = !!dt && "withCredentials" in dt, (dt = I.support.ajax = !!dt) && I.ajaxTransport(function(t) {
        if (!t.crossDomain || I.support.cors) {
            var i;
            return {
                send: function(headers, complete) {
                    var s, o, l = t.xhr();
                    if (t.username ? l.open(t.type, t.url, t.async, t.username, t.password) : l.open(t.type, t.url, t.async), t.xhrFields)
                        for (o in t.xhrFields) l[o] = t.xhrFields[o];
                    t.mimeType && l.overrideMimeType && l.overrideMimeType(t.mimeType), t.crossDomain || headers["X-Requested-With"] || (headers["X-Requested-With"] = "XMLHttpRequest");
                    try {
                        for (o in headers) l.setRequestHeader(o, headers[o])
                    } catch (t) {}
                    l.send(t.hasContent && t.data || null), i = function(o, u) {
                        var status, h, statusText, p;
                        try {
                            if (i && (u || 4 === l.readyState))
                                if (i = undefined, s && (l.onreadystatechange = I.noop, pt && delete ut[s]), u) 4 !== l.readyState && l.abort();
                                else {
                                    p = {}, status = l.status, h = l.getAllResponseHeaders(), "string" == typeof l.responseText && (p.text = l.responseText);
                                    try {
                                        statusText = l.statusText
                                    } catch (t) {
                                        statusText = ""
                                    }
                                    status || !t.isLocal || t.crossDomain ? 1223 === status && (status = 204) : status = p.text ? 200 : 404
                                }
                        } catch (t) {
                            u || complete(-1, t)
                        }
                        p && complete(status, statusText, p, h)
                    }, t.async ? 4 === l.readyState ? setTimeout(i) : (s = ++ht, pt && (ut || (ut = {}, I(window).unload(pt)), ut[s] = i), l.onreadystatechange = i) : i()
                },
                abort: function() {
                    i && i(undefined, !0)
                }
            }
        }
    });
    var _t, gt, St = /^(?:toggle|show|hide)$/,
        ft = new RegExp("^(?:([+-])=|)(" + L + ")([a-z%]*)$", "i"),
        vt = /queueHooks$/,
        yt = [function defaultPrefilter(t, i, s) {
            var o, value, toggle, l, u, h, p = this,
                m = {},
                style = t.style,
                hidden = t.nodeType && isHidden(t),
                _ = I._data(t, "fxshow");
            s.queue || (null == (u = I._queueHooks(t, "fx")).unqueued && (u.unqueued = 0, h = u.empty.fire, u.empty.fire = function() {
                u.unqueued || h()
            }), u.unqueued++, p.always(function() {
                p.always(function() {
                    u.unqueued--, I.queue(t, "fx").length || u.empty.fire()
                })
            })), 1 === t.nodeType && ("height" in i || "width" in i) && (s.overflow = [style.overflow, style.overflowX, style.overflowY], "inline" === I.css(t, "display") && "none" === I.css(t, "float") && (I.support.inlineBlockNeedsLayout && "inline" !== css_defaultDisplay(t.nodeName) ? style.zoom = 1 : style.display = "inline-block")), s.overflow && (style.overflow = "hidden", I.support.shrinkWrapBlocks || p.always(function() {
                style.overflow = s.overflow[0], style.overflowX = s.overflow[1], style.overflowY = s.overflow[2]
            }));
            for (o in i)
                if (value = i[o], St.exec(value)) {
                    if (delete i[o], toggle = toggle || "toggle" === value, value === (hidden ? "hide" : "show")) continue;
                    m[o] = _ && _[o] || I.style(t, o)
                }
            if (!I.isEmptyObject(m)) {
                _ ? "hidden" in _ && (hidden = _.hidden) : _ = I._data(t, "fxshow", {}), toggle && (_.hidden = !hidden), hidden ? I(t).show() : p.done(function() {
                    I(t).hide()
                }), p.done(function() {
                    var i;
                    I._removeData(t, "fxshow");
                    for (i in m) I.style(t, i, m[i])
                });
                for (o in m) l = createTween(hidden ? _[o] : 0, o, p), o in _ || (_[o] = l.start, hidden && (l.end = l.start, l.start = "width" === o || "height" === o ? 1 : 0))
            }
        }],
        Tt = {
            "*": [function(t, value) {
                var i = this.createTween(t, value),
                    target = i.cur(),
                    s = ft.exec(value),
                    o = s && s[3] || (I.cssNumber[t] ? "" : "px"),
                    start = (I.cssNumber[t] || "px" !== o && +target) && ft.exec(I.css(i.elem, t)),
                    scale = 1,
                    l = 20;
                if (start && start[3] !== o) {
                    o = o || start[3], s = s || [], start = +target || 1;
                    do {
                        start /= scale = scale || ".5", I.style(i.elem, t, start + o)
                    } while (scale !== (scale = i.cur() / target) && 1 !== scale && --l)
                }
                return s && (start = i.start = +start || +target || 0, i.unit = o, i.end = s[1] ? start + (s[1] + 1) * s[2] : +s[2]), i
            }]
        };
    I.Animation = I.extend(Animation, {
        tweener: function(t, i) {
            I.isFunction(t) ? (i = t, t = ["*"]) : t = t.split(" ");
            for (var s, index = 0, length = t.length; index < length; index++) s = t[index], Tt[s] = Tt[s] || [], Tt[s].unshift(i)
        },
        prefilter: function(t, i) {
            i ? yt.unshift(t) : yt.push(t)
        }
    }), I.Tween = Tween, Tween.prototype = {
        constructor: Tween,
        init: function(t, options, i, end, s, o) {
            this.elem = t, this.prop = i, this.easing = s || "swing", this.options = options, this.start = this.now = this.cur(), this.end = end, this.unit = o || (I.cssNumber[i] ? "" : "px")
        },
        cur: function() {
            var t = Tween.propHooks[this.prop];
            return t && t.get ? t.get(this) : Tween.propHooks._default.get(this)
        },
        run: function(t) {
            var i, s = Tween.propHooks[this.prop];
            return this.options.duration ? this.pos = i = I.easing[this.easing](t, this.options.duration * t, 0, 1, this.options.duration) : this.pos = i = t, this.now = (this.end - this.start) * i + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), s && s.set ? s.set(this) : Tween.propHooks._default.set(this), this
        }
    }, Tween.prototype.init.prototype = Tween.prototype, Tween.propHooks = {
        _default: {
            get: function(t) {
                var result;
                return null == t.elem[t.prop] || t.elem.style && null != t.elem.style[t.prop] ? (result = I.css(t.elem, t.prop, "")) && "auto" !== result ? result : 0 : t.elem[t.prop]
            },
            set: function(t) {
                I.fx.step[t.prop] ? I.fx.step[t.prop](t) : t.elem.style && (null != t.elem.style[I.cssProps[t.prop]] || I.cssHooks[t.prop]) ? I.style(t.elem, t.prop, t.now + t.unit) : t.elem[t.prop] = t.now
            }
        }
    }, Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(t) {
            t.elem.nodeType && t.elem.parentNode && (t.elem[t.prop] = t.now)
        }
    }, I.each(["toggle", "show", "hide"], function(t, name) {
        var i = I.fn[name];
        I.fn[name] = function(speed, t, s) {
            return null == speed || "boolean" == typeof speed ? i.apply(this, arguments) : this.animate(genFx(name, !0), speed, t, s)
        }
    }), I.fn.extend({
        fadeTo: function(speed, t, i, s) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({
                opacity: t
            }, speed, i, s)
        },
        animate: function(t, speed, i, s) {
            var empty = I.isEmptyObject(t),
                o = I.speed(speed, i, s),
                l = function() {
                    var i = Animation(this, I.extend({}, t), o);
                    (empty || I._data(this, "finish")) && i.stop(!0)
                };
            return l.finish = l, empty || !1 === o.queue ? this.each(l) : this.queue(o.queue, l)
        },
        stop: function(type, t, i) {
            var s = function(t) {
                var stop = t.stop;
                delete t.stop, stop(i)
            };
            return "string" != typeof type && (i = t, t = type, type = undefined), t && !1 !== type && this.queue(type || "fx", []), this.each(function() {
                var t = !0,
                    index = null != type && type + "queueHooks",
                    o = I.timers,
                    data = I._data(this);
                if (index) data[index] && data[index].stop && s(data[index]);
                else
                    for (index in data) data[index] && data[index].stop && vt.test(index) && s(data[index]);
                for (index = o.length; index--;) o[index].elem !== this || null != type && o[index].queue !== type || (o[index].anim.stop(i), t = !1, o.splice(index, 1));
                !t && i || I.dequeue(this, type)
            })
        },
        finish: function(type) {
            return !1 !== type && (type = type || "fx"), this.each(function() {
                var index, data = I._data(this),
                    t = data[type + "queue"],
                    i = data[type + "queueHooks"],
                    s = I.timers,
                    length = t ? t.length : 0;
                for (data.finish = !0, I.queue(this, type, []), i && i.stop && i.stop.call(this, !0), index = s.length; index--;) s[index].elem === this && s[index].queue === type && (s[index].anim.stop(!0), s.splice(index, 1));
                for (index = 0; index < length; index++) t[index] && t[index].finish && t[index].finish.call(this);
                delete data.finish
            })
        }
    }), I.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, t) {
        I.fn[name] = function(speed, i, s) {
            return this.animate(t, speed, i, s)
        }
    }), I.speed = function(speed, t, i) {
        var s = speed && "object" == typeof speed ? I.extend({}, speed) : {
            complete: i || !i && t || I.isFunction(speed) && speed,
            duration: speed,
            easing: i && t || t && !I.isFunction(t) && t
        };
        return s.duration = I.fx.off ? 0 : "number" == typeof s.duration ? s.duration : s.duration in I.fx.speeds ? I.fx.speeds[s.duration] : I.fx.speeds._default, null != s.queue && !0 !== s.queue || (s.queue = "fx"), s.old = s.complete, s.complete = function() {
            I.isFunction(s.old) && s.old.call(this), s.queue && I.dequeue(this, s.queue)
        }, s
    }, I.easing = {
        linear: function(t) {
            return t
        },
        swing: function(t) {
            return .5 - Math.cos(t * Math.PI) / 2
        }
    }, I.timers = [], I.fx = Tween.prototype.init, I.fx.tick = function() {
        var t, i = I.timers,
            s = 0;
        for (_t = I.now(); s < i.length; s++)(t = i[s])() || i[s] !== t || i.splice(s--, 1);
        i.length || I.fx.stop(), _t = undefined
    }, I.fx.timer = function(t) {
        t() && I.timers.push(t) && I.fx.start()
    }, I.fx.interval = 13, I.fx.start = function() {
        gt || (gt = setInterval(I.fx.tick, I.fx.interval))
    }, I.fx.stop = function() {
        clearInterval(gt), gt = null
    }, I.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, I.fx.step = {}, I.expr && I.expr.filters && (I.expr.filters.animated = function(t) {
        return I.grep(I.timers, function(i) {
            return t === i.elem
        }).length
    }), I.fn.offset = function(options) {
        if (arguments.length) return options === undefined ? this : this.each(function(t) {
            I.offset.setOffset(this, options, t)
        });
        var t, i, o = {
                top: 0,
                left: 0
            },
            l = this[0],
            u = l && l.ownerDocument;
        if (u) return t = u.documentElement, I.contains(t, l) ? (typeof l.getBoundingClientRect !== s && (o = l.getBoundingClientRect()), i = getWindow(u), {
            top: o.top + (i.pageYOffset || t.scrollTop) - (t.clientTop || 0),
            left: o.left + (i.pageXOffset || t.scrollLeft) - (t.clientLeft || 0)
        }) : o
    }, I.offset = {
        setOffset: function(t, options, i) {
            var position = I.css(t, "position");
            "static" === position && (t.style.position = "relative");
            var s, o, l = I(t),
                u = l.offset(),
                h = I.css(t, "top"),
                p = I.css(t, "left"),
                m = {},
                _ = {};
            ("absolute" === position || "fixed" === position) && I.inArray("auto", [h, p]) > -1 ? (s = (_ = l.position()).top, o = _.left) : (s = parseFloat(h) || 0, o = parseFloat(p) || 0), I.isFunction(options) && (options = options.call(t, i, u)), null != options.top && (m.top = options.top - u.top + s), null != options.left && (m.left = options.left - u.left + o), "using" in options ? options.using.call(t, m) : l.css(m)
        }
    }, I.fn.extend({
        position: function() {
            if (this[0]) {
                var offsetParent, offset, t = {
                        top: 0,
                        left: 0
                    },
                    i = this[0];
                return "fixed" === I.css(i, "position") ? offset = i.getBoundingClientRect() : (offsetParent = this.offsetParent(), offset = this.offset(), I.nodeName(offsetParent[0], "html") || (t = offsetParent.offset()), t.top += I.css(offsetParent[0], "borderTopWidth", !0), t.left += I.css(offsetParent[0], "borderLeftWidth", !0)), {
                    top: offset.top - t.top - I.css(i, "marginTop", !0),
                    left: offset.left - t.left - I.css(i, "marginLeft", !0)
                }
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var offsetParent = this.offsetParent || o; offsetParent && !I.nodeName(offsetParent, "html") && "static" === I.css(offsetParent, "position");) offsetParent = offsetParent.offsetParent;
                return offsetParent || o
            })
        }
    }), I.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, t) {
        var top = /Y/.test(t);
        I.fn[method] = function(i) {
            return I.access(this, function(i, method, s) {
                var o = getWindow(i);
                if (s === undefined) return o ? t in o ? o[t] : o.document.documentElement[method] : i[method];
                o ? o.scrollTo(top ? I(o).scrollLeft() : s, top ? s : I(o).scrollTop()) : i[method] = s
            }, method, i, arguments.length, null)
        }
    }), I.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        I.each({
            padding: "inner" + name,
            content: type,
            "": "outer" + name
        }, function(t, i) {
            I.fn[i] = function(margin, value) {
                var i = arguments.length && (t || "boolean" != typeof margin),
                    s = t || (!0 === margin || !0 === value ? "margin" : "border");
                return I.access(this, function(t, type, value) {
                    var i;
                    return I.isWindow(t) ? t.document.documentElement["client" + name] : 9 === t.nodeType ? (i = t.documentElement, Math.max(t.body["scroll" + name], i["scroll" + name], t.body["offset" + name], i["offset" + name], i["client" + name])) : value === undefined ? I.css(t, type, s) : I.style(t, type, value, s)
                }, type, i ? margin : undefined, i, null)
            }
        })
    }), I.fn.size = function() {
        return this.length
    }, I.fn.andSelf = I.fn.addBack, "object" == typeof module && module && "object" == typeof module.exports ? module.exports = I : (window.jQuery = window.$ = I, "function" == typeof define && define.hasOwnProperty("amd") && define("jquery", [], function() {
        return I
    }))
}(window),
function() {
    function J(a) {
        i.set(a)
    }

    function Ja(a) {
        if (100 != a.get(qt) && La(ne(a, Q)) % 1e4 >= 100 * oe(a, qt)) throw "abort"
    }

    function Ma(a) {
        if (B(ne(a, At))) throw "abort"
    }

    function Oa() {
        var a = N.location.protocol;
        if ("http:" != a && "https:" != a) throw "abort"
    }

    function Pa(a) {
        try {
            P.navigator.sendBeacon ? J(42) : P.XMLHttpRequest && "withCredentials" in new P.XMLHttpRequest && J(40)
        } catch (t) {}
        a.set(lt, o(a), !0), a.set(be, oe(a, be) + 1);
        var b = [];
        ie.map(function(c, d) {
            if (d.F) {
                var e = a.get(c);
                void 0 != e && e != d.defaultValue && ("boolean" == typeof e && (e *= 1), b.push(d.F + "=" + v("" + e)))
            }
        }), b.push("z=" + ee()), a.set(ye, b.join("&"), !0)
    }

    function Sa(a) {
        var b = ne(a, xt) || V() + "/collect",
            c = ne(a, Ce);
        if (!c && a.get(Te) && (c = "beacon"), c) {
            var d = ne(a, ye),
                e = (e = a.get(ve)) || S;
            "image" == c ? H(b, d, e) : "xhr" == c && j(b, d, e) || "beacon" == c && x(b, d, e) || G(b, d, e)
        } else G(b, ne(a, ye), a.get(ve));
        b = a.get(At), c = (b = K(b)).hitcount, b.hitcount = c ? c + 1 : 1, b = a.get(At), delete K(b).pending_experiments, a.set(ve, S, !0)
    }

    function Hc(a) {
        (P.gaData = P.gaData || {}).expId && a.set(Ze, (P.gaData = P.gaData || {}).expId), (P.gaData = P.gaData || {}).expVar && a.set(et, (P.gaData = P.gaData || {}).expVar);
        var b, c = a.get(At);
        if (c = K(c).pending_experiments) {
            var d = [];
            for (b in c) c.hasOwnProperty(b) && c[b] && d.push(encodeURIComponent(b) + "." + encodeURIComponent(c[b]));
            b = d.join("!")
        } else b = void 0;
        b && a.set(tt, b, !0)
    }

    function cd() {
        if (P.navigator && "preview" == P.navigator.loadPurpose) throw "abort"
    }

    function yd(a) {
        var b = P.gaDevIds;
        h(b) && 0 != b.length && a.set("&did", b.join(","), !0)
    }

    function vb(a) {
        if (!a.get(At)) throw "abort"
    }

    function Ta(a) {
        var b = oe(a, ot);
        if (500 <= b && J(15), "transaction" != (c = ne(a, fe)) && "item" != c) {
            var c = oe(a, rt),
                d = (new Date).getTime(),
                e = oe(a, at);
            if (0 == e && a.set(at, d), 0 < (e = Math.round(2 * (d - e) / 1e3)) && (c = Math.min(c + e, 20), a.set(at, d)), 0 >= c) throw "abort";
            a.set(rt, --c)
        }
        a.set(ot, ++b)
    }

    function X(a, b, c, d) {
        b[a] = function() {
            try {
                return d && J(d), c.apply(this, arguments)
            } catch (t) {
                throw Y("exc", a, t && t.name), t
            }
        }
    }

    function fc() {
        var a, b, c;
        if ((c = (c = P.navigator) ? c.plugins : null) && c.length)
            for (var d = 0; d < c.length && !b; d++) {
                var e = c[d]; - 1 < e.name.indexOf("Shockwave Flash") && (b = e.description)
            }
        if (!b) try {
            b = (a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7")).GetVariable("$version")
        } catch (t) {}
        if (!b) try {
            b = "WIN 6,0,21,0", (a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6")).AllowScriptAccess = "always", b = a.GetVariable("$version")
        } catch (t) {}
        if (!b) try {
            b = (a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash")).GetVariable("$version")
        } catch (t) {}
        return b && (a = b.match(/[\d]+/g)) && 3 <= a.length && (b = a[0] + "." + a[1] + " r" + a[2]), b || void 0
    }

    function Xc(a, b, c) {
        "none" == b && (b = "");
        var d = [],
            e = U(a);
        a = "__utma" == a ? 6 : 2;
        for (var t = 0; t < e.length; t++) {
            var i = ("" + e[t]).split(".");
            i.length >= a && d.push({
                hash: i[0],
                R: e[t],
                O: i
            })
        }
        if (0 != d.length) return 1 == d.length ? d[0] : Zc(b, d) || Zc(c, d) || Zc(null, d) || d[0]
    }

    function Zc(a, b) {
        var c, d;
        null == a ? c = d = 1 : (c = La(a), d = La(m(a, ".") ? a.substring(1) : "." + a));
        for (var e = 0; e < b.length; e++)
            if (b[e].hash == c || b[e].hash == d) return b[e]
    }

    function Ic(a, b) {
        for (var c = new Date, e = (d = P.navigator).plugins || [], c = [a, d.userAgent, c.getTimezoneOffset(), c.getYear(), c.getDate(), c.getHours(), c.getMinutes() + b], d = 0; d < e.length; ++d) c.push(e[d].description);
        return La(c.join("."))
    }

    function sd(a, b) {
        if (b == N.location.hostname) return !1;
        for (var c = 0; c < a.length; c++)
            if (a[c] instanceof RegExp) {
                if (a[c].test(b)) return !0
            } else if (0 <= b.indexOf(a[c])) return !0;
        return !1
    }

    function ud(a) {
        return 0 <= a.indexOf(".") || 0 <= a.indexOf(":")
    }

    function La(a) {
        var c, d, b = 1;
        if (a)
            for (b = 0, d = a.length - 1; 0 <= d; d--) c = a.charCodeAt(d), b = (b << 6 & 268435455) + c + (c << 14), c = 266338304 & b, b = 0 != c ? b ^ c >> 21 : b;
        return b
    }
    var t = function(a) {
        this.w = a || []
    };
    t.prototype.set = function(a) {
        this.w[a] = !0
    }, t.prototype.encode = function() {
        for (var a = [], b = 0; b < this.w.length; b++) this.w[b] && (a[Math.floor(b / 6)] ^= 1 << b % 6);
        for (b = 0; b < a.length; b++) a[b] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".charAt(a[b] || 0);
        return a.join("") + "~"
    };
    var i = new t,
        s = function(a, b) {
            var c = new t(l(a));
            c.set(b), a.set(ct, c.w)
        },
        o = function(a) {
            a = l(a), a = new t(a);
            for (var b = i.w.slice(), c = 0; c < a.w.length; c++) b[c] = b[c] || a.w[c];
            return new t(b).encode()
        },
        l = function(a) {
            return a = a.get(ct), h(a) || (a = []), a
        },
        u = function(a) {
            return "function" == typeof a
        },
        h = function(a) {
            return "[object Array]" == Object.prototype.toString.call(Object(a))
        },
        p = function(a) {
            return void 0 != a && -1 < (a.constructor + "").indexOf("String")
        },
        m = function(a, b) {
            return 0 == a.indexOf(b)
        },
        _ = function(a) {
            return a ? a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "") : ""
        },
        g = function(a) {
            var b = N.createElement("img");
            return b.width = 1, b.height = 1, b.src = a, b
        },
        S = function() {},
        v = function(a) {
            return encodeURIComponent instanceof Function ? encodeURIComponent(a) : (J(28), a)
        },
        T = function(a, b, c, d) {
            try {
                a.addEventListener ? a.addEventListener(b, c, !!d) : a.attachEvent && a.attachEvent("on" + b, c)
            } catch (t) {
                J(27)
            }
        },
        f = /^[\w\-:/.?=&%!]+$/,
        C = function(a, b, c) {
            a && (c ? (c = "", b && f.test(b) && (c = ' id="' + b + '"'), f.test(a) && N.write("<script" + c + ' src="' + a + '"><\/script>')) : (c = N.createElement("script"), c.type = "text/javascript", c.async = !0, c.src = a, b && (c.id = b), (a = N.getElementsByTagName("script")[0]).parentNode.insertBefore(c, a)))
        },
        I = function() {
            return "https:" == N.location.protocol
        },
        E = function(a, b) {
            var c = a.match("(?:&|#|\\?)" + v(b).replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") + "=([^&#]*)");
            return c && 2 == c.length ? c[1] : ""
        },
        L = function() {
            var a = "" + N.location.hostname;
            return 0 == a.indexOf("www.") ? a.substring(4) : a
        },
        A = function(a) {
            var b = N.referrer;
            if (/^https?:\/\//i.test(b)) {
                if (a) return b;
                a = "//" + N.location.hostname;
                var c = b.indexOf(a);
                if (!(5 != c && 6 != c || "/" != (a = b.charAt(c + a.length)) && "?" != a && "" != a && ":" != a)) return;
                return b
            }
        },
        R = function(a, b) {
            if (1 == b.length && null != b[0] && "object" == typeof b[0]) return b[0];
            for (var c = {}, d = Math.min(a.length + 1, b.length), e = 0; e < d; e++) {
                if ("object" == typeof b[e]) {
                    for (var t in b[e]) b[e].hasOwnProperty(t) && (c[t] = b[e][t]);
                    break
                }
                e < a.length && (c[a[e]] = b[e])
            }
            return c
        },
        D = function() {
            this.keys = [], this.values = {}, this.m = {}
        };
    D.prototype.set = function(a, b, c) {
        this.keys.push(a), c ? this.m[":" + a] = b : this.values[":" + a] = b
    }, D.prototype.get = function(a) {
        return this.m.hasOwnProperty(":" + a) ? this.m[":" + a] : this.values[":" + a]
    }, D.prototype.map = function(a) {
        for (var b = 0; b < this.keys.length; b++) {
            var c = this.keys[b],
                d = this.get(c);
            d && a(c, d)
        }
    };
    var P = window,
        N = document,
        O = window,
        B = function(a) {
            var b = O._gaUserPrefs;
            if (b && b.ioo && b.ioo() || a && !0 === O["ga-disable-" + a]) return !0;
            try {
                var c = O.external;
                if (c && c._gaUserPrefs && "oo" == c._gaUserPrefs) return !0
            } catch (t) {}
            return !1
        },
        U = function(a) {
            var b = [],
                c = N.cookie.split(";");
            a = new RegExp("^\\s*" + a + "=\\s*(.*?)\\s*$");
            for (var d = 0; d < c.length; d++) {
                var e = c[d].match(a);
                e && b.push(e[1])
            }
            return b
        },
        M = function(a, b, c, d, e, t) {
            if (!(e = !B(e) && !(k.test(N.location.hostname) || "/" == c && q.test(d)))) return !1;
            if (b && 1200 < b.length && (b = b.substring(0, 1200), J(24)), c = a + "=" + b + "; path=" + c + "; ", t && (c += "expires=" + new Date((new Date).getTime() + t).toGMTString() + "; "), d && "none" != d && (c += "domain=" + d + ";"), d = N.cookie, N.cookie = c, !(d = d != N.cookie)) e: {
                for (a = U(a), d = 0; d < a.length; d++)
                    if (b == a[d]) {
                        d = !0;
                        break e
                    }
                d = !1
            }
            return d
        },
        F = function(a) {
            return v(a).replace(/\(/g, "%28").replace(/\)/g, "%29")
        },
        q = /^(www\.)?google(\.com?)?(\.[a-z]{2})?$/,
        k = /(^|\.)doubleclick\.net$/i,
        V = function() {
            return (me || I() ? "https:" : "http:") + "//www.google-analytics.com"
        },
        $ = function(a) {
            this.name = "len", this.message = a + "-8192"
        },
        G = function(a, b, c) {
            if (c = c || S, 2036 >= b.length) H(a, b, c);
            else {
                if (!(8192 >= b.length)) throw Y("len", b.length), new $(b.length);
                x(a, b, c) || j(a, b, c) || H(a, b, c)
            }
        },
        H = function(a, b, c) {
            var d = g(a + "?" + b);
            d.onload = d.onerror = function() {
                d.onload = null, d.onerror = null, c()
            }
        },
        j = function(a, b, c) {
            var d = P.XMLHttpRequest;
            if (!d) return !1;
            var e = new d;
            return "withCredentials" in e && (e.open("POST", a, !0), e.withCredentials = !0, e.setRequestHeader("Content-Type", "text/plain"), e.onreadystatechange = function() {
                4 == e.readyState && (c(), e = null)
            }, e.send(b), !0)
        },
        x = function(a, b, c) {
            return !!P.navigator.sendBeacon && (!!P.navigator.sendBeacon(a, b) && (c(), !0))
        },
        Y = function(a, b, c) {
            1 <= 100 * Math.random() || B("?") || (a = ["t=error", "_e=" + a, "_v=j47", "sr=1"], b && a.push("_f=" + b), c && a.push("_m=" + v(c.substring(0, 100))), a.push("aip=1"), a.push("z=" + Z()), H(V() + "/collect", a.join("&"), S))
        },
        K = function(a) {
            var b = P.gaData = P.gaData || {};
            return b[a] = b[a] || {}
        },
        W = function() {
            this.M = []
        };
    W.prototype.add = function(a) {
        this.M.push(a)
    }, W.prototype.D = function(a) {
        try {
            for (var b = 0; b < this.M.length; b++) {
                var c = a.get(this.M[b]);
                c && u(c) && c.call(P, a)
            }
        } catch (t) {}(b = a.get(ve)) != S && u(b) && (a.set(ve, S, !0), setTimeout(b, 10))
    };
    var Z = function() {
            return Math.round(2147483647 * Math.random())
        },
        ee = function() {
            try {
                var a = new Uint32Array(1);
                return P.crypto.getRandomValues(a), 2147483647 & a[0]
            } catch (t) {
                return Z()
            }
        },
        te = function() {
            this.data = new D
        },
        ie = new D,
        se = [];
    te.prototype.get = function(a) {
        var b = le(a),
            c = this.data.get(a);
        return b && void 0 == c && (c = u(b.defaultValue) ? b.defaultValue() : b.defaultValue), b && b.Z ? b.Z(this, a, c) : c
    };
    var ne = function(a, b) {
            var c = a.get(b);
            return void 0 == c ? "" : "" + c
        },
        oe = function(a, b) {
            var c = a.get(b);
            return void 0 == c || "" === c ? 0 : 1 * c
        };
    te.prototype.set = function(a, b, c) {
        if (a)
            if ("object" == typeof a)
                for (var d in a) a.hasOwnProperty(d) && ae(this, d, a[d], c);
            else ae(this, a, b, c)
    };
    var ae = function(a, b, c, d) {
            if (void 0 != c) switch (b) {
                case At:
                    Ii.test(c)
            }
            var e = le(b);
            e && e.o ? e.o(a, b, c, d) : a.data.set(b, c, d)
        },
        re = function(a, b, c, d, e) {
            this.name = a, this.F = b, this.Z = d, this.o = e, this.defaultValue = c
        },
        le = function(a) {
            var b = ie.get(a);
            if (!b)
                for (var c = 0; c < se.length; c++) {
                    var d = se[c],
                        e = d[0].exec(a);
                    if (e) {
                        b = d[1](e), ie.set(b.name, b);
                        break
                    }
                }
            return b
        },
        ce = function(a) {
            var b;
            return ie.map(function(c, d) {
                d.F == a && (b = d)
            }), b && b.name
        },
        ue = function(a, b, c, d, e) {
            return a = new re(a, b, c, d, e), ie.set(a.name, a), a.name
        },
        de = function(a, b) {
            se.push([new RegExp("^" + a + "$"), b])
        },
        he = function(a, b, c) {
            return ue(a, b, c, void 0, db)
        },
        db = function() {},
        pe = p(window.GoogleAnalyticsObject) && _(window.GoogleAnalyticsObject) || "ga",
        me = !1,
        _e = he("apiVersion", "v"),
        ge = he("clientVersion", "_v");
    ue("anonymizeIp", "aip");
    var Se = ue("adSenseId", "a"),
        fe = ue("hitType", "t"),
        ve = ue("hitCallback"),
        ye = ue("hitPayload");
    ue("nonInteraction", "ni"), ue("currencyCode", "cu"), ue("dataSource", "ds");
    var Te = ue("useBeacon", void 0, !1),
        Ce = ue("transport");
    ue("sessionControl", "sc", ""), ue("sessionGroup", "sg"), ue("queueTime", "qt");
    var be = ue("_s", "_s");
    ue("screenName", "cd");
    var Ee = ue("location", "dl", ""),
        Ie = ue("referrer", "dr"),
        we = ue("page", "dp", "");
    ue("hostname", "dh");
    var Le = ue("language", "ul"),
        Ae = ue("encoding", "de");
    ue("title", "dt", function() {
        return N.title || void 0
    }), de("contentGroup([0-9]+)", function(a) {
        return new re(a[0], "cg" + a[1])
    });
    var Re = ue("screenColors", "sd"),
        De = ue("screenResolution", "sr"),
        Pe = ue("viewportSize", "vp"),
        Ne = ue("javaEnabled", "je"),
        Oe = ue("flashVersion", "fl");
    ue("campaignId", "ci"), ue("campaignName", "cn"), ue("campaignSource", "cs"), ue("campaignMedium", "cm"), ue("campaignKeyword", "ck"), ue("campaignContent", "cc");
    var Be = ue("eventCategory", "ec"),
        Ue = ue("eventAction", "ea"),
        Me = ue("eventLabel", "el"),
        Fe = ue("eventValue", "ev"),
        qe = ue("socialNetwork", "sn"),
        ke = ue("socialAction", "sa"),
        Ve = ue("socialTarget", "st"),
        xe = ue("l1", "plt"),
        $e = ue("l2", "pdt"),
        Ge = ue("l3", "dns"),
        He = ue("l4", "rrt"),
        je = ue("l5", "srt"),
        ze = ue("l6", "tcp"),
        Ye = ue("l7", "dit"),
        Ke = ue("l8", "clt"),
        We = ue("timingCategory", "utc"),
        Je = ue("timingVar", "utv"),
        Qe = ue("timingLabel", "utl"),
        Xe = ue("timingValue", "utt");
    ue("appName", "an"), ue("appVersion", "av", ""), ue("appId", "aid", ""), ue("appInstallerId", "aiid", ""), ue("exDescription", "exd"), ue("exFatal", "exf");
    var Ze = ue("expId", "xid"),
        et = ue("expVar", "xvar"),
        tt = ue("exp", "exp"),
        it = ue("_utma", "_utma"),
        st = ue("_utmz", "_utmz"),
        nt = ue("_utmht", "_utmht"),
        ot = ue("_hc", void 0, 0),
        at = ue("_ti", void 0, 0),
        rt = ue("_to", void 0, 20);
    de("dimension([0-9]+)", function(a) {
        return new re(a[0], "cd" + a[1])
    }), de("metric([0-9]+)", function(a) {
        return new re(a[0], "cm" + a[1])
    }), ue("linkerParam", void 0, void 0, function Bc(a) {
        var b = Ic(a = a.get(Q), 0);
        return "_ga=1." + v(b + "." + a)
    }, db);
    var lt = ue("usage", "_u"),
        ct = ue("_um");
    ue("forceSSL", void 0, void 0, function() {
        return me
    }, function(a, b, c) {
        J(34), me = !!c
    });
    var ut = ue("_j1", "jid");
    de("\\&(.*)", function(a) {
        var b = new re(a[0], a[1]),
            c = ce(a[0].substring(1));
        return c && (b.Z = function(a) {
            return a.get(c)
        }, b.o = function(a, b, t, i) {
            a.set(c, t, i)
        }, b.F = void 0), b
    });
    var dt = he("_oot"),
        ht = ue("previewTask"),
        pt = ue("checkProtocolTask"),
        _t = ue("validationTask"),
        gt = ue("checkStorageTask"),
        St = ue("historyImportTask"),
        ft = ue("samplerTask"),
        vt = ue("_rlt"),
        yt = ue("buildHitTask"),
        Tt = ue("sendHitTask"),
        Ct = ue("ceTask"),
        bt = ue("devIdTask"),
        Et = ue("timingTask"),
        It = ue("displayFeaturesTask"),
        wt = he("name"),
        Q = he("clientId", "cid"),
        n = he("clientIdTime"),
        Lt = ue("userId", "uid"),
        At = he("trackingId", "tid"),
        Rt = he("cookieName", void 0, "_ga"),
        Dt = he("cookieDomain"),
        Pt = he("cookiePath", void 0, "/"),
        Nt = he("cookieExpires", void 0, 63072e3),
        Ot = he("legacyCookieDomain"),
        Bt = he("legacyHistoryImport", void 0, !0),
        Ut = he("storage", void 0, "cookie"),
        Mt = he("allowLinker", void 0, !1),
        Ft = he("allowAnchor", void 0, !0),
        qt = he("sampleRate", "sf", 100),
        kt = he("siteSpeedSampleRate", void 0, 1),
        Vt = he("alwaysSendReferrer", void 0, !1),
        xt = ue("transportUrl"),
        $t = ue("_r", "_r"),
        Gt = function(a) {
            this.V = a, this.fa = void 0, this.$ = !1, this.oa = void 0, this.ea = 1
        },
        Ht = function(a, b) {
            var c;
            if (a.fa && a.$) return 0;
            if (a.$ = !0, b) {
                if (a.oa && oe(b, a.oa)) return oe(b, a.oa);
                if (0 == b.get(kt)) return 0
            }
            return 0 == a.V ? 0 : (void 0 === c && (c = ee()), 0 == c % a.V ? Math.floor(c / a.V) % a.ea + 1 : 0)
        },
        jt = function(a) {
            var b = Math.min(oe(a, kt), 100);
            return !(La(ne(a, Q)) % 100 >= b)
        },
        zt = function(a) {
            var b = {};
            if (Yt(b) || Kt(b)) {
                var c = b[xe];
                void 0 == c || 1 / 0 == c || isNaN(c) || (0 < c ? (Wt(b, Ge), Wt(b, ze), Wt(b, je), Wt(b, $e), Wt(b, He), Wt(b, Ye), Wt(b, Ke), a(b)) : T(P, "load", function() {
                    zt(a)
                }, !1))
            }
        },
        Yt = function(a) {
            var b = P.performance || P.webkitPerformance;
            if (!(b = b && b.timing)) return !1;
            var c = b.navigationStart;
            return 0 != c && (a[xe] = b.loadEventStart - c, a[Ge] = b.domainLookupEnd - b.domainLookupStart, a[ze] = b.connectEnd - b.connectStart, a[je] = b.responseStart - b.requestStart, a[$e] = b.responseEnd - b.responseStart, a[He] = b.fetchStart - c, a[Ye] = b.domInteractive - c, a[Ke] = b.domContentLoadedEventStart - c, !0)
        },
        Kt = function(a) {
            if (P.top != P) return !1;
            var b = P.external,
                c = b && b.onloadT;
            return b && !b.isValidLoadTime && (c = void 0), 2147483648 < c && (c = void 0), 0 < c && b.setPageReadyTime(), void 0 != c && (a[xe] = c, !0)
        },
        Wt = function(a, b) {
            var c = a[b];
            (isNaN(c) || 1 / 0 == c || 0 > c) && (a[b] = void 0)
        },
        Jt = function(a) {
            return function(b) {
                if ("pageview" == b.get(fe) && !a.I) {
                    a.I = !0;
                    var c = jt(b);
                    b = 0 < E(b.get(Ee), "gclid").length, (c || b) && zt(function(b) {
                        a.send(c ? "timing" : "adtiming", b)
                    })
                }
            }
        },
        Qt = !1,
        Xt = function(a) {
            if ("cookie" == ne(a, Ut)) {
                var b = ne(a, Rt),
                    c = ti(a),
                    d = ni(ne(a, Pt)),
                    e = si(ne(a, Dt)),
                    t = 1e3 * oe(a, Nt),
                    i = ne(a, At);
                if ("auto" != e) M(b, c, d, e, i, t) && (Qt = !0);
                else {
                    J(32);
                    var s;
                    if (c = [], 4 != (e = L().split(".")).length || (s = e[e.length - 1], parseInt(s, 10) != s)) {
                        for (s = e.length - 2; 0 <= s; s--) c.push(e.slice(s).join("."));
                        c.push("none"), s = c
                    } else s = ["none"];
                    for (var o = 0; o < s.length; o++)
                        if (e = s[o], a.data.set(Dt, e), c = ti(a), M(b, c, d, e, i, t)) return void(Qt = !0);
                    a.data.set(Dt, "auto")
                }
            }
        },
        Zt = function(a) {
            if ("cookie" == ne(a, Ut) && !Qt && (Xt(a), !Qt)) throw "abort"
        },
        ei = function(a) {
            if (a.get(Bt)) {
                var b = ne(a, Dt),
                    c = ne(a, Ot) || L(),
                    d = Xc("__utma", c, b);
                d && (J(19), a.set(nt, (new Date).getTime(), !0), a.set(it, d.R), (b = Xc("__utmz", c, b)) && d.hash == b.hash && a.set(st, b.R))
            }
        },
        ti = function(a) {
            var b = F(ne(a, Q)),
                c = si(ne(a, Dt)).split(".").length;
            return 1 < (a = oi(ne(a, Pt))) && (c += "-" + a), ["GA1", c, b].join(".")
        },
        ii = function(a, b, c) {
            for (var t, d = [], e = [], i = 0; i < a.length; i++) {
                var s = a[i];
                s.H[c] == b ? d.push(s) : void 0 == t || s.H[c] < t ? (e = [s], t = s.H[c]) : s.H[c] == t && e.push(s)
            }
            return 0 < d.length ? d : e
        },
        si = function(a) {
            return 0 == a.indexOf(".") ? a.substr(1) : a
        },
        ni = function(a) {
            return a ? (1 < a.length && a.lastIndexOf("/") == a.length - 1 && (a = a.substr(0, a.length - 1)), 0 != a.indexOf("/") && (a = "/" + a), a) : "/"
        },
        oi = function(a) {
            return "/" == (a = ni(a)) ? 1 : a.split("/").length
        },
        ai = new RegExp(/^https?:\/\/([^\/:]+)/),
        ri = /(.*)([?&#])(?:_ga=[^&#]*)(?:&?)(.*)/,
        li = function(a) {
            J(48), this.target = a, this.T = !1
        };
    li.prototype.ca = function(a, b) {
        if (a.tagName) {
            if ("a" == a.tagName.toLowerCase()) return void(a.href && (a.href = ci(this, a.href, b)));
            if ("form" == a.tagName.toLowerCase()) return ui(this, a)
        }
        if ("string" == typeof a) return ci(this, a, b)
    };
    var ci = function(a, b, c) {
            (d = ri.exec(b)) && 3 <= d.length && (b = d[1] + (d[3] ? d[2] + d[3] : "")), a = a.target.get("linkerParam");
            var e = b.indexOf("?"),
                d = b.indexOf("#");
            return c ? b += (-1 == d ? "#" : "&") + a : (c = -1 == e ? "?" : "&", b = -1 == d ? b + (c + a) : b.substring(0, d) + c + a + b.substring(d)), b = b.replace(/&+_ga=/, "&_ga=")
        },
        ui = function(a, b) {
            if (b && b.action) {
                var c = a.target.get("linkerParam").split("=")[1];
                if ("get" == b.method.toLowerCase()) {
                    for (var d = b.childNodes || [], e = 0; e < d.length; e++)
                        if ("_ga" == d[e].name) return void d[e].setAttribute("value", c);
                    (d = N.createElement("input")).setAttribute("type", "hidden"), d.setAttribute("name", "_ga"), d.setAttribute("value", c), b.appendChild(d)
                } else "post" == b.method.toLowerCase() && (b.action = ci(a, b.action))
            }
        };
    li.prototype.S = function(a, b, c) {
        function d(c) {
            try {
                var d;
                e: {
                    var t = (c = c || P.event).target || c.srcElement;
                    for (c = 100; t && 0 < c;) {
                        if (t.href && t.nodeName.match(/^a(?:rea)?$/i)) {
                            d = t;
                            break e
                        }
                        t = t.parentNode, c--
                    }
                    d = {}
                }("http:" == d.protocol || "https:" == d.protocol) && sd(a, d.hostname || "") && d.href && (d.href = ci(e, d.href, b))
            } catch (t) {
                J(26)
            }
        }
        var e = this;
        this.T || (this.T = !0, T(N, "mousedown", d, !1), T(N, "keyup", d, !1)), c && T(N, "submit", function(b) {
            if (b = b || P.event, (b = b.target || b.srcElement) && b.action) {
                var c = b.action.match(ai);
                c && sd(a, c[1]) && ui(e, b)
            }
        })
    };
    var di, hi = /^(GTM|OPT)-[A-Z0-9]+$/,
        pi = /;_gaexp=[^;]*/g,
        r = /;((__utma=)|([^;=]+=GAX?\d+\.))[^;]*/g,
        mi = function(a) {
            function b(a, b) {
                b && (c += "&" + a + "=" + v(b))
            }
            var c = "https://www.google-analytics.com/gtm/js?id=" + v(a.id);
            return "dataLayer" != a.B && b("l", a.B), b("t", a.target), b("cid", a.ja), b("cidt", a.ka), b("gac", a.la), b("aip", a.ia), a.na && b("m", "sync"), b("cycle", a.G), c
        },
        _i = function(a, b, c) {
            this.U = ut, this.aa = b, (b = c) || (b = (b = ne(a, wt)) && "t0" != b ? yi.test(b) ? "_gat_" + F(ne(a, At)) : "_gat_" + F(b) : "_gat"), this.Y = b, Ht(new Gt(100), a) && (J(30), this.pa = !0)
        },
        gi = function(a, b) {
            var c = b.get(yt);
            b.set(yt, function(b) {
                Si(a, b);
                var d = c(b);
                return fi(a, b), d
            });
            var d = b.get(Tt);
            b.set(Tt, function(b) {
                var c = d(b);
                return vi(a, b), c
            })
        },
        Si = function(a, b) {
            b.get(a.U) || ("1" == U(a.Y)[0] ? b.set(a.U, "", !0) : b.set(a.U, "" + Z(), !0))
        },
        fi = function(a, b) {
            if (b.get(a.U)) {
                var c = 6e5;
                a.pa && (c /= 10), M(a.Y, "1", b.get(Pt), b.get(Dt), b.get(At), c)
            }
        },
        vi = function(a, b) {
            if (b.get(a.U)) {
                var c = new D,
                    d = function(a) {
                        le(a).F && c.set(le(a).F, b.get(a))
                    };
                d(_e), d(ge), d(At), d(Q), d(Lt), d(a.U), c.set(le(lt).F, o(b));
                var e = a.aa;
                c.map(function(a, b) {
                    e += v(a) + "=", e += v("" + b) + "&"
                }), e += "z=" + Z(), g(e), b.set(a.U, "", !0)
            }
        },
        yi = /^gtm\d+$/,
        Ti = function(a, b) {
            var c = a.b;
            if (!c.get("dcLoaded")) {
                s(c, 29);
                var d;
                (b = b || {})[Rt] && (d = F(b[Rt])), d = new _i(c, "https://stats.g.doubleclick.net/r/collect?t=dc&aip=1&_r=3&", d), gi(d, c), c.set("dcLoaded", !0)
            }
        },
        Ci = function(a) {
            if (!a.get("dcLoaded") && "cookie" == a.get(Ut)) {
                s(a, 51);
                var b = new _i(a);
                Si(b, a), fi(b, a), a.get(b.U) && (a.set($t, 1, !0), a.set(xt, V() + "/r/collect", !0))
            }
        },
        bi = function() {
            var a = P.gaGlobal = P.gaGlobal || {};
            return a.hid = a.hid || Z()
        },
        Ei = function(a, b, c) {
            if (!di) {
                var d;
                d = N.location.hash;
                var e = P.name,
                    t = /^#?gaso=([^&]*)/;
                (e = (d = (d = d && d.match(t) || e && e.match(t)) ? d[1] : U("GASO")[0] || "") && d.match(/^(?:!([-0-9a-z.]{1,40})!)?([-.\w]{10,1200})$/i)) && (M("GASO", "" + d, c, b, a, 0), window._udo || (window._udo = b), window._utcp || (window._utcp = c), a = e[1], C("https://www.google.com/analytics/web/inpage/pub/inpage.js?" + (a ? "prefix=" + a + "&" : "") + Z(), "_gasojs")), di = !0
            }
        },
        Ii = /^(UA|YT|MO|GP)-(\d+)-(\d+)$/,
        wi = function(a) {
            function b(a, b) {
                d.b.data.set(a, b)
            }

            function c(a, c) {
                b(a, c), d.filters.add(a)
            }
            var d = this;
            this.b = new te, this.filters = new W, b(wt, a[wt]), b(At, _(a[At])), b(Rt, a[Rt]), b(Dt, a[Dt] || L()), b(Pt, a[Pt]), b(Nt, a[Nt]), b(Ot, a[Ot]), b(Bt, a[Bt]), b(Mt, a[Mt]), b(Ft, a[Ft]), b(qt, a[qt]), b(kt, a[kt]), b(Vt, a[Vt]), b(Ut, a[Ut]), b(Lt, a[Lt]), b(n, a[n]), b(_e, 1), b(ge, "j47"), c(dt, Ma), c(ht, cd), c(pt, Oa), c(_t, vb), c(gt, Zt), c(St, ei), c(ft, Ja), c(vt, Ta), c(Ct, Hc), c(bt, yd), c(It, Ci), c(yt, Pa), c(Tt, Sa), c(Et, Jt(this)), Li(this.b, a[Q]), Ai(this.b), this.b.set(Se, bi()), Ei(this.b.get(At), this.b.get(Dt), this.b.get(Pt))
        },
        Li = function(a, b) {
            if ("cookie" == ne(a, Ut)) {
                Qt = !1;
                var c;
                e: {
                    var d = U(ne(a, Rt));
                    if (d && !(1 > d.length)) {
                        c = [];
                        for (var e = 0; e < d.length; e++) {
                            var t, i = (t = d[e].split(".")).shift();
                            ("GA1" == i || "1" == i) && 1 < t.length ? (1 == (i = t.shift().split("-")).length && (i[1] = "1"), i[0] *= 1, i[1] *= 1, t = {
                                H: i,
                                s: t.join(".")
                            }) : t = void 0, t && c.push(t)
                        }
                        if (1 == c.length) {
                            J(13), c = c[0].s;
                            break e
                        }
                        if (0 != c.length) {
                            if (J(14), d = si(ne(a, Dt)).split(".").length, 1 == (c = ii(c, d, 0)).length) {
                                c = c[0].s;
                                break e
                            }
                            d = oi(ne(a, Pt)), c = (c = ii(c, d, 1))[0] && c[0].s;
                            break e
                        }
                        J(12)
                    }
                    c = void 0
                }
                c || (c = ne(a, Dt), d = ne(a, Ot) || L(), void 0 != (c = Xc("__utma", d, c)) ? (J(10), c = c.O[1] + "." + c.O[2]) : c = void 0), c && (a.data.set(Q, c), Qt = !0)
            }
            if (c = a.get(Ft), (e = E(N.location[c ? "href" : "search"], "_ga")) && (a.get(Mt) ? -1 == (c = e.indexOf(".")) ? J(22) : (d = e.substring(c + 1), "1" != e.substring(0, c) ? J(22) : -1 == (c = d.indexOf(".")) ? J(22) : (e = d.substring(0, c), c = d.substring(c + 1), e != Ic(c, 0) && e != Ic(c, -1) && e != Ic(c, -2) ? J(23) : (J(11), a.data.set(Q, c)))) : J(21)), b && (J(9), a.data.set(Q, v(b))), !a.get(Q))
                if (c = (c = P.gaGlobal && P.gaGlobal.vid) && -1 != c.search(/^(?:utma\.)?\d+\.\d+$/) ? c : void 0) J(17), a.data.set(Q, c);
                else {
                    for (J(8), d = (c = P.navigator.userAgent + (N.cookie ? N.cookie : "") + (N.referrer ? N.referrer : "")).length, e = P.history.length; 0 < e;) c += e-- ^ d++;
                    a.data.set(Q, [Z() ^ 2147483647 & La(c), Math.round((new Date).getTime() / 1e3)].join("."))
                }
            Xt(a)
        },
        Ai = function(a) {
            var b = P.navigator,
                c = P.screen,
                d = N.location;
            if (a.set(Ie, A(a.get(Vt))), d) {
                var e = d.pathname || "";
                "/" != e.charAt(0) && (J(31), e = "/" + e), a.set(Ee, d.protocol + "//" + d.hostname + e + d.search)
            }
            c && a.set(De, c.width + "x" + c.height), c && a.set(Re, c.colorDepth + "-bit");
            var c = N.documentElement,
                t = (e = N.body) && e.clientWidth && e.clientHeight,
                i = [];
            if (c && c.clientWidth && c.clientHeight && ("CSS1Compat" === N.compatMode || !t) ? i = [c.clientWidth, c.clientHeight] : t && (i = [e.clientWidth, e.clientHeight]), c = 0 >= i[0] || 0 >= i[1] ? "" : i.join("x"), a.set(Pe, c), a.set(Oe, fc()), a.set(Ae, N.characterSet || N.charset), a.set(Ne, b && "function" == typeof b.javaEnabled && b.javaEnabled() || !1), a.set(Le, (b && (b.language || b.browserLanguage) || "").toLowerCase()), d && a.get(Ft) && (b = N.location.hash)) {
                for (b = b.split(/[?&#]+/), d = [], c = 0; c < b.length; ++c)(m(b[c], "utm_id") || m(b[c], "utm_campaign") || m(b[c], "utm_source") || m(b[c], "utm_medium") || m(b[c], "utm_term") || m(b[c], "utm_content") || m(b[c], "gclid") || m(b[c], "dclid") || m(b[c], "gclsrc")) && d.push(b[c]);
                0 < d.length && (b = "#" + d.join("&"), a.set(Ee, a.get(Ee) + b))
            }
        };
    wi.prototype.get = function(a) {
        return this.b.get(a)
    }, wi.prototype.set = function(a, b) {
        this.b.set(a, b)
    };
    var Ri = {
        pageview: [we],
        event: [Be, Ue, Me, Fe],
        social: [qe, ke, Ve],
        timing: [We, Je, Xe, Qe]
    };
    wi.prototype.send = function(a) {
        if (!(1 > arguments.length)) {
            var b, c;
            "string" == typeof arguments[0] ? (b = arguments[0], c = [].slice.call(arguments, 1)) : (b = arguments[0] && arguments[0][fe], c = arguments), b && (c = R(Ri[b] || [], c), c[fe] = b, this.b.set(c, void 0, !0), this.filters.D(this.b), this.b.data.m = {})
        }
    }, wi.prototype.ma = function(a, b) {
        var c = this;
        Fi(a, c, b) || (qi(a, function() {
            Fi(a, c, b)
        }), y(String(c.get(wt)), a, void 0, b, !0))
    };
    var Di, Pi, Ni, Oi, Bi = function(a) {
            return "prerender" != N.visibilityState && (a(), !0)
        },
        z = function(a) {
            if (!Bi(a)) {
                J(16);
                var b = !1,
                    c = function() {
                        if (!b && Bi(a)) {
                            b = !0;
                            var d = c,
                                e = N;
                            e.removeEventListener ? e.removeEventListener("visibilitychange", d, !1) : e.detachEvent && e.detachEvent("onvisibilitychange", d)
                        }
                    };
                T(N, "visibilitychange", c)
            }
        },
        Ui = /^(?:(\w+)\.)?(?:(\w+):)?(\w+)$/,
        Mi = function(a) {
            if (u(a[0])) this.u = a[0];
            else {
                var b = Ui.exec(a[0]);
                if (null != b && 4 == b.length && (this.c = b[1] || "t0", this.K = b[2] || "", this.C = b[3], this.a = [].slice.call(a, 1), this.K || (this.A = "create" == this.C, this.i = "require" == this.C, this.g = "provide" == this.C, this.ba = "remove" == this.C), this.i && (3 <= this.a.length ? (this.X = this.a[1], this.W = this.a[2]) : this.a[1] && (p(this.a[1]) ? this.X = this.a[1] : this.W = this.a[1]))), b = a[1], a = a[2], !this.C) throw "abort";
                if (this.i && (!p(b) || "" == b)) throw "abort";
                if (this.g && (!p(b) || "" == b || !u(a))) throw "abort";
                if (ud(this.c) || ud(this.K)) throw "abort";
                if (this.g && "t0" != this.c) throw "abort"
            }
        };
    Di = new D, Ni = new D, Oi = new D, Pi = {
        ec: 45,
        ecommerce: 46,
        linkid: 47
    };
    var Fi = function(a, b, c) {
            b == Gi || b.get(wt);
            var d = Di.get(a);
            return !!u(d) && (b.plugins_ = b.plugins_ || new D, !!b.plugins_.get(a) || (b.plugins_.set(a, new d(b, c || {})), !0))
        },
        y = function(a, b, c, d, e) {
            if (!u(Di.get(b)) && !Ni.get(b)) {
                if (Pi.hasOwnProperty(b) && J(Pi[b]), hi.test(b)) {
                    if (J(52), !(a = Gi.j(a))) return !0;
                    d = {
                        id: b,
                        B: (c = d || {}).dataLayer || "dataLayer",
                        ia: !!a.get("anonymizeIp"),
                        na: e,
                        G: !1
                    }, a.get("&gtm") == b && (d.G = !0);
                    var t = String(a.get("name"));
                    "t0" != t && (d.target = t), B(String(a.get("trackingId"))) || (d.ja = String(a.get(Q)), d.ka = Number(a.get(n)), a = c.palindrome ? r : pi, a = (a = N.cookie.replace(/^|(; +)/g, ";").match(a)) ? a.sort().join("").substring(1) : void 0, d.la = a), a = d.B, c = (new Date).getTime(), P[a] = P[a] || [], c = {
                        "gtm.start": c
                    }, e || (c.event = "gtm.js"), P[a].push(c), c = mi(d)
                }!c && Pi.hasOwnProperty(b) ? (J(39), c = b + ".js") : J(43), c && (c && 0 <= c.indexOf("/") || (c = (me || I() ? "https:" : "http:") + "//www.google-analytics.com/plugins/ua/" + c), d = xi(c), a = d.protocol, c = N.location.protocol, ("https:" == a || a == c || ("http:" != a ? 0 : "http:" == c)) && Vi(d) && (C(d.url, void 0, e), Ni.set(b, !0)))
            }
        },
        qi = function(a, b) {
            var c = Oi.get(a) || [];
            c.push(b), Oi.set(a, c)
        },
        ki = function(a, b) {
            Di.set(a, b);
            for (var c = Oi.get(a) || [], d = 0; d < c.length; d++) c[d]();
            Oi.set(a, [])
        },
        Vi = function(a) {
            var b = xi(N.location.href);
            return !!m(a.url, "https://www.google-analytics.com/gtm/js?id=") || !(a.query || 0 <= a.url.indexOf("?") || 0 <= a.path.indexOf("://")) && (a.host == b.host && a.port == b.port || (b = "http:" == a.protocol ? 80 : 443, !("www.google-analytics.com" != a.host || (a.port || b) != b || !m(a.path, "/plugins/"))))
        },
        xi = function(a) {
            function b(a) {
                var b = (a.hostname || "").split(":")[0].toLowerCase(),
                    c = (a.protocol || "").toLowerCase(),
                    c = 1 * a.port || ("http:" == c ? 80 : "https:" == c ? 443 : "");
                return a = a.pathname || "", m(a, "/") || (a = "/" + a), [b, "" + c, a]
            }
            var c = N.createElement("a");
            c.href = N.location.href;
            var d = (c.protocol || "").toLowerCase(),
                e = b(c),
                t = c.search || "",
                i = d + "//" + e[0] + (e[1] ? ":" + e[1] : "");
            return m(a, "//") ? a = d + a : m(a, "/") ? a = i + a : !a || m(a, "?") ? a = i + e[2] + (a || t) : 0 > a.split("/")[0].indexOf(":") && (a = i + e[2].substring(0, e[2].lastIndexOf("/")) + "/" + a), c.href = a, d = b(c), {
                protocol: (c.protocol || "").toLowerCase(),
                host: d[0],
                port: d[1],
                path: d[2],
                query: c.search || "",
                url: a || ""
            }
        },
        $i = {
            ga: function() {
                $i.f = []
            }
        };
    $i.ga(), $i.D = function(a) {
        var b = $i.J.apply($i, arguments),
            b = $i.f.concat(b);
        for ($i.f = []; 0 < b.length && !$i.v(b[0]) && (b.shift(), !(0 < $i.f.length)););
        $i.f = $i.f.concat(b)
    }, $i.J = function(a) {
        for (var b = [], c = 0; c < arguments.length; c++) try {
            var d = new Mi(arguments[c]);
            d.g ? ki(d.a[0], d.a[1]) : (d.i && (d.ha = y(d.c, d.a[0], d.X, d.W)), b.push(d))
        } catch (t) {}
        return b
    }, $i.v = function(a) {
        try {
            if (a.u) a.u.call(P, Gi.j("t0"));
            else {
                var b = a.c == pe ? Gi : Gi.j(a.c);
                if (a.A) "t0" != a.c || Gi.create.apply(Gi, a.a);
                else if (a.ba) Gi.remove(a.c);
                else if (b)
                    if (a.i) {
                        if (a.ha && (a.ha = y(a.c, a.a[0], a.X, a.W)), !Fi(a.a[0], b, a.W)) return !0
                    } else if (a.K) {
                    var c = a.C,
                        d = a.a,
                        e = b.plugins_.get(a.K);
                    e[c].apply(e, d)
                } else b[a.C].apply(b, a.a)
            }
        } catch (t) {}
    };
    var Gi = function(a) {
        J(1), $i.D.apply($i, [arguments])
    };
    Gi.h = {}, Gi.P = [], Gi.L = 0, Gi.answer = 42;
    var Hi = [At, Dt, wt];
    Gi.create = function(a) {
        var b = R(Hi, [].slice.call(arguments));
        b[wt] || (b[wt] = "t0");
        var c = "" + b[wt];
        return Gi.h[c] ? Gi.h[c] : (b = new wi(b), Gi.h[c] = b, Gi.P.push(b), b)
    }, Gi.remove = function(a) {
        for (var b = 0; b < Gi.P.length; b++)
            if (Gi.P[b].get(wt) == a) {
                Gi.P.splice(b, 1), Gi.h[a] = null;
                break
            }
    }, Gi.j = function(a) {
        return Gi.h[a]
    }, Gi.getAll = function() {
        return Gi.P.slice(0)
    }, Gi.N = function() {
        "ga" != pe && J(49);
        var a = P[pe];
        if (!a || 42 != a.answer) {
            if (Gi.L = a && a.l, Gi.loaded = !0, X("create", b = P[pe] = Gi, b.create), X("remove", b, b.remove), X("getByName", b, b.j, 5), X("getAll", b, b.getAll, 6), b = wi.prototype, X("get", b, b.get, 7), X("set", b, b.set, 4), X("send", b, b.send), X("requireSync", b, b.ma), b = te.prototype, X("get", b, b.get), X("set", b, b.set), !I() && !me) {
                e: {
                    for (var b = N.getElementsByTagName("script"), c = 0; c < b.length && 100 > c; c++) {
                        var d = b[c].src;
                        if (d && 0 == d.indexOf("https://www.google-analytics.com/analytics")) {
                            J(33), b = !0;
                            break e
                        }
                    }
                    b = !1
                }
                b && (me = !0)
            }
            I() || me || !Ht(new Gt(1e4)) || (J(36), me = !0), (P.gaplugins = P.gaplugins || {}).Linker = li, b = li.prototype, ki("linker", li), X("decorate", b, b.ca, 20), X("autoLink", b, b.S, 25), ki("displayfeatures", Ti), ki("adfeatures", Ti), a = a && a.q, h(a) ? $i.D.apply(Gi, a) : J(50)
        }
    }, Gi.da = function() {
        for (var a = Gi.getAll(), b = 0; b < a.length; b++) a[b].get(wt)
    };
    var ji = Gi.N,
        zi = P[pe];
    zi && zi.r ? ji() : z(ji), z(function() {
        $i.D(["provide", "render", S])
    })
}(window),
function(t) {
    t.fn.circliful = function(options, i) {
        var s = t.extend({
            startdegree: 0,
            fgcolor: "#556b2f",
            bgcolor: "#eee",
            fill: !1,
            width: 15,
            dimension: 200,
            fontsize: 15,
            percent: 50,
            animationstep: 1,
            iconsize: "20px",
            iconcolor: "#999",
            border: "default",
            complete: null,
            bordersize: 10
        }, options);
        return this.each(function() {
            function addCircleText(i, s, lineHeight) {
                t("<span></span>").appendTo(i).addClass(s).html(text).prepend(icon).css({
                    "line-height": lineHeight + "px",
                    "font-size": o.fontsize + "px"
                })
            }

            function addInfoText(i, s) {
                t("<span></span>").appendTo(i).addClass("circle-info-half").css("line-height", o.dimension * s + "px").text(info)
            }

            function animate(i) {
                context.clearRect(0, 0, canvas.width, canvas.height), context.beginPath(), context.arc(x, y, m, g, _, !1), context.lineWidth = o.width + 1, context.strokeStyle = o.bgcolor, context.stroke(), fill && (context.fillStyle = o.fill, context.fill()), context.beginPath(), context.arc(x, y, m, -C + L, T * i - C + L, !1), "outline" == o.border ? context.lineWidth = o.width + o.bordersize : "inline" == o.border && (context.lineWidth = o.width - o.bordersize), context.strokeStyle = o.fgcolor, context.stroke(), S < l && (S += v, requestAnimationFrame(function() {
                    animate(Math.min(S, l) / 100)
                }, u)), S == l && I && void 0 !== options && t.isFunction(options.complete) && (options.complete(), I = !1)
            }
            var text, info, i = ["fgcolor", "bgcolor", "fill", "width", "dimension", "fontsize", "animationstep", "endPercent", "icon", "iconcolor", "iconsize", "border", "startdegree", "bordersize"],
                o = {
                    fgcolor: "",
                    bgcolor: "",
                    fill: "",
                    width: "",
                    dimension: "",
                    fontsize: "",
                    animationstep: 0,
                    endPercent: "",
                    icon: "",
                    iconcolor: "",
                    iconsize: "",
                    border: "",
                    startdegree: "",
                    bordersize: "",
                    percent: ""
                },
                icon = "",
                l = 0,
                u = t(this),
                fill = !1;
            if (u.addClass("circliful"), function checkDataAttributes(l) {
                    t.each(i, function(index, i) {
                        void 0 != l.data(i) ? o[i] = l.data(i) : o[i] = t(s).attr(i), "fill" == i && void 0 != l.data("fill") && (fill = !0)
                    })
                }(u), void 0 != u.data("text") && (text = u.data("text"), void 0 != u.data("icon") && (icon = t("<i></i>").addClass("fa " + t(this).data("icon")).css({
                    color: o.iconcolor,
                    "font-size": o.iconsize
                })), void 0 != u.data("type") && "half" == t(this).data("type") ? addCircleText(u, "circle-text-half", o.dimension / 1.45) : addCircleText(u, "circle-text", o.dimension)), void 0 != t(this).data("total") && void 0 != t(this).data("part")) {
                var total = t(this).data("total") / 100;
                (t(this).data("part") / total / 100).toFixed(3), l = (t(this).data("part") / total).toFixed(3)
            } else void 0 != t(this).data("percent") ? (t(this).data("percent") / 100, l = t(this).data("percent")) : s.percent / 100;
            void 0 != t(this).data("info") && (info = t(this).data("info"), void 0 != t(this).data("type") && "half" == t(this).data("type") ? addInfoText(u, .9) : addInfoText(u, 1.25)), t(this).width(o.dimension + "px");
            var size = o.dimension,
                canvas = t("<canvas></canvas>").attr({
                    width: size,
                    height: size
                }).appendTo(t(this)).get(0),
                context = canvas.getContext("2d"),
                h = window.devicePixelRatio;
            if (h) {
                var p = t(canvas);
                p.css("width", size), p.css("height", size), p.attr("width", size * h), p.attr("height", size * h), context.scale(h, h)
            }
            t(canvas).parent();
            var x = size / 2,
                y = size / 2,
                m = (o.percent, Math.PI, size / 2.5),
                _ = 2.3 * Math.PI,
                g = 0,
                S = 0 === o.animationstep ? l : 0,
                v = Math.max(o.animationstep, 0),
                T = 2 * Math.PI,
                C = Math.PI / 2,
                I = !0,
                L = o.startdegree / 180 * Math.PI;
            void 0 != t(this).data("type") && "half" == t(this).data("type") && (_ = 2 * Math.PI, g = 3.13, T = Math.PI, C = Math.PI / .996), void 0 != t(this).data("type") && "angle" == t(this).data("type") && (_ = 2.25 * Math.PI, g = 2.4, T = 1.53 + Math.PI, C = .73 + Math.PI / .996), animate(S / 100)
        })
    }
}(jQuery),
function(t) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], t) : t(jQuery)
}(function(t) {
    "use strict";
    var i = window.Slick || {};
    (i = function() {
        var i = 0;
        return function Slick(s, o) {
            var l, u = this;
            u.defaults = {
                accessibility: !0,
                adaptiveHeight: !1,
                appendArrows: t(s),
                appendDots: t(s),
                arrows: !0,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: !1,
                autoplaySpeed: 3e3,
                centerMode: !1,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(i, s) {
                    return t('<button type="button" data-role="none" role="button" tabindex="0" />').text(s + 1)
                },
                dots: !1,
                dotsClass: "slick-dots",
                draggable: !0,
                easing: "linear",
                edgeFriction: .35,
                fade: !1,
                focusOnSelect: !1,
                infinite: !0,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: !1,
                pauseOnHover: !0,
                pauseOnFocus: !0,
                pauseOnDotsHover: !1,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: !1,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: !0,
                swipeToSlide: !1,
                touchMove: !0,
                touchThreshold: 5,
                useCSS: !0,
                useTransform: !0,
                variableWidth: !1,
                vertical: !1,
                verticalSwiping: !1,
                waitForAnimate: !0,
                zIndex: 1e3
            }, u.initials = {
                animating: !1,
                dragging: !1,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: !1,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: !1,
                unslicked: !1
            }, t.extend(u, u.initials), u.activeBreakpoint = null, u.animType = null, u.animProp = null, u.breakpoints = [], u.breakpointSettings = [], u.cssTransitions = !1, u.focussed = !1, u.interrupted = !1, u.hidden = "hidden", u.paused = !0, u.positionProp = null, u.respondTo = null, u.rowCount = 1, u.shouldClick = !0, u.$slider = t(s), u.$slidesCache = null, u.transformType = null, u.transitionType = null, u.visibilityChange = "visibilitychange", u.windowWidth = 0, u.windowTimer = null, l = t(s).data("slick") || {}, u.options = t.extend({}, u.defaults, o, l), u.currentSlide = u.options.initialSlide, u.originalSettings = u.options, void 0 !== document.mozHidden ? (u.hidden = "mozHidden", u.visibilityChange = "mozvisibilitychange") : void 0 !== document.webkitHidden && (u.hidden = "webkitHidden", u.visibilityChange = "webkitvisibilitychange"), u.autoPlay = t.proxy(u.autoPlay, u), u.autoPlayClear = t.proxy(u.autoPlayClear, u), u.autoPlayIterator = t.proxy(u.autoPlayIterator, u), u.changeSlide = t.proxy(u.changeSlide, u), u.clickHandler = t.proxy(u.clickHandler, u), u.selectHandler = t.proxy(u.selectHandler, u), u.setPosition = t.proxy(u.setPosition, u), u.swipeHandler = t.proxy(u.swipeHandler, u), u.dragHandler = t.proxy(u.dragHandler, u), u.keyHandler = t.proxy(u.keyHandler, u), u.instanceUid = i++, u.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, u.registerBreakpoints(), u.init(!0)
        }
    }()).prototype.activateADA = function() {
        this.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        })
    }, i.prototype.addSlide = i.prototype.slickAdd = function(i, index, s) {
        var o = this;
        if ("boolean" == typeof index) s = index, index = null;
        else if (index < 0 || index >= o.slideCount) return !1;
        o.unload(), "number" == typeof index ? 0 === index && 0 === o.$slides.length ? t(i).appendTo(o.$slideTrack) : s ? t(i).insertBefore(o.$slides.eq(index)) : t(i).insertAfter(o.$slides.eq(index)) : !0 === s ? t(i).prependTo(o.$slideTrack) : t(i).appendTo(o.$slideTrack), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slides.each(function(index, i) {
            t(i).attr("data-slick-index", index)
        }), o.$slidesCache = o.$slides, o.reinit()
    }, i.prototype.animateHeight = function() {
        var t = this;
        if (1 === t.options.slidesToShow && !0 === t.options.adaptiveHeight && !1 === t.options.vertical) {
            var i = t.$slides.eq(t.currentSlide).outerHeight(!0);
            t.$list.animate({
                height: i
            }, t.options.speed)
        }
    }, i.prototype.animateSlide = function(i, s) {
        var o = {},
            l = this;
        l.animateHeight(), !0 === l.options.rtl && !1 === l.options.vertical && (i = -i), !1 === l.transformsEnabled ? !1 === l.options.vertical ? l.$slideTrack.animate({
            left: i
        }, l.options.speed, l.options.easing, s) : l.$slideTrack.animate({
            top: i
        }, l.options.speed, l.options.easing, s) : !1 === l.cssTransitions ? (!0 === l.options.rtl && (l.currentLeft = -l.currentLeft), t({
            animStart: l.currentLeft
        }).animate({
            animStart: i
        }, {
            duration: l.options.speed,
            easing: l.options.easing,
            step: function(now) {
                now = Math.ceil(now), !1 === l.options.vertical ? (o[l.animType] = "translate(" + now + "px, 0px)", l.$slideTrack.css(o)) : (o[l.animType] = "translate(0px," + now + "px)", l.$slideTrack.css(o))
            },
            complete: function() {
                s && s.call()
            }
        })) : (l.applyTransition(), i = Math.ceil(i), !1 === l.options.vertical ? o[l.animType] = "translate3d(" + i + "px, 0px, 0px)" : o[l.animType] = "translate3d(0px," + i + "px, 0px)", l.$slideTrack.css(o), s && setTimeout(function() {
            l.disableTransition(), s.call()
        }, l.options.speed))
    }, i.prototype.getNavTarget = function() {
        var i = this,
            s = i.options.asNavFor;
        return s && null !== s && (s = t(s).not(i.$slider)), s
    }, i.prototype.asNavFor = function(index) {
        var i = this.getNavTarget();
        null !== i && "object" == typeof i && i.each(function() {
            var target = t(this).slick("getSlick");
            target.unslicked || target.slideHandler(index, !0)
        })
    }, i.prototype.applyTransition = function(t) {
        var i = this,
            transition = {};
        !1 === i.options.fade ? transition[i.transitionType] = i.transformType + " " + i.options.speed + "ms " + i.options.cssEase : transition[i.transitionType] = "opacity " + i.options.speed + "ms " + i.options.cssEase, !1 === i.options.fade ? i.$slideTrack.css(transition) : i.$slides.eq(t).css(transition)
    }, i.prototype.autoPlay = function() {
        var t = this;
        t.autoPlayClear(), t.slideCount > t.options.slidesToShow && (t.autoPlayTimer = setInterval(t.autoPlayIterator, t.options.autoplaySpeed))
    }, i.prototype.autoPlayClear = function() {
        var t = this;
        t.autoPlayTimer && clearInterval(t.autoPlayTimer)
    }, i.prototype.autoPlayIterator = function() {
        var t = this,
            i = t.currentSlide + t.options.slidesToScroll;
        t.paused || t.interrupted || t.focussed || (!1 === t.options.infinite && (1 === t.direction && t.currentSlide + 1 === t.slideCount - 1 ? t.direction = 0 : 0 === t.direction && (i = t.currentSlide - t.options.slidesToScroll, t.currentSlide - 1 == 0 && (t.direction = 1))), t.slideHandler(i))
    }, i.prototype.buildArrows = function() {
        var i = this;
        !0 === i.options.arrows && (i.$prevArrow = t(i.options.prevArrow).addClass("slick-arrow"), i.$nextArrow = t(i.options.nextArrow).addClass("slick-arrow"), i.slideCount > i.options.slidesToShow ? (i.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), i.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), i.htmlExpr.test(i.options.prevArrow) && i.$prevArrow.prependTo(i.options.appendArrows), i.htmlExpr.test(i.options.nextArrow) && i.$nextArrow.appendTo(i.options.appendArrows), !0 !== i.options.infinite && i.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : i.$prevArrow.add(i.$nextArrow).addClass("slick-hidden").attr({
            "aria-disabled": "true",
            tabindex: "-1"
        }))
    }, i.prototype.buildDots = function() {
        var i, s, o = this;
        if (!0 === o.options.dots && o.slideCount > o.options.slidesToShow) {
            for (o.$slider.addClass("slick-dotted"), s = t("<ul />").addClass(o.options.dotsClass), i = 0; i <= o.getDotCount(); i += 1) s.append(t("<li />").append(o.options.customPaging.call(this, o, i)));
            o.$dots = s.appendTo(o.options.appendDots), o.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false")
        }
    }, i.prototype.buildOut = function() {
        var i = this;
        i.$slides = i.$slider.children(i.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), i.slideCount = i.$slides.length, i.$slides.each(function(index, i) {
            t(i).attr("data-slick-index", index).data("originalStyling", t(i).attr("style") || "")
        }), i.$slider.addClass("slick-slider"), i.$slideTrack = 0 === i.slideCount ? t('<div class="slick-track"/>').appendTo(i.$slider) : i.$slides.wrapAll('<div class="slick-track"/>').parent(), i.$list = i.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(), i.$slideTrack.css("opacity", 0), !0 !== i.options.centerMode && !0 !== i.options.swipeToSlide || (i.options.slidesToScroll = 1), t("img[data-lazy]", i.$slider).not("[src]").addClass("slick-loading"), i.setupInfinite(), i.buildArrows(), i.buildDots(), i.updateDots(), i.setSlideClasses("number" == typeof i.currentSlide ? i.currentSlide : 0), !0 === i.options.draggable && i.$list.addClass("draggable")
    }, i.prototype.buildRows = function() {
        var a, b, c, t, i, s, o, l = this;
        if (t = document.createDocumentFragment(), s = l.$slider.children(), l.options.rows > 1) {
            for (o = l.options.slidesPerRow * l.options.rows, i = Math.ceil(s.length / o), a = 0; a < i; a++) {
                var u = document.createElement("div");
                for (b = 0; b < l.options.rows; b++) {
                    var h = document.createElement("div");
                    for (c = 0; c < l.options.slidesPerRow; c++) {
                        var target = a * o + (b * l.options.slidesPerRow + c);
                        s.get(target) && h.appendChild(s.get(target))
                    }
                    u.appendChild(h)
                }
                t.appendChild(u)
            }
            l.$slider.empty().append(t), l.$slider.children().children().children().css({
                width: 100 / l.options.slidesPerRow + "%",
                display: "inline-block"
            })
        }
    }, i.prototype.checkResponsive = function(i, s) {
        var o, l, u, h = this,
            p = !1,
            m = h.$slider.width(),
            _ = window.innerWidth || t(window).width();
        if ("window" === h.respondTo ? u = _ : "slider" === h.respondTo ? u = m : "min" === h.respondTo && (u = Math.min(_, m)), h.options.responsive && h.options.responsive.length && null !== h.options.responsive) {
            l = null;
            for (o in h.breakpoints) h.breakpoints.hasOwnProperty(o) && (!1 === h.originalSettings.mobileFirst ? u < h.breakpoints[o] && (l = h.breakpoints[o]) : u > h.breakpoints[o] && (l = h.breakpoints[o]));
            null !== l ? null !== h.activeBreakpoint ? (l !== h.activeBreakpoint || s) && (h.activeBreakpoint = l, "unslick" === h.breakpointSettings[l] ? h.unslick(l) : (h.options = t.extend({}, h.originalSettings, h.breakpointSettings[l]), !0 === i && (h.currentSlide = h.options.initialSlide), h.refresh(i)), p = l) : (h.activeBreakpoint = l, "unslick" === h.breakpointSettings[l] ? h.unslick(l) : (h.options = t.extend({}, h.originalSettings, h.breakpointSettings[l]), !0 === i && (h.currentSlide = h.options.initialSlide), h.refresh(i)), p = l) : null !== h.activeBreakpoint && (h.activeBreakpoint = null, h.options = h.originalSettings, !0 === i && (h.currentSlide = h.options.initialSlide), h.refresh(i), p = l), i || !1 === p || h.$slider.trigger("breakpoint", [h, p])
        }
    }, i.prototype.changeSlide = function(event, i) {
        var s, o, l, u = this,
            h = t(event.currentTarget);
        switch (h.is("a") && event.preventDefault(), h.is("li") || (h = h.closest("li")), l = u.slideCount % u.options.slidesToScroll != 0, s = l ? 0 : (u.slideCount - u.currentSlide) % u.options.slidesToScroll, event.data.message) {
            case "previous":
                o = 0 === s ? u.options.slidesToScroll : u.options.slidesToShow - s, u.slideCount > u.options.slidesToShow && u.slideHandler(u.currentSlide - o, !1, i);
                break;
            case "next":
                o = 0 === s ? u.options.slidesToScroll : s, u.slideCount > u.options.slidesToShow && u.slideHandler(u.currentSlide + o, !1, i);
                break;
            case "index":
                var index = 0 === event.data.index ? 0 : event.data.index || h.index() * u.options.slidesToScroll;
                u.slideHandler(u.checkNavigable(index), !1, i), h.children().trigger("focus");
                break;
            default:
                return
        }
    }, i.prototype.checkNavigable = function(index) {
        var t, i;
        if (t = this.getNavigableIndexes(), i = 0, index > t[t.length - 1]) index = t[t.length - 1];
        else
            for (var n in t) {
                if (index < t[n]) {
                    index = i;
                    break
                }
                i = t[n]
            }
        return index
    }, i.prototype.cleanUpEvents = function() {
        var i = this;
        i.options.dots && null !== i.$dots && t("li", i.$dots).off("click.slick tap", i.changeSlide).off("mouseenter.slick", t.proxy(i.interrupt, i, !0)).off("mouseleave.slick", t.proxy(i.interrupt, i, !1)), i.$slider.off("focus.slick blur.slick"), !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow && i.$prevArrow.off("click.slick tap", i.changeSlide), i.$nextArrow && i.$nextArrow.off("click.slick tap", i.changeSlide)), i.$list.off("touchstart.slick mousedown.slick", i.swipeHandler), i.$list.off("touchmove.slick mousemove.slick", i.swipeHandler), i.$list.off("touchend.slick mouseup.slick", i.swipeHandler), i.$list.off("touchcancel.slick mouseleave.slick", i.swipeHandler), i.$list.off("click.slick tap", i.clickHandler), t(document).off(i.visibilityChange, i.visibility), i.cleanUpSlideEvents(), !0 === i.options.accessibility && i.$list.off("keydown.slick", i.keyHandler), !0 === i.options.focusOnSelect && t(i.$slideTrack).children().off("click.slick tap", i.selectHandler), t(window).off("orientationchange.slick.slick-" + i.instanceUid, i.orientationChange), t(window).off("resize.slick.slick-" + i.instanceUid, i.resize), t("[draggable!=true]", i.$slideTrack).off("dragstart", i.preventDefault), t(window).off("load.slick.slick-" + i.instanceUid, i.setPosition), t(document).off("ready.slick.slick-" + i.instanceUid, i.setPosition)
    }, i.prototype.cleanUpSlideEvents = function() {
        var i = this;
        i.$list.off("mouseenter.slick", t.proxy(i.interrupt, i, !0)), i.$list.off("mouseleave.slick", t.proxy(i.interrupt, i, !1))
    }, i.prototype.cleanUpRows = function() {
        var t, i = this;
        i.options.rows > 1 && ((t = i.$slides.children().children()).removeAttr("style"), i.$slider.empty().append(t))
    }, i.prototype.clickHandler = function(event) {
        !1 === this.shouldClick && (event.stopImmediatePropagation(), event.stopPropagation(), event.preventDefault())
    }, i.prototype.destroy = function(refresh) {
        var i = this;
        i.autoPlayClear(), i.touchObject = {}, i.cleanUpEvents(), t(".slick-cloned", i.$slider).detach(), i.$dots && i.$dots.remove(), i.$prevArrow && i.$prevArrow.length && (i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), i.htmlExpr.test(i.options.prevArrow) && i.$prevArrow.remove()), i.$nextArrow && i.$nextArrow.length && (i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), i.htmlExpr.test(i.options.nextArrow) && i.$nextArrow.remove()), i.$slides && (i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
            t(this).attr("style", t(this).data("originalStyling"))
        }), i.$slideTrack.children(this.options.slide).detach(), i.$slideTrack.detach(), i.$list.detach(), i.$slider.append(i.$slides)), i.cleanUpRows(), i.$slider.removeClass("slick-slider"), i.$slider.removeClass("slick-initialized"), i.$slider.removeClass("slick-dotted"), i.unslicked = !0, refresh || i.$slider.trigger("destroy", [i])
    }, i.prototype.disableTransition = function(t) {
        var i = this,
            transition = {};
        transition[i.transitionType] = "", !1 === i.options.fade ? i.$slideTrack.css(transition) : i.$slides.eq(t).css(transition)
    }, i.prototype.fadeSlide = function(t, i) {
        var s = this;
        !1 === s.cssTransitions ? (s.$slides.eq(t).css({
            zIndex: s.options.zIndex
        }), s.$slides.eq(t).animate({
            opacity: 1
        }, s.options.speed, s.options.easing, i)) : (s.applyTransition(t), s.$slides.eq(t).css({
            opacity: 1,
            zIndex: s.options.zIndex
        }), i && setTimeout(function() {
            s.disableTransition(t), i.call()
        }, s.options.speed))
    }, i.prototype.fadeSlideOut = function(t) {
        var i = this;
        !1 === i.cssTransitions ? i.$slides.eq(t).animate({
            opacity: 0,
            zIndex: i.options.zIndex - 2
        }, i.options.speed, i.options.easing) : (i.applyTransition(t), i.$slides.eq(t).css({
            opacity: 0,
            zIndex: i.options.zIndex - 2
        }))
    }, i.prototype.filterSlides = i.prototype.slickFilter = function(filter) {
        var t = this;
        null !== filter && (t.$slidesCache = t.$slides, t.unload(), t.$slideTrack.children(this.options.slide).detach(), t.$slidesCache.filter(filter).appendTo(t.$slideTrack), t.reinit())
    }, i.prototype.focusHandler = function() {
        var i = this;
        i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*:not(.slick-arrow)", function(event) {
            event.stopImmediatePropagation();
            var s = t(this);
            setTimeout(function() {
                i.options.pauseOnFocus && (i.focussed = s.is(":focus"), i.autoPlay())
            }, 0)
        })
    }, i.prototype.getCurrent = i.prototype.slickCurrentSlide = function() {
        return this.currentSlide
    }, i.prototype.getDotCount = function() {
        var t = this,
            i = 0,
            s = 0,
            o = 0;
        if (!0 === t.options.infinite)
            for (; i < t.slideCount;) ++o, i = s + t.options.slidesToScroll, s += t.options.slidesToScroll <= t.options.slidesToShow ? t.options.slidesToScroll : t.options.slidesToShow;
        else if (!0 === t.options.centerMode) o = t.slideCount;
        else if (t.options.asNavFor)
            for (; i < t.slideCount;) ++o, i = s + t.options.slidesToScroll, s += t.options.slidesToScroll <= t.options.slidesToShow ? t.options.slidesToScroll : t.options.slidesToShow;
        else o = 1 + Math.ceil((t.slideCount - t.options.slidesToShow) / t.options.slidesToScroll);
        return o - 1
    }, i.prototype.getLeft = function(t) {
        var i, s, o, l = this,
            u = 0;
        return l.slideOffset = 0, s = l.$slides.first().outerHeight(!0), !0 === l.options.infinite ? (l.slideCount > l.options.slidesToShow && (l.slideOffset = l.slideWidth * l.options.slidesToShow * -1, u = s * l.options.slidesToShow * -1), l.slideCount % l.options.slidesToScroll != 0 && t + l.options.slidesToScroll > l.slideCount && l.slideCount > l.options.slidesToShow && (t > l.slideCount ? (l.slideOffset = (l.options.slidesToShow - (t - l.slideCount)) * l.slideWidth * -1, u = (l.options.slidesToShow - (t - l.slideCount)) * s * -1) : (l.slideOffset = l.slideCount % l.options.slidesToScroll * l.slideWidth * -1, u = l.slideCount % l.options.slidesToScroll * s * -1))) : t + l.options.slidesToShow > l.slideCount && (l.slideOffset = (t + l.options.slidesToShow - l.slideCount) * l.slideWidth, u = (t + l.options.slidesToShow - l.slideCount) * s), l.slideCount <= l.options.slidesToShow && (l.slideOffset = 0, u = 0), !0 === l.options.centerMode && l.slideCount <= l.options.slidesToShow ? l.slideOffset = l.slideWidth * Math.floor(l.options.slidesToShow) / 2 - l.slideWidth * l.slideCount / 2 : !0 === l.options.centerMode && !0 === l.options.infinite ? l.slideOffset += l.slideWidth * Math.floor(l.options.slidesToShow / 2) - l.slideWidth : !0 === l.options.centerMode && (l.slideOffset = 0, l.slideOffset += l.slideWidth * Math.floor(l.options.slidesToShow / 2)), i = !1 === l.options.vertical ? t * l.slideWidth * -1 + l.slideOffset : t * s * -1 + u, !0 === l.options.variableWidth && (o = l.slideCount <= l.options.slidesToShow || !1 === l.options.infinite ? l.$slideTrack.children(".slick-slide").eq(t) : l.$slideTrack.children(".slick-slide").eq(t + l.options.slidesToShow), i = !0 === l.options.rtl ? o[0] ? -1 * (l.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, !0 === l.options.centerMode && (o = l.slideCount <= l.options.slidesToShow || !1 === l.options.infinite ? l.$slideTrack.children(".slick-slide").eq(t) : l.$slideTrack.children(".slick-slide").eq(t + l.options.slidesToShow + 1), i = !0 === l.options.rtl ? o[0] ? -1 * (l.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, i += (l.$list.width() - o.outerWidth()) / 2)), i
    }, i.prototype.getOption = i.prototype.slickGetOption = function(t) {
        return this.options[t]
    }, i.prototype.getNavigableIndexes = function() {
        var max, t = this,
            i = 0,
            s = 0,
            o = [];
        for (!1 === t.options.infinite ? max = t.slideCount : (i = -1 * t.options.slidesToScroll, s = -1 * t.options.slidesToScroll, max = 2 * t.slideCount); i < max;) o.push(i), i = s + t.options.slidesToScroll, s += t.options.slidesToScroll <= t.options.slidesToShow ? t.options.slidesToScroll : t.options.slidesToShow;
        return o
    }, i.prototype.getSlick = function() {
        return this
    }, i.prototype.getSlideCount = function() {
        var i, s, o = this;
        return s = !0 === o.options.centerMode ? o.slideWidth * Math.floor(o.options.slidesToShow / 2) : 0, !0 === o.options.swipeToSlide ? (o.$slideTrack.find(".slick-slide").each(function(index, l) {
            if (l.offsetLeft - s + t(l).outerWidth() / 2 > -1 * o.swipeLeft) return i = l, !1
        }), Math.abs(t(i).attr("data-slick-index") - o.currentSlide) || 1) : o.options.slidesToScroll
    }, i.prototype.goTo = i.prototype.slickGoTo = function(t, i) {
        this.changeSlide({
            data: {
                message: "index",
                index: parseInt(t, 10)
            }
        }, i)
    }, i.prototype.init = function(i) {
        var s = this;
        t(s.$slider).hasClass("slick-initialized") || (t(s.$slider).addClass("slick-initialized"), s.buildRows(), s.buildOut(), s.setProps(), s.startLoad(), s.loadSlider(), s.initializeEvents(), s.updateArrows(), s.updateDots(), s.checkResponsive(!0), s.focusHandler()), i && s.$slider.trigger("init", [s]), !0 === s.options.accessibility && s.initADA(), s.options.autoplay && (s.paused = !1, s.autoPlay())
    }, i.prototype.initADA = function() {
        var i = this;
        i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        }), i.$slideTrack.attr("role", "listbox"), i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(s) {
            t(this).attr("role", "option");
            var o = i.options.centerMode ? s : Math.floor(s / i.options.slidesToShow);
            !0 === i.options.dots && t(this).attr("aria-describedby", "slick-slide" + i.instanceUid + o)
        }), null !== i.$dots && i.$dots.attr("role", "tablist").find("li").each(function(s) {
            t(this).attr({
                role: "presentation",
                "aria-selected": "false",
                "aria-controls": "navigation" + i.instanceUid + s,
                id: "slick-slide" + i.instanceUid + s
            })
        }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar"), i.activateADA()
    }, i.prototype.initArrowEvents = function() {
        var t = this;
        !0 === t.options.arrows && t.slideCount > t.options.slidesToShow && (t.$prevArrow.off("click.slick tap").on("click.slick tap", {
            message: "previous"
        }, t.changeSlide), t.$nextArrow.off("click.slick tap").on("click.slick tap", {
            message: "next"
        }, t.changeSlide))
    }, i.prototype.initDotEvents = function() {
        var i = this;
        !0 === i.options.dots && i.slideCount > i.options.slidesToShow && t("li", i.$dots).on("click.slick tap", {
            message: "index"
        }, i.changeSlide), !0 === i.options.dots && !0 === i.options.pauseOnDotsHover && t("li", i.$dots).on("mouseenter.slick", t.proxy(i.interrupt, i, !0)).on("mouseleave.slick", t.proxy(i.interrupt, i, !1))
    }, i.prototype.initSlideEvents = function() {
        var i = this;
        i.options.pauseOnHover && (i.$list.on("mouseenter.slick", t.proxy(i.interrupt, i, !0)), i.$list.on("mouseleave.slick", t.proxy(i.interrupt, i, !1)))
    }, i.prototype.initializeEvents = function() {
        var i = this;
        i.initArrowEvents(), i.initDotEvents(), i.initSlideEvents(), i.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, i.swipeHandler), i.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, i.swipeHandler), i.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, i.swipeHandler), i.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, i.swipeHandler), i.$list.on("click.slick tap", i.clickHandler), t(document).on(i.visibilityChange, t.proxy(i.visibility, i)), !0 === i.options.accessibility && i.$list.on("keydown.slick", i.keyHandler), !0 === i.options.focusOnSelect && t(i.$slideTrack).children().on("click.slick tap", i.selectHandler), t(window).on("orientationchange.slick.slick-" + i.instanceUid, t.proxy(i.orientationChange, i)), t(window).on("resize.slick.slick-" + i.instanceUid, t.proxy(i.resize, i)), t("[draggable!=true]", i.$slideTrack).on("dragstart", i.preventDefault), t(window).on("load.slick.slick-" + i.instanceUid, i.setPosition), t(document).on("ready.slick.slick-" + i.instanceUid, i.setPosition)
    }, i.prototype.initUI = function() {
        var t = this;
        !0 === t.options.arrows && t.slideCount > t.options.slidesToShow && (t.$prevArrow.show(), t.$nextArrow.show()), !0 === t.options.dots && t.slideCount > t.options.slidesToShow && t.$dots.show()
    }, i.prototype.keyHandler = function(event) {
        var t = this;
        event.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === event.keyCode && !0 === t.options.accessibility ? t.changeSlide({
            data: {
                message: !0 === t.options.rtl ? "next" : "previous"
            }
        }) : 39 === event.keyCode && !0 === t.options.accessibility && t.changeSlide({
            data: {
                message: !0 === t.options.rtl ? "previous" : "next"
            }
        }))
    }, i.prototype.lazyLoad = function() {
        function loadImages(i) {
            t("img[data-lazy]", i).each(function() {
                var i = t(this),
                    s = t(this).attr("data-lazy"),
                    o = document.createElement("img");
                o.onload = function() {
                    i.animate({
                        opacity: 0
                    }, 100, function() {
                        i.attr("src", s).animate({
                            opacity: 1
                        }, 200, function() {
                            i.removeAttr("data-lazy").removeClass("slick-loading")
                        }), l.$slider.trigger("lazyLoaded", [l, i, s])
                    })
                }, o.onerror = function() {
                    i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), l.$slider.trigger("lazyLoadError", [l, i, s])
                }, o.src = s
            })
        }
        var i, s, o, l = this;
        if (!0 === l.options.centerMode ? !0 === l.options.infinite ? o = (s = l.currentSlide + (l.options.slidesToShow / 2 + 1)) + l.options.slidesToShow + 2 : (s = Math.max(0, l.currentSlide - (l.options.slidesToShow / 2 + 1)), o = l.options.slidesToShow / 2 + 1 + 2 + l.currentSlide) : (s = l.options.infinite ? l.options.slidesToShow + l.currentSlide : l.currentSlide, o = Math.ceil(s + l.options.slidesToShow), !0 === l.options.fade && (s > 0 && s--, o <= l.slideCount && o++)), i = l.$slider.find(".slick-slide").slice(s, o), "anticipated" === l.options.lazyLoad)
            for (var u = s - 1, h = o, p = l.$slider.find(".slick-slide"), m = 0; m < l.options.slidesToScroll; m++) u < 0 && (u = l.slideCount - 1), i = (i = i.add(p.eq(u))).add(p.eq(h)), u--, h++;
        loadImages(i), l.slideCount <= l.options.slidesToShow ? loadImages(l.$slider.find(".slick-slide")) : l.currentSlide >= l.slideCount - l.options.slidesToShow ? loadImages(l.$slider.find(".slick-cloned").slice(0, l.options.slidesToShow)) : 0 === l.currentSlide && loadImages(l.$slider.find(".slick-cloned").slice(-1 * l.options.slidesToShow))
    }, i.prototype.loadSlider = function() {
        var t = this;
        t.setPosition(), t.$slideTrack.css({
            opacity: 1
        }), t.$slider.removeClass("slick-loading"), t.initUI(), "progressive" === t.options.lazyLoad && t.progressiveLazyLoad()
    }, i.prototype.next = i.prototype.slickNext = function() {
        this.changeSlide({
            data: {
                message: "next"
            }
        })
    }, i.prototype.orientationChange = function() {
        var t = this;
        t.checkResponsive(), t.setPosition()
    }, i.prototype.pause = i.prototype.slickPause = function() {
        var t = this;
        t.autoPlayClear(), t.paused = !0
    }, i.prototype.play = i.prototype.slickPlay = function() {
        var t = this;
        t.autoPlay(), t.options.autoplay = !0, t.paused = !1, t.focussed = !1, t.interrupted = !1
    }, i.prototype.postSlide = function(index) {
        var t = this;
        t.unslicked || (t.$slider.trigger("afterChange", [t, index]), t.animating = !1, t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), !0 === t.options.accessibility && t.initADA())
    }, i.prototype.prev = i.prototype.slickPrev = function() {
        this.changeSlide({
            data: {
                message: "previous"
            }
        })
    }, i.prototype.preventDefault = function(event) {
        event.preventDefault()
    }, i.prototype.progressiveLazyLoad = function(i) {
        i = i || 1;
        var s, o, l, u = this,
            h = t("img[data-lazy]", u.$slider);
        h.length ? (s = h.first(), o = s.attr("data-lazy"), (l = document.createElement("img")).onload = function() {
            s.attr("src", o).removeAttr("data-lazy").removeClass("slick-loading"), !0 === u.options.adaptiveHeight && u.setPosition(), u.$slider.trigger("lazyLoaded", [u, s, o]), u.progressiveLazyLoad()
        }, l.onerror = function() {
            i < 3 ? setTimeout(function() {
                u.progressiveLazyLoad(i + 1)
            }, 500) : (s.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), u.$slider.trigger("lazyLoadError", [u, s, o]), u.progressiveLazyLoad())
        }, l.src = o) : u.$slider.trigger("allImagesLoaded", [u])
    }, i.prototype.refresh = function(i) {
        var s, o, l = this;
        o = l.slideCount - l.options.slidesToShow, !l.options.infinite && l.currentSlide > o && (l.currentSlide = o), l.slideCount <= l.options.slidesToShow && (l.currentSlide = 0), s = l.currentSlide, l.destroy(!0), t.extend(l, l.initials, {
            currentSlide: s
        }), l.init(), i || l.changeSlide({
            data: {
                message: "index",
                index: s
            }
        }, !1)
    }, i.prototype.registerBreakpoints = function() {
        var i, s, o, l = this,
            u = l.options.responsive || null;
        if ("array" === t.type(u) && u.length) {
            l.respondTo = l.options.respondTo || "window";
            for (i in u)
                if (o = l.breakpoints.length - 1, s = u[i].breakpoint, u.hasOwnProperty(i)) {
                    for (; o >= 0;) l.breakpoints[o] && l.breakpoints[o] === s && l.breakpoints.splice(o, 1), o--;
                    l.breakpoints.push(s), l.breakpointSettings[s] = u[i].settings
                }
            l.breakpoints.sort(function(a, b) {
                return l.options.mobileFirst ? a - b : b - a
            })
        }
    }, i.prototype.reinit = function() {
        var i = this;
        i.$slides = i.$slideTrack.children(i.options.slide).addClass("slick-slide"), i.slideCount = i.$slides.length, i.currentSlide >= i.slideCount && 0 !== i.currentSlide && (i.currentSlide = i.currentSlide - i.options.slidesToScroll), i.slideCount <= i.options.slidesToShow && (i.currentSlide = 0), i.registerBreakpoints(), i.setProps(), i.setupInfinite(), i.buildArrows(), i.updateArrows(), i.initArrowEvents(), i.buildDots(), i.updateDots(), i.initDotEvents(), i.cleanUpSlideEvents(), i.initSlideEvents(), i.checkResponsive(!1, !0), !0 === i.options.focusOnSelect && t(i.$slideTrack).children().on("click.slick tap", i.selectHandler), i.setSlideClasses("number" == typeof i.currentSlide ? i.currentSlide : 0), i.setPosition(), i.focusHandler(), i.paused = !i.options.autoplay, i.autoPlay(), i.$slider.trigger("reInit", [i])
    }, i.prototype.resize = function() {
        var i = this;
        t(window).width() !== i.windowWidth && (clearTimeout(i.windowDelay), i.windowDelay = window.setTimeout(function() {
            i.windowWidth = t(window).width(), i.checkResponsive(), i.unslicked || i.setPosition()
        }, 50))
    }, i.prototype.removeSlide = i.prototype.slickRemove = function(index, t, i) {
        var s = this;
        if (index = "boolean" == typeof index ? !0 === (t = index) ? 0 : s.slideCount - 1 : !0 === t ? --index : index, s.slideCount < 1 || index < 0 || index > s.slideCount - 1) return !1;
        s.unload(), !0 === i ? s.$slideTrack.children().remove() : s.$slideTrack.children(this.options.slide).eq(index).remove(), s.$slides = s.$slideTrack.children(this.options.slide), s.$slideTrack.children(this.options.slide).detach(), s.$slideTrack.append(s.$slides), s.$slidesCache = s.$slides, s.reinit()
    }, i.prototype.setCSS = function(position) {
        var x, y, t = this,
            i = {};
        !0 === t.options.rtl && (position = -position), x = "left" == t.positionProp ? Math.ceil(position) + "px" : "0px", y = "top" == t.positionProp ? Math.ceil(position) + "px" : "0px", i[t.positionProp] = position, !1 === t.transformsEnabled ? t.$slideTrack.css(i) : (i = {}, !1 === t.cssTransitions ? (i[t.animType] = "translate(" + x + ", " + y + ")", t.$slideTrack.css(i)) : (i[t.animType] = "translate3d(" + x + ", " + y + ", 0px)", t.$slideTrack.css(i)))
    }, i.prototype.setDimensions = function() {
        var t = this;
        !1 === t.options.vertical ? !0 === t.options.centerMode && t.$list.css({
            padding: "0px " + t.options.centerPadding
        }) : (t.$list.height(t.$slides.first().outerHeight(!0) * t.options.slidesToShow), !0 === t.options.centerMode && t.$list.css({
            padding: t.options.centerPadding + " 0px"
        })), t.listWidth = t.$list.width(), t.listHeight = t.$list.height(), !1 === t.options.vertical && !1 === t.options.variableWidth ? (t.slideWidth = Math.ceil(t.listWidth / t.options.slidesToShow), t.$slideTrack.width(Math.ceil(t.slideWidth * t.$slideTrack.children(".slick-slide").length))) : !0 === t.options.variableWidth ? t.$slideTrack.width(5e3 * t.slideCount) : (t.slideWidth = Math.ceil(t.listWidth), t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0) * t.$slideTrack.children(".slick-slide").length)));
        var offset = t.$slides.first().outerWidth(!0) - t.$slides.first().width();
        !1 === t.options.variableWidth && t.$slideTrack.children(".slick-slide").width(t.slideWidth - offset)
    }, i.prototype.setFade = function() {
        var i, s = this;
        s.$slides.each(function(index, o) {
            i = s.slideWidth * index * -1, !0 === s.options.rtl ? t(o).css({
                position: "relative",
                right: i,
                top: 0,
                zIndex: s.options.zIndex - 2,
                opacity: 0
            }) : t(o).css({
                position: "relative",
                left: i,
                top: 0,
                zIndex: s.options.zIndex - 2,
                opacity: 0
            })
        }), s.$slides.eq(s.currentSlide).css({
            zIndex: s.options.zIndex - 1,
            opacity: 1
        })
    }, i.prototype.setHeight = function() {
        var t = this;
        if (1 === t.options.slidesToShow && !0 === t.options.adaptiveHeight && !1 === t.options.vertical) {
            var i = t.$slides.eq(t.currentSlide).outerHeight(!0);
            t.$list.css("height", i)
        }
    }, i.prototype.setOption = i.prototype.slickSetOption = function() {
        var i, item, s, value, type, o = this,
            refresh = !1;
        if ("object" === t.type(arguments[0]) ? (s = arguments[0], refresh = arguments[1], type = "multiple") : "string" === t.type(arguments[0]) && (s = arguments[0], value = arguments[1], refresh = arguments[2], "responsive" === arguments[0] && "array" === t.type(arguments[1]) ? type = "responsive" : void 0 !== arguments[1] && (type = "single")), "single" === type) o.options[s] = value;
        else if ("multiple" === type) t.each(s, function(t, i) {
            o.options[t] = i
        });
        else if ("responsive" === type)
            for (item in value)
                if ("array" !== t.type(o.options.responsive)) o.options.responsive = [value[item]];
                else {
                    for (i = o.options.responsive.length - 1; i >= 0;) o.options.responsive[i].breakpoint === value[item].breakpoint && o.options.responsive.splice(i, 1), i--;
                    o.options.responsive.push(value[item])
                }
        refresh && (o.unload(), o.reinit())
    }, i.prototype.setPosition = function() {
        var t = this;
        t.setDimensions(), t.setHeight(), !1 === t.options.fade ? t.setCSS(t.getLeft(t.currentSlide)) : t.setFade(), t.$slider.trigger("setPosition", [t])
    }, i.prototype.setProps = function() {
        var t = this,
            i = document.body.style;
        t.positionProp = !0 === t.options.vertical ? "top" : "left", "top" === t.positionProp ? t.$slider.addClass("slick-vertical") : t.$slider.removeClass("slick-vertical"), void 0 === i.WebkitTransition && void 0 === i.MozTransition && void 0 === i.msTransition || !0 === t.options.useCSS && (t.cssTransitions = !0), t.options.fade && ("number" == typeof t.options.zIndex ? t.options.zIndex < 3 && (t.options.zIndex = 3) : t.options.zIndex = t.defaults.zIndex), void 0 !== i.OTransform && (t.animType = "OTransform", t.transformType = "-o-transform", t.transitionType = "OTransition", void 0 === i.perspectiveProperty && void 0 === i.webkitPerspective && (t.animType = !1)), void 0 !== i.MozTransform && (t.animType = "MozTransform", t.transformType = "-moz-transform", t.transitionType = "MozTransition", void 0 === i.perspectiveProperty && void 0 === i.MozPerspective && (t.animType = !1)), void 0 !== i.webkitTransform && (t.animType = "webkitTransform", t.transformType = "-webkit-transform", t.transitionType = "webkitTransition", void 0 === i.perspectiveProperty && void 0 === i.webkitPerspective && (t.animType = !1)), void 0 !== i.msTransform && (t.animType = "msTransform", t.transformType = "-ms-transform", t.transitionType = "msTransition", void 0 === i.msTransform && (t.animType = !1)), void 0 !== i.transform && !1 !== t.animType && (t.animType = "transform", t.transformType = "transform", t.transitionType = "transition"), t.transformsEnabled = t.options.useTransform && null !== t.animType && !1 !== t.animType
    }, i.prototype.setSlideClasses = function(index) {
        var t, i, s, o, l = this;
        i = l.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), l.$slides.eq(index).addClass("slick-current"), !0 === l.options.centerMode ? (t = Math.floor(l.options.slidesToShow / 2), !0 === l.options.infinite && (index >= t && index <= l.slideCount - 1 - t ? l.$slides.slice(index - t, index + t + 1).addClass("slick-active").attr("aria-hidden", "false") : (s = l.options.slidesToShow + index, i.slice(s - t + 1, s + t + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === index ? i.eq(i.length - 1 - l.options.slidesToShow).addClass("slick-center") : index === l.slideCount - 1 && i.eq(l.options.slidesToShow).addClass("slick-center")), l.$slides.eq(index).addClass("slick-center")) : index >= 0 && index <= l.slideCount - l.options.slidesToShow ? l.$slides.slice(index, index + l.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : i.length <= l.options.slidesToShow ? i.addClass("slick-active").attr("aria-hidden", "false") : (o = l.slideCount % l.options.slidesToShow, s = !0 === l.options.infinite ? l.options.slidesToShow + index : index, l.options.slidesToShow == l.options.slidesToScroll && l.slideCount - index < l.options.slidesToShow ? i.slice(s - (l.options.slidesToShow - o), s + o).addClass("slick-active").attr("aria-hidden", "false") : i.slice(s, s + l.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")), "ondemand" !== l.options.lazyLoad && "anticipated" !== l.options.lazyLoad || l.lazyLoad()
    }, i.prototype.setupInfinite = function() {
        var i, s, o, l = this;
        if (!0 === l.options.fade && (l.options.centerMode = !1), !0 === l.options.infinite && !1 === l.options.fade && (s = null, l.slideCount > l.options.slidesToShow)) {
            for (o = !0 === l.options.centerMode ? l.options.slidesToShow + 1 : l.options.slidesToShow, i = l.slideCount; i > l.slideCount - o; i -= 1) s = i - 1, t(l.$slides[s]).clone(!0).attr("id", "").attr("data-slick-index", s - l.slideCount).prependTo(l.$slideTrack).addClass("slick-cloned");
            for (i = 0; i < o; i += 1) s = i, t(l.$slides[s]).clone(!0).attr("id", "").attr("data-slick-index", s + l.slideCount).appendTo(l.$slideTrack).addClass("slick-cloned");
            l.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                t(this).attr("id", "")
            })
        }
    }, i.prototype.interrupt = function(toggle) {
        var t = this;
        toggle || t.autoPlay(), t.interrupted = toggle
    }, i.prototype.selectHandler = function(event) {
        var i = this,
            targetElement = t(event.target).is(".slick-slide") ? t(event.target) : t(event.target).parents(".slick-slide"),
            index = parseInt(targetElement.attr("data-slick-index"), 10);
        if (index || (index = 0), i.slideCount <= i.options.slidesToShow) return i.setSlideClasses(index), void i.asNavFor(index);
        i.slideHandler(index)
    }, i.prototype.slideHandler = function(index, t, i) {
        var s, o, l, u, h, p = null,
            m = this;
        if (t = t || !1, (!0 !== m.animating || !0 !== m.options.waitForAnimate) && !(!0 === m.options.fade && m.currentSlide === index || m.slideCount <= m.options.slidesToShow))
            if (!1 === t && m.asNavFor(index), s = index, p = m.getLeft(s), u = m.getLeft(m.currentSlide), m.currentLeft = null === m.swipeLeft ? u : m.swipeLeft, !1 === m.options.infinite && !1 === m.options.centerMode && (index < 0 || index > m.getDotCount() * m.options.slidesToScroll)) !1 === m.options.fade && (s = m.currentSlide, !0 !== i ? m.animateSlide(u, function() {
                m.postSlide(s)
            }) : m.postSlide(s));
            else if (!1 === m.options.infinite && !0 === m.options.centerMode && (index < 0 || index > m.slideCount - m.options.slidesToScroll)) !1 === m.options.fade && (s = m.currentSlide, !0 !== i ? m.animateSlide(u, function() {
            m.postSlide(s)
        }) : m.postSlide(s));
        else {
            if (m.options.autoplay && clearInterval(m.autoPlayTimer), o = s < 0 ? m.slideCount % m.options.slidesToScroll != 0 ? m.slideCount - m.slideCount % m.options.slidesToScroll : m.slideCount + s : s >= m.slideCount ? m.slideCount % m.options.slidesToScroll != 0 ? 0 : s - m.slideCount : s, m.animating = !0, m.$slider.trigger("beforeChange", [m, m.currentSlide, o]), l = m.currentSlide, m.currentSlide = o, m.setSlideClasses(m.currentSlide), m.options.asNavFor && (h = (h = m.getNavTarget()).slick("getSlick")).slideCount <= h.options.slidesToShow && h.setSlideClasses(m.currentSlide), m.updateDots(), m.updateArrows(), !0 === m.options.fade) return !0 !== i ? (m.fadeSlideOut(l), m.fadeSlide(o, function() {
                m.postSlide(o)
            })) : m.postSlide(o), void m.animateHeight();
            !0 !== i ? m.animateSlide(p, function() {
                m.postSlide(o)
            }) : m.postSlide(o)
        }
    }, i.prototype.startLoad = function() {
        var t = this;
        !0 === t.options.arrows && t.slideCount > t.options.slidesToShow && (t.$prevArrow.hide(), t.$nextArrow.hide()), !0 === t.options.dots && t.slideCount > t.options.slidesToShow && t.$dots.hide(), t.$slider.addClass("slick-loading")
    }, i.prototype.swipeDirection = function() {
        var t, i, r, s, o = this;
        return t = o.touchObject.startX - o.touchObject.curX, i = o.touchObject.startY - o.touchObject.curY, r = Math.atan2(i, t), (s = Math.round(180 * r / Math.PI)) < 0 && (s = 360 - Math.abs(s)), s <= 45 && s >= 0 ? !1 === o.options.rtl ? "left" : "right" : s <= 360 && s >= 315 ? !1 === o.options.rtl ? "left" : "right" : s >= 135 && s <= 225 ? !1 === o.options.rtl ? "right" : "left" : !0 === o.options.verticalSwiping ? s >= 35 && s <= 135 ? "down" : "up" : "vertical"
    }, i.prototype.swipeEnd = function(event) {
        var t, direction, i = this;
        if (i.dragging = !1, i.interrupted = !1, i.shouldClick = !(i.touchObject.swipeLength > 10), void 0 === i.touchObject.curX) return !1;
        if (!0 === i.touchObject.edgeHit && i.$slider.trigger("edge", [i, i.swipeDirection()]), i.touchObject.swipeLength >= i.touchObject.minSwipe) {
            switch (direction = i.swipeDirection()) {
                case "left":
                case "down":
                    t = i.options.swipeToSlide ? i.checkNavigable(i.currentSlide + i.getSlideCount()) : i.currentSlide + i.getSlideCount(), i.currentDirection = 0;
                    break;
                case "right":
                case "up":
                    t = i.options.swipeToSlide ? i.checkNavigable(i.currentSlide - i.getSlideCount()) : i.currentSlide - i.getSlideCount(), i.currentDirection = 1
            }
            "vertical" != direction && (i.slideHandler(t), i.touchObject = {}, i.$slider.trigger("swipe", [i, direction]))
        } else i.touchObject.startX !== i.touchObject.curX && (i.slideHandler(i.currentSlide), i.touchObject = {})
    }, i.prototype.swipeHandler = function(event) {
        var t = this;
        if (!(!1 === t.options.swipe || "ontouchend" in document && !1 === t.options.swipe || !1 === t.options.draggable && -1 !== event.type.indexOf("mouse"))) switch (t.touchObject.fingerCount = event.originalEvent && void 0 !== event.originalEvent.touches ? event.originalEvent.touches.length : 1, t.touchObject.minSwipe = t.listWidth / t.options.touchThreshold, !0 === t.options.verticalSwiping && (t.touchObject.minSwipe = t.listHeight / t.options.touchThreshold), event.data.action) {
            case "start":
                t.swipeStart(event);
                break;
            case "move":
                t.swipeMove(event);
                break;
            case "end":
                t.swipeEnd(event)
        }
    }, i.prototype.swipeMove = function(event) {
        var t, i, s, o, touches, l = this;
        return touches = void 0 !== event.originalEvent ? event.originalEvent.touches : null, !(!l.dragging || touches && 1 !== touches.length) && (t = l.getLeft(l.currentSlide), l.touchObject.curX = void 0 !== touches ? touches[0].pageX : event.clientX, l.touchObject.curY = void 0 !== touches ? touches[0].pageY : event.clientY, l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))), !0 === l.options.verticalSwiping && (l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2)))), "vertical" !== (i = l.swipeDirection()) ? (void 0 !== event.originalEvent && l.touchObject.swipeLength > 4 && event.preventDefault(), o = (!1 === l.options.rtl ? 1 : -1) * (l.touchObject.curX > l.touchObject.startX ? 1 : -1), !0 === l.options.verticalSwiping && (o = l.touchObject.curY > l.touchObject.startY ? 1 : -1), s = l.touchObject.swipeLength, l.touchObject.edgeHit = !1, !1 === l.options.infinite && (0 === l.currentSlide && "right" === i || l.currentSlide >= l.getDotCount() && "left" === i) && (s = l.touchObject.swipeLength * l.options.edgeFriction, l.touchObject.edgeHit = !0), !1 === l.options.vertical ? l.swipeLeft = t + s * o : l.swipeLeft = t + s * (l.$list.height() / l.listWidth) * o, !0 === l.options.verticalSwiping && (l.swipeLeft = t + s * o), !0 !== l.options.fade && !1 !== l.options.touchMove && (!0 === l.animating ? (l.swipeLeft = null, !1) : void l.setCSS(l.swipeLeft))) : void 0)
    }, i.prototype.swipeStart = function(event) {
        var touches, t = this;
        if (t.interrupted = !0, 1 !== t.touchObject.fingerCount || t.slideCount <= t.options.slidesToShow) return t.touchObject = {}, !1;
        void 0 !== event.originalEvent && void 0 !== event.originalEvent.touches && (touches = event.originalEvent.touches[0]), t.touchObject.startX = t.touchObject.curX = void 0 !== touches ? touches.pageX : event.clientX, t.touchObject.startY = t.touchObject.curY = void 0 !== touches ? touches.pageY : event.clientY, t.dragging = !0
    }, i.prototype.unfilterSlides = i.prototype.slickUnfilter = function() {
        var t = this;
        null !== t.$slidesCache && (t.unload(), t.$slideTrack.children(this.options.slide).detach(), t.$slidesCache.appendTo(t.$slideTrack), t.reinit())
    }, i.prototype.unload = function() {
        var i = this;
        t(".slick-cloned", i.$slider).remove(), i.$dots && i.$dots.remove(), i.$prevArrow && i.htmlExpr.test(i.options.prevArrow) && i.$prevArrow.remove(), i.$nextArrow && i.htmlExpr.test(i.options.nextArrow) && i.$nextArrow.remove(), i.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "")
    }, i.prototype.unslick = function(t) {
        var i = this;
        i.$slider.trigger("unslick", [i, t]), i.destroy()
    }, i.prototype.updateArrows = function() {
        var t = this;
        Math.floor(t.options.slidesToShow / 2), !0 === t.options.arrows && t.slideCount > t.options.slidesToShow && !t.options.infinite && (t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === t.currentSlide ? (t.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : t.currentSlide >= t.slideCount - t.options.slidesToShow && !1 === t.options.centerMode ? (t.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : t.currentSlide >= t.slideCount - 1 && !0 === t.options.centerMode && (t.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")))
    }, i.prototype.updateDots = function() {
        var t = this;
        null !== t.$dots && (t.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true"), t.$dots.find("li").eq(Math.floor(t.currentSlide / t.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false"))
    }, i.prototype.visibility = function() {
        var t = this;
        t.options.autoplay && (document[t.hidden] ? t.interrupted = !0 : t.interrupted = !1)
    }, t.fn.slick = function() {
        var t, s, o = this,
            l = arguments[0],
            u = Array.prototype.slice.call(arguments, 1),
            h = o.length;
        for (t = 0; t < h; t++)
            if ("object" == typeof l || void 0 === l ? o[t].slick = new i(o[t], l) : s = o[t].slick[l].apply(o[t].slick, u), void 0 !== s) return s;
        return o
    }
}), window.matchMedia || (window.matchMedia = function() {
        "use strict";
        var styleMedia = window.styleMedia || window.media;
        if (!styleMedia) {
            var style = document.createElement("style"),
                t = document.getElementsByTagName("script")[0],
                info = null;
            style.type = "text/css", style.id = "matchmediajs-test", t.parentNode.insertBefore(style, t), info = "getComputedStyle" in window && window.getComputedStyle(style, null) || style.currentStyle, styleMedia = {
                matchMedium: function(media) {
                    var text = "@media " + media + "{ #matchmediajs-test { width: 1px; } }";
                    return style.styleSheet ? style.styleSheet.cssText = text : style.textContent = text, "1px" === info.width
                }
            }
        }
        return function(media) {
            return {
                matches: styleMedia.matchMedium(media || "all"),
                media: media || "all"
            }
        }
    }()),
    function($) {
        var escapeable = /["\\\x00-\x1f\x7f-\x9f]/g,
            meta = {
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\f": "\\f",
                "\r": "\\r",
                '"': '\\"',
                "\\": "\\\\"
            };
        $.toJSON = "object" == typeof JSON && JSON.stringify ? JSON.stringify : function(t) {
            if (null === t) return "null";
            var type = typeof t;
            if ("undefined" !== type) {
                if ("number" === type || "boolean" === type) return "" + t;
                if ("string" === type) return $.quoteString(t);
                if ("object" === type) {
                    if ("function" == typeof t.toJSON) return $.toJSON(t.toJSON());
                    if (t.constructor === Date) {
                        var i = t.getUTCMonth() + 1,
                            s = t.getUTCDate(),
                            o = t.getUTCFullYear(),
                            l = t.getUTCHours(),
                            u = t.getUTCMinutes(),
                            h = t.getUTCSeconds(),
                            p = t.getUTCMilliseconds();
                        return i < 10 && (i = "0" + i), s < 10 && (s = "0" + s), l < 10 && (l = "0" + l), u < 10 && (u = "0" + u), h < 10 && (h = "0" + h), p < 100 && (p = "0" + p), p < 10 && (p = "0" + p), '"' + o + "-" + i + "-" + s + "T" + l + ":" + u + ":" + h + "." + p + 'Z"'
                    }
                    if (t.constructor === Array) {
                        for (var m = [], _ = 0; _ < t.length; _++) m.push($.toJSON(t[_]) || "null");
                        return "[" + m.join(",") + "]"
                    }
                    var name, g, S = [];
                    for (var v in t) {
                        if ("number" == (type = typeof v)) name = '"' + v + '"';
                        else {
                            if ("string" !== type) continue;
                            name = $.quoteString(v)
                        }
                        "function" !== (type = typeof t[v]) && "undefined" !== type && (g = $.toJSON(t[v]), S.push(name + ":" + g))
                    }
                    return "{" + S.join(",") + "}"
                }
            }
        }, $.evalJSON = "object" == typeof JSON && JSON.parse ? JSON.parse : function(src) {
            return eval("(" + src + ")")
        }, $.secureEvalJSON = "object" == typeof JSON && JSON.parse ? JSON.parse : function(src) {
            var filtered = src.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "");
            if (/^[\],:{}\s]*$/.test(filtered)) return eval("(" + src + ")");
            throw new SyntaxError("Error parsing JSON, source is not valid.")
        }, $.quoteString = function(t) {
            return t.match(escapeable) ? '"' + t.replace(escapeable, function(a) {
                var c = meta[a];
                return "string" == typeof c ? c : (c = a.charCodeAt(), "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16))
            }) + '"' : '"' + t + '"'
        }
    }(jQuery),
    function() {
        function GAPlugin() {}
        var t = window.PhoneGap || window.Cordova || window.cordova;
        GAPlugin.prototype.trackEvent = function(i, s, category, o, l, u) {
            return t.exec(i, s, "GAPlugin", "trackEvent", [category, o, l, u])
        }, GAPlugin.prototype.trackPage = function(i, s, o) {
            return t.exec(i, s, "GAPlugin", "trackPage", [o])
        }, window.plugins || (window.plugins = {}), window.plugins.gaPlugin || (window.plugins.gaPlugin = new GAPlugin)
    }(),
    function() {
        function Utilities() {}
        var t = window.PhoneGap || window.Cordova || window.cordova;
        Utilities.prototype.getFreeDiskSpace = function(i, s) {
            "function" == typeof i && "function" == typeof s && t.exec(i, s, "Utilities", "getFreeDiskSpace", [])
        }, Utilities.prototype.getAppVersion = function(i, s) {
            "function" == typeof i && "function" == typeof s && t.exec(i, s, "Utilities", "getAppVersion", [])
        }, Utilities.prototype.getPNToken = function(t, i) {
            "function" == typeof t && "function" == typeof i && t()
        }, Utilities.prototype.getDeepLink = function(i, s) {
            "function" == typeof i && "function" == typeof s && t.exec(i, s, "Utilities", "getDeepLink", [])
        }, Utilities.prototype.registerNimble = function(i, s, o) {
            "function" == typeof s && "function" == typeof o && t.exec(s, o, "Utilities", "registerNimble", [i])
        }, Utilities.prototype.showStoreAppPage = function(i, s) {
            if ("function" == typeof i && "function" == typeof s) {
                var id = getAppId();
                t.exec(i, s, "Utilities", "showStoreAppPage", [id])
            }
        }, Utilities.prototype.showStatusBar = function(t, i) {
            "function" == typeof t && "function" == typeof i && t()
        }, Utilities.prototype.setStatusBarStyle = function(t, i, style) {
            "function" == typeof t && "function" == typeof i && t()
        }, window.plugins || (window.plugins = {}), window.plugins.utilities = new Utilities
    }(),
    function() {
        function PluginResourceCache() {}
        var t = window.PhoneGap || window.Cordova || window.cordova;
        PluginResourceCache.prototype.isResourceAvailable = function(t, i, s, o) {
            this.getCachedResource(function(i, path) {
                t("" !== path)
            }, i, s, o)
        }, PluginResourceCache.prototype.getCachedResource = function(i, s, o, l) {
            "function" == typeof i && "function" == typeof s && t.exec(i, s, "PluginResourceCache", "getCachedResource", [{
                resourcePath: o,
                baseUrl: l
            }])
        }, PluginResourceCache.prototype.cacheResource = function(i, s, o, l) {
            "function" == typeof i && "function" == typeof s && t.exec(i, s, "PluginResourceCache", "cacheResource", [{
                resourcePath: o,
                baseUrl: l
            }])
        }, PluginResourceCache.prototype.clearCache = function(i, s) {
            "function" == typeof i && "function" == typeof s && t.exec(i, s, "PluginResourceCache", "clearCache", [])
        };
        window.plugins || (window.plugins = {}), window.plugins.resCache = new PluginResourceCache, PluginResourceCache.UNKNOWN_ERROR = 0
    }();
var SPLASH_SCREEN_HIDE_DELAY = 50,
    RESUME_REFRESH_THRESHOLD = 60,
    DEVICE_PIXEL_RATIO = Math.round(window.devicePixelRatio) || 1,
    CLIENT_VERSION = 1,
    APP_VERSION = "18.0.5",
    PREV_GAME_NAME = "fifa17",
    GAME_NAME = "fifa18",
    STORAGE_LOCALE_KEY = "loc",
    ALEX_HUNTER_MIN_ID = 22800,
    ALEX_HUNTER_MAX_ID = 22811,
    ALEX_HUNTER_PLACEHOLDER_ASSET_ID = 26501,
    DANNY_WILLIAMS_MIN_ID = 22880,
    DANNY_WILLIAMS_MAX_ID = 22899,
    DANNY_WILLIAMS_PLACEHOLDER_ASSET_ID = 26503,
    AUCTION_MIN_BUY = 200,
    AUCTION_MIN_BID = 150,
    AUCTION_MAX_BID = 15e6,
    PLAYSTYLE_CHEMISTRY_THRESHOLD = 4,
    MONTH_NAMES = ["date.january", "date.february", "date.march", "date.april", "date.may", "date.june", "date.july", "date.august", "date.september", "date.october", "date.november", "date.december"],
    TOP_NINE_NATIONS = [52, 54, 14, 18, 21, 34, 27, 38, 45],
    SEARCHABLE_POSITIONS = [0, 2, 3, 5, 7, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23, 25, 27],
    PLAYER_ATTRIB_LOOKUP = ["pace", "shooting", "passing", "dribbling", "defending", "heading"],
    GK_ATTRIB_LOOKUP = ["gkDiving", "gkHandling", "gkKicking", "gkReflexes", "gkOneOnOne", "gkPositioning"],
    HEALTH_ATTRIB_LOOKUP = ["physioArm", "physioBack", "physioFoot", "physioHead", "physioHip", "physioLeg", "physioShoudler", "fitness", "managerTalk", "physioAll"],
    ZONE_DEFENDER_VALUE = "defense",
    ZONE_MIDFIELDER_VALUE = "midfield",
    ZONE_ATTACKER_VALUE = "attacker",
    ZONE_NO_GK_VALUE = "noGK",
    PLAYER_ZONE_LOOKUP = [{
        id: -1,
        label: "roles.defaultRole",
        value: "any"
    }, {
        id: 130,
        label: "search.positions.zone130",
        value: ZONE_DEFENDER_VALUE
    }, {
        id: 131,
        label: "search.positions.zone131",
        value: ZONE_MIDFIELDER_VALUE
    }, {
        id: 132,
        label: "search.positions.zone132",
        value: ZONE_ATTACKER_VALUE
    }, {
        id: 133,
        label: "roles.defaultRole",
        value: ZONE_NO_GK_VALUE
    }],
    POSITION_ZONE_LOOKUP = [{
        value: ZONE_DEFENDER_VALUE,
        minPosId: 1,
        maxPosId: 8
    }, {
        value: ZONE_MIDFIELDER_VALUE,
        minPosId: 9,
        maxPosId: 19
    }, {
        value: ZONE_ATTACKER_VALUE,
        minPosId: 20,
        maxPosId: 27
    }, {
        value: ZONE_NO_GK_VALUE,
        minPosId: 1,
        maxPosId: 27
    }],
    STRING_EQUALITY_LOOKUP = [{
        equivalent: "a",
        characters: "àáâãäåāăą"
    }, {
        equivalent: "ae",
        characters: "æ"
    }, {
        equivalent: "c",
        characters: "çćĉċč"
    }, {
        equivalent: "d",
        characters: "ďđ"
    }, {
        equivalent: "e",
        characters: "èéêëēĕėęě"
    }, {
        equivalent: "g",
        characters: "ĝğġģ"
    }, {
        equivalent: "h",
        characters: "ĥ"
    }, {
        equivalent: "i",
        characters: "ìíîïĩīĭįı"
    }, {
        equivalent: "j",
        characters: "ĵ"
    }, {
        equivalent: "k",
        characters: "ķ"
    }, {
        equivalent: "l",
        characters: "ĺļľŀł"
    }, {
        equivalent: "n",
        characters: "ñńņňŉ"
    }, {
        equivalent: "o",
        characters: "òóôõöōŏőø"
    }, {
        equivalent: "r",
        characters: "ŕŗř"
    }, {
        equivalent: "s",
        characters: "śŝşš"
    }, {
        equivalent: "t",
        characters: "ţťŧ"
    }, {
        equivalent: "u",
        characters: "ùúûüũūŭůűų"
    }, {
        equivalent: "y",
        characters: "ýŷ"
    }, {
        equivalent: "z",
        characters: "źżž"
    }],
    DEFAULT_PLAYSTYLE_ID = 250,
    DEFAULT_FORMATION = "f442",
    MAX_NEW_ITEMS = 5,
    MIN_SQUAD_NAME_LENGTH = 3,
    MAX_SQUAD_NAME_LENGTH = 15,
    MAX_ITEMS_REQUEST = 90,
    NamespaceManager = {};
NamespaceManager.Register = function(t) {
    function registerObjs(t, parent) {
        var name = t.shift();
        parent && name && (parent[name] || (parent[name] = {}), registerObjs(t, parent[name]))
    }
    registerObjs(t.split("."), window)
}, NamespaceManager.Register("utils"), utils.JS = {}, utils.JS.isValid = function(value) {
    return void 0 !== value && null !== value
}, utils.JS.isEmpty = function(value) {
    return void 0 === value || null === value || utils.JS.isString(value) && "" === value.trim()
}, utils.JS.isString = function(value) {
    return "string" == typeof value
}, utils.JS.isNumber = function(value) {
    return "number" == typeof value && isFinite(value)
}, utils.JS.isBoolean = function(value) {
    return "boolean" == typeof value
}, utils.JS.isObject = function(value) {
    return "object" == typeof value && null !== value && !Array.isArray(value)
}, utils.JS.isFunction = function(t) {
    return "[object Function]" === Object.prototype.toString.call(t)
}, utils.JS.getDefinitionByName = function(className) {
    var t, i, s = className.split("."),
        o = window || this,
        l = s.length;
    for (i = 0; i < l; ++i) o = o[s[i]], i === l - 1 && (t = o);
    return t
}, utils.JS.parseNumber = function parseNumber(t, locale) {
    if (0 === t.length) return 0;
    var i = 1.1.toLocaleString(locale),
        s = new RegExp("[^-+0-9$" + i.charAt(1) + "]", "g");
    return parseFloat(t.replace(s, "").replace(i.charAt(1), "."))
}, utils.JS.formatTimeForServer = function(timeStamp) {
    return timeStamp.split(/[+ .]/)[0].replace(/[\- :]/g, "") + "Z"
}, utils.JS.parseDateString = function(t) {
    var i = t.split(/[\- T : . + Z]/),
        s = -1 !== t.indexOf("+"),
        o = parseInt(i[0], 10),
        l = parseInt(i[1], 10) - 1,
        u = parseInt(i[2], 10),
        h = parseInt(i[3], 10),
        p = parseInt(i[4], 10),
        m = parseInt(i[5], 10),
        _ = i[6],
        g = 0;
    if (4 === _.length) {
        var S = _.substring(0, 2),
            v = parseInt(S, 10),
            T = _.substring(2);
        g = 1e3 * (3600 * v + 60 * parseInt(T, 10)), s || (g = -g)
    }
    return new Date(Date.UTC(o, l, u, h, p, m) + g)
}, utils.JS.inherits = function inherits(t, i) {
    t.prototype = Object.create(i.prototype), Object.defineProperty(t.prototype, "constructor", {
        value: t,
        writable: !1,
        enumerable: !1
    }), t.superClass_ = i.prototype
}, utils.JS.find = function find(t, i) {
    if (!utils.JS.isValid(t) || "function" != typeof i) return utils.Debug.Assert(utils.JS.isValid(t), "Array find method called without a valid array."), utils.Debug.Assert("function" == typeof i, "Array find method called without a valid callback function."), null;
    var s;
    for (s = 0; s < t.length; s++)
        if (i(t[s], s, t)) return t[s];
    return null
}, utils.JS.getSortedKeys = function getSortedKeys(t) {
    var keys = [],
        key = null;
    for (key in t) t.hasOwnProperty(key) && keys.push(key);
    return keys.sort(function(a, b) {
        return t[b] - t[a]
    })
}, utils.JS.sortCompare = function sortCompare(a, b, reverse) {
    return a < b ? reverse ? 1 : -1 : a > b ? reverse ? -1 : 1 : 0
}, utils.JS.getRandomArrayValues = function getRandomArrayValues(t, i) {
    return t.sort(function(a, b) {
        return .5 - Math.random()
    }).slice(0, i)
}, utils.JS.createEvent = function createEvent(type) {
    var event;
    try {
        event = new Event(type)
    } catch (t) {
        (event = document.createEvent("Event")).initEvent(type, !1, !1)
    }
    return event
}, utils.JS.valToArray = function(t) {
    return utils.JS.isValid(t) ? Array.isArray(t) ? t : [t] : []
}, utils.JS.removeElementsFromArray = function(a, b) {
    return b = utils.JS.valToArray(b), a.filter(function(t) {
        return b.indexOf(t) < 0
    })
}, NamespaceManager.Register("utils"), utils.FUTData = {}, utils.FUTData.mapSkuToCurrentYear = function mapSkuToCurrentYear(t) {
    switch (t) {
        case enums.SKU.XBX:
        case enums.SKU.PREV_XBX:
            return enums.SKU.XBX;
        case enums.SKU.XBO:
        case enums.SKU.PREV_XBO:
            return enums.SKU.XBO;
        case enums.SKU.PS3:
        case enums.SKU.PREV_PS3:
            return enums.SKU.PS3;
        case enums.SKU.PS4:
        case enums.SKU.PREV_PS4:
            return enums.SKU.PS4;
        case enums.SKU.PC:
        case enums.SKU.PREV_PC:
            return enums.SKU.PC;
        case enums.SKU.SWI:
        case enums.SKU.PREV_SWI:
            return enums.SKU.SWI
    }
    return enums.SKU.NONE
}, utils.FUTData.mapSkuToPreviousYear = function mapSkuToPreviousYear(t) {
    switch (t) {
        case enums.SKU.XBX:
        case enums.SKU.PREV_XBX:
            return enums.SKU.PREV_XBX;
        case enums.SKU.XBO:
        case enums.SKU.PREV_XBO:
            return enums.SKU.PREV_XBO;
        case enums.SKU.PS3:
        case enums.SKU.PREV_PS3:
            return enums.SKU.PREV_PS3;
        case enums.SKU.PS4:
        case enums.SKU.PREV_PS4:
            return enums.SKU.PREV_PS4;
        case enums.SKU.PC:
        case enums.SKU.PREV_PC:
            return enums.SKU.PREV_PC;
        case enums.SKU.SWI:
        case enums.SKU.PREV_SWI:
            return enums.SKU.PREV_SWI
    }
    return enums.SKU.NONE
}, utils.FUTData.mapSkuToPlatform = function mapSkuToPlatform(t) {
    switch (t) {
        case enums.SKU.XBX:
        case enums.SKU.PREV_XBX:
            return enums.Platform.XBX;
        case enums.SKU.XBO:
        case enums.SKU.PREV_XBO:
            return enums.Platform.XBO;
        case enums.SKU.PS3:
        case enums.SKU.PREV_PS3:
            return enums.Platform.PS3;
        case enums.SKU.PS4:
        case enums.SKU.PREV_PS4:
            return enums.Platform.PS4;
        case enums.SKU.PC:
        case enums.SKU.PREV_PC:
            return enums.Platform.PC;
        case enums.SKU.SWI:
        case enums.SKU.PREV_SWI:
            return enums.Platform.SWI
    }
    return enums.Platform.NONE
}, utils.FUTData.mapNationIdToOnboardingCountryId = function mapNationIdToOnboardingCountryId(id) {
    switch (id) {
        case enums.Country.ENGLAND:
            return 1;
        case enums.Country.BRAZIL:
            return 2;
        case enums.Country.FRANCE:
            return 3;
        case enums.Country.ARGENTINA:
            return 4;
        case enums.Country.GERMANY:
            return 5;
        case enums.Country.ITALY:
            return 6;
        case enums.Country.SPAIN:
            return 7;
        case enums.Country.PORTUGAL:
            return 8;
        case enums.Country.NETHERLANDS:
            return 9
    }
    return 0
}, utils.FUTData.mapOnboardingCountryIdToNationId = function mapOnboardingCountryIdToNationId(id) {
    switch (id) {
        case 1:
            return enums.Country.ENGLAND;
        case 2:
            return enums.Country.BRAZIL;
        case 3:
            return enums.Country.FRANCE;
        case 4:
            return enums.Country.ARGENTINA;
        case 5:
            return enums.Country.GERMANY;
        case 6:
            return enums.Country.ITALY;
        case 7:
            return enums.Country.SPAIN;
        case 8:
            return enums.Country.PORTUGAL;
        case 9:
            return enums.Country.NETHERLANDS
    }
    return 0
}, NamespaceManager.Register("enums"), enums.AuctionBidState = {
    BUYNOW: "buyNow",
    HIGHEST: "highest",
    NONE: "none",
    OUTBID: "outbid"
}, Object.freeze(enums.AuctionBidState), enums.AuctionTradeState = {
    ACTIVE: "active",
    CLOSED: "closed",
    EXPIRED: "expired",
    INACTIVE: "inactive",
    INVALID: "invalid"
}, Object.freeze(enums.AuctionTradeState), NamespaceManager.Register("enums"), enums.SessionProtocol = {
    HTTP: "http",
    HTTPS: "https"
}, Object.freeze(enums.SessionProtocol), enums.AuthEnvironment = {
    NONE: 0,
    UTAS: 1,
    PAS: 2
}, Object.freeze(enums.AuthEnvironment), enums.AuthenticationState = {
    STATE_UNAUTHENTICATED: "UNAUTHENTICATED",
    STATE_AUTHENTICATING: "AUTHENTICATING",
    STATE_AUTHENTICATED: "AUTHENTICATED",
    STATE_AUTHENTICATION_FAILED: "AUTHENTICATION_FAILED"
}, Object.freeze(enums.AuthenticationState), enums.UserState = {
    NONE: "",
    RETURNING_USER_EXPIRED: "RETURNING_USER_EXPIRED"
}, Object.freeze(enums.UserState), enums.FUTAuthState = {
    NO_DATA: 0,
    SERVER_DOWN: 1,
    CONCURRENT_SESSION: 2,
    NEW_TRIAL_USER: 3,
    ACCOUNT_LOCKED: 4,
    NO_SECURITY_QUESTION: 5,
    COMPLETE: 6
}, Object.freeze(enums.FUTAuthState), enums.Platform = {
    NONE: "",
    XBX: "XBX",
    XBO: "XBO",
    PS3: "PS3",
    PS4: "PS4",
    PC: "PC",
    SWI: "SWI"
}, Object.freeze(enums.Platform), enums.SKU = {
    NONE: "",
    XBX: "FFA18XBX",
    XBO: "FFA18XBO",
    PS3: "FFA18PS3",
    PS4: "FFA18PS4",
    PC: "FFA18PCC",
    SWI: "FFA18SWI",
    PREV_XBX: "FFA17XBX",
    PREV_XBO: "FFA17XBO",
    PREV_PS3: "FFA17PS3",
    PREV_PS4: "FFA17PS4",
    PREV_PC: "FFA17PCC",
    PREV_SWI: "FFA18SWI"
}, enums.SKU.FUT = "FUT18WEB", Object.freeze(enums.SKU), NamespaceManager.Register("enums"), enums.Event = {
    CLICK: "click",
    MOUSEDOWN: "mousedown",
    MOUSEMOVE: "mousemove",
    MOUSEUP: "mouseup",
    MOUSELEAVE: "mouseleave",
    MOUSEENTER: "mouseenter",
    MOUSECANCEL: "mousecancel",
    TOUCHSTART: "touchstart",
    TOUCHEND: "touchend",
    TOUCHMOVE: "touchmove",
    TOUCHCANCEL: "touchcancel",
    TOUCHLEAVE: "touchleave",
    FOCUS: "focus",
    BLUR: "blur",
    CHANGE: "change",
    INPUT: "input",
    CUT: "cut",
    PASTE: "paste",
    TAP: "tap",
    ANIMATIONSTART: "animationstart webkitAnimationStart",
    ANIMATIONEND: "animationend webkitAnimationEnd",
    TRANSITIONEND: "transitionend webkitTransitionEnd",
    RESIZE: "resize",
    LOAD: "load",
    ERROR: "error",
    KEYDOWN: "keydown",
    KEYUP: "keyup"
}, Object.freeze(enums.Event), enums.UIItemNavigationEvent = {
    NEXT: "next",
    PREV: "prev"
}, Object.freeze(enums.UIItemNavigationEvent), enums.UIPaginationEvent = {
    NEXT: "paginationnext",
    PREVIOUS: "paginationprev"
}, Object.freeze(enums.UIPaginationEvent), enums.UIListEvent = {
    ROW_ACTION: "rowaction",
    ROW_SELECT: "rowselect"
}, Object.freeze(enums.UIListEvent), enums.UIPackEvent = {
    OPEN: "open",
    BUY_COINS: "buyCoins",
    BUY_POINTS: "buyPoints"
}, Object.freeze(enums.UIPackEvent), enums.UIItemActionEvent = {
    BIO: "itemBio",
    REDEEM: "itemRedeem",
    APPLY_CONSUMABLE: "itemApplyConsumable",
    ACTIVATE: "itemActivate",
    SEND_TO_CLUB: "itemSendToClub",
    SEND_TO_TRANSFERS: "itemSendToTransfers",
    SEND_TO_SQUAD: "itemSendToSquad",
    DISCARD: "itemDiscard",
    REMOVE_FROM_SQUAD: "itemRemoveFromSquad",
    ADD_SWAP: "itemAddSwap",
    LIST_ON_MARKET: "itemListOnMarket",
    COMPARE: "itemCompare",
    SEARCH_ON_MARKET: "itemSearchOnMarket"
}, Object.freeze(enums.UIItemActionEvent), enums.UISquadPitchEvent = {
    DRAG_START: "squadDragStart",
    DRAG_END: "squadDragEnd",
    ITEM_SWAP: "squadItemSwap",
    SLOT_SELECT: "squadSlotSelect"
}, Object.freeze(enums.UISquadPitchEvent), NamespaceManager.Register("enums"), enums.FOSService = {}, enums.FOSService.EASFC = "SERVICE_EASFC", enums.FOSService.FUT = "SERVICE_FUT", NamespaceManager.Register("enums"), enums.Product = {
    WEB: "Web",
    COMPANION: "Companion"
}, Object.freeze(enums.Product), enums.Year = {
    YEAR_2009: 1,
    YEAR_2010: 2,
    YEAR_2011: 3,
    YEAR_2012: 4,
    YEAR_2013: 5,
    YEAR_2014: 6,
    YEAR_2015: 7,
    YEAR_2016: 8,
    YEAR_2017: 9,
    YEAR_2018: 10,
    ASSET: 10
}, Object.freeze(enums.Year), enums.Country = {
    BELGIUM: 7,
    ENGLAND: 14,
    FRANCE: 18,
    GERMANY: 21,
    ITALY: 27,
    NETHERLANDS: 34,
    PORTUGAL: 38,
    SPAIN: 45,
    ARGENTINA: 52,
    BRAZIL: 54
}, Object.freeze(enums.Country), enums.Currency = {
    COINS: "COINS",
    POINTS: "POINTS",
    DRAFT_TOKEN: "DRAFT_TOKEN"
}, Object.freeze(enums.Currency), enums.FUTItemPile = {
    ANY: 0,
    TRANSFER: 5,
    PURCHASED: 6,
    CLUB: 7,
    INBOX: 8,
    GIFT: 9
}, Object.freeze(enums.FUTItemPile), enums.PlaceholderAssetId = {
    PLAYER: 0,
    KIT: 0,
    TEAM: 0,
    STAFF: 0,
    BALL: 0,
    FLAG: 0,
    STADIUM: 0
}, Object.freeze(enums.PlaceholderAssetId), enums.PlaceholderAssetKey = {
    PLAYERS: "players",
    KITS: "kits",
    CREST: "badges",
    CREST_LIGHT: "light",
    CREST_DARK: "dark",
    STAFF: "staff",
    BALLS: "balls"
}, Object.freeze(enums.PlaceholderAssetKey), enums.GettingStartedTypes = {
    ACCESS_TRIAL: "ACCESS_TRIAL",
    FREE_TRIAL: "FREE_TRIAL",
    FUT: "FUT",
    FIFA: "FIFA",
    NO_SKU: "NO_SKU",
    PLATFORM_SWITCH: "PLATFORM_SWITCH"
}, Object.freeze(enums.GettingStartedTypes), enums.PlayerBioDisplayGroup = {
    INFO: 0,
    ATTRIBUTES: 1,
    LEGENDS: 2
}, Object.freeze(enums.PlayerBioDisplayGroup), enums.ItemSearchFeature = {
    CLUB: "club",
    CONCEPT: "dream",
    MARKET: "market"
}, Object.freeze(enums.ItemSearchFeature), enums.SearchSort = {
    ASCENDING: "asc",
    DESCENDING: "desc"
}, Object.freeze(enums.SearchSort), enums.SearchUntradeables = {
    DEFAULT: "",
    ONLY: "true",
    EXCLUDE: "false"
}, Object.freeze(enums.SearchUntradeables), enums.SearchBucket = {
    PLAYER: 0,
    STAFF: 1,
    CLUB: 2,
    CONSUMABLE: 3
}, Object.freeze(enums.SearchBucket), enums.SearchType = {
    ANY: "any",
    BALL: "ball",
    CLUB_INFO: "clubInfo",
    CONSUMABLES_DEVELOPMENT: "development",
    CONSUMABLES_TRAINING: "training",
    PLAYER: "player",
    STADIUM: "stadium",
    STAFF: "staff"
}, Object.freeze(enums.SearchType), enums.SearchCategory = {
    ANY: "any",
    PLAYER_GK: "playerGK",
    PLAYER_NO_GK: "noGK",
    MANAGER: "manager",
    COACH_FITNESS: "fitnessCoach",
    COACH_GK: "GKCoach",
    COACH_HEAD: "headCoach",
    PHYSIO: "physio",
    BADGE: "badge",
    KIT: "kit",
    PLAYER_TRAINING: "playerTraining",
    GK_TRAINING: "GKTraining",
    POSITION: "position",
    CONTRACT: "contract",
    FITNESS: "fitness",
    HEALING: "healing",
    STADIUM: "stadium",
    BALL: "ball",
    PLAYSTYLE: "playStyle",
    MANAGER_LEAGUE: "managerLeagueModifier",
    DEFID: "definitionId",
    MASKED_DEFID: "maskedDefId"
}, Object.freeze(enums.SearchCategory), enums.SearchLevel = {
    ANY: "any",
    BRONZE: "bronze",
    SILVER: "silver",
    GOLD: "gold",
    SPECIAL: "SP"
}, Object.freeze(enums.SearchLevel), enums.LoyaltyRewardType = {
    PACKS: 1,
    COINS: 2,
    ITEMS: 4,
    DRAFT_TOKENS: 7
}, Object.freeze(enums.LoyaltyRewardType), enums.AwardType = {
    COIN: "coin",
    PACK: "pack",
    ITEM: "item",
    CHAMPION_QUALIFIER: "champion_qualifier"
}, Object.freeze(enums.AwardType), enums.TeamStarRanges = {
    RATING_0_0: 0,
    RATING_0_5: 59,
    RATING_1_0: 62,
    RATING_1_5: 64,
    RATING_2_0: 66,
    RATING_2_5: 68,
    RATING_3_0: 70,
    RATING_3_5: 74,
    RATING_4_0: 78,
    RATING_4_5: 82,
    RATING_5_0: 99
}, Object.freeze(enums.TeamStarRanges), enums.PlayerPositions = {
    GK: "GK",
    RWB: "RWB",
    RB: "RB",
    LWB: "LWB",
    LB: "LB",
    CDM: "CDM",
    CM: "CM",
    RM: "RM",
    LM: "LM",
    CAM: "CAM",
    RF: "RF",
    CF: "CF",
    LF: "LF",
    RW: "RW",
    LW: "LW",
    ST: "ST"
}, Object.freeze(enums.PlayerPositions), enums.PlayerPositionsAsInts = {
    GK: 0,
    SW: 1,
    RWB: 2,
    RB: 3,
    RCB: 4,
    CB: 5,
    LCB: 6,
    LB: 7,
    LWB: 8,
    RDM: 9,
    CDM: 10,
    LDM: 11,
    RM: 12,
    RCM: 13,
    CM: 14,
    LCM: 15,
    LM: 16,
    RAM: 17,
    CAM: 18,
    LAM: 19,
    RF: 20,
    CF: 21,
    LF: 22,
    RW: 23,
    RS: 24,
    ST: 25,
    LS: 26,
    LW: 27
}, Object.freeze(enums.PlayerPositionsAsInts), enums.PlayerZonesAsInts = {
    DEFENSE: 130,
    MIDFIELD: 131,
    ATTACKER: 132
}, Object.freeze(enums.PlayerZonesAsInts), enums.PlayerStats = {
    PACE: 0,
    SHOOTING: 1,
    PASSING: 2,
    DRIBBLING: 3,
    DEFEND: 4,
    HEADING: 5,
    ALL: 6
}, Object.freeze(enums.PlayerStats), enums.GKStats = {
    DIVING: 0,
    HANDLING: 1,
    KICKING: 2,
    REFLEX: 3,
    SPEED: 4,
    POSITION: 5,
    ALL: 6
}, Object.freeze(enums.GKStats), enums.ItemRareType = {
    NONE: 0,
    RARE: 1,
    LOCK: 2,
    TOTW: 3,
    PURPLE: 4,
    TOTY: 5,
    RB: 6,
    GREEN: 7,
    ORANGE: 8,
    PINK: 9,
    TEAL: 10,
    TOTS: 11,
    LEGEND: 12,
    WC: 13,
    UNICEF: 14,
    OLDIMOTM: 15,
    FUTTY: 16,
    STORYMODE: 17,
    CHAMPION: 18,
    CMOTM: 19,
    IMOTM: 20,
    OTW: 21,
    HALLOWEEN: 22,
    MOVEMBER: 23,
    SBC: 24,
    SBCP: 25,
    PROMOA: 26,
    PROMOB: 27,
    AWARD: 28,
    BDAY: 30,
    UNITED: 31,
    FUTMAS: 32,
    RTRC: 33,
    PTGS: 34,
    FOF: 35,
    MARQUEE: 36,
    CHAMPIONSHIP: 37,
    EUMOTM: 38,
    TOTT: 39,
    RRC: 40,
    RRR: 41
}, Object.freeze(enums.ItemRareType), enums.ItemRatingTier = {
    NONE: 0,
    BRONZE: 1,
    SILVER: 2,
    GOLD: 3
}, Object.freeze(enums.ItemRatingTier), enums.KitActivationSlot = {
    HOME: 101,
    AWAY: 102
}, Object.freeze(enums.KitActivationSlot), enums.ItemCardAssetId = {
    TRAINING_PLAYER: 1,
    TRAINING_GK: 3,
    CONTRACT_PLAYER: 7,
    CONTRACT_MANAGER: 8,
    HEALING: 9,
    FITNESS: 10,
    MANAGER_LEAGUE: 32,
    POSITION_MODIFIER: 34,
    PLAYSTYLE_PLAYER: 50,
    PLAYSTYLE_GK: 51
}, Object.freeze(enums.ItemCardAssetId), enums.ItemType = {
    NONE: "none",
    BADGE: "custom",
    BALL: "ball",
    CONTRACT: "contract",
    FITNESS_COACH: "fitnessCoach",
    GK_COACH: "gkCoach",
    HEAD_COACH: "headCoach",
    HEALTH: "health",
    KIT: "kit",
    MANAGER: "manager",
    MISC: "misc",
    PHYSIO: "physio",
    PLAYER: "player",
    STADIUM: "stadium",
    TRAINING: "training"
}, Object.freeze(enums.ItemType), enums.ItemSubType = {
    NONE: 0,
    PLAYER: 2,
    MANAGER: 4,
    HEAD_COACH: 5,
    GK_COACH: 6,
    PHYSIO: 7,
    FITNESS_COACH: 8,
    TRAINING_GK_DIVING: 51,
    TRAINING_GK_HANDLING: 52,
    TRAINING_GK_KICKING: 53,
    TRAINING_GK_SPEED: 54,
    TRAINING_GK_POSITION: 55,
    TRAINING_GK_REFLEX: 56,
    TRAINING_GK_ALL: 57,
    TRAINING_PLAYER_PACE: 61,
    TRAINING_PLAYER_SHOOTING: 62,
    TRAINING_PLAYER_PASSING: 63,
    TRAINING_PLAYER_DRIBBLING: 64,
    TRAINING_PLAYER_HEADING: 65,
    TRAINING_PLAYER_DEFEND: 66,
    TRAINING_PLAYER_ALL: 67,
    TRAINING_PLAYER_FORMATION_3412: 71,
    TRAINING_PLAYER_FORMATION_3421: 72,
    TRAINING_PLAYER_FORMATION_343: 73,
    TRAINING_PLAYER_FORMATION_352: 74,
    TRAINING_PLAYER_FORMATION_41212: 75,
    TRAINING_PLAYER_FORMATION_4231: 76,
    TRAINING_PLAYER_FORMATION_4222: 77,
    TRAINING_PLAYER_FORMATION_4312: 78,
    TRAINING_PLAYER_FORMATION_4321: 79,
    TRAINING_PLAYER_FORMATION_433: 80,
    TRAINING_PLAYER_FORMATION_4411: 81,
    TRAINING_PLAYER_FORMATION_442: 82,
    TRAINING_PLAYER_FORMATION_451: 83,
    TRAINING_PLAYER_FORMATION_5212: 84,
    TRAINING_PLAYER_FORMATION_5221: 85,
    TRAINING_PLAYER_FORMATION_532: 86,
    TRAINING_PLAYER_POS_LWB_LB: 91,
    TRAINING_PLAYER_POS_LB_LWB: 92,
    TRAINING_PLAYER_POS_RWB_RB: 93,
    TRAINING_PLAYER_POS_RB_RWB: 94,
    TRAINING_PLAYER_POS_LM_LW: 95,
    TRAINING_PLAYER_POS_RM_RW: 96,
    TRAINING_PLAYER_POS_LW_LM: 97,
    TRAINING_PLAYER_POS_RW_RM: 98,
    TRAINING_PLAYER_POS_LW_LF: 99,
    TRAINING_PLAYER_POS_RW_RF: 100,
    TRAINING_PLAYER_POS_LF_LW: 101,
    TRAINING_PLAYER_POS_RF_RW: 102,
    TRAINING_PLAYER_POS_CM_CAM: 103,
    TRAINING_PLAYER_POS_CAM_CM: 104,
    TRAINING_PLAYER_POS_CDM_CM: 105,
    TRAINING_PLAYER_POS_CM_CDM: 106,
    TRAINING_PLAYER_POS_CAM_CF: 107,
    TRAINING_PLAYER_POS_CF_CAM: 108,
    TRAINING_PLAYER_POS_CF_ST: 109,
    TRAINING_PLAYER_POS_ST_CF: 110,
    TRAINING_MANAGER_FORMATION_3412: 121,
    TRAINING_MANAGER_FORMATION_3421: 122,
    TRAINING_MANAGER_FORMATION_343: 123,
    TRAINING_MANAGER_FORMATION_352: 124,
    TRAINING_MANAGER_FORMATION_41212: 125,
    TRAINING_MANAGER_FORMATION_4231: 126,
    TRAINING_MANAGER_FORMATION_4222: 127,
    TRAINING_MANAGER_FORMATION_4312: 128,
    TRAINING_MANAGER_FORMATION_4321: 129,
    TRAINING_MANAGER_FORMATION_433: 130,
    TRAINING_MANAGER_FORMATION_4411: 131,
    TRAINING_MANAGER_FORMATION_442: 132,
    TRAINING_MANAGER_FORMATION_451: 133,
    TRAINING_MANAGER_FORMATION_5212: 134,
    TRAINING_MANAGER_FORMATION_5221: 135,
    TRAINING_MANAGER_FORMATION_532: 136,
    CONTRACT_PLAYER: 201,
    CONTRACT_MANAGER: 202,
    HEALING_HEAD: 211,
    HEALING_SHOULDER: 212,
    HEALING_ARM: 213,
    HEALING_BACK: 214,
    HEALING_HIP: 215,
    HEALING_LEG: 216,
    HEALING_FOOT: 217,
    HEALING_ALL: 218,
    FITNESS_PLAYER: 219,
    FITNESS_TEAM: 220,
    MORALE_PLAYER: 221,
    MORALE_TEAM: 222,
    FREE_COINS: 231,
    STADIUM_UPGRADE: 232,
    FREE_PACK: 233,
    WC_PACK: 235,
    DRAFT_TOKEN: 236,
    TRAINING_PLAYERSTYLE_GENERAL_1: 250,
    TRAINING_PLAYERSTYLE_GENERAL_2: 251,
    TRAINING_PLAYERSTYLE_GENERAL_3: 252,
    TRAINING_PLAYERSTYLE_GENERAL_4: 253,
    TRAINING_PLAYERSTYLE_GENERAL_5: 254,
    TRAINING_PLAYERSTYLE_GENERAL_6: 255,
    TRAINING_PLAYERSTYLE_GENERAL_7: 256,
    TRAINING_PLAYERSTYLE_GENERAL_8: 257,
    TRAINING_PLAYERSTYLE_GENERAL_9: 258,
    TRAINING_PLAYERSTYLE_GENERAL_10: 259,
    TRAINING_PLAYERSTYLE_GENERAL_11: 260,
    TRAINING_PLAYERSTYLE_GENERAL_12: 261,
    TRAINING_PLAYERSTYLE_GENERAL_13: 262,
    TRAINING_PLAYERSTYLE_GENERAL_14: 263,
    TRAINING_PLAYERSTYLE_GENERAL_15: 264,
    TRAINING_PLAYERSTYLE_GENERAL_16: 265,
    TRAINING_PLAYERSTYLE_GENERAL_17: 266,
    TRAINING_PLAYERSTYLE_GENERAL_18: 267,
    TRAINING_PLAYERSTYLE_GENERAL_19: 268,
    TRAINING_PLAYERSTYLE_GOALKEEPER_1: 269,
    TRAINING_PLAYERSTYLE_GOALKEEPER_2: 270,
    TRAINING_PLAYERSTYLE_GOALKEEPER_3: 271,
    TRAINING_PLAYERSTYLE_GOALKEEPER_4: 272,
    TRAINING_PLAYERSTYLE_GOALKEEPER_5: 273,
    MANAGERLEAGUE_DENMARK: 300,
    MANAGERLEAGUE_ARGENTINA: 340
}, Object.freeze(enums.ItemSubType), enums.ItemState = {
    FREE: "free",
    INGAME: "ingame",
    FORSALE: "forSale",
    OFFERED: "offered",
    ACTIVE: "active",
    INVALID: "invalid",
    ACTIVE_BADGE: "activeBadge",
    ACTIVE_HOME_KIT: "activeHomeKit",
    ACTIVE_AWAY_KIT: "activeAwayKit",
    ACTIVE_BALL: "activeBall",
    ACTIVE_STADIUM: "activeStadium"
}, Object.freeze(enums.ItemState), enums.PlayerInjury = {
    NONE: "none",
    HEAD: "head",
    SHOULDER: "shoulder",
    ARM: "arm",
    BACK: "back",
    HIP: "hip",
    LEG: "leg",
    FOOT: "foot"
}, Object.freeze(enums.PlayerInjury), enums.ItemMask = {
    DATABASE: 16777215,
    REVISION: 251658240,
    FULL_REVISION: 4278190080,
    YEAR: 4026531840
}, Object.freeze(enums.ItemMask), enums.UserSquadId = {
    ACTIVE: "active",
    GENERATIONS: "generations"
}, Object.freeze(enums.UserSquadId), enums.SquadType = {
    REGULAR: "REGULAR_SQUAD",
    DREAM: "DREAM_SQUAD",
    DRAFT: "DRAFT_SQUAD",
    GENERATIONS: "GENERATIONS_SQUAD"
}, Object.freeze(enums.SquadType), enums.PlayerZone = {
    ATTACKERS: "ATTACKERS",
    DEFENDERS: "DEFENDERS",
    MIDFIELDERS: "MIDFIELDERS",
    GOALKEEPERS: "GOALKEEPERS"
}, Object.freeze(enums.PlayerZone), enums.SquadPositionZones = {
    0: enums.PlayerZone.GOALKEEPERS,
    1: enums.PlayerZone.DEFENDERS,
    2: enums.PlayerZone.DEFENDERS,
    3: enums.PlayerZone.DEFENDERS,
    4: enums.PlayerZone.DEFENDERS,
    5: enums.PlayerZone.DEFENDERS,
    6: enums.PlayerZone.DEFENDERS,
    7: enums.PlayerZone.DEFENDERS,
    8: enums.PlayerZone.DEFENDERS,
    9: enums.PlayerZone.MIDFIELDERS,
    10: enums.PlayerZone.MIDFIELDERS,
    11: enums.PlayerZone.MIDFIELDERS,
    12: enums.PlayerZone.MIDFIELDERS,
    13: enums.PlayerZone.MIDFIELDERS,
    14: enums.PlayerZone.MIDFIELDERS,
    15: enums.PlayerZone.MIDFIELDERS,
    16: enums.PlayerZone.MIDFIELDERS,
    17: enums.PlayerZone.MIDFIELDERS,
    18: enums.PlayerZone.MIDFIELDERS,
    19: enums.PlayerZone.ATTACKERS,
    20: enums.PlayerZone.ATTACKERS,
    21: enums.PlayerZone.ATTACKERS,
    22: enums.PlayerZone.ATTACKERS,
    23: enums.PlayerZone.ATTACKERS,
    24: enums.PlayerZone.ATTACKERS,
    25: enums.PlayerZone.ATTACKERS,
    26: enums.PlayerZone.ATTACKERS,
    27: enums.PlayerZone.ATTACKERS
}, Object.freeze(enums.SquadPositionZones), enums.SquadPitchThemes = {
    NONE: "",
    WINTER: "winterTheme"
}, Object.freeze(enums.SquadPitchThemes), enums.SquadPitchTypes = {
    REGULAR: "",
    CONCEPT: "dreamPitch"
}, Object.freeze(enums.SquadPitchTypes), enums.SquadPitchModes = {
    REGULAR: "",
    GENERATIONS: "generations",
    SBC: "sbc"
}, Object.freeze(enums.SquadPitchModes), enums.OnboardingStateType = {
    HOME_KIT: 1,
    AWAY_KIT: 2,
    BADGE: 3,
    NATION: 4
}, Object.freeze(enums.OnboardingStateType), NamespaceManager.Register("enums"), enums.Language = {
    ENGLISH: "en",
    FRENCH: "fr",
    GERMAN: "de",
    SPANISH: "es",
    ITALIAN: "it",
    DUTCH: "nl",
    POLISH: "pl",
    RUSSIAN: "ru",
    PORTUGUESE: "pt"
}, Object.freeze(enums.Language), enums.Locale = {
    USA: "en_US",
    CANADA: "en_CA",
    GREAT_BRITAIN: "en_GB",
    AUSTRALIA: "en_AU",
    FRANCE: "fr_FR",
    GERMANY: "de_DE",
    SPAIN: "es_ES",
    MEXICO: "es_MX",
    ITALY: "it_IT",
    NETHERLANDS: "nl_NL",
    POLAND: "pl_PL",
    RUSSIA: "ru_RU",
    BRAZIL: "pt_BR"
}, Object.freeze(enums.Locale), enums.URLLocale = {
    USA: "US",
    CANADA: "CA",
    GREAT_BRITAIN: "GB",
    UK: "UK",
    AUSTRALIA: "AU",
    FRANCE: "FR",
    GERMANY: "DE",
    SPAIN: "ES",
    MEXICO: "MX",
    ITALY: "IT",
    NETHERLANDS: "NL",
    POLAND: "PL",
    RUSSIA: "RU",
    BRAZIL: "BR"
}, Object.freeze(enums.URLLocale), enums.ServerLocale = {
    USA: "en-US",
    GREAT_BRITAIN: "en-GB",
    AUSTRALIA: "en-AU",
    FRANCE: "fr-FR",
    GERMANY: "de-DE",
    SPAIN: "es-ES",
    MEXICO: "es-MX",
    ITALY: "it-IT",
    NETHERLANDS: "nl-NL",
    POLAND: "pl-PL",
    RUSSIA: "ru-RU",
    BRAZIL: "pt-BR"
}, Object.freeze(enums.ServerLocale), enums.BaseURLHALString = {
    PRIVACY_POLICY: "link.privacy_policy_base.url",
    USER_AGREEMENT: "link.terms_of_service_base.url",
    ITEM_DATABASE: "link.itemdatabase.url"
}, Object.freeze(enums.BaseURLHALString), enums.Localization = {}, enums.Localization.BLANK_STR = "---", enums.Localization.STATS_LABELS_PLAYER = ["cards.cardfront.paceAbbr", "cards.cardfront.shootingAbbr", "cards.cardfront.passingAbbr", "cards.cardfront.dribblingAbbr", "cards.cardfront.defendingAbbr", "cards.cardfront.headingAbbr"], enums.Localization.STATS_LABELS_GK = ["cards.cardfront.divingAbbr", "cards.cardfront.handlingAbbr", "cards.cardfront.kickAbbr", "cards.cardfront.reflexAbbr", "cards.cardfront.speedAbbr", "cards.cardfront.positionAbbr"], NamespaceManager.Register("enums"), enums.HTTPRequestMethod = {
    POST: "POST",
    GET: "GET",
    PUT: "PUT",
    DELETE: "DELETE"
}, enums.HTTPContentType = {
    XML: "text/xml",
    JSON: "application/json",
    TEXT_PLAIN: "text/plain",
    FORM_DATA: "application/x-www-form-urlencoded"
}, enums.HTTPStatusCode = {
    UNKNOWN: 0,
    OK: 200,
    NO_CONTENT: 204,
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    FORBIDDEN: 403,
    NOT_FOUND: 404,
    CONFLICT: 409,
    UNSUPPORTED_TYPE: 415,
    RATE_LIMIT: 429,
    FUN_CAPTCHA_REQUIRED: 458,
    CAPTCHA_REQUIRED: 459,
    UT_BAD_REQUEST: 460,
    PERMISSION_DENIED: 461,
    STATE_INVALID: 462,
    NO_BID_TOKENS: 463,
    NO_USER: 465,
    NAME_EXISTS: 466,
    PROFANITY: 467,
    LOGGED_IN_ON_CONSOLE_LEGACY: 468,
    DELETING_LAST_SQUAD: 469,
    NOT_ENOUGH_CREDIT: 470,
    ITEM_EXISTS: 471,
    DUPLICATE_ITEM_TYPE: 472,
    DESTINATION_FULL: 473,
    LOGGED_IN_ON_CONSOLE: 474,
    NO_CARD_EXISTS: 475,
    CARD_IN_TRADE: 476,
    INVALID_DECK: 477,
    NO_TRADE_EXISTS: 478,
    INVALID_OWNER: 479,
    SERVICE_IS_DISABLED: 480,
    ACCOUNT_LOCKED: 481,
    INVALID_COOKIE: 482,
    ALREADY_ANSWERED_PHISHING_QUESTION: 483,
    NO_REMAINING_ATTEMPTS: 485,
    PLAYER_HAS_RED_CARD: 486,
    REMOVE_WATCH_FAILURE: 487,
    SWAP_ITEM_WITH_ITSELF: 488,
    USER_IS_HIGHEST_BIDDER: 489,
    DID_CREATE_EXCEEDED: 489,
    DID_LOGIN_EXCEEDED: 490,
    DEVICE_SUSPENDED: 491,
    LOCKED_TRANSFER_MARKET: 494,
    SOME_ITEMS_NOT_FREE: 495,
    SERVER_ERROR: 500,
    SERVICE_UNAVAILABLE_ERROR: 503,
    UNRECOVERABLE_ERROR: 1e4,
    NO_INTERNET_CONNECTION: 10666,
    NETWORK_ERROR: 10667,
    REQUEST_TIME_OUT: 10668,
    FIFA_POINTS_FAILED: 10670,
    ACCOUNT_BANNED: 2e4,
    UPDATE_REQUIRED: 20001,
    INVALID_CREDENTIALS: 20002
}, enums.NetworkError = enums.HTTPStatusCode, enums.NetworkErrorReason = {
    MULTIPLE_SESSION: "multiple session",
    WRONG_CREDENTIALS: "Wrong credentials",
    INVALID_CREDENTIALS: "invalid credentials",
    BANNED: "BANNED",
    CLIENT_VERSION_EXPIRED: "client version expired",
    CLIENT_VERSION_UNKNOWN: "unknown client version",
    SESSION_THROTTLED: "throttled"
}, enums.NetworkErrorLevel = {
    UNIMPORTANT: 0,
    IMPORTANT: 1,
    CRITICAL: 2
}, NamespaceManager.Register("enums"), enums.AppNotification = {
    ITEM_ACTIVATE: "NOTIF_ItemActivate",
    ITEM_APPLY: "NOTIF_ItemApply",
    ITEM_BID: "NOTIF_ItemBid",
    ITEM_CLEARSOLD: "NOTIF_ItemClearSold",
    ITEM_DISCARD: "NOTIF_ItemDiscard",
    ITEM_LIST: "NOTIF_ItemList",
    ITEM_MOVE: "NOTIF_ItemMove",
    ITEM_REDEEM: "NOTIF_ItemRedeem",
    ITEM_UNWATCH: "NOTIF_ItemUnwatch",
    ITEM_WATCH: "NOTIF_ItemWatch",
    SQUAD_CREATE: "NOTIF_SquadCreate",
    SQUAD_DELETE: "NOTIF_SquadDelete",
    SQUAD_SAVE: "NOTIF_SquadSave",
    STORE_PACK_COUNT_CHANGE: "NOTIF_StorePackCountChange",
    UNASSIGNED_ITEM_ADDED: "NOTIF_UnassignedItemAdded",
    UI_NOTIFICATION: "NOTIF_UINotification"
}, Object.freeze(enums.AppNotification), NamespaceManager.Register("enums"), enums.Objectives = {}, enums.Objectives.Type = {
    INVALID: "INVALID",
    BEGINNER: "BEGINNER",
    DAILY: "DAILY",
    WEEKLY: "WEEKLY"
}, Object.freeze(enums.Objectives.Type), enums.Objectives.State = {
    INVALID: "INVALID",
    IN_PROGRESS: "IN_PROGRESS",
    COMPLETED: "COMPLETED",
    REDEEMED: "REDEEMED",
    LOCKED: "LOCKED",
    EXPIRED: "EXPIRED"
}, Object.freeze(enums.Objectives.State), enums.Objectives.GoToLink = {
    NONE: "",
    CHANGE_CLUB_NAME: "GotoChangeClubName",
    OFFLINE_SEASONS: "GotoOfflineSeasons",
    ONLINE_SEASONS: "GotoOnlineSeasons",
    OFFLINE_TOTW: "GotoOfflineTotw",
    SQUAD_BATTLE: "GotoSquadBattle",
    AUCTION_SEARCH: "GotoAuctionSearch",
    SBC_SQUAD: "GotoSbcSquad",
    SQUAD: "GotoSquad",
    DRAFT_ONLINE: "GotoDraftOnline",
    DRAFT_OFFLINE: "GotoDraftOffline"
}, Object.freeze(enums.Objectives.GoToLink), NamespaceManager.Register("enums"), enums.PIN = {}, enums.PIN.CONFIG = {
    ENABLED: "e",
    BATCH_ENABLED: "b",
    BATCH_FREQUENCY: "bf",
    BATCH_SIZE: "bs",
    RETRY_TIMES: "r",
    RETRY_FREQUENCY: "rf"
}, Object.freeze(enums.PIN.CONFIG), enums.PIN.STATE = {
    DYNAMIC_DISABLED: -1,
    DISABLED: 0,
    ENABLED: 1
}, Object.freeze(enums.PIN.STATE), enums.PIN.EVENT = {
    BOOT_START: "boot_start",
    BOOT_END: "boot_end",
    CONNECTION: "connection",
    ERROR: "error",
    LOGIN: "login",
    LOGOUT: "logout",
    MESSAGE: "message",
    MILESTONE: "milestone",
    PAGE_VIEW: "page_view",
    SETTINGS: "settings"
}, Object.freeze(enums.PIN.EVENT), enums.PIN.BOOT_START_EVT_STATUS = {
    SUCCESS: "success",
    SOURCE_UPDATE: "source_update"
}, Object.freeze(enums.PIN.BOOT_START_EVT_STATUS), enums.PIN.BOOT_START_EVT_SOURCE = {
    NORMAL: "normal",
    OPT_IN_TEL: "opt_in_tel",
    UPGRADE: "upgrade"
}, Object.freeze(enums.PIN.BOOT_START_EVT_SOURCE), enums.PIN.BOOT_END_EVT_REASON = {
    NORMAL: "normal",
    OPT_OUT_TEL: "opt_out_tel"
}, Object.freeze(enums.PIN.BOOT_END_EVT_REASON), enums.PIN.ERROR_EVT_ERRID = {
    CONNECTION: "disconnect",
    SERVER: "server_error"
}, Object.freeze(enums.PIN.ERROR_EVT_ERRID), enums.PIN.LOGIN_EVT_STATUS = {
    SUCCESS: "success",
    FAIL: "error"
}, Object.freeze(enums.PIN.LOGIN_EVT_STATUS), enums.PIN.LOGOUT_EVT_END_REASON = {
    NORMAL: "normal",
    ERROR: "error"
}, Object.freeze(enums.PIN.LOGOUT_EVT_END_REASON), enums.PIN.MESSAGE_EVT_TYPE = {
    FET: "in-game",
    PN: "pn"
}, Object.freeze(enums.PIN.MESSAGE_EVT_TYPE), enums.PIN.MILESTONE_EVT_ID = {
    COUNTRY: "FUTONBOARDING_FLOW_COUNTRY",
    EXPLORESQUAD: "FUTONBOARDING_FLOW_EXPLORESQUAD",
    LOANSELECT: "FUTONBOARDING_FLOW_LOANSELECT",
    LOANEXPLORE: "FUTONBOARDING_FLOW_LOANEXPLORE",
    HOMEKIT: "FUTONBOARDING_FLOW_HOMEKIT",
    AWAYKIT: "FUTONBOARDING_FLOW_AWAYKIT",
    BADGE: "FUTONBOARDING_FLOW_BADGE",
    SUMMARY: "FUTONBOARDING_FLOW_SUMMARY",
    DAILY_OBJECTIVE: "fut_daily_quest_"
}, Object.freeze(enums.PIN.MILESTONE_EVT_ID), enums.PIN.MILESTONE_EVT_TYPE = {
    ONBOARDING: "onboarding",
    OBJECTIVES: "quest"
}, Object.freeze(enums.PIN.MILESTONE_EVT_TYPE), enums.PIN.SETTINGS_EVT_STATUS = {
    OPT_IN: "accepted",
    OPT_OUT: "declined"
}, Object.freeze(enums.PIN.SETTINGS_EVT_STATUS), NamespaceManager.Register("enums"), enums.Purchase = {}, enums.Purchase.DisplayGroup = {
    BRONZE: "bronze",
    SILVER: "silver",
    GOLD: "gold",
    SPECIAL: "special",
    MYPACKS: "mypacks"
}, enums.Purchase.DisplayGroupId = {
    BRONZE: 1,
    SILVER: 2,
    GOLD: 3,
    SPECIAL: 4,
    MYPACKS: 5
}, enums.Purchase.DealType = {
    REGULAR: "REGULAR",
    DEAL: "DEAL",
    PROMO: "PROMO",
    BESTDEAL: "BESTDEAL"
}, enums.Purchase.SaleType = {
    NONE: "NONE",
    QUANTITY: "QUANTITY",
    TIME: "TIME",
    TIME_QUANTITY: "TIME_QUANTITY"
}, enums.Purchase.PackState = {
    ACTIVE: "active",
    HIDDEN: "hidden"
}, enums.Purchase.PackTier = {
    BRONZE: 1,
    SILVER: 2,
    GOLD: 3,
    SPECIAL: 4,
    LOAN: 5,
    STARTER: 6,
    LEGENDS: 8,
    STORY: 9,
    SBC: 10,
    CHAMPION: 11
}, enums.Purchase.PackType = {
    ALL: "ALL",
    CARDPACK: "CARDPACK",
    DRAFTENTRY: "DRAFTENTRY"
}, enums.Purchase.State = {
    INVALID: "INVALID",
    NOTRANSACTION: "NOTRANSACTION",
    TRANSACTIONCREATED: "TRANSACTIONCREATED",
    TRANSACTIONCANCEL: "TRANSACTIONCANCEL",
    TRANSACTIONCOMPLETE: "TRANSACTIONCOMPLETE",
    PURCHASESTARTED: "PURCHASESTARTED",
    PURCHASECOMPLETE: "PURCHASECOMPLETE",
    PURCHASECONSUMABLECOUNT: "PURCHASECONSUMABLECOUNT",
    PURCHASECONSUME: "PURCHASECONSUME"
}, NamespaceManager.Register("enums"), enums.SBC = {}, enums.SBC.SET_TAGS = {
    TAGGED_BY_PRODUCTION: "taggedByProduction",
    TAGGED_BY_USER: "taggedByUser"
}, Object.freeze(enums.SBC.SET_TAGS), enums.SBC.CATEGORY_TYPE = {
    SERVER: 0,
    CUSTOM_ALL: 1,
    CUSTOM_FAVOURITE: 2
}, Object.freeze(enums.SBC.CATEGORY_TYPE), enums.SBC.CHALLENGE_STATUS = {
    NOT_STARTED: "NOT_STARTED",
    IN_PROGRESS: "IN_PROGRESS",
    COMPLETED: "COMPLETED"
}, Object.freeze(enums.SBC.CHALLENGE_STATUS), enums.SBC.CHALLENGE_TYPE = {
    OPEN: "OPEN_CHALLENGE",
    BRICK: "BRICK_CHALLENGE",
    CUSTOM_BRICK: "CUSTOM_BRICK_CHALLENGE"
}, Object.freeze(enums.SBC.CHALLENGE_TYPE), enums.SBC.PLAYER_TYPE = {
    DEFAULT: "DEFAULT",
    BRICK: "BRICK",
    CUSTOM_BRICK: "CUSTOM_BRICK"
}, Object.freeze(enums.SBC.PLAYER_TYPE), enums.SBC.ELG_OPERATION = {
    AND: "AND",
    OR: "OR"
}, Object.freeze(enums.SBC.ELG_OPERATION), enums.SBC.ELG_KEY = {
    FUT_ELGRULE_TEAM_STAR_RATING: 0,
    FUT_ELGRULE_TEAM_CHEMISTRY: 1,
    FUT_ELGRULE_PLAYER_COUNT: 2,
    FUT_ELGRULE_PLAYER_QUALITY: 3,
    FUT_ELGRULE_SAME_NATION_COUNT: 4,
    FUT_ELGRULE_SAME_LEAGUE_COUNT: 5,
    FUT_ELGRULE_SAME_CLUB_COUNT: 6,
    FUT_ELGRULE_NATION_COUNT: 7,
    FUT_ELGRULE_LEAGUE_COUNT: 8,
    FUT_ELGRULE_CLUB_COUNT: 9,
    FUT_ELGRULE_NATION_ID: 10,
    FUT_ELGRULE_LEAGUE_ID: 11,
    FUT_ELGRULE_CLUB_ID: 12,
    FUT_ELGRULE_SCOPE: 13,
    FUT_ELGRULE_APPLY_TO: 14,
    FUT_ELGRULE_LEGEND_COUNT: 15,
    FUT_ELGRULE_NUM_TROPHY_REQUIRED: 16,
    FUT_ELGRULE_PLAYER_LEVEL: 17,
    FUT_ELGRULE_PLAYER_RARITY: 18,
    FUT_ELGRULE_TEAM_RATING: 19,
    FUT_ELGRULE_PLAYER_COUNT_COMBINED: 21
}, Object.freeze(enums.SBC.ELG_KEY), enums.SBC.ELG_SCOPE = {
    FUT_ELGRULE_SCOPE_GREATER: 0,
    FUT_ELGRULE_SCOPE_LOWER: 1,
    FUT_ELGRULE_SCOPE_EXACT: 2
}, Object.freeze(enums.SBC.ELG_SCOPE), enums.SBC.ELG_QUALITY_TYPES = {
    BRONZE: 1,
    SILVER: 2,
    GOLD: 3
}, Object.freeze(enums.SBC.ELG_QUALITY_TYPES), NamespaceManager.Register("enums"), enums.KeyCode = {
    RETURN: 13
}, Object.freeze(enums.KeyCode), enums.KeyboardKey = {
    ARROW_DOWN: "ArrowDown",
    ARROW_LEFT: "ArrowLeft",
    ARROW_RIGHT: "ArrowRight",
    ARROW_UP: "ArrowUp",
    ENTER: "Enter",
    ESCAPE: "Escape",
    MS_ESCAPE: "Esc",
    F7: "F7",
    F8: "F8",
    F9: "F9"
}, Object.freeze(enums.KeyboardKey), enums.DeviceOrientation = {
    PORTRAIT_DOWN: 180,
    LANDSCAPE_LEFT: -90,
    LANDSCAPE_RIGHT: 90,
    PORTRAIT: 0
}, Object.freeze(enums.DeviceOrientation), enums.UIDialogTypes = {
    MESSAGE: "ui-dialog-type-message",
    ALERT: "ui-dialog-type-alert",
    ROTATE: "ui-dialog-type-rotate"
}, Object.freeze(enums.DeviceOrientation), enums.UIShieldStyles = {
    TRANSPARENT: "ui-shield-style-transparent",
    OPAQUE: "ui-shield-style-opaque"
}, Object.freeze(enums.UIShieldStyles), enums.UIDialogOptions = {
    YES: 0,
    NO: 1,
    OK: 2,
    CANCEL: 3,
    RETRY: 4,
    SIGN_OUT: 5,
    TAKE_ME: 6
}, Object.freeze(enums.UIDialogOptions), enums.UIAnimation = {
    FADE_IN: "fade-in",
    FADE_OUT: "fade-out",
    SLIDE_OUT_LEFT: "slide-out-left",
    SLIDE_OUT_RIGHT: "slide-out-right",
    SLIDE_IN_LEFT: "slide-in-left",
    SLIDE_IN_RIGHT: "slide-in-right",
    SLIDE_IN_LEFT_FADE_OUT: "scroll-right-fade-in-fade-out",
    BLINK: "alarm-txt",
    MARQUEE: "scroll-txt",
    BOUNCE: "cardBounce"
}, Object.freeze(enums.UIAnimation), enums.UIText = {
    SECONDARY: "secondary"
}, Object.freeze(enums.UIText), enums.UINavigationBarStyle = {
    DEFAULT: "",
    SECONDARY: "subnav"
}, Object.freeze(enums.UINavigationBarStyle), enums.UIRowActionClass = {
    ADD: "add",
    SWAP: "swap",
    MORE: "more"
}, Object.freeze(enums.UIRowActionClass), enums.UIState = {
    ACTIVE: "active",
    DISABLED: "disabled",
    ENABLED: "enabled",
    HOVER: "hover",
    SELECTED: "selected"
}, Object.freeze(enums.UIState), enums.UILayout = {
    RIGHT: "ui-layout-right",
    LEFT: "ui-layout-left",
    TOP: "ui-layout-top",
    BOTTOM: "ui-layout-bottom"
}, Object.freeze(enums.UILayout), enums.UIDirection = {
    RIGHT: "ui-direction-right",
    LEFT: "ui-direction-left",
    UP: "ui-direction-up",
    DOWN: "ui-direction-down",
    FLIP_HORIZONTAL: "ui-flip-horizontal",
    FLIP_VERTICAL: "ui-flip-vertical",
    DEFAULT: "ui-direction-default"
}, Object.freeze(enums.UIDirection), enums.UISlotInteractionState = {
    NONE: "",
    HOVER: "ui-slot-hover",
    SELECTED: "ui-slot-selected"
}, Object.freeze(enums.UISlotInteractionState), enums.UIButtonState = {
    ACTIVE: enums.UIState.ACTIVE,
    DISABLED: enums.UIState.DISABLED,
    HOVER: enums.UIState.HOVER,
    CALL_TO_ACTION: "call-to-action"
}, Object.freeze(enums.UIButtonState), enums.UIListRowState = {
    HAS_ACTION: "has-action",
    HAS_TAP_CALLBACK: "has-tap-callback",
    IS_ACTIVE_SQUAD: "is-active",
    SELECTED: enums.UIState.SELECTED,
    ACTIVE: enums.UIState.ACTIVE,
    DISABLED: enums.UIState.DISABLED,
    ENABLED: enums.UIState.ENABLED
}, Object.freeze(enums.UIListRowState), enums.UIFeedbackState = {
    NONE: "no-state",
    LOW: "feedback-red",
    MEDIUM: "feedback-orange",
    HIGH: "feedback-green",
    STAT_INCREASE: "statIncrease",
    STAT_DECREASE: "statIncrease"
}, Object.freeze(enums.UIFeedbackState), enums.UICompletionState = {
    INCOMPLETE: 0,
    IN_PROGRESS: 1,
    COMPLETE: 2
}, Object.freeze(enums.UICompletionState), enums.UIPinnedListItem = {
    HAS_ITERATOR: "has-iterator",
    HAS_NEXT: "has-next",
    HAS_PREV: "has-prev"
}, Object.freeze(enums.UIPinnedListItem), enums.UIPanels = {
    TABLE_ALTERNATING: "panel-table-alternating"
}, Object.freeze(enums.UIPanels), enums.UIDeviceTypes = {
    PHONE: "phone",
    LANDSCAPE: "landscape"
}, Object.freeze(enums.UIDeviceTypes), enums.UIProgressBar = {
    SBC: "sbc-progress-bar",
    STATS: "stats-progress-bar",
    REVERSE: "reverse"
}, Object.freeze(enums.UIProgressBar), enums.UIFlexible = {
    LG: "lg",
    XLG: "xlg",
    MD: "md",
    SM: "sm"
}, Object.freeze(enums.UIFlexible), enums.UISquadTabTypes = {
    WORK_AREA: "workTab",
    DOCK_TAB: "dockTab",
    ACTION_TAB: "actionTab",
    DEFAULT: "default"
}, Object.freeze(enums.UISquadTabTypes), enums.UIConsumableCategory = {
    CONTRACTS: 0,
    FITNESS: 1,
    HEALING: 2,
    LEAGUEMOD: 3,
    PLAYSTYLE: 4,
    POSITION: 5,
    TRAINING: 6
}, Object.freeze(enums.UIConsumableCategory), enums.UIActiveItemImgType = {
    HOME_KIT: 0,
    AWAY_KIT: 1,
    BADGE_NORMAL: 2,
    BADGE_DARK: 3,
    BALL: 4,
    STADIUM: 5
}, Object.freeze(enums.UIActiveItemImgType), enums.UIInputType = {
    TEXT: "text",
    PASSWORD: "password"
}, Object.freeze(enums.UIInputType), enums.UISearchFilters = {
    YEAR: "year",
    TYPE: "type",
    LEVEL: "level",
    POSITION: "position",
    POSITION_MOD: "positionMod",
    PLAYSTYLE: "playStyle",
    NATION: "nation",
    LEAGUE: "league",
    CLUB: "club"
}, Object.freeze(enums.UISearchFilters), enums.UINotificationType = {
    POSITIVE: 0,
    NEUTRAL: 1,
    NEGATIVE: 2
}, Object.freeze(enums.UINotificationType), enums.UIOnboardingSelectionType = {
    NATION: "selection-nation",
    HOME_KIT: "selection-kit-home",
    AWAY_KIT: "selection-kit-away",
    BADGE: "selection-badge"
}, Object.freeze(enums.UIOnboardingSelectionType), enums.UIOnboardingStep = {
    NATION: 1,
    LOANER: 2,
    KITS: 3,
    BADGE: 4,
    SUMMARY: 5
}, Object.freeze(enums.UIOnboardingStep), enums.UISortOptionType = {
    DISCARD: "sort-discard",
    UNTRADEABLE: "sort-untradeable",
    CONCEPT: "build-concept",
    REPLACE: "build-replace"
}, Object.freeze(enums.UISortOptionType), enums.UIPlatform = {
    NONE: "",
    XBX: "xbox360",
    XBO: "xboxOne",
    PS3: "playstation3",
    PS4: "playstation4",
    PC: "pc",
    SWI: "nintendoSwitch"
}, Object.freeze(enums.UIPlatform), enums.ItemTintValues = {}, enums.ItemTintValues[enums.ItemRareType.NONE] = [
    ["#d5ae7e", "#d5ae7e"],
    ["#b8bec3", "#b8bec3"],
    ["#e4d565", "#e4d565"]
], enums.ItemTintValues[enums.ItemRareType.RARE] = [
    ["#d5ae7e", "#ffe8cc"],
    ["#b8bec3", "#fafeff"],
    ["#e4d565", "#fff9dd"]
], enums.ItemTintValues[enums.ItemRareType.TOTW] = [
    ["#d5ae7e", "#372513"],
    ["#b8bec3", "#474c51"],
    ["#e4d565", "#372d13"]
], enums.ItemTintValues[enums.ItemRareType.PURPLE] = ["#c8b3f4", "#3e2b6f"], enums.ItemTintValues[enums.ItemRareType.TOTY] = ["#0d2b5e", "#e4d565"], enums.ItemTintValues[enums.ItemRareType.RB] = ["#d62a2a", "#1a4fd7"], enums.ItemTintValues[enums.ItemRareType.GREEN] = ["#3a9358", "#e8e8e8"], enums.ItemTintValues[enums.ItemRareType.ORANGE] = ["#f86e00", "#a54b0f"], enums.ItemTintValues[enums.ItemRareType.PINK] = ["#eb6495", "#692340"], enums.ItemTintValues[enums.ItemRareType.TEAL] = ["#66d0c6", "#0c3232"], enums.ItemTintValues[enums.ItemRareType.TOTS] = [
    ["#0439b6", "#d5ae7e"],
    ["#0439b6", "#d8dfe5"],
    ["#0439b6", "#e4d565"]
], enums.ItemTintValues[enums.ItemRareType.LEGEND] = ["#1f365e", "#b1a274"], enums.ItemTintValues[enums.ItemRareType.FUTTY] = ["#ff8ebe", "#e4d565"], enums.ItemTintValues[enums.ItemRareType.STORYMODE] = ["#e4d565", "#372d13"], enums.ItemTintValues[enums.ItemRareType.CHAMPION] = [
    ["#f4cb98", "#d62a2a"],
    ["#b8bec3", "#d62a2a"],
    ["#e4d565", "#d62a2a"]
], enums.ItemTintValues[enums.ItemRareType.CMOTM] = ["#007ec0", "#db8439"], enums.ItemTintValues[enums.ItemRareType.IMOTM] = ["#aa2716", "#db8439"], enums.ItemTintValues[enums.ItemRareType.OTW] = ["#b8bec3", "#e4d565"], enums.ItemTintValues[enums.ItemRareType.HALLOWEEN] = ["#c5540f", "#240f00"], enums.ItemTintValues[enums.ItemRareType.MOVEMBER] = ["#aea590", "#412819"], enums.ItemTintValues[enums.ItemRareType.SBC] = ["#0e96e4", "#9610b1"], enums.ItemTintValues[enums.ItemRareType.SBCP] = ["#9dfef8", "#e00cc8"], enums.ItemTintValues[enums.ItemRareType.PROMOA] = ["#3b7ddf", "#ff8a00"], enums.ItemTintValues[enums.ItemRareType.PROMOB] = ["#1763a3", "#a41f27"], enums.ItemTintValues[enums.ItemRareType.AWARD] = ["#7d5ab8", "#d8c065"], enums.ItemTintValues[enums.ItemRareType.UNITED] = ["#e94389", "#373183"], enums.ItemTintValues[enums.ItemRareType.RTRC] = ["#d62a2a", "#2c4b8d"], enums.ItemTintValues[enums.ItemRareType.RTRS] = ["#d62a2a", "#2c4b8d"], enums.ItemTintValues[enums.ItemRareType.RTRW] = [
    ["#d62a2a", "#b8bec3"],
    ["#d62a2a", "#b8bec3"],
    ["#d62a2a", "#e4d565"]
], enums.ItemTintValues[enums.ItemRareType.MARQUEE] = ["#b4ee34", "#201d55"], enums.ItemTintValues[enums.ItemRareType.EUMOTM] = ["#28a0f2", "#ff8a00"], Object.freeze(enums.ItemTintValues), NamespaceManager.Register("enums"), enums.URLParams = {
    TOKEN: "token",
    EXPIRE: "expire",
    SHOWOFFID: "showoffId"
}, enums.DeepLinkSections = {
    NONE: "",
    HOME: "home",
    SBC: "sbc",
    AUCTION: "auction",
    ACTIVE_SQUAD: "activesquad",
    STORE: "store",
    TOTW: "teamoftheweek",
    TRADE_PILE: "tradepile",
    UNASSIGNED: "unassigned",
    WATCH_LIST: "watchlist",
    OBJECTIVES: "objectives"
}, Object.defineProperty(FUTObject.prototype, "superclass", {
    get: function get() {
        for (var t = get.caller, name = t.name, i = this[name] === t, s = this; s && (s = Object.getPrototypeOf(s)) && s[name];)
            if (s[name] === t) i = !0;
            else if (i) return s[name];
        return utils.Debug.Assert(!1, "superclass() may not be called outside a named method implementation."), null
    }
}), FUTObject.prototype.isSubClass = function isSubClass(t) {
    return utils.Debug.Assert(utils.JS.isFunction(t), "Expected function representing a class."), this instanceof t
}, FUTObject.prototype.conforms = function conforms(t) {
    utils.Debug.Assert(utils.JS.isFunction(t), "Expected function representing an interface.");
    var i;
    for (i in t.prototype)
        if (t.prototype.hasOwnProperty(i) && !this[i]) return !1;
    return !0
}, FUTObject.prototype.init = function init() {}, FUTObject.prototype.dealloc = function dealloc() {}, FUTHashTable.prototype.set = function set(key, value) {
    var t = this.has(key) ? this._collection[key] : null;
    return this._collection[key] = value, t
}, FUTHashTable.prototype.get = function get(key) {
    return this.has(key) ? this._collection[key] : null
}, FUTHashTable.prototype.has = function has(key) {
    return this._collection.hasOwnProperty(key)
}, FUTHashTable.prototype.remove = function remove(key) {
    if (this.has(key)) {
        var t = this._collection[key];
        return delete this._collection[key], t
    }
    return null
}, FUTHashTable.prototype.keys = function keys() {
    return Object.keys(this._collection)
}, FUTHashTable.prototype.values = function values() {
    var t, i = [];
    for (t in this._collection) this._collection.hasOwnProperty(t) && i.push(this._collection[t]);
    return i
}, FUTHashTable.prototype.forEach = function forEach(t, scope) {
    var i, s = 0;
    for (i in this._collection) this._collection.hasOwnProperty(i) && (t.call(scope, this._collection[i], s, this.values().slice(0)), ++s)
}, FUTHashTable.prototype.map = function map(t, scope) {
    var i, s = 0,
        result = [];
    for (i in this._collection) this._collection.hasOwnProperty(i) && (result.push(t.call(scope, this._collection[i], s, this.values().slice(0))), ++s);
    return result
}, FUTHashTable.prototype.filter = function filter(t, scope) {
    var i, s = 0,
        result = [];
    for (i in this._collection) this._collection.hasOwnProperty(i) && (t.call(scope, this._collection[i], s, this.values().slice(0)) && result.push(this._collection[i]), ++s);
    return result
}, FUTHashTable.prototype.find = function find(t) {
    if ("function" != typeof t) return utils.Debug.Assert(!1, "[FUTHashTable::find] Expected a comparison function as first parameter."), null;
    var i;
    for (i in this._collection)
        if (this._collection.hasOwnProperty(i) && t(this._collection[i])) return this._collection[i];
    return null
}, FUTHashTable.prototype.clear = function clear() {
    this._collection = {}
}, utils.JS.inherits(FUTIterator, FUTObject), FUTIterator.prototype._atFirstIndex = function _atFirstIndex() {
    return 0 === this._index
}, FUTIterator.prototype._atLastIndex = function _atLastIndex() {
    var t = this._collection.length;
    return 0 === t || this._index === t - 1
}, FUTIterator.prototype.getLength = function getLength() {
    return this._collection.length
}, FUTIterator.prototype.setIndex = function setIndex(t) {
    utils.Debug.Assert(0 === t || t > 0 && t < this._collection.length, "[FUTIterator::setIndex] Value provided is outside acceptable bounds."), t < 0 ? t = 0 : t >= this._collection.length && (t = this._collection.length - 1), this._index = t
}, FUTIterator.prototype.getIndex = function getIndex() {
    return this._index
}, FUTIterator.prototype.getLastIndex = function getLastIndex() {
    var index = this._collection.length - 1;
    return index >= 0 ? index : 0
}, FUTIterator.prototype.resetCollection = function resetCollection(t) {
    this._collection = t, this._index = 0
}, FUTIterator.prototype.current = function current() {
    return this._collection[this._index]
}, FUTIterator.prototype.get = function get(index) {
    return this._collection[index] || null
}, FUTIterator.prototype.set = function set(t, index) {
    utils.JS.isNumber(index) && index < this._collection.length ? this._collection[index] = t : utils.Debug.Assert(!1, "FUTIterator::set. Trying to set val in an invalid index.")
}, FUTIterator.prototype.next = function next() {
    return this._index < this._collection.length - 1 && ++this._index, this._collection[this._index]
}, FUTIterator.prototype.previous = function previous() {
    return this._index > 0 && --this._index, this._collection[this._index]
}, FUTIterator.prototype.add = function add(t, index) {
    return !utils.JS.isNumber(index) || index >= this._collection.length ? this._collection.push(t) : this._collection.splice(index, 0, t), t
}, FUTIterator.prototype.remove = function remove(index) {
    var t = this._collection.splice(index, 1);
    return this._index >= this._collection.length && (this._index = this._collection.length > 0 ? this._collection.length - 1 : 0), t
}, FUTIterator.prototype.shift = function shift() {
    var t = this._collection.shift();
    return this._index >= this._collection.length && (this._index = this._collection.length > 0 ? this._collection.length - 1 : 0), t
}, FUTIterator.prototype.pop = function pop() {
    var t = this._collection.pop();
    return this._index >= this._collection.length && (this._index = this._collection.length > 0 ? this._collection.length - 1 : 0), t
}, FUTIterator.prototype.values = function values() {
    return this._collection
}, FUTIterator.prototype.indexOf = function indexOf(t) {
    if ("function" != typeof t) return utils.Debug.Assert(!1, "[FUTIterator::indexOf] Expected a function to be provided."), -1;
    var i;
    for (i = 0; i < this._collection.length; ++i)
        if (t(this._collection[i])) return i;
    return -1
}, utils.JS.inherits(FUTObservable, FUTObject), FUTObservable.prototype.dealloc = function dealloc() {
    this.clearObservers(), this.superclass()
}, FUTObservable.prototype.observe = function observe(t, i) {
    utils.Debug.Assert(utils.JS.isObject(t), "Expected a scope of type object."), utils.Debug.Assert(utils.JS.isFunction(i), "Expected a callback function.");
    for (var s = this._observers.length; s-- > 0;) {
        var o = this._observers[s];
        if (o.scope === t && o.cb === i) return this
    }
    return this._observers.push({
        scope: t,
        cb: i
    }), this
}, FUTObservable.prototype.unobserve = function unobserve(t, i) {
    return this._observers = this._observers.filter(function _clearObserver(s) {
        return s.scope !== t && (!utils.JS.isFunction(i) || s.cb !== i)
    }, this), this
}, FUTObservable.prototype.clearObservers = function clearObservers() {
    return this._observers = [], this
}, FUTObservable.prototype.notify = function notify(data) {
    function _notifyObserver(t) {
        t.cb.apply(t.scope, s)
    }
    var t, i = arguments.length,
        s = [];
    for (t = 0; t < i; t++) s[t] = arguments[t];
    return s.unshift(this), setTimeout(function() {
        this._observers.slice().forEach(_notifyObserver, this)
    }.bind(this), 0), this
}, utils.JS.inherits(FUTStorageAlternative, FUTObject), FUTStorageAlternative.prototype.setItem = function setItem(key, value) {
    this._localStorage[key] = value
}, FUTStorageAlternative.prototype.getItem = function getItem(key) {
    return void 0 !== this._localStorage[key] ? this._localStorage[key] : null
}, FUTStorageAlternative.prototype.key = function key(t) {
    return Object.keys(this._localStorage)[t]
}, FUTStorageAlternative.prototype.removeItem = function removeItem(key) {
    delete this._localStorage[key]
}, FUTStorageAlternative.prototype.clear = function clear() {
    var key;
    for (key in this._localStorage) this._localStorage.hasOwnProperty(key) && this.removeItem(key);
    this._localStorage = {}
}, utils.JS.inherits(FUTNotificationDispatcher, FUTObject), FUTNotificationDispatcher.prototype.addObserver = function addObserver(id, t, i) {
    this._observers.has(id) || this._observers.set(id, new FUTObservable), this._observers.get(id).observe(t, i)
}, FUTNotificationDispatcher.prototype.removeObserver = function removeObserver(id, t) {
    this._observers.has(id) && this._observers.get(id).unobserve(t)
}, FUTNotificationDispatcher.prototype.removeObserversById = function removeObserversById(id) {
    this._observers.has(id) && (this._observers.get(id).clearObservers(), this._observers.remove(id))
}, FUTNotificationDispatcher.prototype.clearObservers = function clearObservers() {
    this._observers.clear()
}, FUTNotificationDispatcher.prototype.notify = function notify(id, sender, data) {
    this._observers.has(id) && this._observers.get(id).notify(sender, data)
}, NamespaceManager.Register("interfaces"), interfaces.TouchResponder = function() {}, interfaces.TouchResponder.prototype._touchStarted = function(e) {}, interfaces.TouchResponder.prototype._touchMoved = function(e) {}, interfaces.TouchResponder.prototype._touchEnded = function(e) {}, interfaces.TouchResponder.prototype._touchCancelled = function(e) {}, interfaces.TouchResponder.prototype._tapDetected = function(e) {}, NamespaceManager.Register("interfaces"), interfaces.ValueObject = function() {}, interfaces.ValueObject.prototype.get = function() {}, interfaces.ValueObject.prototype.set = function(t) {}, NamespaceManager.Register("valueobjects"), valueobjects.BooleanVO = function() {
    this._value = !1
}, valueobjects.BooleanVO.prototype.get = function() {
    return this._value
}, valueobjects.BooleanVO.prototype.set = function(t) {
    var i = utils.JS.isBoolean(t);
    utils.Debug.Assert(i, "Invalid assignment; expected a boolean."), i && (this._value = t)
}, NamespaceManager.Register("valueobjects"), valueobjects.NumberVO = function() {
    this._value = 0
}, valueobjects.NumberVO.prototype.get = function() {
    return this._value
}, valueobjects.NumberVO.prototype.set = function(t) {
    var i = utils.JS.isNumber(t);
    utils.Debug.Assert(i, "Invalid assignment; expected a number."), i && (this._value = t)
}, utils.JS.inherits(FUIResponder, FUTObject), FUIResponder.prototype.dealloc = function dealloc() {
    this._stopHandlingEvents(!0), this._eventElement = null, this._eventDelegates = [], this.superclass()
}, FUIResponder.prototype.setEventDelegate = function setEventDelegate(t) {
    utils.Debug.Assert(t instanceof FUIResponder, "Expected an instance of FUIResponder"), this._eventDelegates.push(t)
}, FUIResponder.prototype.getEventDelegate = function getEventDelegate() {
    var t = this._eventDelegates.length;
    return t > 0 ? this._eventDelegates[t - 1] : null
}, FUIResponder.prototype.removeEventDelegate = function removeEventDelegate(t) {
    utils.Debug.Assert(t instanceof FUIResponder, "Expected an instance of FUIResponder");
    var index = this._eventDelegates.indexOf(t);
    index >= 0 && this._eventDelegates.splice(index, 1)
}, FUIResponder.prototype._addListener = function _addListener(event, t, i, s) {
    event.split(" ").forEach(function(event) {
        t.addEventListener(event, i, !1), this._eventListeners.push({
            event: event,
            elem: t,
            cb: i,
            ns: s || ""
        })
    }, this)
}, FUIResponder.prototype._removeListenersByNS = function _removeListenersByNS(t) {
    var i = [];
    this._eventListeners.forEach(function(s) {
        s.ns === t ? s.elem.removeEventListener(s.event, s.cb) : i.push(s)
    }, this), this._eventListeners = i
}, FUIResponder.prototype._removeListenersByName = function _removeListenersByName(t) {
    Array.prototype.slice.call(arguments, 0).forEach(function _removeListenerByName(event) {
        var t = [];
        this._eventListeners.forEach(function(i) {
            event.indexOf(i.event) > -1 ? i.elem.removeEventListener(i.event, i.cb) : t.push(i)
        }, this), this._eventListeners = t
    }, this)
}, FUIResponder.prototype._setScrollPosCache = function _setScrollPosCache(t, i) {
    t.push(i.scrollTop), "BODY" !== i.nodeName && this._setScrollPosCache(t, i.parentElement)
}, FUIResponder.prototype._detectScroll = function _detectScroll() {
    var t = [];
    if (this._setScrollPosCache(t, this._eventElement), t.length !== this._scrollPositions.length) return !0;
    for (var i = t.length; i-- > 0;)
        if (t[i] !== this._scrollPositions[i]) return !0;
    return !1
}, FUIResponder.prototype._compareTouchIdentifier = function _compareTouchIdentifier(t) {
    return t.identifier === this._touchID
}, FUIResponder.prototype._getTouch = function _getTouch(e) {
    return e instanceof MouseEvent ? e : utils.JS.find(e.targetTouches, this._compareTouchIdentifier.bind(this))
}, FUIResponder.prototype._checkDidTouchChange = function _checkDidTouchChange(e) {
    if (e instanceof MouseEvent) return !0;
    var t = utils.JS.find(e.changedTouches, this._compareTouchIdentifier.bind(this));
    return utils.JS.isValid(t)
}, FUIResponder.prototype._resetState = function _resetState() {
    this._touchID = -1, this._hasMoved = !1, this._touchOriginX = 0, this._touchOriginY = 0, this._scrollPositions = []
}, FUIResponder.prototype._startHandlingEvents = function _startHandlingEvents(t) {
    utils.Debug.Assert(t instanceof Element || t instanceof jQuery, "[FUIResponder::_startHandlingEvents] Expected an HTML element as first parameter."), this._eventElement = t instanceof jQuery ? t.get(0) : t, this._addListener(enums.Event.TOUCHSTART, this._eventElement, this._handleTouchStartEvent.bind(this)), this._addListener(enums.Event.MOUSEDOWN, this._eventElement, this._handleTouchStartEvent.bind(this)), this._addListener(enums.Event.MOUSEENTER, this._eventElement, this._handleMouseEnterEvent.bind(this)), this._addListener(enums.Event.MOUSELEAVE, this._eventElement, this._handleMouseLeaveEvent.bind(this))
}, FUIResponder.prototype._stopHandlingEvents = function _stopHandlingEvents(t) {
    this._touchID >= 0 && this._touchCancelled(null), this._eventListeners.forEach(function(i) {
        (t || i.elem === this._eventElement) && i.elem.removeEventListener(i.event, i.cb)
    }, this), this._eventListeners = [], this._resetState()
}, FUIResponder.prototype._handleTouchStartEvent = function _handleTouchStartEvent(e) {
    if (this._eventElement && !(this._touchID >= 0)) {
        if (this.allowLegacyPropagation || e.stopImmediatePropagation(), e instanceof MouseEvent) this._touchID = 1, this._touchOriginX = e.clientX, this._touchOriginY = e.clientY;
        else {
            if (e.touches.length > 1) return e.preventDefault(), void e.stopPropagation();
            this._touchID = e.targetTouches[0].identifier, this._touchOriginX = e.targetTouches[0].clientX, this._touchOriginY = e.targetTouches[0].clientY
        }
        this._setScrollPosCache(this._scrollPositions, this._eventElement), this._eventElementClientRect = this._eventElement.getBoundingClientRect(), this._touchStarted(e), this._addListener(enums.Event.TOUCHMOVE, this._eventElement, this._handleTouchMoveEvent.bind(this)), this._addListener(enums.Event.TOUCHEND, this._eventElement, this._handleTouchEndEvent.bind(this)), this._addListener(enums.Event.TOUCHCANCEL, this._eventElement, this._handleTouchCancelEvent.bind(this)), this._addListener(enums.Event.MOUSEMOVE, this._eventElement, this._handleTouchMoveEvent.bind(this)), this._addListener(enums.Event.MOUSEUP, this._eventElement, this._handleTouchEndEvent.bind(this)), this._addListener(enums.Event.MOUSECANCEL, this._eventElement, this._handleTouchCancelEvent.bind(this))
    }
}, FUIResponder.prototype._handleTouchMoveEvent = function _handleTouchMoveEvent(e) {
    if (this._checkDidTouchChange(e))
        if (this._eventElement) {
            var t = this._getTouch(e);
            if (t) {
                if (!this._hasMoved) {
                    var i = t.clientX,
                        s = t.clientY,
                        bounds = this._eventElementClientRect,
                        o = i < bounds.left || i > bounds.right || s < bounds.top || s > bounds.bottom;
                    this._hasMoved = o || Math.abs(i - this._touchOriginX) > this.moveDistanceThreshold || Math.abs(s - this._touchOriginY) > this.moveDistanceThreshold
                }
                this._hasMoved && this._touchMoved(e)
            }
        } else this._handleTouchCancelEvent(e)
}, FUIResponder.prototype._handleTouchEndEvent = function _handleTouchEndEvent(e) {
    if (this._checkDidTouchChange(e)) {
        e.type === enums.Event.TOUCHEND && e.preventDefault();
        var t = this._detectScroll();
        !this._hasMoved && t && this._touchMoved(e), this._touchEnded(e), this._hasMoved || t || ("SELECT" !== e.target.tagName && (e.preventDefault(), e.target !== document.activeElement && (document.activeElement.blur(), e.target.focus())), this._tapDetected(e)), this._resetState(), this._removeListenersByName(enums.Event.MOUSEMOVE, enums.Event.MOUSEUP, enums.Event.MOUSECANCEL)
    }
}, FUIResponder.prototype._handleTouchCancelEvent = function _handleTouchCancelEvent(e) {
    this._checkDidTouchChange(e) && (this._touchCancelled(e), this._resetState(), this._removeListenersByName(enums.Event.MOUSEMOVE, enums.Event.MOUSEUP, enums.Event.MOUSECANCEL))
}, FUIResponder.prototype._handleMouseEnterEvent = function _handleMouseEnterEvent(e) {
    e instanceof MouseEvent && this._mouseEnter(e)
}, FUIResponder.prototype._handleMouseLeaveEvent = function _handleMouseLeaveEvent(e) {
    e instanceof MouseEvent && (this._touchID >= 0 && this._handleTouchCancelEvent(e), this._mouseLeave(e), this._resetState(), this._removeListenersByName(enums.Event.MOUSEMOVE, enums.Event.MOUSEUP, enums.Event.MOUSECANCEL))
}, FUIResponder.prototype._touchStarted = function _touchStarted(e) {
    var t = this.getEventDelegate();
    t && t._touchStarted(e)
}, FUIResponder.prototype._touchMoved = function _touchMoved(e) {
    var t = this.getEventDelegate();
    t && t._touchMoved(e)
}, FUIResponder.prototype._touchEnded = function _touchEnded(e) {
    var t = this.getEventDelegate();
    t && t._touchEnded(e)
}, FUIResponder.prototype._touchCancelled = function _touchCancelled(e) {
    var t = this.getEventDelegate();
    t && t._touchCancelled(e)
}, FUIResponder.prototype._mouseEnter = function _mouseEnter(e) {}, FUIResponder.prototype._mouseLeave = function _mouseLeave(e) {}, FUIResponder.prototype._tapDetected = function _tapDetected(e) {
    var t = this.getEventDelegate();
    t && t._tapDetected(e)
}, FUTTouchHandler.prototype.handleTouch = function(t) {
    this._element && this.stopTouchHandling(), this._element = t.get(0), this._addListener(enums.Event.MOUSEDOWN, this._onTouchStart.bind(this))
}, FUTTouchHandler.prototype.stopTouchHandling = function() {
    this._element && (this.touchend.notify(null), this._listeners.forEach(function(t) {
        this._element.removeEventListener(t.event, t.cb)
    }, this), this._listeners = [], this._resetState()), this.tap.clearObservers(), this.touchstart.clearObservers(), this.touchend.clearObservers(), this.touchmove.clearObservers()
}, FUTTouchHandler.prototype._onTouchStart = function(e) {
    !this._element || this._touchID >= 0 || (this.preventDefault && e.preventDefault(), this.bubbleEvent || e.stopImmediatePropagation(), e instanceof MouseEvent ? (this._touchID = 1, this._originalX = e.clientX, this._originalY = e.clientY) : (this._touchID = e.targetTouches[0].identifier, this._originalX = e.targetTouches[0].clientX, this._originalY = e.targetTouches[0].clientY), this._setScrollPosCache(this._scrollPositions, this._element), this.touchstart.notify(e), this._addListener(enums.Event.MOUSEMOVE, this._onTouchMove.bind(this)), this._addListener(enums.Event.MOUSEUP, this._onTouchEnd.bind(this)), this._addListener(enums.Event.MOUSECANCEL, this._onTouchEnd.bind(this)))
}, FUTTouchHandler.prototype._onTouchMove = function(e) {
    var t = null,
        i = !1;
    if (this._element) {
        if (t = this._getTouch(e)) {
            if (!this._hasMoved) {
                var s = t.clientX,
                    o = t.clientY,
                    bounds = this._element.getBoundingClientRect();
                i = s < bounds.left || s > bounds.right || o < bounds.top || o > bounds.bottom, this._hasMoved = i || Math.abs(s - this._originalX) > this.moveDistanceThreshold || Math.abs(o - this._originalY) > this.moveDistanceThreshold
            }
            this._hasMoved && (this.touchmove.notify(e), this.endTouchOnLeave && i && this._onTouchEnd(e))
        }
    } else this._onTouchEnd(e)
}, FUTTouchHandler.prototype._onTouchEnd = function(e) {
    hideKeyboard();
    var t = this._detectScroll();
    !this._hasMoved && t && this.touchmove.notify(e), this.touchend.notify(e), this._hasMoved || t || this.tap.notify(e), this._resetState(), this._removeListenersByName(enums.Event.MOUSEMOVE, enums.Event.MOUSEUP, enums.Event.MOUSECANCEL)
}, FUTTouchHandler.prototype._getTouch = function(e) {
    return e instanceof MouseEvent ? e : utils.JS.find(e.targetTouches, function(t) {
        return t.identifier === this._touchID
    }.bind(this))
}, FUTTouchHandler.prototype._resetState = function() {
    this._touchID = -1, this._hasMoved = !1, this._originalX = 0, this._originalY = 0, this._scrollPositions = []
}, FUTTouchHandler.prototype._addListener = function(event, t) {
    this._element.addEventListener(event, t, !1), this._listeners.push({
        event: event,
        cb: t
    })
}, FUTTouchHandler.prototype._removeListenersByName = function(t) {
    Array.prototype.slice.call(arguments, 0).forEach(function removeEventListener(event) {
        for (var t = this._listeners.length; t-- > 0;) {
            var i = this._listeners[t];
            i.event === event && (this._element.removeEventListener(i.event, i.cb), this._listeners.splice(t, 1))
        }
    }, this)
}, FUTTouchHandler.prototype._setScrollPosCache = function(t, i) {
    t.push(i.scrollTop), "BODY" !== i.nodeName && this._setScrollPosCache(t, i.parentElement)
}, FUTTouchHandler.prototype._detectScroll = function() {
    var t = [];
    if (this._setScrollPosCache(t, this._element), t.length !== this._scrollPositions.length) return !0;
    for (var i = t.length; i-- > 0;)
        if (t[i] !== this._scrollPositions[i]) return !0;
    return !1
}, NamespaceManager.Register("utils"), utils.HTTP = {}, utils.HTTP.baseUrlParse = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/, utils.HTTP.getParamsFromUrl = function getParamsFromUrl(url) {
    var t = url ? url.split("?")[1] : window.location.search.slice(1),
        i = new FUTHashTable({});
    return t && (t = t.split("#")[0]).split("&").forEach(function(t) {
        var a = t.split("="),
            s = void 0 === a[1] ? "" : a[1],
            o = a[0];
        i.set(o, s)
    }), i
}, utils.HTTP.generateUrlParams = function generateUrlParams(t) {
    var i = "";
    if (utils.JS.isValid(t)) {
        var s;
        for (s in t) t.hasOwnProperty(s) && (i += -1 === i.indexOf("?") ? "?" : "&", i += s + "=" + t[s])
    }
    return i
}, utils.HTTP.removeURLParameter = function removeURLParameter(url, t) {
    var i = url.split("?");
    if (i.length >= 2) {
        for (var prefix = encodeURIComponent(t) + "=", s = i[1].split(/[&;]/g), o = s.length; 0 !== o;) - 1 !== s[--o].lastIndexOf(prefix, 0) && s.splice(o, 1);
        return url = i[0] + (s.length > 0 ? "?" + s.join("&") : "")
    }
    return url
}, utils.HTTP.getUriRoot = function getUriRoot(href) {
    return href.substring(0, href.lastIndexOf("/")) + "/"
}, utils.HTTP.getUriHost = function getUriHost(href) {
    var t = utils.HTTP.baseUrlParse.exec(href);
    return null === t ? "" : t[1] + ":" + t[2] + t[3] + "/"
}, utils.HTTP.getUriPath = function getUriPath(href) {
    var t = utils.HTTP.baseUrlParse.exec(href);
    return null === t ? "" : t[5]
}, utils.HTTP.urlHasFile = function urlHasFile(href, t) {
    var i = new RegExp("." + t + "$");
    return null !== href.match(i)
}, utils.HTTP.urlHasImage = function urlHasImage(href) {
    return href = href.toLowerCase(), utils.HTTP.urlHasFile(href, "png") || utils.HTTP.urlHasFile(href, "gif") || utils.HTTP.urlHasFile(href, "jpg") || utils.HTTP.urlHasFile(href, "jpeg")
}, utils.HTTP.urlHasScheme = function urlHasScheme(href) {
    href = href.toLowerCase();
    var t = new RegExp("^(http|https)://");
    return href.match(t)
}, utils.HTTP.getHostname = function getHostname(url) {
    var hostname;
    return hostname = url.indexOf("://") > -1 ? url.split("/")[2] : url.split("/")[0], hostname = hostname.split(":")[0], hostname = hostname.split("?")[0]
}, NamespaceManager.Register("utils"), utils.Debug = {}, utils.Debug.Assert = function(t, message) {}, utils.Debug.StackTrace = function() {}, utils.Debug.Watch = function(name, scope) {}, NamespaceManager.Register("transferobjects"), transferobjects.FUTHttpResponse = function FUTHttpResponseDTO() {
    this.status = enums.HTTPStatusCode.UNKNOWN, this.success = !1, this.response = null, this.maxAge = 0, this.retryAfter = 0
}, utils.JS.inherits(FUTHttpRequest, FUTObservable), FUTHttpRequest.prototype.setCache = function setCache(t) {
    this._cache = !!t
}, FUTHttpRequest.prototype.setUrl = function setUrl(url) {
    this._url = url
}, FUTHttpRequest.prototype.setContentType = function setContentType(type) {
    this._contentType = type
}, FUTHttpRequest.prototype.setRequestType = function setRequestType(type) {
    this._requestType = type
}, FUTHttpRequest.prototype.overrideMimeType = function overrideMimeType(type) {
    this._mimeOverride = type
}, FUTHttpRequest.prototype.setUrlVariables = function setUrlVariables(t) {
    this._urlVariables = utils.HTTP.generateUrlParams(t)
}, FUTHttpRequest.prototype.setRequestBody = function setRequestBody(body) {
    this._requestBody = JSON.stringify(body)
}, FUTHttpRequest.prototype.setRequestHeader = function setRequestHeader(name, value) {
    this._http.readyState > XMLHttpRequest.OPENED ? utils.Debug.Assert(!1, "Attempted to set an HTTP request header when request has already been sent.") : this._http.readyState === XMLHttpRequest.UNSENT ? this._requestHeaders.push({
        name: name,
        value: value
    }) : this._http.setRequestHeader(name, value)
}, FUTHttpRequest.prototype.setTimeout = function setTimeout(time) {
    this._http.readyState === XMLHttpRequest.DONE ? utils.Debug.Assert(!1, "Attempted to assign timeout to an HTTP request when it has already been completed.") : this._http.readyState > XMLHttpRequest.UNSENT && (this._http.timeout = time), this._timeout = time
}, FUTHttpRequest.prototype._setDefaultHeaders = function _setDefaultHeaders() {
    this._http.setRequestHeader("Content-Type", this._contentType)
}, FUTHttpRequest.prototype.reset = function reset() {
    this._http.abort()
}, FUTHttpRequest.prototype.send = function send() {
    if (this._http.readyState > XMLHttpRequest.UNSENT && this._http.readyState < XMLHttpRequest.DONE) utils.Debug.Assert(!1, "Attempted to send an HTTP request when it is in the middle of sending.");
    else if (this._http.readyState === XMLHttpRequest.DONE && this.reset(), utils.JS.isEmpty(this._url)) utils.Debug.Assert(!1, "Attempted to send an HTTP request when URL is not set.");
    else {
        var url = this._url + this._urlVariables;
        this._cache || (url += (/\?/.test(url) ? "&" : "?") + Date.now()), this._http.open(this._requestType, url, !0), this._setDefaultHeaders();
        for (var headers = this._requestHeaders.slice(); headers.length > 0;) {
            var t = headers.pop();
            this._http.setRequestHeader(t.name, t.value)
        }
        this._timeout > 0 && (this._http.timeout = this._timeout), this._http.onreadystatechange = this._onStateChange.bind(this), this._requestBody && this._requestType !== enums.HTTPRequestMethod.DELETE ? this._http.send(this._requestBody) : this._http.send()
    }
}, FUTHttpRequest.prototype._onStateChange = function _onStateChange() {
    this._http.readyState === XMLHttpRequest.DONE && (this._http.status >= 200 && this._http.status < 300 || 304 === this._http.status ? this._handleSuccess() : this._handleFail())
}, FUTHttpRequest.prototype._parseResponse = function _parseResponse() {
    if (this._http.response) {
        if ("json" === this._http.responseType || utils.JS.isString(this._http.response) && this._http.response.length > 0) try {
            return JSON.parse(this._http.response)
        } catch (t) {}
        return this._http.response.toString()
    }
    return null
}, FUTHttpRequest.prototype._handleSuccess = function _handleSuccess() {
    var t = new transferobjects.FUTHttpResponse;
    t.status = this._http.status, t.success = !0, t.response = this._parseResponse(), this.notify(t)
}, FUTHttpRequest.prototype._handleFail = function _handleFail() {
    var t = new transferobjects.FUTHttpResponse;
    if (t.status = this._http.status, utils.JS.isString(this._http.response)) {
        var reason = this._http.response;
        reason.match(enums.NetworkErrorReason.MULTIPLE_SESSION) ? t.status = enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE : reason.match(enums.NetworkErrorReason.WRONG_CREDENTIALS) || reason.match(enums.NetworkErrorReason.INVALID_CREDENTIALS) ? t.status = enums.HTTPStatusCode.INVALID_CREDENTIALS : reason.match(enums.NetworkErrorReason.BANNED) ? t.status = enums.HTTPStatusCode.ACCOUNT_BANNED : (reason.match(enums.NetworkErrorReason.CLIENT_VERSION_EXPIRED) || reason.match(enums.NetworkErrorReason.CLIENT_VERSION_UNKNOWN)) && (t.status = enums.HTTPStatusCode.UPDATE_REQUIRED)
    }
    t.retryAfter = parseInt(this._http.getResponseHeader("Retry-After"), 10) || 0, this.notify(t)
}, utils.JS.inherits(FUTUtasHttpRequest, FUTHttpRequest), FUTUtasHttpRequest.prototype.reset = function reset() {
    this.superclass(), this._doReauth = !0
}, FUTUtasHttpRequest.prototype.setUrl = function setUrl(url) {
    this._url = this._delegate.getSession(enums.AuthEnvironment.UTAS).url + url
}, FUTUtasHttpRequest.prototype._setDefaultHeaders = function _setDefaultHeaders() {
    this.superclass(), this._http.setRequestHeader("X-UT-SID", this._delegate.getSession(enums.AuthEnvironment.UTAS).id), this._http.setRequestHeader("X-UT-PHISHING-TOKEN", gUserSettingsModel.getUserItem(models.UserSettingsModel.SECURITY_TOKEN))
}, FUTUtasHttpRequest.prototype._handleReauth = function _handleReauth(t, data) {
    t.unobserve(this), data.success ? this.send() : (this._doReauth = !1, this._handleFail())
}, FUTUtasHttpRequest.prototype._handleSuccess = function _handleSuccess() {
    var t = new transferobjects.FUTHttpResponse;
    t.status = this._http.status, t.success = !0, t.response = this._parseResponse(), utils.JS.isObject(t.response) && t.response.hasOwnProperty("code") && "200" !== t.response.code && (t.success = !1, t.status = t.response.code);
    var i = this._http.getResponseHeader("Cache-Control");
    if (i) {
        var s = i.split(/[= ,]/);
        "max-age" === s[0] && "string" == typeof s[1] && s[1].length > 0 && (t.maxAge = parseInt(s[1], 10))
    }
    this.notify(t)
}, FUTUtasHttpRequest.prototype._handleFail = function _handleFail() {
    this._doReauth && this._http.status === enums.HTTPStatusCode.UNAUTHORIZED ? this._delegate.authenticate(enums.AuthEnvironment.UTAS).observe(this, this._handleReauth) : this.superclass()
}, NamespaceManager.Register("entities"), entities.Objective = function(data) {
    this.id = data.objectiveId, Object.defineProperty(this, "id", {
        writable: !1,
        enumerable: !0
    }), this.name = data.name, Object.defineProperty(this, "name", {
        writable: !1,
        enumerable: !0
    }), this.header = data.header, Object.defineProperty(this, "header", {
        writable: !1,
        enumerable: !0
    }), this.description = data.description, Object.defineProperty(this, "description", {
        writable: !1,
        enumerable: !0
    }), this.shortDescription = data.shortDescription, Object.defineProperty(this, "shortDescription", {
        writable: !1,
        enumerable: !0
    }), this.imageBase = data.imageBase, Object.defineProperty(this, "imageBase", {
        writable: !1,
        enumerable: !0
    }), this.gameArea = data.gameArea, Object.defineProperty(this, "gameArea", {
        writable: !1,
        enumerable: !0
    });
    var t;
    Object.defineProperty(this, "link", {
        get: function() {
            return t
        },
        set: function(i) {
            var key;
            for (key in enums.Objectives.GoToLink)
                if (enums.Objectives.GoToLink.hasOwnProperty(key) && enums.Objectives.GoToLink[key] === i) return void(t = i);
            utils.Debug.Assert(!1, "Invalid assignment to entities.Objective -> link")
        }
    }), this.link = data.takeMeThereLink, this.difficulty = data.difficulty, Object.defineProperty(this, "difficulty", {
        writable: !1,
        enumerable: !0
    });
    var i;
    Object.defineProperty(this, "type", {
        get: function() {
            return i
        },
        set: function(t) {
            var key;
            for (key in enums.Objectives.Type)
                if (enums.Objectives.Type.hasOwnProperty(key) && enums.Objectives.Type[key] === t) return void(i = t);
            utils.Debug.Assert(!1, "Invalid assignment to entities.Objective -> type")
        }
    }), this.type = data.type, this.requiresReset = data.requiresReset, Object.defineProperty(this, "requiresReset", {
        writable: !1,
        enumerable: !0
    }), this.isWeb = data.isWeb, Object.defineProperty(this, "isWeb", {
        writable: !1,
        enumerable: !0
    }), this.startTime = data.startTime, Object.defineProperty(this, "startTime", {
        writable: !1,
        enumerable: !0
    }), this.lastUpdateTime = data.lastUpdateTime, Object.defineProperty(this, "lastUpdateTime", {
        writable: !1,
        enumerable: !0
    }), this.expiryTime = data.expiryTime + 10, Object.defineProperty(this, "expiryTime", {
        writable: !1,
        enumerable: !0
    }), this.slot = data.slot, Object.defineProperty(this, "slot", {
        writable: !1,
        enumerable: !0
    });
    var s;
    Object.defineProperty(this, "state", {
        get: function() {
            return s
        },
        set: function(t) {
            var key;
            for (key in enums.Objectives.State)
                if (enums.Objectives.State.hasOwnProperty(key) && enums.Objectives.State[key] === t) return void(s = t);
            utils.Debug.Assert(!1, "Invalid assignment to entities.Objective -> state")
        }
    }), this.state = data.state, this.currentProgress = data.currentProgress, Object.defineProperty(this, "currentProgress", {
        writable: !0,
        enumerable: !0
    }), this.multiplier = data.multiplier, Object.defineProperty(this, "multiplier", {
        writable: !1,
        enumerable: !0
    }), this.isDaily = this.type === enums.Objectives.Type.DAILY, Object.defineProperty(this, "isDaily", {
        writable: !1,
        enumerable: !0
    }), this.isWeekly = this.type === enums.Objectives.Type.WEEKLY, Object.defineProperty(this, "isWeekly", {
        writable: !1,
        enumerable: !0
    })
}, entities.Objective.prototype.markAsCompleted = function markAsCompleted() {
    this.state = enums.Objectives.State.COMPLETED
}, entities.Objective.prototype.markAsRedeemed = function markAsRedeemed() {
    this.state = enums.Objectives.State.REDEEMED
}, entities.Objective.prototype.isInvalid = function isInvalid() {
    return this.state === enums.Objectives.State.INVALID
}, entities.Objective.prototype.isInProgress = function isInProgress() {
    return this.state === enums.Objectives.State.IN_PROGRESS
}, entities.Objective.prototype.isUnclaimed = function isUnclaimed() {
    return this.state === enums.Objectives.State.COMPLETED
}, entities.Objective.prototype.isRedeemed = function isRedeemed() {
    return this.state === enums.Objectives.State.REDEEMED
}, entities.Objective.prototype.isCompleted = function isCompleted() {
    return this.isUnclaimed() || this.isRedeemed()
}, entities.Objective.prototype.hasWebLink = function hasWebLink() {
    return this.link === enums.Objectives.GoToLink.AUCTION_SEARCH || this.link === enums.Objectives.GoToLink.SBC_SQUAD || this.link === enums.Objectives.GoToLink.SQUAD
}, entities.Objective.prototype.getImageIdentifier = function getImageIdentifier() {
    return utils.JS.isEmpty(this.imageBase) ? this.gameArea : this.imageBase
}, NamespaceManager.Register("factories"), factories.Objective = function() {
    function ObjectiveFactory() {}
    return ObjectiveFactory.prototype.createObjectivesFromPayload = function createObjectivesFromPayload(data) {
        var t = [];
        return Array.isArray(data.dailyObjectives) && (t = this.createObjectivesFromObjArray(data.dailyObjectives)), Array.isArray(data.weeklyObjectives) && (t = this.createObjectivesFromObjArray(data.weeklyObjectives)), t
    }, ObjectiveFactory.prototype.createObjectivesFromObjArray = function createObjectivesFromObjArray(data) {
        return data && Array.isArray(data) ? data.map(function(t) {
            return this.createObjectiveFromObjData(t)
        }, this) : []
    }, ObjectiveFactory.prototype.createObjectiveFromObjData = function createObjectiveFromObjData(data) {
        return new entities.Objective(data)
    }, new ObjectiveFactory
}(), NamespaceManager.Register("transferobjects"), transferobjects.Reward = function(data) {
    if (this.value = data.value || data.awardValue, Object.defineProperty(this, "value", {
            writable: !1
        }), this.count = data.count || data.awardCount, Object.defineProperty(this, "count", {
            writable: !1
        }), this.halId = data.halId, Object.defineProperty(this, "halId", {
            writable: !1
        }), this.type = data.type || data.awardType, Object.defineProperty(this, "type", {
            writable: !1
        }), this.isCoin = this.type === enums.AwardType.COIN, Object.defineProperty(this, "isCoin", {
            writable: !1
        }), this.isPack = this.type === enums.AwardType.PACK, Object.defineProperty(this, "isPack", {
            writable: !1
        }), this.isItem = this.type === enums.AwardType.ITEM, Object.defineProperty(this, "isItem", {
            writable: !1
        }), this.isUntradeable = data.isUntradeable || data.untradeable, Object.defineProperty(this, "isUntradeable", {
            writable: !1
        }), this.itemData = null, this.isItem) {
        var t = data.itemData || data.awardItemData;
        t.loans = 0 === t.loans ? -1 : t.loans, t.contract = t.loans > 0 ? t.loans : 7, this.itemData = factories.Item.createItem(t), this.itemData.playStyle = this.itemData.isGK() ? enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_1 : enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_1
    }
    Object.defineProperty(this, "itemData", {
        writable: !1
    })
}, transferobjects.Reward.prototype.buildString = function() {
    var text = "";
    if (this.isCoin) text = gLocalization.lText("card.desc.FreeCreditsDesc");
    else {
        if (this.isPack) text += "x" + this.count + " " + utils.TextUtils.capitalize(gLocalization.lText("FUT_STORE_PACK_" + this.value + "_NAME_MOBILE"));
        else if (this.isItem) {
            var t = this.itemData.getStaticData(),
                i = "x" + this.count + " ",
                s = "",
                o = "",
                l = t.name;
            (this.itemData.isCommon() || this.itemData.isRare()) && (o = gLocalization.lText("search.cardLevels.cardLevel" + this.itemData.getTier()) + " "), this.itemData.isCommon() || (s = gLocalization.lText("item.raretype" + this.itemData.rareflag) + " "), this.itemData.isKit() ? l = utils.TextUtils.capitalize(gLocalization.lText("card.title.kit")) : this.itemData.isConsumable() && (l = t.name + " " + gLocalization.lText("itemtype.consumable")), text += i + s + o + l
        }
        this.isUntradeable && (text += " (" + gLocalization.lText("infopanel.context.untradeable") + ")")
    }
    return text
}, transferobjects.Reward.prototype.getPriority = function() {
    switch (this.type) {
        case enums.AwardType.ITEM:
            return 0;
        case enums.AwardType.PACK:
            return 1;
        case enums.AwardType.COIN:
            return 2;
        default:
            return utils.Debug.Assert(!1, "[transferobjects.Reward] | Reached default case: " + this.type), 3
    }
}, transferobjects.ObjectiveReward = function(data) {
    transferobjects.Reward.call(this, data), this.setId = data.setId, Object.defineProperty(this, "setId", {
        writable: !1,
        enumerable: !0
    }), this.assetId = data.assetId, Object.defineProperty(this, "assetId", {
        writable: !1,
        enumerable: !0
    })
}, utils.JS.inherits(transferobjects.ObjectiveReward, transferobjects.Reward), NamespaceManager.Register("accessobjects"), accessobjects.Objectives = function() {
    function ObjectivesDAO() {
        FUTObject.call(this), this.UTAS_REQUEST_PATH = "/ut/game/" + GAME_NAME + "/", Object.defineProperty(this, "UTAS_REQUEST_PATH", {
            writable: !1,
            enumerable: !0
        })
    }
    return utils.JS.inherits(ObjectivesDAO, FUTObject), ObjectivesDAO.prototype.getObjectives = function getObjectives(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "user/dynamicobjectives"), s.setUrlVariables({
            scope: "all"
        }), s.observe(this, function _onGetObjectivesComplete(t, data) {
            t.unobserve(this);
            var s = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response),
                response = o ? data.response : null;
            s.response = {}, s.response.dailyAutoClaimed = !!o && response.dailyRewardsAutoClaimed, s.response.weeklyAutoClaimed = !!o && response.weeklyRewardsAutoClaimed, s.response.dailyObjectives = o ? factories.Objective.createObjectivesFromObjArray(response.dailyObjectives) : [], s.response.weeklyObjectives = o ? factories.Objective.createObjectivesFromObjArray(response.weeklyObjectives) : [], s.status = data.status, s.success = data.success, i.notify(s)
        }), s.send(), i
    }, ObjectivesDAO.prototype.claimById = function claimById(t, id) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "user/dynamicobjectives/claim/" + id), s.setRequestType(enums.HTTPRequestMethod.POST), s.observe(this, function _onClaimByIdComplete(t, data) {
            t.unobserve(this);
            var s = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response),
                response = o ? data.response : null;
            s.response = {}, s.response.awards = o && id === response.objectiveId ? response.awards.map(function(t) {
                return new transferobjects.ObjectiveReward(t)
            }, this) : [], s.status = data.status, s.success = data.success, i.notify(s)
        }), s.send(), i
    }, ObjectivesDAO.prototype.claimAll = function claimAll(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "user/dynamicobjectives/claim/all"), s.setRequestType(enums.HTTPRequestMethod.POST), s.observe(this, function _onClaimAllComplete(t, data) {
            t.unobserve(this);
            var s = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response),
                response = o ? data.response : null;
            s.response = {}, s.response.awards = o ? response.awards.map(function(t) {
                return new transferobjects.ObjectiveReward(t)
            }, this) : [], s.status = data.status, s.success = data.success, i.notify(s)
        }), s.send(), i
    }, new ObjectivesDAO
}(), NamespaceManager.Register("interfaces"), interfaces.AuthDelegate = function() {}, interfaces.AuthDelegate.prototype.getCurrentUser = function getCurrentUser() {}, interfaces.AuthDelegate.prototype.getSession = function getSession(t) {}, interfaces.AuthDelegate.prototype.authenticate = function authenticate(t) {}, NamespaceManager.Register("accessobjects"), accessobjects.Authentication = function() {
    function AuthenticationDAO() {
        FUTObject.call(this)
    }
    return utils.JS.inherits(AuthenticationDAO, FUTObject), AuthenticationDAO.prototype.authenticate = function authenticate(t, i) {
        var s = t.getCurrentUser(),
            o = t.getSession(i),
            l = new FUTHttpRequest,
            u = new FUTObservable;
        if (i === enums.AuthEnvironment.UTAS) {
            var h = s.getSelectedPersona(),
                p = utils.FUTData.mapSkuToCurrentYear(h.sku);
            l.setUrl(o.url + "/ut/auth?sku_b=FFT18"), l.setRequestBody({
                isReadOnly: !1,
                sku: enums.SKU.FUT,
                clientVersion: CLIENT_VERSION,
                locale: gLocalization.getEffectiveLocaleFormattedForServer(),
                method: "authcode",
                priorityLevel: 4,
                identification: {
                    authCode: t.authToken,
                    redirectUrl: "nucleus:rest"
                },
                nucleusPersonaId: h.id,
                gameSku: p
            })
        } else utils.Debug.Assert(!1, "Unsupported LiOn environment");
        var m = gUserSettingsModel.getUserItem(models.UserSettingsModel.SECURITY_TOKEN);
        return m && l.setRequestHeader("X-UT-PHISHING-TOKEN", m), l.setRequestType(enums.HTTPRequestMethod.POST), l.setCache(!1), l.observe(this, function _onLoginComplete(t, data) {
            t.unobserve(this);
            var key, s = new transferobjects.FUTHttpResponse;
            for (key in s) s.hasOwnProperty(key) && data.hasOwnProperty(key) && (s[key] = data[key]);
            s.response = {
                protocol: data.success ? data.response.protocol : "",
                hostname: data.success ? data.response.ipPort : "",
                id: data.success ? data.response.sid : "",
                environment: i
            }, u.notify(s)
        }), l.send(), u
    }, AuthenticationDAO.prototype.unauthenticate = function unauthenticate(t, i) {}, new AuthenticationDAO
}(), NamespaceManager.Register("transferobjects"), transferobjects.Session = function SessionDTO(t) {
    this.id = "", this.environment = t, Object.defineProperty(this, "environment", {
        writable: !1,
        enumerable: !0
    }), this.hostname = "", this.url = "", Object.defineProperty(this, "url", {
        get: this.getUrl,
        enumerable: !0
    }), this.protocol = enums.SessionProtocol.HTTP, this.state = enums.AuthenticationState.STATE_UNAUTHENTICATED, this.statusCode = enums.HTTPStatusCode.OK, this.securityQuestionAnswered = !1, this.accountLocked = !1, this.captchaCooldown = 10, this.count = 0
}, transferobjects.Session.prototype.getUrl = function getUrl() {
    return this.protocol + "://" + this.hostname
}, transferobjects.Session.prototype.isAuthenticated = function isAuthenticated() {
    return this.state === enums.AuthenticationState.STATE_AUTHENTICATED
}, NamespaceManager.Register("services"), services.Authentication = function() {
    function AuthenticationService() {
        FUTObject.call(this), this.authToken = "", this._sessionUtas = new transferobjects.Session(enums.AuthEnvironment.UTAS), Object.defineProperty(this, "_sessionUtas", {
            writable: !0,
            enumerable: !1
        }), this.onAuthComplete = new FUTObservable, Object.defineProperty(this, "onAuthComplete", {
            writable: !1,
            enumerable: !0
        })
    }
    return utils.JS.inherits(AuthenticationService, FUTObject), AuthenticationService.prototype.reset = function reset() {
        this.authToken = "", this._sessionUtas = new transferobjects.Session(enums.AuthEnvironment.UTAS), this.onAuthComplete.clearObservers()
    }, AuthenticationService.prototype.getCurrentUser = function getCurrentUser() {
        return repositories.User.getCurrent()
    }, AuthenticationService.prototype.getSession = function getSession(t) {
        switch (t) {
            case enums.AuthEnvironment.UTAS:
                return this._sessionUtas
        }
        return utils.Debug.Assert(!1, "No session DTO found for environment"), new transferobjects.Session(enums.AuthEnvironment.NONE)
    }, AuthenticationService.prototype.setSession = function setSession(t) {
        switch (t.environment) {
            case enums.AuthEnvironment.UTAS:
                this._sessionUtas = t
        }
        utils.Debug.Assert(!1, "Session is associated with an unsupported environment")
    }, AuthenticationService.prototype.authenticate = function authenticate(t) {
        function _onAuthComplete(o, data) {
            o.unobserve(this), data.success ? (s.id = data.response.id, t === enums.AuthEnvironment.UTAS && gPinManager.setUniqueSessionID(data.response.id), data.response.protocol && (s.protocol = data.response.protocol), data.response.hostname && (s.hostname = data.response.hostname), s.state = enums.AuthenticationState.STATE_AUTHENTICATED, s.statusCode = enums.HTTPStatusCode.OK) : (s.state = enums.AuthenticationState.STATE_AUTHENTICATION_FAILED, s.statusCode = data.status), i.notify(data)
        }
        var i = this.onAuthComplete,
            s = this.getSession(t);
        return s.state === enums.AuthenticationState.STATE_AUTHENTICATING ? i : (s.state = enums.AuthenticationState.STATE_AUTHENTICATING, eadp.identity.token2code("FOS-SERVER", function _onGetTokenSuccess(data) {
            this.authToken = data.response.code, accessobjects.Authentication.authenticate(this, t).observe(this, _onAuthComplete)
        }.bind(this), function _onGetTokenFail(data) {
            s.state = enums.AuthenticationState.STATE_AUTHENTICATION_FAILED, s.statusCode = data.status === enums.HTTPStatusCode.UNKNOWN ? enums.HTTPStatusCode.NO_INTERNET_CONNECTION : data.status, i.notify(data)
        }.bind(this)), i)
    }, AuthenticationService.prototype.unauthenticate = function unauthenticate(t) {}, new AuthenticationService
}(), NamespaceManager.Register("transferobjects"), transferobjects.ChampionsEvent = function ChampionsEventDTO(data) {
    this.id = data.championEventId, Object.defineProperty(this, "id", {
        writable: !1
    }), this.type = data.championEventType, Object.defineProperty(this, "type", {
        writable: !1
    })
}, NamespaceManager.Register("accessobjects"), accessobjects.Champions = function() {
    function ChampionsDAO() {
        FUTObject.call(this), this.UTAS_REQUEST_PATH = "/ut/game/" + GAME_NAME + "/", Object.defineProperty(this, "UTAS_REQUEST_PATH", {
            writable: !1,
            enumerable: !0
        })
    }
    return utils.JS.inherits(ChampionsDAO, FUTObject), ChampionsDAO.prototype.getUnclaimedEvents = function getUnclaimedEvents(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "champion/user/hub"), s.setUrlVariables({
            scope: "nano"
        }), s.observe(this, function _onGetUnclaimedEventsComplete(t, data) {
            t.unobserve(this);
            var s = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response);
            s.response = {}, s.response.unclaimedPrizesChampionEvents = o ? data.response.unclaimedPrizesChampionEvents.map(function(t) {
                return new transferobjects.ChampionsEvent(t)
            }) : [], s.status = data.status, s.success = data.success, i.notify(s)
        }), s.send(), i
    }, ChampionsDAO.prototype.claimById = function claimById(t, i) {
        var s = new FUTObservable,
            o = new FUTUtasHttpRequest(t);
        return o.setUrl(this.UTAS_REQUEST_PATH + "champion/user/prize"), o.setRequestBody({
            idList: i
        }), o.setRequestType(enums.HTTPRequestMethod.POST), o.observe(this, function _onClaimByIdComplete(t, data) {
            t.unobserve(this);
            var o = new transferobjects.FUTHttpResponse;
            if (o.response = {
                    awards: [],
                    eventsFullyClaimed: []
                }, utils.JS.isObject(data.response)) {
                data.response.awardedPrizes.forEach(function(t) {
                    t.awards.forEach(function(t) {
                        t.awardType !== enums.AwardType.CHAMPION_QUALIFIER && o.response.awards.push(new transferobjects.Reward(t))
                    }, this)
                }, this);
                var l = i;
                if (data.response.prizesInError.length > 0) {
                    var u = data.response.prizesInError.map(function(e) {
                        return e.eventId
                    }, this);
                    l = utils.JS.removeElementsFromArray(i, u)
                }
                o.response.eventsFullyClaimed = l
            }
            o.status = data.status, o.success = data.success, s.notify(o)
        }), o.send(), s
    }, new ChampionsDAO
}(), NamespaceManager.Register("transferobjects"), transferobjects.ServiceResponse = function ServiceResponseDTO() {
    this.success = !1, this.status = enums.HTTPStatusCode.UNKNOWN, this.data = null
}, NamespaceManager.Register("services"), services.Champions = function() {
    function ChampionsService() {
        this._events = new FUTHashTable({})
    }
    return ChampionsService.prototype.reset = function reset() {
        this._events.clear()
    }, ChampionsService.prototype.getUnclaimedEvents = function getUnclaimedEvents() {
        var event = new FUTObservable,
            t = new transferobjects.ServiceResponse;
        return t.data = {
            unclaimedEvents: []
        }, gSettingsModel.isServiceAvailable(models.SettingsModel.CHAMPIONS_ENABLED) ? this._events.length > 0 ? (t.success = !0, t.status = enums.HTTPStatusCode.OK, t.data.unclaimedEvents = this._events.values(), event.notify(t), event) : (accessobjects.Champions.getUnclaimedEvents(services.Authentication).observe(this, function _onUnclaimedEventsRetrieved(i, s) {
            i.unobserve(this), t.success = s.success, t.status = s.status, t.success ? (s.response.unclaimedPrizesChampionEvents.forEach(function(t) {
                this._events.set(t.id, t)
            }, this), t.data.unclaimedEvents = this._events.values()) : t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.CHAMPIONS_ENABLED), event.notify(t)
        }), event) : (t.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED, event.notify(t), event)
    }, ChampionsService.prototype.claimById = function claimById(t) {
        var event = new FUTObservable,
            i = new transferobjects.ServiceResponse;
        return accessobjects.Champions.claimById(services.Authentication, utils.JS.valToArray(t)).observe(this, function _onClaimByIdComplete(t, s) {
            if (t.unobserve(this), i.success = s.success, i.status = s.status, i.data = {
                    awards: s.response.awards,
                    allClaimed: !1
                }, s.success && i.data.awards.length > 0) {
                s.response.eventsFullyClaimed.forEach(function(id) {
                    this._events.remove(id)
                }, this);
                var o = 0 === this._events.length;
                o || services.Notification.queue([gLocalization.lText("notification.champions.claimAllFailed"), enums.UINotificationType.NEGATIVE]), i.data.allClaimed = o
            } else i.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.CHAMPIONS_ENABLED), services.Notification.queue([gLocalization.lText("notification.champions.claimFailed"), enums.UINotificationType.NEGATIVE]);
            event.notify(i)
        }), event
    }, ChampionsService.prototype.claimRewards = function claimRewards() {
        function _onClaimComplete(i, response) {
            i.unobserve(this), t = response, event.notify(response)
        }
        var event = new FUTObservable,
            t = new transferobjects.ServiceResponse;
        return this.getUnclaimedEvents().observe(this, function(i) {
            if (i.unobserve(this), this._events.length > 0) {
                var s = this._events.map(function(t) {
                    return t.id
                });
                this.claimById(s).observe(this, _onClaimComplete)
            } else services.Notification.queue([gLocalization.lText("notification.champions.claimFailed"), enums.UINotificationType.NEGATIVE]), event.notify(t)
        }), event
    }, new ChampionsService
}(), NamespaceManager.Register("accessobjects"), accessobjects.Item = function() {
    function ItemDAO() {
        FUTObject.call(this), this.MAX_DISCARDS = 35, Object.defineProperty(this, "MAX_DISCARDS", {
            writable: !1,
            enumerable: !0
        }), this.UTAS_REQUEST_PATH = "/ut/game/" + GAME_NAME + "/", this.UTAS_DELETE_PATH = "/ut/delete/game/" + GAME_NAME + "/"
    }
    return utils.JS.inherits(ItemDAO, FUTObject), ItemDAO.prototype.getItemDataByDefId = function getItemDataByDefId(t, i) {
        var s = new FUTObservable,
            o = new FUTUtasHttpRequest(t);
        return utils.Debug.Assert(utils.JS.isNumber(i), "Expected a numeric definition ID"), o.setUrl(this.UTAS_REQUEST_PATH + "defid"), o.setUrlVariables({
            defId: i
        }), o.observe(this, function _onGetItemDataByDefIdComplete(t, data) {
            t.unobserve(this);
            var key, i = new transferobjects.FUTHttpResponse;
            for (key in i) i.hasOwnProperty(key) && data.hasOwnProperty(key) && (i[key] = data[key]);
            var o = data.success && utils.JS.isObject(data.response) ? data.response.itemData[0] : null;
            i.response = {
                item: o ? factories.Item.createItem(o) : null
            }, s.notify(i)
        }), o.send(), s
    }, ItemDAO.prototype.discardByItemId = function discardByItemId(t, i) {
        var s = new FUTObservable,
            o = new FUTUtasHttpRequest(t),
            isArray = Array.isArray(i);
        if (utils.Debug.Assert(!isArray || i.length <= this.MAX_DISCARDS, "Item collection exceeds maximum discard amount, will only discard the first " + this.MAX_DISCARDS + " items"), isArray && 1 !== i.length) o.setUrl(this.UTAS_DELETE_PATH + "item"), o.setRequestType(enums.HTTPRequestMethod.POST), o.setRequestBody({
            itemId: i.map(function(item) {
                return item.id
            }).slice(0, this.MAX_DISCARDS)
        });
        else {
            var item = isArray ? i[0] : i;
            o.setUrl(this.UTAS_REQUEST_PATH + "item/" + item.id), o.setRequestType(enums.HTTPRequestMethod.DELETE), item.isDuplicateLoanPlayer() && o.setUrlVariables({
                combineWith: item.duplicateId
            })
        }
        return o.observe(this, function _onDiscardByItemIdComplete(t, data) {
            t.unobserve(this);
            var i = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response);
            i.success = data.success, i.status = data.status, i.response = {
                totalCredits: o ? data.response.totalCredits : null,
                itemIds: o ? data.response.items.map(function(t) {
                    return t.id
                }) : []
            }, i.maxAge = data.maxAge, i.retryAfter = data.retryAfter, s.notify(i)
        }), o.send(), s
    }, ItemDAO.prototype.discardByResourceId = function discardByResourceId(t, item) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "item/resource/" + item.resourceId), s.setRequestType(enums.HTTPRequestMethod.DELETE), s.observe(this, function _onDiscardByResourceIdComplete(t, data) {
            t.unobserve(this);
            var s = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response);
            s.success = data.success, s.status = data.status, s.response = {
                totalCredits: o ? data.response.totalCredits : null,
                itemIds: o ? data.response.items.map(function(t) {
                    return t.id
                }) : []
            }, s.maxAge = data.maxAge, s.retryAfter = data.retryAfter, i.notify(s)
        }), s.send(), i
    }, new ItemDAO
}(), NamespaceManager.Register("utils"), utils.EventDispatcher = function() {
    this._messageListeners = {}
}, utils.EventDispatcher.prototype.dispatch = function(t, i) {
    if (utils.JS.isValid(this._messageListeners[t])) {
        var s, o = this._messageListeners[t].slice(0),
            l = [this];
        l = l.concat(Array.prototype.slice.call(arguments, 1));
        var u = o.length;
        for (s = 0; s < u; ++s) o[s].listener.apply(o[s].scope, l)
    }
}, utils.EventDispatcher.prototype.addListener = function(t, scope, listener) {
    utils.Debug.Assert(utils.JS.isValid(listener) && utils.JS.isValid(scope), "Invalid listener parameters"), utils.JS.isValid(this._messageListeners[t]) || (this._messageListeners[t] = []), this._messageListeners[t].push({
        listener: listener,
        scope: scope
    })
}, utils.EventDispatcher.prototype.removeListener = function(t, scope, listener) {
    utils.Debug.Assert(utils.JS.isValid(listener) && utils.JS.isValid(scope), "Invalid listener parameters");
    var i, s, o;
    if (utils.JS.isValid(this._messageListeners[t]))
        do {
            for (o = null, s = this._messageListeners[t].length, i = 0; i < s; i++)
                if (this._messageListeners[t][i].listener === listener && this._messageListeners[t][i].scope === scope) {
                    o = i;
                    break
                }
            null !== o && this._messageListeners[t].splice(o, 1)
        } while (null !== o)
}, utils.EventDispatcher.prototype.clearListeners = function() {
    this._messageListeners = {}
}, utils.EventDispatcher.prototype.clearListenersByEvent = function(t) {
    delete this._messageListeners[t]
}, utils.EventDispatcher.prototype.clearListenersByScope = function(scope) {
    var t, x, i, s = null,
        o = [];
    for (x in this._messageListeners)
        if (this._messageListeners.hasOwnProperty(x) && utils.JS.isValid(this._messageListeners[x])) {
            do {
                for (s = null, i = this._messageListeners[x].length, t = 0; t < i; t++)
                    if (this._messageListeners[x][t].scope === scope) {
                        s = t;
                        break
                    }
                null !== s && this._messageListeners[x].splice(s, 1)
            } while (null !== s);
            0 === this._messageListeners[x].length && o.push(x)
        }
    for (i = o.length, t = 0; t < i; ++t) delete this._messageListeners[o[t]]
}, NamespaceManager.Register("valueobjects"), valueobjects.IDelegateVO = function() {}, valueobjects.IDelegateVO.prototype.cancel = function() {}, NamespaceManager.Register("models"), models.CommunicationModel = {}, models.CommunicationModel.METHOD = {
    POST: "POST",
    GET: "GET",
    PUT: "PUT",
    DELETE: "DELETE"
}, models.CommunicationModel.RESPONSE = {
    TEXT: "text",
    TEXT_JSON: "text json",
    TEXT_XML: "text xml",
    EMPTY: null
}, models.CommunicationModel.CONTENT_TYPE = {
    XML: "text/xml",
    JSON: "application/json",
    TEXT_PLAIN: "text/plain"
}, NamespaceManager.Register("models"), models.ConfigurationModel = function() {
    this._dataObject = {}, this._remoteConfigTimestamp = 0, this._remoteConfigPollLock = !1, this._remoteConfigPollHandler = 0, this._remoteConfigPollers = new FUTHashTable([]), this.onRemoteConfigLoaded = new FUTObservable, Object.defineProperty(this, "onRemoteConfigLoaded", {
        writable: !1
    })
}, models.ConfigurationModel.KEY_DEFAULT_FUT_SERVICE_URL = "authURL", models.ConfigurationModel.KEY_DEFAULT_FUT_SERVICE_PROTOCOL = "requestProtocol", models.ConfigurationModel.KEY_EADP_CONNECT_HOST = "eadpConnectHost", models.ConfigurationModel.KEY_EADP_PORTAL_HOST = "eadpPortalHost", models.ConfigurationModel.KEY_EADP_PROXY_HOST = "eadpProxyHost", models.ConfigurationModel.KEY_EADP_CLIENT_ID = "eadpClientId", models.ConfigurationModel.KEY_EADP_CLIENT_SECRET = "eadpClientSecret", models.ConfigurationModel.KEY_PIN_URL = "pinURL", models.ConfigurationModel.KEY_SHOW_OFF_URL = "showOffURL", models.ConfigurationModel.KEY_RESOURCE_ROOT = "resourceRoot", models.ConfigurationModel.KEY_STATIC_DATA_ROOT = "resourceBase", models.ConfigurationModel.KEY_LOCAL_STORAGE_VERSION = "localStorageVersion", models.ConfigurationModel.KEY_CHANGELIST = "changelist", models.ConfigurationModel.KEY_SETTINGS_REFRESH_INTERVAL = "settingsRefreshInterval", models.ConfigurationModel.KEY_REQUEST_TIMEOUT = "requestTimeout", models.ConfigurationModel.KEY_MAX_CONSECUTIVE_500_ERRORS = "maxConsecutive500Errors", models.ConfigurationModel.KEY_VERBOSE_LOGGING = "verboseLogging", models.ConfigurationModel.KEY_ORIGIN_CSS = "originCss", models.ConfigurationModel.KEY_ORIGIN_JS = "originJS", models.ConfigurationModel.KEY_ORIGIN_HOST = "origiHost", models.ConfigurationModel.KEY_ORIGIN_PROFILE = "originProfile", models.ConfigurationModel.KEY_ORIGIN_MASTER_TITLE = "originMasterTitle", models.ConfigurationModel.KEY_ANALYTICS = "analytics", models.ConfigurationModel.KEY_ASSETS_VERSION = "assetsVersion", models.ConfigurationModel.KEY_HIDE_GENERATIONS = "hideGenerations", models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET = "hideTransferMarket", models.ConfigurationModel.KEY_ITEMS_PER_PAGE = "itemsPerPage", models.ConfigurationModel.KEY_PIN = "pin", models.ConfigurationModel.KEY_UPDATE = "update", models.ConfigurationModel.KEY_WINTER_THEME = "winterTheme", models.ConfigurationModel.KEY_FUTWEB_MAINTENANCE = "futweb_maintenance", models.ConfigurationModel.KEY_FUNCAPTCHA_PK = "funCaptchaPublicKey", models.ConfigurationModel.ITEMS_PER_PAGE = {
    CLUB: "club",
    TRANSFER_MARKET: "transferMarket"
};
var gConfigurationModel = new models.ConfigurationModel;
models.ConfigurationModel.prototype.subscribePoller = function subscribePoller(t, frequency, i) {
    var s = t.constructor.name;
    utils.JS.isEmpty(s) ? utils.Debug.Assert(!1, "Object must have a declared constructor name in order to register for remote config polls") : (utils.Debug.Assert(frequency >= 6e4, "Frequency must be at least a minute."), this._remoteConfigPollers.has(s) || this.onRemoteConfigLoaded.observe(t, i), this._remoteConfigPollers.set(s, Math.max(6e4, frequency)), this._setupRemoteConfigPolling())
}, models.ConfigurationModel.prototype.unsubscribePoller = function unsubscribePoller(t) {
    var i = t.constructor.name;
    utils.JS.isEmpty(i) ? utils.Debug.Assert(!1, "Object must have a declared constructor name in order to unregister for remote config polls") : (this._remoteConfigPollers.remove(i), this.onRemoteConfigLoaded.unobserve(t), this._setupRemoteConfigPolling())
}, models.ConfigurationModel.prototype._getRemoteConfigPollFrequency = function _getRemoteConfigPollFrequency() {
    var t = this._remoteConfigPollers.values();
    return t.length > 0 ? Math.min.apply(Math, t) : 0
}, models.ConfigurationModel.prototype._setupRemoteConfigPolling = function _setupRemoteConfigPolling() {
    var t = this._getRemoteConfigPollFrequency();
    t > 0 && (this._remoteConfigPollHandler > 0 && clearInterval(this._remoteConfigPollHandler), (!this.hasRemoteConfigLoaded() || Date.now() - this._remoteConfigTimestamp > t) && this.loadRemoteConfig(), this._remoteConfigPollHandler = setInterval(this.loadRemoteConfig.bind(this), t))
}, models.ConfigurationModel.prototype.loadRemoteConfig = function loadRemoteConfig() {
    function onResumeRemoteConfigFailed(sender) {
        sender.clearListenersByScope(this), this.onRemoteConfigLoaded.notify(!1), this._remoteConfigPollLock = !1
    }
    if (!this._remoteConfigPollLock) {
        this._remoteConfigPollLock = !0;
        var t = this.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + utils.AssetLocator.getRemoteConfigFileURI(),
            i = new communication.RemoteConfigurationDelegate(t, !0);
        i.addListener(communication.BaseDelegate.SUCCESS, this, function onRemoteConfigLoadedSuccess(sender, data) {
            sender.clearListenersByScope(this), this._remoteConfigTimestamp = Date.now(), this.setDataObject(data), this.onRemoteConfigLoaded.notify(!0), this._remoteConfigPollLock = !1
        }), i.addListener(communication.BaseDelegate.FAIL, this, onResumeRemoteConfigFailed), i.addListener(communication.BaseDelegate.CANCEL, this, onResumeRemoteConfigFailed), i.execute()
    }
}, models.ConfigurationModel.prototype.hasRemoteConfigLoaded = function hasRemoteConfigLoaded() {
    return this._remoteConfigTimestamp > 0
}, models.ConfigurationModel.prototype.setDataObject = function setDataObject(t) {
    var key;
    for (key in t) t.hasOwnProperty(key) && (this._dataObject[key] = t[key])
}, models.ConfigurationModel.prototype.getConfigObject = function getConfigObject(key) {
    return utils.JS.isObject(this._dataObject[key]) ? this._dataObject[key] : null
}, models.ConfigurationModel.prototype.getConfigNumber = function getConfigNumber(key) {
    if (utils.JS.isValid(this._dataObject[key])) {
        if (utils.JS.isNumber(this._dataObject[key])) return this._dataObject[key];
        try {
            return parseFloat(this._dataObject[key])
        } catch (t) {
            return 0
        }
    }
    return 0
}, models.ConfigurationModel.prototype.getConfigBoolean = function getConfigBoolean(key) {
    if (utils.JS.isValid(this._dataObject[key])) {
        if (utils.JS.isBoolean(this._dataObject[key])) return this._dataObject[key];
        try {
            return "true" === this._dataObject[key]
        } catch (t) {
            return !1
        }
    }
    return !1
}, models.ConfigurationModel.prototype.getConfigString = function getConfigString(key) {
    if (utils.JS.isValid(this._dataObject[key])) {
        if (utils.JS.isString(this._dataObject[key])) return this._dataObject[key];
        try {
            return this._dataObject[key].toString()
        } catch (t) {
            return ""
        }
    }
    return ""
}, NamespaceManager.Register("communication"), communication.BaseDelegate = function() {
    utils.EventDispatcher.call(this), this._url = "", this._urlVariables = {}, this._customHeaders = [], this._requestType = models.CommunicationModel.METHOD.GET, this._responseType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON, this._mimeType = null, this._data = null, this._statusCode = 0, this._networkError = null, this._xhr = null, this._cancelled = !1, this._timedOut = !1, this._isImportant = !1, this._isSending = !1, this._cache = !1, this._useClickShield = !1, this._csShowing = !1, this._clickShieldType = components.ClickShield.SHIELD.LOADING
}, utils.JS.inherits(communication.BaseDelegate, utils.EventDispatcher), communication.BaseDelegate.SUCCESS = "communication.BaseDelegate.SUCCESS", communication.BaseDelegate.FAIL = "communication.BaseDelegate.FAIL", communication.BaseDelegate.CANCEL = "communication.BaseDelegate.CANCEL", communication.BaseDelegate.prototype._showClickShield = function() {
    this.useClickShield() && !this._csShowing && (gClickShield.showShield(this._clickShieldType), this._csShowing = !0)
}, communication.BaseDelegate.prototype._hideClickShield = function() {
    this._csShowing && !this._isSending && (gClickShield.hideShield(this._clickShieldType), this._csShowing = !1)
}, communication.BaseDelegate.prototype.setRequest = function(url, method, t, contentType) {
    this._url = url, this._requestType = method, this._dataType = t, this._contentType = contentType
}, communication.BaseDelegate.prototype.setImportant = function(t) {
    this._isImportant = t
}, communication.BaseDelegate.prototype.isImportant = function() {
    return this._isImportant
}, communication.BaseDelegate.prototype.setURLVariables = function(t) {
    this._urlVariables = t
}, communication.BaseDelegate.prototype.setMimeType = function(mimeType) {
    this._mimeType = mimeType
}, communication.BaseDelegate.prototype.setData = function(requestData) {
    this._data = requestData
}, communication.BaseDelegate.prototype._getStaticPayload = function() {
    var t, i = gConfigurationModel.getConfigObject("staticResponseData"),
        s = null;
    if (!utils.JS.isValid(i)) return s;
    for (t in i)
        if (i.hasOwnProperty(t) && this.constructor === utils.JS.getDefinitionByName(t)) {
            s = i[t];
            break
        }
    return s
}, communication.BaseDelegate.prototype.addHeader = function(t, i) {
    this._customHeaders[t] = i
}, communication.BaseDelegate.prototype.getDefaultHeaders = function() {
    return {}
}, communication.BaseDelegate.prototype.getHeaders = function() {
    var t, i = this.getDefaultHeaders(),
        s = this._customHeaders,
        headers = {};
    for (t in i) i.hasOwnProperty(t) && (headers[t] = i[t]);
    for (t in s) s.hasOwnProperty(t) && (headers[t] = s[t]);
    return headers
}, communication.BaseDelegate.prototype.setCache = function(t) {
    this._cache = t
}, communication.BaseDelegate.prototype.generateUrlParams = function() {
    return utils.HTTP.generateUrlParams(this._urlVariables)
}, communication.BaseDelegate.prototype.generateURL = function() {
    return this._url + this.generateUrlParams()
}, communication.BaseDelegate.prototype.getStatusCode = function() {
    return this._statusCode
}, communication.BaseDelegate.prototype.dataIsCached = function() {
    return !1
}, communication.BaseDelegate.prototype.getError = function() {
    return this._networkError
}, communication.BaseDelegate.prototype.execute = function() {
    this.send()
}, communication.BaseDelegate.prototype.cancel = function() {
    utils.JS.isValid(this._xhr) && !this._cancelled && (this._cancelled = !0, this._xhr.abort())
}, communication.BaseDelegate.prototype.send = function() {
    if (!this.dataIsCached()) {
        if (!hasConnection()) return this.onFail(enums.HTTPStatusCode.NO_INTERNET_CONNECTION), void gPinManager.sendDisconnectEvent();
        this._isSending = !0, this._showClickShield();
        var url = this.generateURL(),
            data = "";
        utils.JS.isValid(this._data) && (data = utils.JS.isObject(this._data) ? $.toJSON(this._data) : this._data), this._sendExtension() && (this._xhr = $.ajax({
            url: url,
            headers: this.getHeaders(),
            type: this._requestType,
            dataType: this._dataType,
            contentType: this._contentType,
            mimeType: this._mimeType,
            timeout: gConfigurationModel.getConfigNumber(models.ConfigurationModel.KEY_REQUEST_TIMEOUT),
            data: data,
            cache: this._cache
        }).done(this.onAPISuccess.bind(this)).fail(this.onAPIFailure.bind(this)))
    }
}, communication.BaseDelegate.prototype._sendExtension = function() {
    return !0
}, communication.BaseDelegate.prototype.onAPISuccess = function(data, t, i) {
    this._isSending = !1, this._xhr = null, this._statusCode = i.status, data = this._appendMaxAge(i, data), this._logSuccessResponse(i, t), this.onSuccess(data), this._hideClickShield()
}, communication.BaseDelegate.prototype.onAPIFailure = function(t, i, s) {
    if (this._isSending = !1, this._xhr = null, this._statusCode = t.status, "timeout" === i && (this._timedOut = !0), this._cancelled) return this.onCancel(), void this._hideClickShield();
    this._logErrorResponse(t, i, s), this.handleErrors(""), this._hideClickShield()
}, communication.BaseDelegate.prototype.onSuccess = function(data) {
    this.dispatch(communication.BaseDelegate.SUCCESS, data)
}, communication.BaseDelegate.prototype.onFail = function(errorCode) {
    this._networkError = this.generateDefaultNetworkError(errorCode), this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.BaseDelegate.prototype.onCancel = function() {
    this.dispatch(communication.BaseDelegate.CANCEL)
}, communication.BaseDelegate.prototype.handleErrors = function(t) {
    this._handleError()
}, communication.BaseDelegate.prototype._handleError = function() {
    this._timedOut ? this._statusCode = enums.HTTPStatusCode.REQUEST_TIME_OUT : this._statusCode === enums.HTTPStatusCode.UNKNOWN ? this._statusCode = enums.HTTPStatusCode.NETWORK_ERROR : this._statusCode === enums.HTTPStatusCode.SERVER_ERROR && NetworkErrorManager.trackServerError(), this.onFail(this._statusCode)
}, communication.BaseDelegate.prototype.generateDefaultNetworkError = function(errorCode) {
    var t, i = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.HTTPStatusCode.NOT_FOUND:
            t = new valueobjects.NetworkErrorVO(errorCode, enums.NetworkErrorLevel.CRITICAL, "popup.error.serviceNotFoundTitle", "popup.error.serviceNotFound");
            break;
        case enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE:
        case enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE_LEGACY:
            t = new valueobjects.NetworkErrorVO(errorCode, enums.NetworkErrorLevel.CRITICAL, "signedontoanotherdevice.title", "rpcErrorResponses.general.CARDHOUSE_ERR_ALREADY_LOGGEDIN_ON_CONSOLE");
            break;
        case enums.HTTPStatusCode.ACCOUNT_BANNED:
            t = new valueobjects.NetworkErrorVO(errorCode, enums.NetworkErrorLevel.CRITICAL, "error.banneduser.header", "error.banneduser.body");
            break;
        case enums.HTTPStatusCode.INVALID_COOKIE:
            t = new valueobjects.NetworkErrorVO(errorCode, enums.NetworkErrorLevel.CRITICAL, "popup.error.invalidcookieTitle", "popup.error.invalidcookie");
            break;
        case enums.HTTPStatusCode.CAPTCHA_REQUIRED:
        case enums.HTTPStatusCode.FUN_CAPTCHA_REQUIRED:
            t = new valueobjects.NetworkErrorVO(errorCode, enums.NetworkErrorLevel.CRITICAL, "popup.error.captcharequiredTitle", "popup.error.captcharequired");
            break;
        case enums.HTTPStatusCode.NO_CONTENT:
        case enums.HTTPStatusCode.BAD_REQUEST:
        case enums.HTTPStatusCode.UT_BAD_REQUEST:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.invalidrequestTitle", "popup.error.invalidrequest");
            break;
        case enums.HTTPStatusCode.PROFANITY:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.profanityTitle", "popup.error.profanity");
            break;
        case enums.HTTPStatusCode.NO_CARD_EXISTS:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.NoSuchCardTitle", "popup.error.NoSuchCard");
            break;
        case enums.HTTPStatusCode.SERVER_ERROR:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.serverdownTitle", "popup.error.serverdown");
            break;
        case enums.HTTPStatusCode.SERVICE_IS_DISABLED:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.ServiceIsDisabledTitle", "popup.error.ServiceIsDisabled");
            break;
        case enums.HTTPStatusCode.RATE_LIMIT:
            t = new valueobjects.NetworkErrorVO(errorCode, enums.NetworkErrorLevel.UNIMPORTANT, "popup.error.RateLimitHeader", "popup.error.RateLimitBody");
            break;
        case enums.HTTPStatusCode.UNAUTHORIZED:
        case enums.HTTPStatusCode.UNRECOVERABLE_ERROR:
            t = new valueobjects.NetworkErrorVO(errorCode, enums.NetworkErrorLevel.CRITICAL, "popup.error.cannotcontinueTitle", "popup.error.cannotcontinue");
            break;
        case enums.HTTPStatusCode.NO_INTERNET_CONNECTION:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.NoInternetConnectionTitle", "popup.error.NoInternetConnection");
            break;
        case enums.HTTPStatusCode.REQUEST_TIME_OUT:
        case enums.HTTPStatusCode.NETWORK_ERROR:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.networkerrorTitle", "popup.error.networkerrorNotCritical");
            break;
        case enums.HTTPStatusCode.SOME_ITEMS_NOT_FREE:
            t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.error.activesquad.itemsNotFreeTitle", "popup.error.activesquad.itemsNotFreeMsg");
            break;
        default:
            utils.Debug.Assert(!1, "[communication.BaseServiceDelegate] Hit default case in method generateDefaultNetworkError on error code " + errorCode + "."), t = new valueobjects.NetworkErrorVO(errorCode, i, "popup.title.genericError", "popup.body.genericError")
    }
    return t
}, communication.BaseDelegate.prototype.useClickShield = function(t, type) {
    return utils.JS.isBoolean(t) && (this._useClickShield = t), utils.JS.isNumber(type) && (this._clickShieldType = type), this._useClickShield
}, communication.BaseDelegate.prototype._appendMaxAge = function(t, data) {
    if (t.getResponseHeader("Cache-Control")) {
        var i = t.getResponseHeader("Cache-Control").split(/[= ,]/);
        this._responseType === models.CommunicationModel.RESPONSE.TEXT_JSON && "max-age" === i[0] && utils.JS.isValid(i[1]) && "" !== i[1] && (data.maxAge = parseInt(i[1], 10))
    }
    return data
}, communication.BaseDelegate.prototype._logSuccessResponse = function(t, i) {
    this._statusCode, this._url, this._requestType, this._dataType, this._contentType
}, communication.BaseDelegate.prototype._logErrorResponse = function(t, i, s) {
    this._statusCode, this._url, this._requestType, this._dataType, this._contentType, this._timedOut
}, communication.BaseServiceDelegate = function() {
    communication.BaseDelegate.call(this), this._cachedClientSessionId = 0, this._reAuthAttempts = 0, this._checkAuth = !0
}, utils.JS.inherits(communication.BaseServiceDelegate, communication.BaseDelegate), communication.BaseServiceDelegate.prototype._hideClickShield = function() {
    var t = this.getSessionInfo(),
        i = !(!utils.JS.isValid(t) || !this._checkAuth) && t.state === enums.AuthenticationState.STATE_AUTHENTICATING;
    !this._csShowing || this._isSending || i || (gClickShield.hideShield(this._clickShieldType), this._csShowing = !1)
}, communication.BaseServiceDelegate.prototype.getDefaultHeaders = function() {
    return utils.Debug.Assert(!1, "[BaseServiceDelegate::getDefaultHeaders] Abstract method not overridden."), {
        "Easw-Session-Data-Nucleus-Id": gAuthenticationModel.getUser().id
    }
}, communication.BaseServiceDelegate.prototype.generateURL = function() {
    var t = this.getSessionInfo();
    return t.protocol + "://" + t.hostname + this._url + this.generateUrlParams()
}, communication.BaseServiceDelegate.prototype.checkAuthentication = function(t) {
    return utils.JS.isBoolean(t) && (this._checkAuth = t), this._checkAuth
}, communication.BaseServiceDelegate.prototype._sendExtension = function() {
    var t = this.getSessionInfo();
    return this._cachedClientSessionId = utils.JS.isValid(t) ? t.count : 0, !this.checkAuthentication() || t.state === enums.AuthenticationState.STATE_AUTHENTICATED || (this.attemptAuthentication(), !1)
}, communication.BaseServiceDelegate.prototype.onAPISuccess = function(data, t, i) {
    this._isSending = !1, this._xhr = null, this._statusCode = i.status, data = this._appendMaxAge(i, data);
    var s = i.getResponseHeader("Retry-After"),
        o = this.getSessionInfo();
    utils.JS.isValid(s) && utils.JS.isValid(o) && (o.captchaCooldown = s), this._hasFOSLegacyError(data) ? this.onAPIFailure(i, t, "Encountered legacy FOS error code.") : (this._logSuccessResponse(i, t), this.onSuccess(data), this._hideClickShield())
}, communication.BaseServiceDelegate.prototype.onAPIFailure = function(t, i, s) {
    if (this._isSending = !1, this._xhr = null, this._statusCode = t.status, "timeout" === i && (this._timedOut = !0), this._cancelled) return this.onCancel(), void this._hideClickShield();
    if (this._logErrorResponse(t, i, s), this.isSameClientSession()) {
        var o = this.getSessionInfo(),
            l = this._responseType === models.CommunicationModel.RESPONSE.TEXT_JSON ? t.responseJSON : null,
            u = l && l.hasOwnProperty("reason") ? l.reason : t.responseText;
        utils.JS.isValid(l) && l.hasOwnProperty("code") && 200 !== parseInt(l.code, 10) && (this._statusCode = parseInt(l.code, 10));
        var h = t.getResponseHeader("Retry-After");
        utils.JS.isValid(h) && utils.JS.isValid(o) && (o.captchaCooldown = h), this.handleErrorResponse(l), this.handleErrors(u)
    } else utils.Debug.Assert(!1, "BaseServiceDelegate::onAPIFailure - Not handling errors because we are not in same client session as when the request was sent.");
    this._hideClickShield()
}, communication.BaseServiceDelegate.prototype.attemptAuthentication = function() {
    var t = this.getService(),
        i = this.getSessionInfo();
    switch (this._reAuthAttempts > 2 && (i.state = enums.AuthenticationState.STATE_AUTHENTICATION_FAILED), this._requestType, this._url, i.state) {
        case enums.AuthenticationState.STATE_AUTHENTICATED:
            this.send();
            break;
        case enums.AuthenticationState.STATE_UNAUTHENTICATED:
            this._reAuthAttempts++, gAuthenticationModel.addListener(models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL, this, this.onAuthenticationSuccess), gAuthenticationModel.addListener(models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED, this, this.onAuthenticationFail), gAuthenticationModel.authenticate(t);
            break;
        case enums.AuthenticationState.STATE_AUTHENTICATING:
            this._reAuthAttempts++, gAuthenticationModel.addListener(models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL, this, this.onAuthenticationSuccess), gAuthenticationModel.addListener(models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED, this, this.onAuthenticationFail);
            break;
        case enums.AuthenticationState.STATE_AUTHENTICATION_FAILED:
            this._isSending = !1, this._reAuthAttempts = 0, this.onFail(enums.NetworkError.UNAUTHORIZED), this.clearListeners(), this._hideClickShield()
    }
}, communication.BaseServiceDelegate.prototype.onAuthenticationSuccess = function(sender, t) {
    t === this.getService() && (sender.clearListenersByScope(this), this._reAuthAttempts = 0, this.send())
}, communication.BaseServiceDelegate.prototype.onAuthenticationFail = function(sender, t, error) {
    if (t === this.getService()) {
        if (sender.clearListenersByScope(this), error === enums.NetworkError.LOGGED_IN_ON_CONSOLE || error === enums.NetworkError.ACCOUNT_BANNED) this.onFail(error);
        else {
            if (error !== enums.NetworkError.INVALID_CREDENTIALS && error !== enums.NetworkError.UPDATE_REQUIRED) return void this.attemptAuthentication();
            this.onFail(enums.NetworkError.UNAUTHORIZED)
        }
        this._isSending = !1, this._hideClickShield()
    }
}, communication.BaseServiceDelegate.prototype.handleErrorResponse = function(t) {}, communication.BaseServiceDelegate.prototype.handleErrors = function(t) {
    switch (this._statusCode) {
        case enums.NetworkError.UNAUTHORIZED:
            this._handleUnauthorizedError(t);
            break;
        default:
            this._handleError()
    }
}, communication.BaseServiceDelegate.prototype._handleUnauthorizedError = function(t) {
    var i = this.getSessionInfo();
    t !== enums.NetworkErrorReason.MULTIPLE_SESSION ? (i.state !== enums.AuthenticationState.STATE_AUTHENTICATING && (i.state = enums.AuthenticationState.STATE_UNAUTHENTICATED), this.attemptAuthentication()) : this.onFail(enums.NetworkError.LOGGED_IN_ON_CONSOLE)
}, communication.BaseServiceDelegate.prototype._hasFOSLegacyError = function(response) {
    return utils.JS.isValid(response) && response.hasOwnProperty("code") && "200" !== response.code
}, communication.BaseServiceDelegate.prototype.getService = function() {
    return utils.Debug.Assert(!1, "Delegate's getService method not overridden."), ""
}, communication.BaseServiceDelegate.prototype.getSessionInfo = function() {
    return gAuthenticationModel.getSessionInfo(this.getService())
}, communication.BaseServiceDelegate.prototype.isSameClientSession = function() {
    var t = this.getSessionInfo();
    return null === t || t.count === this._cachedClientSessionId
}, communication.BaseFUTDelegate = function() {
    communication.BaseServiceDelegate.call(this)
}, utils.JS.inherits(communication.BaseFUTDelegate, communication.BaseServiceDelegate), communication.BaseFUTDelegate.REQUEST_ROOT = "/ut/game/fifa18/", communication.BaseFUTDelegate.DELETE_ROOT = "/ut/delete/game/fifa18/", communication.BaseFUTDelegate.REQUEST_MM = "/ut/mm/game/fifa18/", communication.BaseFUTDelegate.prototype.getService = function() {
    return enums.FOSService.FUT
}, communication.BaseFUTDelegate.prototype.getDefaultHeaders = function() {
    return {
        "Easw-Session-Data-Nucleus-Id": gAuthenticationModel.getUser().id,
        "X-UT-SID": this.getSessionInfo().id,
        "X-UT-PHISHING-TOKEN": gUserSettingsModel.getUserItem(models.UserSettingsModel.SECURITY_TOKEN)
    }
}, communication.BaseFUTDelegate.prototype.handleErrors = function(t) {
    switch (this._statusCode) {
        case enums.NetworkError.UNAUTHORIZED:
            this._handleUnauthorizedError(t);
            break;
        case enums.NetworkError.INVALID_COOKIE:
        case enums.NetworkError.NO_USER:
            this.onFail(this._statusCode);
            break;
        case enums.NetworkError.CAPTCHA_REQUIRED:
        case enums.NetworkError.FUN_CAPTCHA_REQUIRED:
            this.onFail(this._statusCode);
            break;
        default:
            this._handleError()
    }
}, communication.ItemDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setURLVariables({
        idList: t.join(",")
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "item", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.ItemDelegate, communication.BaseFUTDelegate), communication.ItemDelegate.prototype.onSuccess = function(response) {
    var t = factories.Item.generateItemsFromItemData(response.itemData, null);
    this.dispatch(communication.BaseDelegate.SUCCESS, t)
}, communication.DreamSearchDelegate = function(t, i, s) {
    communication.BaseFUTDelegate.call(this), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "defid", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON;
    var o = {};
    if (o.type = enums.SearchType.PLAYER, o.start = i, o.count = s, o.sort = t.sort, t.level !== enums.SearchLevel.ANY && (o.level = t.level), t.club > 0 && (o.team = t.club), t.league > 0 && (o.league = t.league), t.nation > 0 && (o.nation = t.nation), t.zone !== enums.SearchType.ANY) {
        var l = utils.JS.find(PLAYER_ZONE_LOOKUP, function(i) {
            return i.value === t.zone
        });
        utils.JS.isValid(l) && (o.type = l.id)
    } else t.position !== enums.SearchType.ANY && (o.position = t.position);
    t.playStyle > 0 && (o.playStyle = t.playStyle), t.defId > 0 && (o.defId = t.defId), this.setURLVariables(o), this.useClickShield(!0)
}, utils.JS.inherits(communication.DreamSearchDelegate, communication.BaseFUTDelegate), communication.TradePileDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "tradepile", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.TradePileDelegate, communication.BaseFUTDelegate), communication.UnassignedItemsDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "purchased/items", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.UnassignedItemsDelegate, communication.BaseFUTDelegate), communication.WatchListDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "watchlist", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.WatchListDelegate, communication.BaseFUTDelegate), communication.ActivateClubItemDelegate = function(id, t) {
    communication.BaseFUTDelegate.call(this), utils.JS.isNumber(t) && this.setData({
        itemState: "active",
        activateSlotNumber: t
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "item/" + id, models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.ActivateClubItemDelegate, communication.BaseFUTDelegate), communication.StaticDataLoaderDelegate = function StaticDataLoaderDelegate(item) {
    communication.BaseDelegate.call(this), this._staticURI = utils.AssetLocator.getStaticItemDataURI(item.getMaskedResourceId(), item.getYear())
}, utils.JS.inherits(communication.StaticDataLoaderDelegate, communication.BaseDelegate), communication.StaticDataLoaderDelegate.prototype.send = function send() {
    function _onCacheFail() {
        this.onFail(enums.NetworkError.NOT_FOUND)
    }
    utils.ResourceManager.RequestResource(this._staticURI, function _onCacheSuccess(t) {
        var i = isChrome() ? t.path : "file://" + t.path;
        $.getJSON(i, this.onSuccess.bind(this)).fail(_onCacheFail.bind(this))
    }.bind(this), _onCacheFail.bind(this))
}, communication.BidDelegate = function(t, i) {
    communication.BaseFUTDelegate.call(this), this.setData({
        bid: i
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "trade/" + t + "/bid", models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this._urlVariables.sku_b = "FFT18"
}, utils.JS.inherits(communication.BidDelegate, communication.BaseFUTDelegate), communication.BidDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.PERMISSION_DENIED:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.item.bidDeniedTitle", "popup.error.item.bidDenied");
            break;
        case enums.NetworkError.STATE_INVALID:
        case enums.NetworkError.NO_TRADE_EXISTS:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.item.InvalidStateTitle", "popup.error.item.InvalidState");
            break;
        case enums.NetworkError.NO_BID_TOKENS:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.NoBidTokensTitle", "popup.error.tradetoken.NoBidTokens");
            break;
        case enums.NetworkError.INVALID_OWNER:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.BidYourCardTitle", "popup.error.tradetoken.BidYourCard");
            break;
        case enums.NetworkError.CARD_IN_TRADE:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.ItemInTradeOfferTitle", "popup.error.tradetoken.ItemInTradeOffer");
            break;
        case enums.NetworkError.NOT_ENOUGH_CREDIT:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.auctionInsufficientCoinsTitle", "popup.error.auctionInsufficientCoins");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.CreditsDelegate = function() {
    communication.BaseFUTDelegate.call(this)
}, utils.JS.inherits(communication.CreditsDelegate, communication.BaseFUTDelegate), communication.CreditsDelegate.prototype.execute = function() {
    var url = communication.BaseFUTDelegate.REQUEST_ROOT + "user/credits";
    this.setRequest(url, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
}, communication.CreditsDelegate.prototype.onSuccess = function(t) {
    var i = new valueobjects.CurrencyVO;
    i.parseCurrencyDataObject(t.currencies), gUserModel.setCurrencyDirtyFlag(!1), this.dispatch(communication.BaseDelegate.SUCCESS, i)
}, NamespaceManager.Register("valueobjects"), valueobjects.UserVO = function() {
    utils.EventDispatcher.call(this), this._clubName = "", this._clubAbbr = "", this._established = new Date, this._establishedSet = !1, this._trophies = 0, this._wins = 0, this._draws = 0, this._losses = 0, this._badgeId = 0
}, utils.JS.inherits(valueobjects.UserVO, utils.EventDispatcher), valueobjects.UserVO.prototype.update = function(t) {
    this._clubName = t.getClubName(), this._clubAbbr = t.getClubAbbr(), this._badgeId = t.getBadgeId(), this._established = t.getEstablished(), this._establishedSet = !0, this._trophies = t.getTrophies(), this._wins = t.getWins(), this._draws = t.getDraws(), this._losses = t.getLosses(), this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getClubName = function() {
    return this._clubName
}, valueobjects.UserVO.prototype.setClubName = function(value) {
    this._clubName = value, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getClubAbbr = function() {
    return this._clubAbbr
}, valueobjects.UserVO.prototype.setClubAbbr = function(value) {
    this._clubAbbr = value, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getEstablished = function() {
    return this._established
}, valueobjects.UserVO.prototype.setEstablished = function(value) {
    this._established = value, this._establishedSet = !0, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getEstablishedSet = function() {
    return this._establishedSet
}, valueobjects.UserVO.prototype.getTrophies = function() {
    return this._trophies
}, valueobjects.UserVO.prototype.setTrophies = function(value) {
    this._trophies = value, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getWins = function() {
    return this._wins
}, valueobjects.UserVO.prototype.setWins = function(value) {
    this._wins = value, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getDraws = function() {
    return this._draws
}, valueobjects.UserVO.prototype.setDraws = function(value) {
    this._draws = value, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getLosses = function() {
    return this._losses
}, valueobjects.UserVO.prototype.setLosses = function(value) {
    this._losses = value, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.prototype.getBadgeId = function() {
    return this._badgeId
}, valueobjects.UserVO.prototype.setBadgeId = function(value) {
    this._badgeId = value, this.dispatch(valueobjects.UserVO.EVENT_USER_DATA_CHANGED)
}, valueobjects.UserVO.EVENT_USER_DATA_CHANGED = "valueobjects.UserVO.EVENT_USER_DATA_CHANGE", NamespaceManager.Register("utils"), utils.TextUtils = {}, utils.TextUtils.getYearString = function getYearString(t) {
    switch (t) {
        case enums.Year.YEAR_2009:
            return "2009";
        case enums.Year.YEAR_2010:
            return "2010";
        case enums.Year.YEAR_2011:
            return "2011";
        case enums.Year.YEAR_2012:
            return "2012";
        case enums.Year.YEAR_2013:
            return "2013";
        case enums.Year.YEAR_2014:
            return "2014";
        case enums.Year.YEAR_2015:
            return "2015";
        case enums.Year.YEAR_2016:
            return "2016";
        case enums.Year.YEAR_2017:
            return "2017";
        case enums.Year.YEAR_2018:
        default:
            return "2018"
    }
}, utils.TextUtils.getYearEnum = function getYearEnum(t) {
    switch (t) {
        case 2009:
            return enums.Year.YEAR_2009;
        case 2010:
            return enums.Year.YEAR_2010;
        case 2011:
            return enums.Year.YEAR_2011;
        case 2012:
            return enums.Year.YEAR_2012;
        case 2013:
            return enums.Year.YEAR_2013;
        case 2014:
            return enums.Year.YEAR_2014;
        case 2015:
            return enums.Year.YEAR_2015;
        case 2016:
            return enums.Year.YEAR_2016;
        case 2017:
            return enums.Year.YEAR_2017;
        case 2018:
        default:
            return enums.Year.YEAR_2018
    }
}, utils.TextUtils.getYearFromString = function getYearFromString(t) {
    switch (t) {
        case "2009":
            return enums.Year.YEAR_2009;
        case "2010":
            return enums.Year.YEAR_2010;
        case "2011":
            return enums.Year.YEAR_2011;
        case "2012":
            return enums.Year.YEAR_2012;
        case "2013":
            return enums.Year.YEAR_2013;
        case "2014":
            return enums.Year.YEAR_2014;
        case "2015":
            return enums.Year.YEAR_2015;
        case "2016":
            return enums.Year.YEAR_2016;
        case "2017":
            return enums.Year.YEAR_2017;
        case "2018":
            return enums.Year.YEAR_2018;
        default:
            return enums.Year.ASSET
    }
}, utils.TextUtils.nltobr = function nltobr(t) {
    return t.split("\\n").join("<br />")
}, utils.TextUtils.localizeEstablishedDate = function localizeEstablishedDate(t) {
    return function _FUTFounder(t) {
        return t.valueOf() < new Date(2009, 4, 1).valueOf()
    }(t) ? gLocalization.lText("controlbar.FUTFounder") : gLocalization.lPrint("controlbar.clubinfo.established", [function _localizeMonthYear(t) {
        var i = t.getMonth(),
            s = t.getFullYear().toString();
        return gLocalization.lPrint("date.mmyy", [gLocalization.lText(MONTH_NAMES[i]), s])
    }(t)])
}, utils.TextUtils.formatDatePrettified = function formatDatePrettified(t) {
    var i = gLocalization.lText(MONTH_NAMES[t.getMonth()]),
        s = t.getFullYear().toString(),
        o = utils.TextUtils.formatToTwoDigits(t.getMinutes()),
        l = t.getDate().toString(),
        u = t.getHours().toString(),
        h = "";
    return gLocalization.isEnglishLocale() && (u = t.getHours() > 12 ? (t.getHours() - 12).toString() : t.getHours().toString(), h = t.getHours() >= 12 ? "pm" : "am"), gLocalization.lPrint("date.ddmmmyyyyhhmm", [l, i, s, u, o, h])
}, utils.TextUtils.formatToTwoDigits = function formatToTwoDigits(n) {
    return n < 10 ? "0" + n : n.toString()
}, utils.TextUtils.centimetersToFeet = function centimetersToFeet(t) {
    var i = utils.TextUtils.centimetersToInches(t),
        s = Math.floor(i / 12),
        o = i / 12 - s,
        l = Math.round(12 * o);
    return l >= 12 && (s++, l = 0), s + "' " + l + '"'
}, utils.TextUtils.centimetersToInches = function centimetersToInches(t) {
    return .393700787 * t
}, utils.TextUtils.basename = function basename(path) {
    return path.replace(/\\/g, "/").replace(/.*\//, "")
}, utils.TextUtils.dirname = function dirname(path) {
    return path.replace(/\\/g, "/").replace(/\/[^\/]*$/, "")
}, utils.TextUtils.truncate = function truncate(length, t) {
    return utils.JS.isString(t) && "" !== t ? !utils.JS.isNumber(length) || length < 1 ? (utils.Debug.Assert(!1, "[utils.JS::truncate] Invalid length parameter; expected number greater than zero."), t) : (t.length > length && (t = t.substr(0, length).trim(), t += "&hellip;"), t) : (utils.Debug.Assert(!1, "[utils.JS::truncate] Invalid string parameter; expected non-empty string."), "")
}, utils.TextUtils.stripTrailingSlash = function stripTrailingSlash(t) {
    return "/" === t.substr(-1) ? t.substr(0, t.length - 1) : t
}, utils.TextUtils.cleanString = function cleanString(input) {
    return input.replace(/\s+/g, " ").trim()
}, utils.TextUtils.capitalize = function capitalize(input) {
    return input.replace(/\w\S*/g, function(t) {
        return t.charAt(0).toUpperCase() + t.substr(1).toLowerCase()
    })
}, utils.TextUtils.restrictSpecialCharacters = function restrictSpecialCharacters(input) {
    return input.replace(/[^a-zA-Z0-9 ]/g, "")
}, utils.TextUtils.removeEmoticons = function removeEmoticons(input) {
    return input.replace(/([\uD800-\uDBFF][\uDC00-\uDFFF])/g, "")
}, utils.TextUtils.stripSpecialCharacters = function stripSpecialCharacters(input) {
    for (var t = "", i = input.length; i-- > 0;) {
        var s = input.charAt(i);
        if (input.charCodeAt(i) < 128) t = s + t;
        else {
            for (var o = STRING_EQUALITY_LOOKUP.length, l = !1; o-- > 0;) {
                var u = STRING_EQUALITY_LOOKUP[o];
                if (u.characters.indexOf(s.toLowerCase()) >= 0) {
                    t = u.equivalent + t, l = !0;
                    break
                }
            }
            l || (t = s + t)
        }
    }
    return t
}, utils.TextUtils.isValidNameSquad = function isValidNameSquad(t) {
    var i = utils.TextUtils.cleanString(t);
    return i.length >= MIN_SQUAD_NAME_LENGTH && i.length <= MAX_SQUAD_NAME_LENGTH
}, utils.TextUtils.squadNameExists = function squadNameExists(t, i) {
    for (var s = i.length; s > 0;)
        if (--s, i[s].getName() === t) return !0;
    return !1
}, utils.TextUtils.createSquadNameCopy = function createSquadNameCopy(t, i) {
    var s = gLocalization.lText("squad.name.copy").toUpperCase(),
        o = 0,
        l = t,
        u = "";
    do {
        u = s, u += o > 0 ? o.toString() + " " : " ", (u += l).length > MAX_SQUAD_NAME_LENGTH && (u = u.slice(0, -(u.length - MAX_SQUAD_NAME_LENGTH))), t = u, o++
    } while (utils.TextUtils.squadNameExists(t, i));
    return t
}, utils.TextUtils.createSquadName = function createSquadName(t, i) {
    var s = 0,
        o = t,
        l = "";
    do {
        l = o, (l += s > 0 ? " " + s.toString() : "").length > MAX_SQUAD_NAME_LENGTH && (l = l.slice(0, -(l.length - MAX_SQUAD_NAME_LENGTH))), t = l, s++
    } while (utils.TextUtils.squadNameExists(t, i));
    return t
}, NamespaceManager.Register("utils"), utils.Localization = function() {
    this._stringArray = {}, this._onLoadedCallback = null, this._appLocale = "", this._appLanguage = "";
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "storeLocLoaded", {
        get: t.get.bind(t),
        set: t.set.bind(t)
    }), this.storeLocLoaded = !1, this._validLanguages = [enums.Language.ENGLISH, enums.Language.FRENCH, enums.Language.ITALIAN, enums.Language.GERMAN, enums.Language.SPANISH, enums.Language.DUTCH, enums.Language.PORTUGUESE]
};
var gLocalization = new utils.Localization;
utils.Localization.MS_PER_SECOND = 1e3, utils.Localization.SECONDS_PER_MINUTE = 60, utils.Localization.SECONDS_PER_HOUR = 3600, utils.Localization.SECONDS_PER_DAY = 86400, utils.Localization.SECONDS_PER_MONTH = 2678400, utils.Localization.SECONDS_PER_YEAR = 31536e3, utils.Localization.prototype.setLocale = function(locale) {
    switch (locale) {
        case enums.ServerLocale.USA:
            return void(this._appLocale = enums.Locale.USA);
        case enums.ServerLocale.GREAT_BRITAIN:
            return void(this._appLocale = enums.Locale.GREAT_BRITAIN);
        case enums.ServerLocale.AUSTRALIA:
            return void(this._appLocale = enums.Locale.AUSTRALIA);
        case enums.ServerLocale.FRANCE:
            return void(this._appLocale = enums.Locale.FRANCE);
        case enums.ServerLocale.GERMANY:
            return void(this._appLocale = enums.Locale.GERMANY);
        case enums.ServerLocale.SPAIN:
            return void(this._appLocale = enums.Locale.SPAIN);
        case enums.ServerLocale.MEXICO:
            return void(this._appLocale = enums.Locale.MEXICO);
        case enums.ServerLocale.ITALY:
            return void(this._appLocale = enums.Locale.ITALY);
        case enums.ServerLocale.NETHERLANDS:
            return void(this._appLocale = enums.Locale.NETHERLANDS);
        case enums.ServerLocale.POLAND:
            return void(this._appLocale = enums.Locale.POLAND);
        case enums.ServerLocale.RUSSIA:
            return void(this._appLocale = enums.Locale.RUSSIA);
        case enums.ServerLocale.BRAZIL:
            return void(this._appLocale = enums.Locale.BRAZIL);
        default:
            return void(this._appLocale = locale)
    }
}, utils.Localization.prototype.getLocale = function() {
    return this._appLocale
}, utils.Localization.prototype.isEnglishLocale = function() {
    switch (this.getLocale()) {
        case enums.Locale.USA:
        case enums.Locale.CANADA:
        case enums.Locale.GREAT_BRITAIN:
        case enums.Locale.AUSTRALIA:
        case enums.ServerLocale.USA:
        case enums.ServerLocale.AUSTRALIA:
        case enums.ServerLocale.GREAT_BRITAIN:
            return !0;
        default:
            return !1
    }
}, utils.Localization.prototype.isEnglishLanguage = function(lang) {
    switch (lang.toLowerCase()) {
        case enums.Language.ENGLISH.toLowerCase():
        case enums.URLLocale.USA.toLowerCase():
        case enums.URLLocale.GREAT_BRITAIN.toLowerCase():
        case enums.URLLocale.AUSTRALIA.toLowerCase():
        case enums.URLLocale.UK.toLowerCase():
            return !0;
        default:
            return !1
    }
}, utils.Localization.prototype.setLanguage = function(language, t) {
    utils.Debug.Assert(this.isLanguageSupported(language), "Attempting to load unsupported language: " + language), this._onLoadedCallback = t, this._appLanguage = language;
    var url = "loc/" + this.getEffectiveLocale() + ".json";
    url += "?_=" + gConfigurationModel.getConfigNumber(models.ConfigurationModel.KEY_ASSETS_VERSION), $.getJSON(url, this._onLanguageLoaded.bind(this))
}, utils.Localization.prototype.getLanguage = function() {
    return this._appLanguage
}, utils.Localization.prototype._onLanguageLoaded = function(data) {
    this.appendAdditionalStrings(data), this._onLoadedCallback(), this._onLoadedCallback = null
}, utils.Localization.prototype.isLanguageSupported = function(language) {
    return -1 !== this._validLanguages.indexOf(language)
}, utils.Localization.prototype.getEffectiveLocale = function(language) {
    switch (utils.JS.isValid(language) || (language = this.getLanguage()), language) {
        case enums.Language.ENGLISH:
            return enums.Locale.USA;
        case enums.Language.FRENCH:
            return enums.Locale.FRANCE;
        case enums.Language.ITALIAN:
            return enums.Locale.ITALY;
        case enums.Language.GERMAN:
            return enums.Locale.GERMANY;
        case enums.Language.SPANISH:
            return enums.Locale.SPAIN;
        case enums.Language.DUTCH:
            return enums.Locale.NETHERLANDS;
        case enums.Language.PORTUGUESE:
            return enums.Locale.BRAZIL;
        default:
            return enums.Locale.USA
    }
}, utils.Localization.prototype.getLanguageFromLocale = function(locale) {
    switch (locale) {
        case enums.Locale.USA:
            return enums.Language.ENGLISH;
        case enums.Locale.FRANCE:
            return enums.Language.FRENCH;
        case enums.Locale.ITALY:
            return enums.Language.ITALIAN;
        case enums.Locale.GERMANY:
            return enums.Language.GERMAN;
        case enums.Locale.SPAIN:
            return enums.Language.SPANISH;
        case enums.Locale.NETHERLANDS:
            return enums.Language.DUTCH;
        case enums.Locale.BRAZIL:
            return enums.Language.PORTUGUESE;
        default:
            return enums.Language.ENGLISH
    }
}, utils.Localization.prototype.getEffectiveLocaleFormattedForServer = function() {
    switch (this.getLanguage()) {
        case enums.Language.ENGLISH:
            return enums.ServerLocale.USA;
        case enums.Language.FRENCH:
            return enums.ServerLocale.FRANCE;
        case enums.Language.ITALIAN:
            return enums.ServerLocale.ITALY;
        case enums.Language.GERMAN:
            return enums.ServerLocale.GERMANY;
        case enums.Language.SPANISH:
            return enums.ServerLocale.SPAIN;
        case enums.Language.DUTCH:
            return enums.ServerLocale.NETHERLANDS;
        case enums.Language.PORTUGUESE:
            return enums.ServerLocale.BRAZIL;
        default:
            return enums.ServerLocale.USA
    }
}, utils.Localization.prototype.getLocaleFormattedForURLs = function() {
    switch (this.getLocale()) {
        case enums.Locale.USA:
        case enums.ServerLocale.USA:
            return enums.URLLocale.USA;
        case enums.Locale.CANADA:
            return enums.URLLocale.CANADA;
        case enums.Locale.GREAT_BRITAIN:
        case enums.ServerLocale.GREAT_BRITAIN:
            return enums.URLLocale.GREAT_BRITAIN;
        case enums.Locale.AUSTRALIA:
        case enums.ServerLocale.AUSTRALIA:
            return enums.URLLocale.AUSTRALIA;
        case enums.Locale.FRANCE:
        case enums.ServerLocale.FRANCE:
            return enums.URLLocale.FRANCE;
        case enums.Locale.GERMANY:
        case enums.ServerLocale.GERMANY:
            return enums.URLLocale.GERMANY;
        case enums.Locale.SPAIN:
        case enums.ServerLocale.SPAIN:
            return enums.URLLocale.SPAIN;
        case enums.Locale.MEXICO:
        case enums.ServerLocale.MEXICO:
            return enums.URLLocale.MEXICO;
        case enums.Locale.ITALY:
        case enums.ServerLocale.ITALY:
            return enums.URLLocale.ITALY;
        case enums.Locale.NETHERLANDS:
        case enums.ServerLocale.NETHERLANDS:
            return enums.URLLocale.NETHERLANDS;
        case enums.Locale.POLAND:
        case enums.ServerLocale.POLAND:
            return enums.URLLocale.POLAND;
        case enums.Locale.RUSSIA:
        case enums.ServerLocale.RUSSIA:
            return enums.URLLocale.RUSSIA;
        case enums.Locale.BRAZIL:
        case enums.ServerLocale.BRAZIL:
            return enums.URLLocale.BRAZIL;
        default:
            return enums.URLLocale.USA
    }
}, utils.Localization.prototype.lText = function(t) {
    var i = this._stringArray[t];
    return i || (i = "*" + t), i
}, utils.Localization.prototype.appendStoreDescriptionsToLoc = function(t) {
    var i, s, key, value, o = $(t).find("trans-unit"),
        l = o.length;
    for (i = 0; i < l; i++)(s = o[i]).attributes.resname && utils.JS.isValid(s.attributes.resname.value) && (key = s.attributes.resname.value, value = $(s).text().trim(), this._stringArray[key] = value);
    this.storeLocLoaded = !0
}, utils.Localization.prototype.appendAdditionalStrings = function(data) {
    var key;
    for (key in data) data.hasOwnProperty(key) && (this._stringArray[key] = data[key])
}, utils.Localization.prototype.lPrint = function(key, t) {
    var i = this.lText(key),
        length = null === t ? 0 : t.length,
        s = 1,
        o = 0;
    for (o = 0; o < length; ++o) i = i.replace("%" + s.toString(), t[o]), s++;
    return i
}, utils.Localization.prototype.lDate = function(t) {
    var i = utils.TextUtils.formatToTwoDigits((t.getMonth() + 1).toString()),
        s = utils.TextUtils.formatToTwoDigits(t.getDate().toString()),
        o = t.getFullYear().toString();
    return this.lPrint("date.mmddyyyy", [i, s, o])
}, utils.Localization.prototype.lNum = function(t, i, s) {
    null !== i && void 0 !== i || (i = 0), null !== s && void 0 !== s || (s = 0), s < i && (s = i);
    for (var o = t < 0 ? "-" : "", l = 0 === (t = Math.abs(t)) && 0 === i ? "0" : t.toFixed(s), u = "", h = this.lText("global.thousandsSeperator"), p = this.lText("global.decimal"), m = l.split("."), _ = m[0], g = _.length - 3; g > 0;) u = h + _.substr(g, 3) + u, g -= 3;
    if (u = _.substr(0, 3 + g) + u, m.length > 1) {
        for (var S = m[1]; S.length > i && "0" === S.substr(S.length - 1, 1);) S = S.substr(0, S.length - 1);
        S.length > 0 && (u = u + p + S)
    }
    return o + u
}, utils.Localization.prototype.lHeight = function(t) {
    return this.getLanguage() === enums.Locale.USA ? utils.TextUtils.centimetersToFeet(t) : t + " cm"
}, utils.Localization.prototype.lTimeRemaining = function(t) {
    var i = Math.floor(t / utils.Localization.SECONDS_PER_DAY);
    t -= i * utils.Localization.SECONDS_PER_DAY;
    var s = Math.floor(t / utils.Localization.SECONDS_PER_HOUR);
    t -= s * utils.Localization.SECONDS_PER_HOUR;
    var o = Math.floor(t / utils.Localization.SECONDS_PER_MINUTE);
    return t -= o * utils.Localization.SECONDS_PER_MINUTE, t = Math.floor(t), i > 0 ? this.lPrint("timespan.dayshours", [i, s]) : s > 0 ? this.lPrint("timespan.hoursminutes", [s, o]) : o > 0 ? this.lPrint("timespan.minutesseconds", [o, t]) : 1 === t ? "1 " + gLocalization.lText("timespan.second") : this.lPrint("timespan.seconds", [t])
}, utils.Localization.prototype.lTimeRemainingPromo = function(t) {
    if (t < 0) return this.lText("timespan.listview.seconds");
    var i = Math.floor(t / utils.Localization.SECONDS_PER_DAY);
    t -= i * utils.Localization.SECONDS_PER_DAY;
    var s = Math.floor(t / utils.Localization.SECONDS_PER_HOUR);
    t -= s * utils.Localization.SECONDS_PER_HOUR;
    var o = Math.floor(t / utils.Localization.SECONDS_PER_MINUTE);
    return t -= o * utils.Localization.SECONDS_PER_MINUTE, t = Math.floor(t), i > 0 ? this.lPrint("timespan.dayshours", [i, s]) : s > 0 ? this.lPrint("timespan.hoursminutes", [s, o]) : o > 0 ? 1 === o ? "1 " + gLocalization.lText("timespan.minute") : this.lPrint("timespan.minutes", [o]) : this.lText("timespan.listview.seconds")
}, utils.Localization.prototype.lTimeRemainingCondensed = function(t) {
    var i = Math.floor(t / utils.Localization.SECONDS_PER_DAY);
    t -= i * utils.Localization.SECONDS_PER_DAY;
    var s = Math.floor(t / utils.Localization.SECONDS_PER_HOUR);
    t -= s * utils.Localization.SECONDS_PER_HOUR;
    var o = Math.floor(t / utils.Localization.SECONDS_PER_MINUTE);
    return t -= o * utils.Localization.SECONDS_PER_MINUTE, t = Math.floor(t), i > 0 ? 1 === i ? "1 " + gLocalization.lText("timespan.day") : this.lPrint("timespan.days", [i]) : s > 0 ? 1 === s ? "1 " + gLocalization.lText("timespan.hour") : this.lPrint("timespan.hours", [s]) : o > 0 ? 1 === o ? "1 " + gLocalization.lText("timespan.minute") : this.lPrint("timespan.minutes", [o]) : t > 30 ? this.lText("timespan.listview.seconds") : t > 15 ? this.lPrint("timespan.listview.underseconds", [30]) : t > 5 ? this.lPrint("timespan.listview.underseconds", [15]) : this.lPrint("timespan.listview.underseconds", [5])
}, utils.Localization.prototype.lTimePast = function(then, now) {
    var t = (now.getTime() - then.getTime()) / utils.Localization.MS_PER_SECOND;
    t = t < 0 ? 1 : t;
    var i = Math.floor(t / utils.Localization.SECONDS_PER_YEAR);
    t -= i * utils.Localization.SECONDS_PER_YEAR;
    var s = Math.floor(t / utils.Localization.SECONDS_PER_MONTH);
    t -= s * utils.Localization.SECONDS_PER_MONTH;
    var o = Math.floor(t / utils.Localization.SECONDS_PER_DAY);
    t -= o * utils.Localization.SECONDS_PER_DAY;
    var l = Math.floor(t / utils.Localization.SECONDS_PER_HOUR);
    t -= l * utils.Localization.SECONDS_PER_HOUR;
    var u = Math.floor(t / utils.Localization.SECONDS_PER_MINUTE);
    return t -= u * utils.Localization.SECONDS_PER_MINUTE, t = Math.floor(t), i > 0 ? 1 === i ? this.lPrint("timepast.year", [i]) : this.lPrint("timepast.years", [i]) : s > 0 ? 1 === s ? this.lPrint("timepast.month", [s]) : this.lPrint("timepast.months", [s]) : o > 0 ? 1 === o ? this.lText("timepast.yesterday") : this.lPrint("timepast.days", [o]) : l > 0 ? 1 === l ? this.lPrint("timepast.hour", [l]) : this.lPrint("timepast.hours", [l]) : u > 0 ? 1 === u ? this.lPrint("timepast.minute", [u]) : this.lPrint("timepast.minutes", [u]) : (u = 1, this.lPrint("timepast.minute", [u]))
}, utils.Localization.prototype.replaceHtmlLinks = function replaceHtmlLinks(t) {
    $('a[target="_blank"]', t).each(function() {
        var t = $(this),
            href = t.attr("href");
        t.removeAttr("href"), t.on(enums.Event.TAP, function() {
            services.URL.process(href)
        })
    })
}, utils.Localization.prototype.destroyHtmlLinks = function destroyHtmlLinks(t) {
    $('a[target="_blank"]', t).each(function() {
        $(this).off(enums.Event.TAP)
    })
}, NamespaceManager.Register("valueobjects"), valueobjects.CurrencyVO = function() {
    this._coins = 0, this._fifaPoints = 0, this._draftTokens = 0, this._containsCoins = !1, this._containsFifaPoints = !1, this._containsDraftTokens = !1
}, valueobjects.CurrencyVO.prototype.parseCurrencyDataObject = function(data) {
    var t, i, s = utils.JS.isValid(data) ? data.length : 0;
    for (i = 0; i < s; i++) {
        var o = (t = data[i]).funds;
        switch (t.name) {
            case valueobjects.CurrencyVO.COINS:
                this.setCoins(o);
                break;
            case valueobjects.CurrencyVO.FIFA_POINTS:
                this.setFifaPoints(o);
                break;
            case valueobjects.CurrencyVO.DRAFT_TOKENS:
                this.setDraftTokens(o);
                break;
            default:
                utils.Debug.Assert(!1, "[CurrencyVO] | Reached default case: " + t.name)
        }
    }
}, valueobjects.CurrencyVO.prototype.setCoins = function(value) {
    this._coins = value, this._containsCoins = !0
}, valueobjects.CurrencyVO.prototype.getCoins = function() {
    return this._coins
}, valueobjects.CurrencyVO.prototype.setFifaPoints = function(value) {
    this._fifaPoints = value, this._containsFifaPoints = !0
}, valueobjects.CurrencyVO.prototype.getFifaPoints = function() {
    return this._fifaPoints
}, valueobjects.CurrencyVO.prototype.setDraftTokens = function(value) {
    this._draftTokens = value, this._containsDraftTokens = !0
}, valueobjects.CurrencyVO.prototype.getDraftTokens = function() {
    return this._draftTokens
}, valueobjects.CurrencyVO.prototype.isContainsCoins = function() {
    return this._containsCoins
}, valueobjects.CurrencyVO.prototype.isContainsFifaPoints = function() {
    return this._containsFifaPoints
}, valueobjects.CurrencyVO.prototype.isContainsDraftTokens = function() {
    return this._containsDraftTokens
}, valueobjects.CurrencyVO.COINS = "COINS", valueobjects.CurrencyVO.FIFA_POINTS = "POINTS", valueobjects.CurrencyVO.DRAFT_TOKENS = "DRAFT_TOKEN", NamespaceManager.Register("models"), models.UserModel = function() {
    utils.EventDispatcher.call(this), this._personaName = "", this._userVO = new valueobjects.UserVO, this._currencyFlag = !0, this._currencies = new valueobjects.CurrencyVO, this._tradeAccess = models.UserModel.TRADE_ACCESS.WHITELIST
}, utils.JS.inherits(models.UserModel, utils.EventDispatcher), models.UserModel.TRADE_ACCESS = {
    NONE: 0,
    BLACKLIST: 1,
    WHITELIST: 2,
    GREYLIST: 3,
    MAINTENANCE: 100
}, models.UserModel.EVENT_USER_DATA_CHANGED = "UserModel.EVENT_USER_DATA_CHANGE", models.UserModel.EVENT_USER_CREDITS_CHANGED = "UserModel.EVENT_USER_CREDITS_CHANGED", models.UserModel.EVENT_USER_FIFACASH_CHANGED = "UserModel.EVENT_USER_FIFACASH_CHANGED", models.UserModel.EVENT_USER_TRADE_TOKEN_CHANGED = "UserModel.EVENT_USER_TRADE_TOKEN_CHANGED", models.UserModel.EVENT_USER_TRADE_TOKEN_PURCHASED = "UserModel.EVENT_USER_TRADE_TOKEN_PURCHASED", models.UserModel.EVENT_UPDATE_CREDITS_COMPLETE = "models.UserModel.EVENT_UPDATE_CREDITS_COMPLETE", models.UserModel.EVENT_UPDATE_CREDITS = "models.UserModel.EVENT_UPDATE_CREDITS", models.UserModel.EVENT_AUCTION_CLOSED = "models.UserModel.EVENT_AUCTION_CLOSED";
var gUserModel = new models.UserModel;
models.UserModel.prototype.init = function() {
    this.addListener(models.UserModel.EVENT_UPDATE_CREDITS, this, this._onCreditsUpdate), this.addListener(models.UserModel.EVENT_AUCTION_CLOSED, this, this._onCreditsUpdate)
}, models.UserModel.prototype.reset = function() {
    this._personaName = "", this._userVO = new valueobjects.UserVO, this._currencies = new valueobjects.CurrencyVO, this._tradeAccess = models.UserModel.TRADE_ACCESS.WHITELIST, this._currencyFlag = !0
}, models.UserModel.prototype.onUserDataChanged = function(sender, t) {
    sender.clearListenersByScope(this), this.dispatch(models.UserModel.EVENT_USER_DATA_CHANGED)
}, models.UserModel.prototype.getUserVO = function() {
    return this._userVO
}, models.UserModel.prototype.setUserVO = function(t) {
    this._userVO.update(t)
}, models.UserModel.prototype.setTradeAccess = function(t) {
    this._tradeAccess = t
}, models.UserModel.prototype.getTradeAccess = function() {
    return this._tradeAccess
}, models.UserModel.prototype.hasTradeAccess = function() {
    return this._tradeAccess === models.UserModel.TRADE_ACCESS.WHITELIST
}, models.UserModel.prototype.setPersonaName = function(t) {
    this._personaName = t
}, models.UserModel.prototype.notifyAuctionClosed = function() {
    this.dispatch(models.UserModel.EVENT_AUCTION_CLOSED)
}, models.UserModel.prototype.updateCredits = function(t) {
    utils.JS.isBoolean(t) || (t = !1), this.dispatch(models.UserModel.EVENT_UPDATE_CREDITS, t)
}, models.UserModel.prototype.isCurrencyDirty = function() {
    return this._currencyFlag
}, models.UserModel.prototype.setCurrencyDirtyFlag = function(value) {
    this._currencyFlag = value
}, models.UserModel.prototype.getCurrencyVO = function() {
    return this._currencies
}, models.UserModel.prototype.setCurrencyVO = function(t, animation) {
    animation = animation || !1, this.setCredits(t.getCoins(), animation), this.setFifacash(t.getFifaPoints(), animation), this.setDraftTokens(t.getDraftTokens())
}, models.UserModel.prototype.getCredits = function() {
    return this._currencies.getCoins()
}, models.UserModel.prototype.setCredits = function(t, i) {
    var s = {};
    s.oldVal = this.getCredits(), s.newVal = t, this._currencies.setCoins(t), this.dispatch(models.UserModel.EVENT_USER_CREDITS_CHANGED, s, i)
}, models.UserModel.prototype.getFifacash = function() {
    return this._currencies.getFifaPoints()
}, models.UserModel.prototype.setFifacash = function(t, i) {
    var s = {};
    s.oldVal = this.getFifacash(), s.newVal = t, this._currencies.setFifaPoints(t), this.dispatch(models.UserModel.EVENT_USER_FIFACASH_CHANGED, s, i)
}, models.UserModel.prototype.getDraftTokens = function() {
    return this._currencies.getDraftTokens()
}, models.UserModel.prototype.setDraftTokens = function(t) {
    this._currencies.setDraftTokens(t)
}, models.UserModel.prototype._onCreditsUpdate = function(sender, t) {
    var i = new communication.CreditsDelegate;
    i.setImportant(t), i.addListener(communication.BaseDelegate.SUCCESS, this, this._onCreditsUpdateComplete), i.addListener(communication.BaseDelegate.FAIL, this, this._onCreditsUpdateFail), i.execute()
}, models.UserModel.prototype._onCreditsUpdateComplete = function(sender, t) {
    sender.clearListenersByScope(this), this.setCredits(t.getCoins(), !0), this.setFifacash(t.getFifaPoints(), !0), this.setDraftTokens(t.getDraftTokens()), this.dispatch(models.UserModel.EVENT_UPDATE_CREDITS_COMPLETE)
}, models.UserModel.prototype._onCreditsUpdateFail = function(sender, error) {
    sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !0, function() {
        this.dispatch(models.UserModel.EVENT_UPDATE_CREDITS_COMPLETE)
    }.bind(this))
}, NamespaceManager.Register("valueobjects"), valueobjects.AlphanumericVO = function() {
    this._value = 0
}, valueobjects.AlphanumericVO.prototype.get = function() {
    return this._value
}, valueobjects.AlphanumericVO.prototype.set = function(t) {
    var i = utils.JS.isNumber(t) || utils.JS.isString(t);
    utils.Debug.Assert(i, "Invalid assignment; expected a number or string."), i && (this._value = t)
}, NamespaceManager.Register("entities"), entities.Auction = function FUTAuction() {
    this.onDataUpdated = new FUTObservable, Object.defineProperty(this, "onDataUpdated", {
        writable: !1,
        enumerable: !0
    });
    var t;
    Object.defineProperty(this, "bidState", {
        get: function() {
            return t
        },
        set: function(i) {
            if (i !== t) {
                var s;
                for (s in enums.AuctionBidState)
                    if (enums.AuctionBidState.hasOwnProperty(s)) return void(t = i);
                utils.Debug.Assert(!1, "[entities.Auction.bidState::set] Invalid assignment; expected enums.AuctionTradeState enum value")
            }
        }
    });
    var i = new valueobjects.NumberVO;
    Object.defineProperty(this, "expires", {
        get: i.get.bind(i),
        set: i.set.bind(i)
    });
    var s = new valueobjects.BooleanVO;
    Object.defineProperty(this, "isUpdating", {
        get: s.get.bind(s),
        set: s.set.bind(s)
    });
    var o = new valueobjects.AlphanumericVO;
    Object.defineProperty(this, "tradeId", {
        get: o.get.bind(o),
        set: o.set.bind(o)
    });
    var l = new valueobjects.BooleanVO;
    Object.defineProperty(this, "tradeOwner", {
        get: l.get.bind(l),
        set: l.set.bind(l)
    });
    var u;
    Object.defineProperty(this, "tradeState", {
        get: function() {
            return u
        },
        set: function(t) {
            if (t !== u) {
                var i;
                for (i in enums.AuctionTradeState)
                    if (enums.AuctionTradeState.hasOwnProperty(i)) return void(u = t);
                utils.Debug.Assert(!1, "[entities.Auction.tradeState::set] Invalid assignment; expected enums.AuctionTradeState enum value")
            }
        }
    });
    var h = new valueobjects.NumberVO;
    Object.defineProperty(this, "buyNowPrice", {
        get: h.get.bind(h),
        set: h.set.bind(h)
    });
    var p = new valueobjects.NumberVO;
    Object.defineProperty(this, "currentBid", {
        get: p.get.bind(p),
        set: p.set.bind(p)
    });
    var m = new valueobjects.NumberVO;
    Object.defineProperty(this, "startingBid", {
        get: m.get.bind(m),
        set: m.set.bind(m)
    }), this.bidState = enums.AuctionBidState.NONE, this.buyNowPrice = 0, this.currentBid = 0, this.expires = -1, this.isUpdating = !1, this.startingBid = 0, this.timestamp = 0, this.tradeId = "0", this.tradeOwner = !1, this.tradeState = enums.AuctionTradeState.INACTIVE, this._watched = !1, Object.defineProperty(this, "_watched", {
        writable: !0,
        enumerable: !1
    }), this.watched = !1, Object.defineProperty(this, "watched", {
        get: this.getWatched,
        set: this.setWatched,
        enumerable: !0
    }), this._stale = !1
}, entities.Auction.prototype.parseAuctionDataObject = function parseAuctionDataObject(data) {
    this.timestamp = Date.now();
    var t = {
        timestamp: this.timestamp
    };
    this.bidState !== data.bidState && (this.bidState = data.bidState || enums.AuctionBidState.NONE, t.bidState = this.bidState), this.buyNowPrice !== data.buyNowPrice && (this.buyNowPrice = data.buyNowPrice, t.buyNowPrice = this.buyNowPrice), this.currentBid !== data.currentBid && (this.currentBid = data.currentBid, t.currentBid = this.currentBid), this.expires !== data.expires && (this.expires = data.expires, t.expires = this.expires), this.startingBid !== data.startingBid && (this.startingBid = data.startingBid, t.startingBid = this.startingBid);
    var i = data.tradeIdStr || data.tradeId.toString();
    this.tradeId !== i && (this.tradeId = i, t.tradeId = this.tradeId);
    var s = data.tradeOwner || !1;
    this.tradeOwner !== s && (this.tradeOwner = s, t.tradeOwner = this.tradeOwner), this.tradeState !== data.tradeState && (this.tradeState = data.tradeState || enums.AuctionTradeState.INACTIVE, t.tradeState = this.tradeState);
    var o = data.watched || !1;
    this._watched !== o && (this._watched = o, t.watched = this._watched), this.isWon() && (this._watched = !1, t.watched = this._watched), this.onDataUpdated.notify(t)
}, entities.Auction.prototype.update = function update(data) {
    this.isHighestBid() && data.isOutbid();
    var t = !this.isClosedTrade() && data.isClosedTrade(),
        i = {};
    this.bidState !== data.bidState && (this.bidState = data.bidState, i.bidState = this.bidState), this.buyNowPrice !== data.buyNowPrice && (this.buyNowPrice = data.buyNowPrice, i.buyNowPrice = this.buyNowPrice), this.currentBid !== data.currentBid && (this.currentBid = data.currentBid, i.currentBid = this.currentBid), this.expires !== data.expires && (this.expires = data.expires, i.expires = this.expires), this.startingBid !== data.startingBid && (this.startingBid = data.startingBid, i.startingBid = this.startingBid), this.timestamp !== data.timestamp && (this.timestamp = data.timestamp, i.timestamp = this.timestamp), this.tradeId !== data.tradeId && (this.tradeId = data.tradeId, i.tradeId = this.tradeId), this.tradeOwner !== data.tradeOwner && (this.tradeOwner = data.tradeOwner, i.tradeOwner = this.tradeOwner), this.tradeState !== data.tradeState && (this.tradeState = data.tradeState, i.tradeState = this.tradeState), this._watched !== data.watched && (this._watched = data.watched, i.watched = this._watched), this.isWon() && (this._watched = !1, i.watched = this._watched), this.onDataUpdated.notify(i), this.isUpdating = !1, this.setStale(!1), t && gUserModel.notifyAuctionClosed()
}, entities.Auction.prototype.getWatched = function getWatched() {
    return this._watched
}, entities.Auction.prototype.setWatched = function setWatched(t) {
    t = !!t, this._watched !== t && (this._watched = t, this.onDataUpdated.notify({
        watched: this._watched
    }))
}, entities.Auction.prototype.setStale = function setStale(t) {
    this._stale = !!t
}, entities.Auction.prototype.isStale = function isStale() {
    return this._stale
}, entities.Auction.prototype.isValid = function isValid() {
    return "0" !== this.tradeId && this.tradeState !== enums.AuctionTradeState.INVALID
}, entities.Auction.prototype.getAge = function getAge() {
    return Date.now() - this.timestamp
}, entities.Auction.prototype.getAgeInSeconds = function getAgeInSeconds() {
    return Math.round((Date.now() - this.timestamp) / 1e3)
}, entities.Auction.prototype.getSecondsRemaining = function getSecondsRemaining() {
    var t = this.getAgeInSeconds();
    return t < this.expires ? this.expires - t : 0
}, entities.Auction.prototype.isWon = function isWon() {
    return !this.tradeOwner && this.isClosedTrade() && (this.isHighestBid() || this.isBought())
}, entities.Auction.prototype.isSold = function isSold() {
    return this.tradeOwner && this.isClosedTrade()
}, entities.Auction.prototype.isSelling = function isSelling() {
    return this.tradeOwner && this.isActiveTrade()
}, entities.Auction.prototype.isPendingExpiry = function isPendingExpiry() {
    return this.isActiveTrade() && (this.expires <= 0 || this.getSecondsRemaining() <= 0)
}, entities.Auction.prototype.isBid = function isBid() {
    return this.bidState !== enums.AuctionBidState.NONE
}, entities.Auction.prototype.isBought = function isBought() {
    return this.bidState === enums.AuctionBidState.BUYNOW
}, entities.Auction.prototype.isOutbid = function isOutbid() {
    return this.bidState === enums.AuctionBidState.OUTBID
}, entities.Auction.prototype.isHighestBid = function isHighestBid() {
    return this.bidState === enums.AuctionBidState.HIGHEST
}, entities.Auction.prototype.isActiveTrade = function isActiveTrade() {
    return this.tradeState === enums.AuctionTradeState.ACTIVE
}, entities.Auction.prototype.isClosedTrade = function isClosedTrade() {
    return this.tradeState === enums.AuctionTradeState.CLOSED
}, entities.Auction.prototype.isExpired = function isExpired() {
    return this.tradeState === enums.AuctionTradeState.EXPIRED
}, entities.Auction.prototype.isInactive = function isInactive() {
    return this.tradeState === enums.AuctionTradeState.INACTIVE
}, entities.Auction.prototype.canWatch = function canWatch() {
    return !this._watched && this.isActiveTrade() && !this.isPendingExpiry()
}, entities.Auction.prototype.canBid = function canBid(value, t) {
    var i = !0;
    return !(value < this.startingBid || value <= this.currentBid) && (!(value > AUCTION_MAX_BID || this.buyNowPrice > 0 && value >= this.buyNowPrice) && (utils.JS.isNumber(t) && (i = t >= value), this.isActiveTrade() && !this.isPendingExpiry() && i))
}, entities.Auction.prototype.canBuy = function canBuy(t) {
    var i = !0;
    return utils.JS.isNumber(t) && (i = t >= (this.isHighestBid() ? this.buyNowPrice - this.currentBid : this.buyNowPrice)), this.isActiveTrade() && !this.isPendingExpiry() && i
}, entities.Auction.prototype.compareTo = function compareTo(t) {
    return this.isValid() && t.isValid() && this.tradeId === t.tradeId
}, entities.Auction.prototype.bid = function bid(t) {
    var i = new FUTObservable,
        s = {
            success: !1,
            currencies: [],
            itemData: null,
            duplicates: null,
            error: null
        };
    if (!this.isValid() || this.tradeOwner || t <= 0) return i.notify(s), i;
    var o = new communication.BidDelegate(this.tradeId, t);
    return o.addListener(communication.BaseDelegate.SUCCESS, this, function _bidSuccess(sender, response) {
        if (sender.clearListenersByScope(this), this.parseAuctionDataObject(response.auctionInfo[0]), response.currencies.forEach(function(t) {
                var i = new transferobjects.Currency(t);
                s.currencies.push(i), i.isCoins && (gUserModel.setCredits(i.funds, !0), gUserModel.setCurrencyDirtyFlag(!1))
            }), Array.isArray(response.duplicateItemIdList)) {
            var t = {};
            response.duplicateItemIdList.forEach(function(i) {
                t[i.itemId] = i.duplicateItemId
            }), s.duplicates = new FUTHashTable(t)
        }
        var o = response.auctionInfo[0].itemData;
        s.itemData = {
            id: o.id,
            lastSalePrice: o.lastSalePrice,
            pile: o.pile
        }, s.dynamicObjectivesUpdates = response.dynamicObjectivesUpdates || null, s.success = !0, i.notify(s)
    }), o.addListener(communication.BaseDelegate.FAIL, this, function _bidFail(sender, error) {
        sender.clearListenersByScope(this), error.getCode() === enums.NetworkError.PERMISSION_DENIED && TelemetryManager.trackEvent(TelemetryManager.Sections.AUCTIONS, TelemetryManager.Categories.ERROR, "(" + error.getCode() + ") Unable to bid."), s.error = error, i.notify(s)
    }), o.send(), i
}, NamespaceManager.Register("valueobjects"), valueobjects.IListItemVO = function() {}, valueobjects.IListItemVO.prototype.getItemData = function() {}, valueobjects.IListItemVO.prototype.getAuctionData = function() {}, NamespaceManager.Register("valueobjects"), valueobjects.ItemPileVO = function() {
    this._value = enums.FUTItemPile.ANY
}, valueobjects.ItemPileVO.prototype.get = function() {
    return this._value
}, valueobjects.ItemPileVO.prototype.set = function(t) {
    if (t !== this._value) {
        var i;
        for (i in enums.FUTItemPile)
            if (enums.FUTItemPile.hasOwnProperty(i)) return void(this._value = t);
        utils.Debug.Assert(!1, "Invalid assignment; expected enums.FUTItemPile enum value.")
    }
}, NamespaceManager.Register("valueobjects"), valueobjects.ItemRareTypeVO = function() {
    this._value = enums.ItemRareType.NONE
}, valueobjects.ItemRareTypeVO.prototype.get = function() {
    return this._value
}, valueobjects.ItemRareTypeVO.prototype.set = function(t) {
    if (t !== this._value) {
        var i;
        for (i in enums.ItemRareType)
            if (enums.ItemRareType.hasOwnProperty(i)) return void(this._value = t);
        utils.Debug.Assert(!1, "Invalid assignment; expected enums.ItemRareType enum value.")
    }
}, NamespaceManager.Register("valueobjects"), valueobjects.ItemStateVO = function() {
    this._value = enums.ItemState.FREE
}, valueobjects.ItemStateVO.prototype.get = function() {
    return this._value
}, valueobjects.ItemStateVO.prototype.set = function(t) {
    if (t !== this._value) {
        var i;
        for (i in enums.ItemState)
            if (enums.ItemState.hasOwnProperty(i)) return void(this._value = t);
        utils.Debug.Assert(!1, "Invalid assignment; expected enums.ItemState enum value.")
    }
}, NamespaceManager.Register("valueobjects"), valueobjects.ItemTypeVO = function() {
    this._value = enums.ItemType.PLAYER
}, valueobjects.ItemTypeVO.prototype.get = function() {
    return this._value
}, valueobjects.ItemTypeVO.prototype.set = function(t) {
    if (t !== this._value) {
        var i;
        for (i in enums.ItemType)
            if (enums.ItemType.hasOwnProperty(i)) return void(this._value = t);
        utils.Debug.Assert(!1, "Invalid assignment; expected enums.ItemType enum value.")
    }
}, NamespaceManager.Register("valueobjects"), valueobjects.RatingVO = function() {
    this._value = 0
}, valueobjects.RatingVO.prototype.get = function() {
    return this._value
}, valueobjects.RatingVO.prototype.set = function(t) {
    var i = utils.JS.isNumber(t);
    utils.Debug.Assert(i, "Invalid assignment; expected a number."), utils.Debug.Assert(t >= 0 && t <= 99, "Invalid assignment; value outside of bounds. Will assign boundary value instead."), i && (t < 0 ? t = 0 : t > 99 && (t = 99), this._value = t)
}, NamespaceManager.Register("transferobjects"), transferobjects.ItemPriceLimits = function(t, i) {
    this.maxPrice = t || 0, Object.defineProperty(this, "maxPrice", {
        writable: !1
    }), this.minPrice = i || 0, Object.defineProperty(this, "minPrice", {
        writable: !1
    })
}, NamespaceManager.Register("transferobjects"), transferobjects.CareerEntry = function(data) {
    this.startYear = data.s, Object.defineProperty(this, "startYear", {
        writable: !1
    }), this.endYear = data.e, Object.defineProperty(this, "endYear", {
        writable: !1
    }), this.teamId = data.t, Object.defineProperty(this, "teamId", {
        writable: !1
    }), this.matches = data.m, Object.defineProperty(this, "matches", {
        writable: !1
    }), this.goals = data.g, Object.defineProperty(this, "goals", {
        writable: !1
    })
}, NamespaceManager.Register("transferobjects"), transferobjects.LegendsBio = function(data) {
    function extractCareer(t) {
        var entries = [];
        return t.forEach(function(t) {
            var i = new transferobjects.CareerEntry(t);
            entries.push(i)
        }), entries
    }
    this.clubCareer = utils.JS.isValid(data) ? extractCareer(data.c) : [], Object.defineProperty(this, "clubCareer", {
        writable: !1
    }), this.nationalCareer = utils.JS.isValid(data) ? extractCareer(data.n) : [], Object.defineProperty(this, "nationalCareer", {
        writable: !1
    })
}, NamespaceManager.Register("transferobjects"), transferobjects.PlayerMetaData = function(id, data) {
    this.id = id, Object.defineProperty(this, "id", {
        writable: !1
    }), this.birthday = data.b, Object.defineProperty(this, "birthday", {
        writable: !1
    }), this.isLeftFoot = 1 !== parseInt(data.f, 10), Object.defineProperty(this, "isLeftFoot", {
        writable: !1
    }), this.height = data.h, Object.defineProperty(this, "height", {
        writable: !1
    }), this.legendBio = new transferobjects.LegendsBio(data.l), Object.defineProperty(this, "legendBio", {
        writable: !1
    })
}, NamespaceManager.Register("valueobjects"), valueobjects.StringVO = function() {
    this._value = ""
}, valueobjects.StringVO.prototype.get = function() {
    return this._value
}, valueobjects.StringVO.prototype.set = function(t) {
    var i = utils.JS.isString(t);
    utils.Debug.Assert(i, "Invalid assignment; expected a string."), i && (this._value = t)
}, NamespaceManager.Register("transferobjects"), transferobjects.StaticItemData = function() {
    var t = new valueobjects.NumberVO;
    Object.defineProperty(this, "assetId", {
        get: t.get.bind(t),
        set: t.set.bind(t),
        enumerable: !0
    });
    var i = new valueobjects.StringVO;
    Object.defineProperty(this, "assetType", {
        get: i.get.bind(i),
        set: i.set.bind(i),
        enumerable: !0
    });
    var s = new valueobjects.NumberVO;
    Object.defineProperty(this, "assetYear", {
        get: s.get.bind(s),
        set: s.set.bind(s),
        enumerable: !0
    });
    var o = new valueobjects.NumberVO;
    Object.defineProperty(this, "amount", {
        get: o.get.bind(o),
        set: o.set.bind(o),
        enumerable: !0
    });
    var name = new valueobjects.StringVO;
    Object.defineProperty(this, "name", {
        get: name.get.bind(name),
        set: name.set.bind(name),
        enumerable: !0
    });
    var l = new valueobjects.StringVO;
    Object.defineProperty(this, "description", {
        get: l.get.bind(l),
        set: l.set.bind(l),
        enumerable: !0
    });
    var u = new valueobjects.StringVO;
    Object.defineProperty(this, "manufacturer", {
        get: u.get.bind(u),
        set: u.set.bind(u),
        enumerable: !0
    });
    var h = new valueobjects.NumberVO;
    Object.defineProperty(this, "trainedAttribute", {
        get: h.get.bind(h),
        set: h.set.bind(h),
        enumerable: !0
    });
    var p = new valueobjects.StringVO;
    Object.defineProperty(this, "trainPosFrom", {
        get: p.get.bind(p),
        set: p.set.bind(p),
        enumerable: !0
    });
    var m = new valueobjects.StringVO;
    Object.defineProperty(this, "trainPosTo", {
        get: m.get.bind(m),
        set: m.set.bind(m),
        enumerable: !0
    });
    var _ = new valueobjects.NumberVO;
    Object.defineProperty(this, "goldBoost", {
        get: _.get.bind(_),
        set: _.set.bind(_),
        enumerable: !0
    });
    var g = new valueobjects.NumberVO;
    Object.defineProperty(this, "silverBoost", {
        get: g.get.bind(g),
        set: g.set.bind(g),
        enumerable: !0
    });
    var S = new valueobjects.NumberVO;
    Object.defineProperty(this, "bronzeBoost", {
        get: S.get.bind(S),
        set: S.set.bind(S),
        enumerable: !0
    });
    var v = new valueobjects.BooleanVO;
    Object.defineProperty(this, "dynamicPortrait", {
        get: v.get.bind(v),
        set: v.set.bind(v),
        enumerable: !0
    }), this.assetId = 0, this.assetType = "", this.assetYear = -1, this.amount = 0, this.name = enums.Localization.BLANK_STR, this.firstName = enums.Localization.BLANK_STR, this.lastName = enums.Localization.BLANK_STR, this.knownAs = enums.Localization.BLANK_STR, this.description = "", this.manufacturer = "", this.trainedAttribute = -1, this.trainPosFrom = "", this.trainPosTo = "", this.goldBoost = 0, this.silverBoost = 0, this.bronzeBoost = 0, this.dynamicPortrait = !1
}, transferobjects.StaticItemData.prototype.parseDynamicItemData = function(item, data) {
    this.amount = data.amount || 0, this.dynamicPortrait = item.rareflag > enums.ItemRareType.RARE
}, transferobjects.StaticItemData.prototype.generateNameData = function generateNameData(t, i, s) {
    this.firstName = t || enums.Localization.BLANK_STR, this.lastName = i || enums.Localization.BLANK_STR, this.knownAs = s || enums.Localization.BLANK_STR, this.name = this.knownAs === enums.Localization.BLANK_STR ? this.lastName : this.knownAs
}, transferobjects.StaticItemData.prototype.getFullName = function() {
    return this.knownAs === enums.Localization.BLANK_STR ? this.firstName + " " + this.lastName : this.knownAs
}, transferobjects.StaticItemData.prototype.hasLoanPackDescription = function() {
    return "FreeLoanPackDesc" === this.description
}, transferobjects.StaticPlayerItemData = function() {
    transferobjects.StaticItemData.call(this)
}, utils.JS.inherits(transferobjects.StaticPlayerItemData, transferobjects.StaticItemData), transferobjects.StaticPlayerItemData.prototype.parseDynamicItemData = function parseDynamicItemData(item, data) {
    transferobjects.StaticPlayerItemData.superClass_.parseDynamicItemData.call(this, item, data), this.generateNameData(data.firstName, data.lastName, data.knownAs)
}, transferobjects.StaticPlayerItemData.prototype.hasNameData = function hasNameData() {
    return this.firstName !== enums.Localization.BLANK_STR || this.lastName !== enums.Localization.BLANK_STR || this.knownAs !== enums.Localization.BLANK_STR
}, transferobjects.StaticManagerItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticManagerItemData, transferobjects.StaticItemData), transferobjects.StaticManagerItemData.prototype.parseDynamicItemData = function(item, data) {
    transferobjects.StaticManagerItemData.superClass_.parseDynamicItemData.call(this, item, data), this.firstName = data.firstName || enums.Localization.BLANK_STR, this.lastName = data.lastName || enums.Localization.BLANK_STR, this.knownAs = data.commonname || enums.Localization.BLANK_STR, (this.lastName === enums.Localization.BLANK_STR || utils.JS.isEmpty(this.lastName.trim())) && (this.knownAs = this.firstName), this.amount = data.negotiation || 0, this.firstName === enums.Localization.BLANK_STR && this.lastName === enums.Localization.BLANK_STR && this.knownAs === enums.Localization.BLANK_STR ? this.name = enums.Localization.BLANK_STR : this.name = this.knownAs === enums.Localization.BLANK_STR ? this.firstName.charAt(0) + ". " + this.lastName : this.knownAs
}, transferobjects.StaticStaffItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticStaffItemData, transferobjects.StaticItemData), transferobjects.StaticStaffItemData.prototype.parseDynamicItemData = function(item, data) {
    transferobjects.StaticStaffItemData.superClass_.parseDynamicItemData.call(this, item, data), this.firstName = data.firstName || enums.Localization.BLANK_STR, this.lastName = data.lastName || enums.Localization.BLANK_STR, this.name = this.firstName + ". " + this.lastName, this.trainedAttribute = parseInt(data.attribute, 10) || 0
}, transferobjects.StaticBadgeItemData = function() {
    transferobjects.StaticItemData.apply(this), this.name = gLocalization.lText("card.title.badge")
}, utils.JS.inherits(transferobjects.StaticBadgeItemData, transferobjects.StaticItemData), NamespaceManager.Register("valueobjects"), transferobjects.StaticKitItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticKitItemData, transferobjects.StaticItemData), transferobjects.StaticKitItemData.CATEGORY_KIT_HOME = 2, transferobjects.StaticKitItemData.CATEGORY_KIT_AWAY = 3, transferobjects.StaticKitItemData.CATEGORY_KIT_THIRD = 5, transferobjects.StaticKitItemData.prototype.parseDynamicItemData = function(item, data) {
    transferobjects.StaticKitItemData.superClass_.parseDynamicItemData.call(this, item, data);
    var category = parseInt(data.category, 10) || 0;
    this.assetYear = parseInt(data.year, 10) || 0, this.name = gLocalization.lText("clubtype.kit"), category === transferobjects.StaticKitItemData.CATEGORY_KIT_HOME ? (this.description = gLocalization.lText("card.desc.homekit"), this.assetType = utils.AssetLocator.IMAGE_TYPE_KIT_HOME) : category === transferobjects.StaticKitItemData.CATEGORY_KIT_AWAY ? (this.description = gLocalization.lText("card.desc.awaykit"), this.assetType = utils.AssetLocator.IMAGE_TYPE_KIT_AWAY) : (this.description = gLocalization.lText("card.desc.thirdkit"), this.assetType = utils.AssetLocator.IMAGE_TYPE_KIT_THIRD), this.assetYear > 0 && (this.description = gLocalization.lText("card.desc.classickit"))
}, transferobjects.StaticBallItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticBallItemData, transferobjects.StaticItemData), transferobjects.StaticBallItemData.prototype.parseDynamicItemData = function(item, data) {
    transferobjects.StaticBallItemData.superClass_.parseDynamicItemData.call(this, item, data), this.assetId = parseInt(data.assetId, 10) || 0, this.name = gLocalization.lText("club.edit.ballLabel"), this.description = data.name || "", this.manufacturer = data.manufacturer || ""
}, NamespaceManager.Register("valueobjects"), transferobjects.StaticStadiumItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticStadiumItemData, transferobjects.StaticItemData), transferobjects.StaticStadiumItemData.prototype.parseDynamicItemData = function(item, data) {
    transferobjects.StaticStadiumItemData.superClass_.parseDynamicItemData.call(this, item, data), this.name = gLocalization.lText("club.edit.stadiumLabel"), this.assetId = parseInt(data.stadiumid, 10) || 0, this.description = gLocalization.lText("global.stadiumFull." + utils.TextUtils.getYearString(item.getYear()) + ".stadium" + this.assetId)
}, transferobjects.StaticTrainingItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticTrainingItemData, transferobjects.StaticItemData), transferobjects.StaticTrainingItemData.prototype.parseDynamicItemData = function(item, data) {
    transferobjects.StaticTrainingItemData.superClass_.parseDynamicItemData.call(this, item, data);
    var t = item.subtype;
    if (item.isGKTraining()) switch (this.name = gLocalization.lText("card.desc.training.goalkeeper"), this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_GKATTRIB, t) {
        case enums.ItemSubType.TRAINING_GK_DIVING:
            this.assetId = 0, this.trainedAttribute = 0;
            break;
        case enums.ItemSubType.TRAINING_GK_HANDLING:
            this.assetId = 1, this.trainedAttribute = 1;
            break;
        case enums.ItemSubType.TRAINING_GK_KICKING:
            this.assetId = 2, this.trainedAttribute = 2;
            break;
        case enums.ItemSubType.TRAINING_GK_SPEED:
            this.assetId = 3, this.trainedAttribute = 3;
            break;
        case enums.ItemSubType.TRAINING_GK_POSITION:
            this.assetId = 4, this.trainedAttribute = 4;
            break;
        case enums.ItemSubType.TRAINING_GK_REFLEX:
            this.assetId = 5, this.trainedAttribute = 5;
            break;
        case enums.ItemSubType.TRAINING_GK_ALL:
            this.assetId = 6, this.trainedAttribute = 6
    } else if (item.isPlayerTraining()) switch (this.name = gLocalization.lText("card.desc.contract.player"), this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_PLAYERATTRIB, t) {
        case enums.ItemSubType.TRAINING_PLAYER_PACE:
            this.assetId = 0, this.trainedAttribute = 0;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_SHOOTING:
            this.assetId = 1, this.trainedAttribute = 1;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_PASSING:
            this.assetId = 2, this.trainedAttribute = 2;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_DRIBBLING:
            this.assetId = 3, this.trainedAttribute = 3;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_HEADING:
            this.assetId = 4, this.trainedAttribute = 4;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_DEFEND:
            this.assetId = 5, this.trainedAttribute = 5;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_ALL:
            this.assetId = 6, this.trainedAttribute = 6
    } else if (item.isPlayerPositionModifier()) switch (this.name = gLocalization.lText("card.title.position"), this.assetId = utils.AssetLocator.ASSET_ID_PLAYER, this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_POSITION, t) {
        case enums.ItemSubType.TRAINING_PLAYER_POS_LWB_LB:
            this.trainPosFrom = enums.PlayerPositions.LWB, this.trainPosTo = enums.PlayerPositions.LB;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LB_LWB:
            this.trainPosFrom = enums.PlayerPositions.LB, this.trainPosTo = enums.PlayerPositions.LWB;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RWB_RB:
            this.trainPosFrom = enums.PlayerPositions.RWB, this.trainPosTo = enums.PlayerPositions.RB;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RB_RWB:
            this.trainPosFrom = enums.PlayerPositions.RB, this.trainPosTo = enums.PlayerPositions.RWB;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LM_LW:
            this.trainPosFrom = enums.PlayerPositions.LM, this.trainPosTo = enums.PlayerPositions.LW;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RM_RW:
            this.trainPosFrom = enums.PlayerPositions.RM, this.trainPosTo = enums.PlayerPositions.RW;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LW_LM:
            this.trainPosFrom = enums.PlayerPositions.LW, this.trainPosTo = enums.PlayerPositions.LM;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RW_RM:
            this.trainPosFrom = enums.PlayerPositions.RW, this.trainPosTo = enums.PlayerPositions.RM;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LW_LF:
            this.trainPosFrom = enums.PlayerPositions.LW, this.trainPosTo = enums.PlayerPositions.LF;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RW_RF:
            this.trainPosFrom = enums.PlayerPositions.RW, this.trainPosTo = enums.PlayerPositions.RF;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_LF_LW:
            this.trainPosFrom = enums.PlayerPositions.LF, this.trainPosTo = enums.PlayerPositions.LW;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_RF_RW:
            this.trainPosFrom = enums.PlayerPositions.RF, this.trainPosTo = enums.PlayerPositions.RW;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CM_CAM:
            this.trainPosFrom = enums.PlayerPositions.CM, this.trainPosTo = enums.PlayerPositions.CAM;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CAM_CM:
            this.trainPosFrom = enums.PlayerPositions.CAM, this.trainPosTo = enums.PlayerPositions.CM;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CDM_CM:
            this.trainPosFrom = enums.PlayerPositions.CDM, this.trainPosTo = enums.PlayerPositions.CM;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CM_CDM:
            this.trainPosFrom = enums.PlayerPositions.CM, this.trainPosTo = enums.PlayerPositions.CDM;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CAM_CF:
            this.trainPosFrom = enums.PlayerPositions.CAM, this.trainPosTo = enums.PlayerPositions.CF;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CF_CAM:
            this.trainPosFrom = enums.PlayerPositions.CF, this.trainPosTo = enums.PlayerPositions.CAM;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_CF_ST:
            this.trainPosFrom = enums.PlayerPositions.CF, this.trainPosTo = enums.PlayerPositions.ST;
            break;
        case enums.ItemSubType.TRAINING_PLAYER_POS_ST_CF:
            this.trainPosFrom = enums.PlayerPositions.ST, this.trainPosTo = enums.PlayerPositions.CF
    } else item.isManagerLeagueModifier() ? (this.name = gLocalization.lText("card.title.leaguechange"), this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_LEAGUEMOD, item.leagueId = this.amount) : item.isStyleModifier() ? (this.name = gLocalization.lText("card.title.playstyle"), this.assetType = utils.AssetLocator.IMAGE_TYPE_TRAINING_POSITION) : utils.Debug.Assert(!1, "Unknown item subtype: " + t)
}, transferobjects.StaticHealingItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticHealingItemData, transferobjects.StaticItemData), transferobjects.StaticHealingItemData.prototype.parseDynamicItemData = function(item, data) {
    if (transferobjects.StaticHealingItemData.superClass_.parseDynamicItemData.call(this, item, data), item.isPlayerFitness()) this.name = gLocalization.lText("card.desc.contract.player"), this.assetType = utils.AssetLocator.IMAGE_TYPE_HEALING_FITNESS, this.assetId = utils.AssetLocator.ASSET_ID_PLAYER;
    else if (item.isTeamFitness()) this.name = gLocalization.lText("card.desc.healing.squad"), this.assetType = utils.AssetLocator.IMAGE_TYPE_HEALING_FITNESS, this.assetId = utils.AssetLocator.ASSET_ID_TEAM;
    else if (item.isInjuryHealing()) switch (this.name = gLocalization.lText("card.desc.contract.player"), this.assetType = utils.AssetLocator.IMAGE_TYPE_HEALING_INJURY, item.subtype) {
        case enums.ItemSubType.HEALING_HEAD:
            this.assetId = 0;
            break;
        case enums.ItemSubType.HEALING_SHOULDER:
            this.assetId = 1;
            break;
        case enums.ItemSubType.HEALING_ARM:
            this.assetId = 2;
            break;
        case enums.ItemSubType.HEALING_BACK:
            this.assetId = 3;
            break;
        case enums.ItemSubType.HEALING_HIP:
            this.assetId = 4;
            break;
        case enums.ItemSubType.HEALING_LEG:
            this.assetId = 5;
            break;
        case enums.ItemSubType.HEALING_FOOT:
            this.assetId = 6;
            break;
        case enums.ItemSubType.HEALING_ALL:
            this.assetId = 7
    } else utils.Debug.Assert(!1, "Unknown item subtype: " + item.subtype)
}, transferobjects.StaticContractItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticContractItemData, transferobjects.StaticItemData), transferobjects.StaticContractItemData.prototype.parseDynamicItemData = function(item, data) {
    transferobjects.StaticContractItemData.superClass_.parseDynamicItemData.call(this, item, data), this.assetType = utils.AssetLocator.IMAGE_TYPE_CONTRACT;
    var t = item.isManagerContract();
    this.assetId = t ? 1 : 0, this.name = gLocalization.lText(t ? "card.desc.contract.manager" : "card.desc.contract.player"), data.bronze && (this.bronzeBoost = parseInt(data.bronze, 10)), data.silver && (this.silverBoost = parseInt(data.silver, 10)), data.gold && (this.goldBoost = parseInt(data.gold, 10))
}, transferobjects.StaticMiscItemData = function() {
    transferobjects.StaticItemData.apply(this)
}, utils.JS.inherits(transferobjects.StaticMiscItemData, transferobjects.StaticItemData), transferobjects.StaticMiscItemData.prototype.parseDynamicItemData = function(item, data) {
    switch (transferobjects.StaticMiscItemData.superClass_.parseDynamicItemData.call(this, item, data), this.name = gLocalization.lText("card.title.unlock"), this.description = data.description || "", item.subtype) {
        case enums.ItemSubType.FREE_COINS:
            this.assetType = utils.AssetLocator.IMAGE_TYPE_BOOST_COIN, this.assetId = utils.AssetLocator.ASSET_ID_DEFAULT;
            break;
        case enums.ItemSubType.DRAFT_TOKEN:
            this.assetType = utils.AssetLocator.IMAGE_TYPE_DRAFTTOKEN, this.assetId = utils.AssetLocator.ASSET_ID_DEFAULT;
            break;
        case enums.ItemSubType.FREE_PACK:
            this.assetType = utils.AssetLocator.IMAGE_TYPE_BOOST_PACK, item.isBronzeRating() ? this.assetId = utils.AssetLocator.ASSET_ID_BRONZE_PACK : item.isSilverRating() ? this.assetId = utils.AssetLocator.ASSET_ID_SILVER_PACK : this.assetId = utils.AssetLocator.ASSET_ID_GOLD_PACK
    }
}, NamespaceManager.Register("entities"), entities.Item = function FUTItem(t) {
    var id = new valueobjects.AlphanumericVO;
    Object.defineProperty(this, "id", {
        get: id.get.bind(id),
        set: id.set.bind(id)
    });
    var i = new valueobjects.AlphanumericVO;
    Object.defineProperty(this, "duplicateId", {
        get: i.get.bind(i),
        set: i.set.bind(i)
    });
    var s = new valueobjects.NumberVO;
    Object.defineProperty(this, "resourceId", {
        get: s.get.bind(s),
        set: s.set.bind(s)
    });
    var o = new valueobjects.NumberVO;
    Object.defineProperty(this, "iconId", {
        get: o.get.bind(o),
        set: o.set.bind(o)
    });
    var l = new valueobjects.NumberVO;
    Object.defineProperty(this, "resourceGameYear", {
        get: l.get.bind(l),
        set: l.set.bind(l)
    });
    var type = new valueobjects.ItemTypeVO;
    Object.defineProperty(this, "type", {
        get: type.get.bind(type),
        set: type.set.bind(type)
    });
    var u = new valueobjects.NumberVO;
    Object.defineProperty(this, "subtype", {
        get: u.get.bind(u),
        set: u.set.bind(u)
    });
    var h = new valueobjects.NumberVO;
    Object.defineProperty(this, "lastSalePrice", {
        get: h.get.bind(h),
        set: h.set.bind(h)
    });
    var p = new valueobjects.NumberVO;
    Object.defineProperty(this, "discardValue", {
        get: p.get.bind(p),
        set: p.set.bind(p)
    });
    var m = new valueobjects.BooleanVO;
    Object.defineProperty(this, "untradeable", {
        get: m.get.bind(m),
        set: m.set.bind(m)
    });
    var _ = new valueobjects.NumberVO;
    Object.defineProperty(this, "untradeableCount", {
        get: _.get.bind(_),
        set: _.set.bind(_)
    });
    var g = new valueobjects.BooleanVO;
    Object.defineProperty(this, "concept", {
        get: g.get.bind(g),
        set: g.set.bind(g)
    });
    var S = new valueobjects.NumberVO;
    Object.defineProperty(this, "contract", {
        get: S.get.bind(S),
        set: S.set.bind(S)
    });
    var v = new valueobjects.NumberVO;
    Object.defineProperty(this, "teamId", {
        get: v.get.bind(v),
        set: v.set.bind(v)
    });
    var T = new valueobjects.NumberVO;
    Object.defineProperty(this, "leagueId", {
        get: T.get.bind(T),
        set: T.set.bind(T)
    });
    var C = new valueobjects.NumberVO;
    Object.defineProperty(this, "nationId", {
        get: C.get.bind(C),
        set: C.set.bind(C)
    });
    var I = new valueobjects.NumberVO;
    Object.defineProperty(this, "loans", {
        get: I.get.bind(I),
        set: I.set.bind(I)
    });
    var L = new valueobjects.NumberVO;
    Object.defineProperty(this, "fitness", {
        get: L.get.bind(L),
        set: L.set.bind(L)
    });
    var A = new valueobjects.NumberVO;
    Object.defineProperty(this, "injuryGames", {
        get: A.get.bind(A),
        set: A.set.bind(A)
    });
    var R = new valueobjects.NumberVO;
    Object.defineProperty(this, "preferredPosition", {
        get: R.get.bind(R),
        set: R.set.bind(R)
    });
    var D = new valueobjects.NumberVO;
    Object.defineProperty(this, "training", {
        get: D.get.bind(D),
        set: D.set.bind(D)
    });
    var state = new valueobjects.ItemStateVO;
    Object.defineProperty(this, "state", {
        get: state.get.bind(state),
        set: state.set.bind(state)
    });
    var P = new valueobjects.NumberVO;
    Object.defineProperty(this, "suspensionGames", {
        get: P.get.bind(P),
        set: P.set.bind(P)
    });
    var N = new valueobjects.NumberVO;
    Object.defineProperty(this, "duplicateItemLoans", {
        get: N.get.bind(N),
        set: N.set.bind(N)
    });
    var O = new valueobjects.NumberVO;
    Object.defineProperty(this, "playStyle", {
        get: O.get.bind(O),
        set: O.set.bind(O)
    });
    var B = new valueobjects.NumberVO;
    Object.defineProperty(this, "loyaltyBonus", {
        get: B.get.bind(B),
        set: B.set.bind(B)
    });
    var U = new valueobjects.ItemPileVO;
    Object.defineProperty(this, "pile", {
        get: U.get.bind(U),
        set: U.set.bind(U)
    });
    var M = new valueobjects.NumberVO;
    Object.defineProperty(this, "stackCount", {
        get: M.get.bind(M),
        set: M.set.bind(M)
    });
    var F = new valueobjects.ItemRareTypeVO;
    Object.defineProperty(this, "rareflag", {
        get: F.get.bind(F),
        set: F.set.bind(F)
    });
    var q = new valueobjects.RatingVO;
    Object.defineProperty(this, "rating", {
        get: q.get.bind(q),
        set: q.set.bind(q)
    }), this.onDataUpdated = new FUTObservable, Object.defineProperty(this, "onDataUpdated", {
        writable: !1,
        enumerable: !0
    }), this.id = 0, this.resourceId = 0, this.iconId = 0, this.resourceGameYear = 0, this.type = utils.JS.isValid(t) ? t : enums.ItemType.PLAYER, this.subtype = 0, this.lastSalePrice = 0, this.discardValue = 0, this.state = enums.ItemState.FREE, this.untradeable = !0, this.untradeableCount = 0, this.concept = !1, this.contract = -1, this.teamId = -1, this.leagueId = -1, this.nationId = -1, this.loans = -1, this.fitness = -1, this.injuryType = enums.PlayerInjury.NONE, this.injuryGames = 0, this.preferredPosition = -1, this._attributes = [0, 0, 0, 0, 0, 0], this._lifetimeStats = [0, 0, 0, 0], this._stats = [0, 0, 0, 0], this.training = 0, this.suspensionGames = 0, this._auction = new entities.Auction, this.duplicateId = 0, this.duplicateItemLoans = -1, this.playStyle = 0, this.loyaltyBonus = 0, this.pile = enums.FUTItemPile.ANY, this.stackCount = 0, this.rareflag = enums.ItemRareType.NONE, this.rating = 0, this.owners = 0, this.timestamp = 0, this._itemPriceLimits = null, this._staticData = this._generateStaticData(), this._trainingItem = null, this._metaData = null
}, entities.Item.prototype.activate = function activate(t) {
    var i, s = new FUTObservable,
        o = {
            success: !1,
            error: null
        };
    return this.isClubItem() ? (this.isKit() ? (utils.Debug.Assert(utils.JS.isNumber(t), "Missing kit activation slot."), i = new communication.ActivateClubItemDelegate(this.id, t)) : i = new communication.ActivateClubItemDelegate(this.id), i.addListener(communication.BaseDelegate.SUCCESS, this, function _onActivateSuccess(sender) {
        if (sender.clearListenersByScope(this), this.clearAuction(), this.isBadge()) this.state = enums.ItemState.ACTIVE_BADGE;
        else if (this.isBall()) this.state = enums.ItemState.ACTIVE_BALL;
        else if (this.isKit()) switch (t) {
            case enums.KitActivationSlot.HOME:
                this.state = enums.ItemState.ACTIVE_HOME_KIT;
                break;
            case enums.KitActivationSlot.AWAY:
                this.state = enums.ItemState.ACTIVE_AWAY_KIT
        } else this.isStadium() && (this.state = enums.ItemState.ACTIVE_STADIUM);
        o.success = !0, s.notify(o)
    }), i.addListener(communication.BaseDelegate.FAIL, this, function _onActivateFail(sender, error) {
        sender.clearListenersByScope(this), o.error = error, s.notify(o)
    }), i.useClickShield(!0), i.send(), s) : (utils.Debug.Assert(!1, "Cannot activate non-club items."), s.notify(o), s)
}, entities.Item.prototype.bid = function bid(t) {
    var i = new FUTObservable;
    return this.getAuctionData().bid(t).observe(this, function _bidComplete(t, data) {
        t.unobserve(this), data.itemData && (this.id = data.itemData.id, this.lastSalePrice = data.itemData.lastSalePrice, this.pile = data.itemData.pile), data.duplicates && data.duplicates.has(this.id) && (this.duplicateId = data.duplicates.get(this.id));
        var s = {
            success: data.success,
            currencies: data.currencies,
            error: data.error,
            dynamicObjectivesUpdates: data.dynamicObjectivesUpdates
        };
        i.notify(s)
    }), i
}, entities.Item.prototype.loadStaticData = function loadStaticData() {
    var event = new FUTObservable,
        t = {
            success: !1
        };
    if (this.isValid() && this.isPlayer() && 0 !== this.getMaskedResourceId() && this.getYear() < enums.Year.ASSET) {
        var i = new communication.StaticDataLoaderDelegate(this);
        i.addListener(communication.BaseDelegate.SUCCESS, this, function _onStaticDataLoadSuccess(sender, i) {
            sender.clearListenersByScope(this);
            var data = i.Item || i.Player;
            this.getStaticData().generateNameData(data.FirstName, data.LastName, data.CommonName), data.NationId && (this.nationId = parseInt(data.NationId, 10)), data.LeagueId && (this.leagueId = parseInt(data.LeagueId, 10)), data.ClubId && (this.teamId = parseInt(data.ClubId, 10)), t.success = !0, event.notify(t)
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onStaticDataLoadFail(sender, error) {
            sender.clearListenersByScope(this), event.notify(t)
        }), i.useClickShield(!0), i.send()
    } else t.success = !0, event.notify(t);
    return event
}, entities.Item.prototype.clearAuction = function clearAuction() {
    this._auction = new entities.Auction
}, entities.Item.prototype._generateStaticData = function _generateStaticData() {
    var t;
    switch (this.type) {
        case enums.ItemType.PLAYER:
            t = new transferobjects.StaticPlayerItemData;
            break;
        case enums.ItemType.MANAGER:
            t = new transferobjects.StaticManagerItemData;
            break;
        case enums.ItemType.HEAD_COACH:
        case enums.ItemType.GK_COACH:
        case enums.ItemType.FITNESS_COACH:
        case enums.ItemType.PHYSIO:
            t = new transferobjects.StaticStaffItemData;
            break;
        case enums.ItemType.BADGE:
            t = new transferobjects.StaticBadgeItemData;
            break;
        case enums.ItemType.KIT:
            t = new transferobjects.StaticKitItemData;
            break;
        case enums.ItemType.BALL:
            t = new transferobjects.StaticBallItemData;
            break;
        case enums.ItemType.STADIUM:
            t = new transferobjects.StaticStadiumItemData;
            break;
        case enums.ItemType.TRAINING:
            t = new transferobjects.StaticTrainingItemData;
            break;
        case enums.ItemType.HEALTH:
            t = new transferobjects.StaticHealingItemData;
            break;
        case enums.ItemType.CONTRACT:
            t = new transferobjects.StaticContractItemData;
            break;
        case enums.ItemType.MISC:
            t = new transferobjects.StaticMiscItemData;
            break;
        default:
            this.type, t = new transferobjects.StaticItemData
    }
    return t
}, entities.Item.prototype.update = function update(item) {
    this.lastSalePrice = item.lastSalePrice, this.state = item.state, this.pile = item.pile, this.duplicateId = item.duplicateId, this.stackCount = item.stackCount, this.untradeableCount = item.untradeableCount, 0 !== item.id && (this.id = item.id), (this.isPlayer() || this.isManager()) && (this.contract = item.contract, this.loans = item.loans), this.isPlayer() && (this.loyaltyBonus = item.loyaltyBonus, this.fitness = item.fitness, this.injuryType = item.injuryType, this.injuryGames = item.injuryGames, this.preferredPosition = item.preferredPosition, this.suspensionGames = item.suspensionGames, this.training = item.training, this.playStyle = item.playStyle), this.getAuctionData().update(item.getAuctionData())
}, entities.Item.prototype.isValid = function isValid() {
    return (0 !== this.id || 0 !== this.resourceId) && this.stackCount > 0
}, entities.Item.prototype.isStack = function isStack() {
    return this.stackCount > 1
}, entities.Item.prototype.isCustomBrick = function isCustomBrick() {
    return !1
}, entities.Item.prototype.getMaskedResourceId = function getMaskedResourceId() {
    return this.resourceId & enums.ItemMask.DATABASE
}, entities.Item.prototype.getDefId = function getDefId() {
    return gSettingsModel.isLegacyYearIdEnabled() ? this.resourceId & (enums.ItemMask.DATABASE | enums.ItemMask.REVISION) : this.resourceId & (enums.ItemMask.DATABASE | enums.ItemMask.FULL_REVISION)
}, entities.Item.prototype.getItemData = function getItemData() {
    return this
}, entities.Item.prototype.getTier = function getTier() {
    return this.isValid() ? this.isBronzeRating() ? enums.ItemRatingTier.BRONZE : this.isSilverRating() ? enums.ItemRatingTier.SILVER : enums.ItemRatingTier.GOLD : enums.ItemRatingTier.NONE
}, entities.Item.prototype.getBoostLevel = function getBoostLevel() {
    return this.hasTraining() ? this._trainingItem.getTier() : enums.ItemRatingTier.NONE
}, entities.Item.prototype.getYear = function getYear() {
    return utils.TextUtils.getYearEnum(this.resourceGameYear)
}, entities.Item.prototype.getSearchType = function getSearchType() {
    switch (this.type) {
        case enums.ItemType.PLAYER:
            return enums.SearchType.PLAYER;
        case enums.ItemType.MANAGER:
        case enums.ItemType.HEAD_COACH:
        case enums.ItemType.FITNESS_COACH:
        case enums.ItemType.GK_COACH:
        case enums.ItemType.PHYSIO:
            return enums.SearchType.STAFF;
        case enums.ItemType.BADGE:
        case enums.ItemType.KIT:
            return enums.SearchType.CLUB_INFO;
        case enums.ItemType.STADIUM:
            return enums.SearchType.STADIUM;
        case enums.ItemType.BALL:
            return enums.SearchType.BALL;
        case enums.ItemType.CONTRACT:
        case enums.ItemType.HEALTH:
            return enums.SearchType.CONSUMABLES_DEVELOPMENT;
        case enums.ItemType.TRAINING:
            return enums.SearchType.CONSUMABLES_TRAINING;
        default:
            return utils.Debug.Assert(!1, "[entities.Item::getSearchType] Unexpected item type. Defaulting to search type 'Any'."), enums.SearchType.ANY
    }
}, entities.Item.prototype.isInjured = function isInjured() {
    return this.isPlayer() && this.injuryGames > 0
}, entities.Item.prototype.hasTraining = function hasTraining() {
    return 0 !== this.training && utils.JS.isValid(this._trainingItem)
}, entities.Item.prototype.getAppliedTrainingItem = function getAppliedTrainingItem() {
    return this._trainingItem
}, entities.Item.prototype.isSuspended = function isSuspended() {
    return this.isPlayer() && this.suspensionGames > 0
}, entities.Item.prototype.getStaticData = function getStaticData() {
    return this._staticData
}, entities.Item.prototype.setStaticData = function setStaticData(data) {
    this._staticData = data
}, entities.Item.prototype.setTrainingItem = function setTrainingItem(item) {
    utils.Debug.Assert(item.isTraining(), "Expected a training consumable item."), item.isTraining() && (this.training = item.id, this._trainingItem = item)
}, entities.Item.prototype.getAuctionData = function getAuctionData() {
    return this._auction
}, entities.Item.prototype.setAuctionData = function setAuctionData(value) {
    this._auction = value
}, entities.Item.prototype.getMetaData = function getMetaData() {
    return this._metaData
}, entities.Item.prototype.setMetaData = function setMetaData(data) {
    var t = data instanceof transferobjects.PlayerMetaData;
    utils.Debug.Assert(t, "Expected a PlayerMetaData DTO"), utils.Debug.Assert(this.isPlayer(), "Cannot assign player meta data to non-player items"), t && this.isPlayer() && (this._metaData = data)
}, entities.Item.prototype.isDiscardable = function isDiscardable() {
    return this.isValid() && this.subtype !== enums.ItemSubType.FREE_PACK && this.subtype !== enums.ItemSubType.FREE_COINS && this.subtype !== enums.ItemSubType.DRAFT_TOKEN
}, entities.Item.prototype.isMovable = function isMovable() {
    var t = !this.isDuplicate() && !this.isDuplicateLoanPlayer();
    return t = t && this.type !== enums.ItemType.MISC
}, entities.Item.prototype.isDuplicate = function isDuplicate() {
    return !this.isConsumable() && this.duplicateId > 0
}, entities.Item.prototype.isLoaned = function isLoaned() {
    return this.loans >= 0
}, entities.Item.prototype.isPlayer = function isPlayer() {
    return this.type === enums.ItemType.PLAYER
}, entities.Item.prototype.isManager = function isManager() {
    return this.type === enums.ItemType.MANAGER
}, entities.Item.prototype.isHeadCoach = function isHeadCoach() {
    return this.type === enums.ItemType.HEAD_COACH
}, entities.Item.prototype.isFitnessCoach = function isFitnessCoach() {
    return this.type === enums.ItemType.FITNESS_COACH
}, entities.Item.prototype.isGKCoach = function isGKCoach() {
    return this.type === enums.ItemType.GK_COACH
}, entities.Item.prototype.isPhysio = function isPhysio() {
    return this.type === enums.ItemType.PHYSIO
}, entities.Item.prototype.isCoach = function isCoach() {
    return this.isHeadCoach() || this.isFitnessCoach() || this.isGKCoach() || this.isPhysio()
}, entities.Item.prototype.isStaff = function isStaff() {
    return this.isManager() || this.isCoach()
}, entities.Item.prototype.isPlayerBanned = function isPlayerBanned() {
    return this.isValid() && this.isPlayer() && (this.isSuspended() || this.contract <= 0)
}, entities.Item.prototype.isContractExpired = function isContractExpired() {
    return (this.isPlayer() || this.isManager()) && this.contract <= 0
}, entities.Item.prototype.isDuplicateLoanPlayer = function isDuplicateLoanPlayer() {
    return this.isValid() && this.isPlayer() && this.isDuplicate() && this.isLoaned()
}, entities.Item.prototype.getAttribute = function getAttribute(index, t) {
    var i = this._attributes[index] || 0;
    return this.hasTraining() && !t && (i = this._modifyAttribute(index, parseInt(i, 10))), i
}, entities.Item.prototype.getAttributes = function getAttributes() {
    var attributes = this.isPlayer() ? this._attributes : [];
    return this.hasTraining() && (attributes = attributes.map(function(t, i) {
        return this._modifyAttribute(i, parseInt(t, 10))
    }, this)), attributes
}, entities.Item.prototype.getStats = function getStats() {
    return this.isPlayer() ? this._stats : []
}, entities.Item.prototype.getYellowCards = function getYellowCards() {
    return this.isPlayer() ? this._stats[2] : 0
}, entities.Item.prototype.getRedCards = function getRedCards() {
    return this.isPlayer() ? this._stats[3] : 0
}, entities.Item.prototype.getLifetimeStats = function getLifetimeStats() {
    return this.isPlayer() ? this._lifetimeStats : []
}, entities.Item.prototype.getGamesPlayed = function getGamesPlayed() {
    return this.isPlayer() ? this._lifetimeStats[0] : 0
}, entities.Item.prototype.getGoals = function getGoals() {
    return this.isPlayer() ? this._lifetimeStats[1] : 0
}, entities.Item.prototype.getTotalYellowCards = function getTotalYellowCards() {
    return this.isPlayer() ? this._lifetimeStats[2] : 0
}, entities.Item.prototype.getTotalRedCards = function getTotalRedCards() {
    return this.isPlayer() ? this._lifetimeStats[3] : 0
}, entities.Item.prototype.isAttributeBoosted = function isAttributeBoosted(index) {
    return this.hasTraining() && (this._trainingItem.isAllAttributeTraining() || this._trainingItem.getStaticData().trainedAttribute === index)
}, entities.Item.prototype._modifyAttribute = function _modifyAttribute(index, value) {
    if (this.isAttributeBoosted(index)) {
        var t = this._trainingItem.getStaticData(),
            i = t.amount;
        return this._trainingItem.isPlayerTraining() ? i += Math.floor(gStaffStatsModel.getPlayerAttribBoost(index) * t.amount) : this._trainingItem.isGKTraining() && (i += Math.floor(gStaffStatsModel.getGKAttribBoost(index) * t.amount)), Math.min(value + i, 99)
    }
    return value
}, entities.Item.prototype.isGK = function isGK() {
    return 0 === this.preferredPosition
}, entities.Item.prototype.isContract = function isContract() {
    return this.type === enums.ItemType.CONTRACT
}, entities.Item.prototype.isPlayerContract = function isPlayerContract() {
    return this.isContract() && this.subtype === enums.ItemSubType.CONTRACT_PLAYER
}, entities.Item.prototype.isManagerContract = function isManagerContract() {
    return this.isContract() && this.subtype === enums.ItemSubType.CONTRACT_MANAGER
}, entities.Item.prototype.isTraining = function isTraining() {
    return this.type === enums.ItemType.TRAINING
}, entities.Item.prototype.isGKTraining = function isGKTraining() {
    return this.isTraining() && this.subtype >= enums.ItemSubType.TRAINING_GK_DIVING && this.subtype <= enums.ItemSubType.TRAINING_GK_ALL
}, entities.Item.prototype.isPlayerTraining = function isPlayerTraining() {
    return this.isTraining() && this.subtype >= enums.ItemSubType.TRAINING_PLAYER_PACE && this.subtype <= enums.ItemSubType.TRAINING_PLAYER_ALL
}, entities.Item.prototype.isAllAttributeTraining = function isAllAttributeTraining() {
    return this.isTraining() && (this.subtype === enums.ItemSubType.TRAINING_GK_ALL || this.subtype === enums.ItemSubType.TRAINING_PLAYER_ALL)
}, entities.Item.prototype.isPlayerPositionModifier = function isPlayerPositionModifier() {
    return this.isTraining() && this.subtype >= enums.ItemSubType.TRAINING_PLAYER_POS_LWB_LB && this.subtype <= enums.ItemSubType.TRAINING_PLAYER_POS_ST_CF
}, entities.Item.prototype.isStyleModifier = function isStyleModifier() {
    return this.isTraining() && this.subtype >= enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_1 && this.subtype <= enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_5
}, entities.Item.prototype.isPlayerStyleModifier = function isPlayerStyleModifier() {
    return this.isTraining() && this.subtype >= enums.ItemSubType.TRAINING_PLAYERSTYLE_GENERAL_1 && this.subtype < enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_1
}, entities.Item.prototype.isGKStyleModifier = function isGKStyleModifier() {
    return this.isTraining() && this.subtype >= enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_1 && this.subtype <= enums.ItemSubType.TRAINING_PLAYERSTYLE_GOALKEEPER_5
}, entities.Item.prototype.isManagerLeagueModifier = function isManagerLeagueModifier() {
    return this.isTraining() && this.subtype >= enums.ItemSubType.MANAGERLEAGUE_DENMARK && this.subtype <= enums.ItemSubType.MANAGERLEAGUE_ARGENTINA
}, entities.Item.prototype.isManagerConsumable = function isManagerConsumable() {
    return this.isManagerLeagueModifier() || this.isManagerContract()
}, entities.Item.prototype.isHealth = function isHealth() {
    return this.type === enums.ItemType.HEALTH
}, entities.Item.prototype.isInjuryHealing = function isInjuryHealing() {
    return this.isHealth() && this.subtype >= enums.ItemSubType.HEALING_HEAD && this.subtype <= enums.ItemSubType.HEALING_ALL
}, entities.Item.prototype.isFitness = function isFitness() {
    return this.isHealth() && (this.subtype === enums.ItemSubType.FITNESS_PLAYER || this.subtype === enums.ItemSubType.FITNESS_TEAM)
}, entities.Item.prototype.isPlayerFitness = function isPlayerFitness() {
    return this.isHealth() && this.subtype === enums.ItemSubType.FITNESS_PLAYER
}, entities.Item.prototype.isTeamFitness = function isTeamFitness() {
    return this.isHealth() && this.subtype === enums.ItemSubType.FITNESS_TEAM
}, entities.Item.prototype.isConsumable = function isConsumable() {
    return this.isContract() || this.isTraining() || this.isHealth()
}, entities.Item.prototype.isClubConsumable = function isClubConsumable() {
    return this.isConsumable() && this.pile === enums.FUTItemPile.CLUB
}, entities.Item.prototype.isBadge = function isBadge() {
    return this.type === enums.ItemType.BADGE
}, entities.Item.prototype.isBall = function isBall() {
    return this.type === enums.ItemType.BALL
}, entities.Item.prototype.isKit = function isKit() {
    return this.type === enums.ItemType.KIT
}, entities.Item.prototype.isStadium = function isStadium() {
    return this.type === enums.ItemType.STADIUM
}, entities.Item.prototype.isClubItem = function isClubItem() {
    return this.isBadge() || this.isBall() || this.isKit() || this.isStadium()
}, entities.Item.prototype.isActiveBall = function isActiveBall() {
    return this.isBall() && this.state === enums.ItemState.ACTIVE_BALL
}, entities.Item.prototype.isActiveBadge = function isActiveBadge() {
    return this.isBadge() && this.state === enums.ItemState.ACTIVE_BADGE
}, entities.Item.prototype.isActiveAwayKit = function isActiveAwayKit() {
    return this.isKit() && this.state === enums.ItemState.ACTIVE_AWAY_KIT
}, entities.Item.prototype.isActiveHomeKit = function isActiveHomeKit() {
    return this.isKit() && this.state === enums.ItemState.ACTIVE_HOME_KIT
}, entities.Item.prototype.isActiveStadium = function isActiveStadium() {
    return this.isStadium() && this.state === enums.ItemState.ACTIVE_STADIUM
}, entities.Item.prototype.isActiveClubItem = function isActiveClubItem() {
    return this.isActiveBall() || this.isActiveBadge() || this.isActiveAwayKit() || this.isActiveHomeKit() || this.isActiveStadium()
}, entities.Item.prototype.isMiscItem = function isMiscItem() {
    return this.type === enums.ItemType.MISC
}, entities.Item.prototype.isFreeCoins = function isFreeCoins() {
    return this.isMiscItem() && this.subtype === enums.ItemSubType.FREE_COINS
}, entities.Item.prototype.isFreePack = function isFreePack() {
    return this.isMiscItem() && this.subtype === enums.ItemSubType.FREE_PACK
}, entities.Item.prototype.isDraftToken = function isDraftToken() {
    return this.isMiscItem() && this.subtype === enums.ItemSubType.DRAFT_TOKEN
}, entities.Item.prototype.isCharityItem = function isCharityItem() {
    return this.getMaskedResourceId() === entities.Item.DANNY_MILLER_CHARITY_ID || this.getMaskedResourceId() === entities.Item.KENTON_CHARITY_ID
}, entities.Item.prototype.isCommon = function isCommon() {
    return this.rareflag === enums.ItemRareType.NONE
}, entities.Item.prototype.isRare = function isRare() {
    return this.rareflag === enums.ItemRareType.RARE
}, entities.Item.prototype.isSpecial = function isSpecial() {
    return !this.isCommon() && !this.isRare()
}, entities.Item.prototype.isLegend = function isLegend() {
    return this.rareflag === enums.ItemRareType.LEGEND
}, entities.Item.prototype.isTeamOfTheWeek = function isTeamOfTheWeek() {
    return this.rareflag === enums.ItemRareType.TOTW
}, entities.Item.prototype.isTeamOfTheYear = function isTeamOfTheYear() {
    return this.rareflag === enums.ItemRareType.TOTY
}, entities.Item.prototype.isTeamOfTheSeason = function isTeamOfTheSeason() {
    return this.rareflag === enums.ItemRareType.TOTS
}, entities.Item.prototype.isStoryMode = function isStoryMode() {
    return this.rareflag === enums.ItemRareType.STORYMODE
}, entities.Item.isAlex = function isAlex(id) {
    return id >= ALEX_HUNTER_MIN_ID && id <= ALEX_HUNTER_MAX_ID
}, entities.Item.isDanny = function isDanny(id) {
    return id >= DANNY_WILLIAMS_MIN_ID && id <= DANNY_WILLIAMS_MAX_ID
}, entities.Item.prototype.isChampion = function isChampion() {
    return this.rareflag === enums.ItemRareType.CHAMPION
}, entities.Item.prototype.isRatingsRefreshCommon = function isRatingsRefreshCommon() {
    return this.rareflag === enums.ItemRareType.RRC
}, entities.Item.prototype.isRatingsRefreshRare = function isRatingsRefreshRare() {
    return this.rareflag === enums.ItemRareType.RRR
}, entities.Item.prototype.hasQualityTiers = function hasQualityTiers() {
    return this.isCommon() || this.isRare() || this.isTeamOfTheWeek() || this.isTeamOfTheSeason() || this.isChampion() || this.isRatingsRefreshCommon() || this.isRatingsRefreshRare()
}, entities.Item.prototype.isBronzeRating = function isBronzeRating() {
    return this.rating <= 64
}, entities.Item.prototype.isSilverRating = function isSilverRating() {
    return this.rating <= 74 && this.rating > 64
}, entities.Item.prototype.isGoldRating = function isGoldRating() {
    return this.rating > 74
}, entities.Item.prototype.prefersDefensePosition = function prefersDefensePosition() {
    return this.isPlayer() && this.preferredPosition >= enums.PlayerPositionsAsInts.RWB && this.preferredPosition <= enums.PlayerPositionsAsInts.LWB
}, entities.Item.prototype.prefersMidfieldPosition = function prefersMidfieldPosition() {
    return this.isPlayer() && this.preferredPosition >= enums.PlayerPositionsAsInts.RDM && this.preferredPosition <= enums.PlayerPositionsAsInts.LAM
}, entities.Item.prototype.prefersAttackerPosition = function prefersAttackerPosition() {
    return this.isPlayer() && this.preferredPosition >= enums.PlayerPositionsAsInts.RF
}, entities.Item.prototype.getLocalizedItemType = function getLocalizedItemType() {
    var t = "itemtype.default";
    if (this.isCoach()) t = "itemtype.staff";
    else switch (this.type) {
        case enums.ItemType.PLAYER:
            t = "itemtype.player";
            break;
        case enums.ItemType.MANAGER:
            t = "itemtype.manager";
            break;
        case enums.ItemType.HEALTH:
        case enums.ItemType.CONTRACT:
        case enums.ItemType.TRAINING:
            t = "itemtype.consumable";
            break;
        case enums.ItemType.BADGE:
            t = "itemtype.badge";
            break;
        case enums.ItemType.STADIUM:
            t = "itemtype.stadium";
            break;
        case enums.ItemType.KIT:
            t = "itemtype.kit";
            break;
        case enums.ItemType.BALL:
            t = "itemtype.ball"
    }
    return gLocalization.lText(t)
}, entities.Item.prototype.compareTo = function compareTo(item) {
    var t = this.getAuctionData(),
        i = item.getAuctionData();
    return t.isValid() && i.isValid() ? t.compareTo(i) : this.id === item.id
}, entities.Item.prototype.compareResourceTo = function compareResourceTo(item, t) {
    return item instanceof entities.Item ? t ? this.resourceId === item.resourceId : this.isLegend() && item.isLegend() && this.iconId > 0 && item.iconId > 0 ? this.iconId === item.iconId : this.getMaskedResourceId() === item.getMaskedResourceId() : (utils.Debug.Assert(!1, "[entities.Item::compareResourceTo] Parameter expected a valid item entity."), !1)
}, entities.Item.prototype.setItemPriceLimits = function setItemPriceLimits(t) {
    this._itemPriceLimits = t
}, entities.Item.prototype.hasPriceLimits = function hasPriceLimits() {
    return null !== this._itemPriceLimits
}, entities.Item.prototype.getPriceLimits = function getPriceLimits() {
    return this._itemPriceLimits
}, entities.Item.prototype.increaseStackCount = function increaseStackCount() {
    return this.stackCount++, this._updateUntradeableState(), this.stackCount
}, entities.Item.prototype.decreaseStackCount = function decreaseStackCount() {
    return this.stackCount--, this._updateUntradeableState(), this.stackCount
}, entities.Item.prototype._updateUntradeableState = function _updateUntradeableState() {
    this.untradeable = this.untradeableCount > 0 && this.stackCount <= this.untradeableCount
}, entities.Item.prototype.compareDream = function compareDream(item) {
    return item instanceof entities.Item ? this.getMaskedResourceId() === item.getMaskedResourceId() && this.concept !== item.concept : (utils.Debug.Assert(!1, "[entities.Item::compareToDream] Parameter expected a valid item entity."), !1)
}, entities.Item.prototype.compareType = function compareType(item) {
    return item instanceof entities.Item ? this.type === item.type : (utils.Debug.Assert(!1, "[entities.Item::compareType] Parameter expected a valid item entity."), !1)
}, entities.Item.prototype.canApplyTo = function canApplyTo(item) {
    if (!this.isConsumable() || item.isConsumable()) return !1;
    var t = this.getStaticData();
    if (this.isPlayerStyleModifier()) return item.isPlayer() && !item.isGK() && item.playStyle !== this.subtype;
    if (this.isGKStyleModifier()) return item.isGK() && item.playStyle !== this.subtype;
    if (this.isManagerLeagueModifier()) return item.isManager() && item.leagueId !== this.leagueId;
    if (this.isPlayerTraining()) return item.isPlayer() && !item.isGK();
    if (this.isGKTraining()) return item.isPlayer() && item.isGK();
    if (this.isPlayerContract()) return item.isPlayer() && !item.isLoaned() && item.contract < 99;
    if (this.isManagerContract()) return item.isManager() && item.contract < 99;
    if (this.isPlayerPositionModifier()) {
        var position = repositories.Squad.getPosition(item.preferredPosition);
        return !!position && position.getTypeName() === t.trainPosFrom
    }
    return this.isFitness() ? item.isPlayer() && (this.isTeamFitness() || item.fitness < 99) : !!this.isInjuryHealing() && (item.isInjured() && this._canApplyToInjury(item.injuryType))
}, entities.Item.prototype._canApplyToInjury = function _canApplyToInjury(t) {
    if (!this.isInjuryHealing()) return !1;
    switch (this.subtype) {
        case enums.ItemSubType.HEALING_HEAD:
            return t === enums.PlayerInjury.HEAD;
        case enums.ItemSubType.HEALING_SHOULDER:
            return t === enums.PlayerInjury.SHOULDER;
        case enums.ItemSubType.HEALING_ARM:
            return t === enums.PlayerInjury.ARM;
        case enums.ItemSubType.HEALING_BACK:
            return t === enums.PlayerInjury.BACK;
        case enums.ItemSubType.HEALING_HIP:
            return t === enums.PlayerInjury.HIP;
        case enums.ItemSubType.HEALING_LEG:
            return t === enums.PlayerInjury.LEG;
        case enums.ItemSubType.HEALING_FOOT:
            return t === enums.PlayerInjury.FOOT;
        case enums.ItemSubType.HEALING_ALL:
            return !0
    }
    return !1
}, entities.Item.DANNY_MILLER_CHARITY_ID = 227904, entities.Item.KENTON_CHARITY_ID = 235430, entities.CustomBrickItem = function FUTCustomBrickItem() {
    entities.Item.call(this, enums.ItemType.PLAYER)
}, utils.JS.inherits(entities.CustomBrickItem, entities.Item), entities.CustomBrickItem.prototype.activate = function activate(t) {
    var i = new FUTObservable;
    return i.notify({
        success: !1,
        error: null
    }), i
}, entities.CustomBrickItem.prototype.bid = function bid(t) {
    var i = new FUTObservable;
    return i.notify({
        success: !1,
        currencies: [],
        error: null
    }), i
}, entities.CustomBrickItem.prototype.loadStaticData = function loadStaticData() {
    var t = new FUTObservable;
    return t.notify({
        success: !1
    }), t
}, entities.CustomBrickItem.prototype._generateStaticData = function _generateStaticData() {
    return new transferobjects.StaticItemData
}, entities.CustomBrickItem.prototype.update = function update(t) {}, entities.CustomBrickItem.prototype.isValid = function isValid() {
    return !1
}, entities.CustomBrickItem.prototype.isCustomBrick = function isCustomBrick() {
    return !0
}, entities.CustomBrickItem.prototype.isInjured = function isInjured() {
    return !1
}, entities.CustomBrickItem.prototype.hasTraining = function hasTraining() {
    return !1
}, entities.CustomBrickItem.prototype.isSuspended = function isSuspended() {
    return !1
}, entities.CustomBrickItem.prototype.setStaticData = function setStaticData(data) {}, entities.CustomBrickItem.prototype.setAuctionData = function setAuctionData(value) {}, entities.CustomBrickItem.prototype.getAttribute = function getAttribute(index, t) {
    return 0
}, entities.CustomBrickItem.prototype.isAttributeBoosted = function isAttributeBoosted(index) {
    return !1
}, entities.CustomBrickItem.prototype._modifyAttribute = function _modifyAttribute(index, value) {
    return 0
}, entities.CustomBrickItem.prototype.hasQualityTiers = function hasQualityTiers() {
    return !1
}, entities.CustomBrickItem.prototype.getLocalizedItemType = function getLocalizedItemType() {
    return ""
}, entities.CustomBrickItem.prototype.compareTo = function compareTo(item) {
    return !1
}, entities.CustomBrickItem.prototype.compareResourceTo = function compareResourceTo(item, t) {
    return !1
}, entities.CustomBrickItem.prototype.setItemPriceLimits = function setItemPriceLimits(t) {}, entities.CustomBrickItem.prototype.increaseStackCount = function increaseStackCount() {}, entities.CustomBrickItem.prototype.decreaseStackCount = function decreaseStackCount() {}, entities.CustomBrickItem.prototype._updateUntradeableState = function _updateUntradeableState() {}, entities.CustomBrickItem.prototype.compareDream = function compareDream(item) {
    return !1
}, entities.CustomBrickItem.prototype.canApplyTo = function canApplyTo(item) {
    return !1
}, entities.CustomBrickItem.prototype._canApplyToInjury = function _canApplyToInjury(t) {
    return !1
}, entities.NullItem = function FUTNullItem() {
    entities.Item.call(this, enums.ItemType.NONE)
}, utils.JS.inherits(entities.NullItem, entities.Item), entities.NullItem.prototype.activate = function activate(t) {
    var i = new FUTObservable;
    return i.notify({
        success: !1,
        error: null
    }), i
}, entities.NullItem.prototype.bid = function bid(t) {
    var i = new FUTObservable;
    return i.notify({
        success: !1,
        currencies: [],
        error: null
    }), i
}, entities.NullItem.prototype.loadStaticData = function loadStaticData() {
    var t = new FUTObservable;
    return t.notify({
        success: !1
    }), t
}, entities.NullItem.prototype._generateStaticData = function _generateStaticData() {
    return new transferobjects.StaticItemData
}, entities.NullItem.prototype.update = function update(t) {}, entities.NullItem.prototype.isValid = function isValid() {
    return !1
}, entities.NullItem.prototype.isInjured = function isInjured() {
    return !1
}, entities.NullItem.prototype.hasTraining = function hasTraining() {
    return !1
}, entities.NullItem.prototype.isSuspended = function isSuspended() {
    return !1
}, entities.NullItem.prototype.setStaticData = function setStaticData(data) {}, entities.NullItem.prototype.setAuctionData = function setAuctionData(value) {}, entities.NullItem.prototype.getAttribute = function getAttribute(index, t) {
    return 0
}, entities.NullItem.prototype.isAttributeBoosted = function isAttributeBoosted(index) {
    return !1
}, entities.NullItem.prototype._modifyAttribute = function _modifyAttribute(index, value) {
    return 0
}, entities.NullItem.prototype.hasQualityTiers = function hasQualityTiers() {
    return !1
}, entities.NullItem.prototype.getLocalizedItemType = function getLocalizedItemType() {
    return ""
}, entities.NullItem.prototype.compareTo = function compareTo(item) {
    return !1
}, entities.NullItem.prototype.compareResourceTo = function compareResourceTo(item, t) {
    return !1
}, entities.NullItem.prototype.setItemPriceLimits = function setItemPriceLimits(t) {}, entities.NullItem.prototype.increaseStackCount = function increaseStackCount() {}, entities.NullItem.prototype.decreaseStackCount = function decreaseStackCount() {}, entities.NullItem.prototype._updateUntradeableState = function _updateUntradeableState() {}, entities.NullItem.prototype.compareDream = function compareDream(item) {
    return !1
}, entities.NullItem.prototype.canApplyTo = function canApplyTo(item) {
    return !1
}, entities.NullItem.prototype._canApplyToInjury = function _canApplyToInjury(t) {
    return !1
}, NamespaceManager.Register("factories"), factories.Item = function() {
    function ItemEntityFactory() {}

    function _generateResourceGameYear(t, i) {
        if (!gSettingsModel.isLegacyYearIdEnabled() && utils.JS.isValid(i) && !utils.JS.isEmpty(i)) return parseInt(i, 10);
        var s = (t & enums.ItemMask.YEAR) >>> 28;
        return s < enums.Year.YEAR_2010 && (s = enums.Year.ASSET), parseInt(utils.TextUtils.getYearString(s), 10)
    }

    function _generateSubtype(item) {
        switch (utils.Debug.Assert(item.isPlayer() || item.isStaff(), "Missing required item subtype in server payload."), item.type) {
            case enums.ItemType.PLAYER:
                return enums.ItemSubType.PLAYER;
            case enums.ItemType.MANAGER:
                return enums.ItemSubType.MANAGER;
            case enums.ItemType.HEAD_COACH:
                return enums.ItemSubType.HEAD_COACH;
            case enums.ItemType.GK_COACH:
                return enums.ItemSubType.GK_COACH;
            case enums.ItemType.FITNESS_COACH:
                return enums.ItemSubType.FITNESS_COACH;
            case enums.ItemType.PHYSIO:
                return enums.ItemSubType.PHYSIO
        }
        return enums.ItemSubType.NONE
    }

    function _convertCardAssetIdToItemType(t) {
        switch (t) {
            case enums.ItemCardAssetId.CONTRACT_PLAYER:
            case enums.ItemCardAssetId.CONTRACT_MANAGER:
                return enums.ItemType.CONTRACT;
            case enums.ItemCardAssetId.HEALING:
            case enums.ItemCardAssetId.FITNESS:
                return enums.ItemType.HEALTH;
            case enums.ItemCardAssetId.TRAINING_PLAYER:
            case enums.ItemCardAssetId.TRAINING_GK:
            case enums.ItemCardAssetId.MANAGER_LEAGUE:
            case enums.ItemCardAssetId.POSITION_MODIFIER:
            case enums.ItemCardAssetId.PLAYSTYLE_PLAYER:
            case enums.ItemCardAssetId.PLAYSTYLE_GK:
                return enums.ItemType.TRAINING
        }
        return utils.Debug.Assert(!1, "Unknown cardassetid: " + t), enums.ItemType.NONE
    }

    function _normalizePayload(data, t) {
        data.resourceGameYear = _generateResourceGameYear(data.resourceId, data.resourceGameYear);
        var i = utils.TextUtils.getYearEnum(data.resourceGameYear);
        if (utils.JS.isNumber(data.rareFlag) && (data.rareflag = data.rareFlag, delete data.rareFlag), utils.JS.isNumber(data.teamid) && (data.teamId = data.teamid, delete data.teamid), !utils.JS.isBoolean(t) || t) {
            if (data.teamId && (!utils.JS.isNumber(data.leagueId) || data.leagueId <= 0)) {
                var s = repositories.TeamConfig.getTeam(data.teamId, i);
                data.leagueId = s ? s.league : -1
            }
            if (data.leagueId && (!utils.JS.isNumber(data.nation) || data.nation <= 0)) {
                var o = repositories.TeamConfig.getLeague(data.leagueId, i);
                data.nation = o ? o.nation : -1
            }
        }
        return data
    }

    function _parseItemPayload(item, data) {
        if (item.id = data.id, item.resourceId = data.resourceId, item.resourceGameYear = data.resourceGameYear, item.type = data.itemType, item.subtype = data.cardsubtypeid || _generateSubtype(item), item.untradeable = !(utils.JS.isBoolean(data.untradeable) && item.getYear() >= enums.Year.ASSET) || data.untradeable, item.lastSalePrice = data.lastSalePrice || 0, item.discardValue = data.discardValue || 0, item.state = data.itemState, item.pile = data.pile, item.rating = parseInt(data.rating, 10) || 0, item.teamId = data.teamId || 0, item.leagueId = data.leagueId || 0, item.nationId = data.nation || 0, item.rareflag = data.rareflag || 0, item.owners = data.owners || 0, item.timestamp = data.timestamp || 0, item.stackCount = 1, item.untradeableCount = item.untradeable ? 1 : 0, (item.isPlayer() || item.isManager()) && (item.contract = data.contract, item.concept = data.dream || !1, item.loans = utils.JS.isNumber(data.loans) ? data.loans : -1), item.isPlayer()) {
            item.loyaltyBonus = item.concept ? 0 : data.loyaltyBonus || 0, item.fitness = data.fitness, item.injuryType = data.injuryType || enums.PlayerInjury.NONE, item.injuryGames = data.injuryGames || 0, item.suspensionGames = data.suspension || 0, item.training = utils.JS.isNumber(data.training) ? data.training : 0, item.playStyle = data.playStyle || DEFAULT_PLAYSTYLE_ID;
            var position = repositories.Squad.getPositionByUniqueName(data.preferredPosition);
            if (item.preferredPosition = position ? position.getId() : 0, Array.isArray(data.attributeList) && data.attributeList.forEach(function(t, i) {
                    item._attributes[i] = t.value
                }, this), Array.isArray(data.lifetimeStats) && data.lifetimeStats.forEach(function(t, i) {
                    item._lifetimeStats[i] = t.value
                }, this), Array.isArray(data.statsList) && data.statsList.forEach(function(t, i) {
                    item._stats[i] = t.value
                }, this), item.isLegend()) {
                var t = repositories.PlayerIcon.get(item.getMaskedResourceId());
                item.iconId = t ? t.iconId : 0
            }
            var i = repositories.PlayerMeta.get(item.getMaskedResourceId());
            i && item.setMetaData(i)
        }
        item._staticData.parseDynamicItemData(item, data), data.trainingItem && (item._trainingItem = this.createItem(data.trainingItem)), utils.JS.isNumber(data.marketDataMaxPrice) && utils.JS.isNumber(data.marketDataMinPrice) && (item._itemPriceLimits = new transferobjects.ItemPriceLimits(data.marketDataMaxPrice, data.marketDataMinPrice))
    }

    function _parseConsumablePayload(item, data) {
        data.item.itemType || (data.item.itemType = item.type), _parseItemPayload.call(this, item, data.item), item.discardValue = data.discardValue, item.stackCount = data.count, item.resourceId = data.resourceId, item.untradeableCount = data.untradeableCount, item._updateUntradeableState()
    }
    return ItemEntityFactory.prototype.createItem = function createItem(data) {
        if (!data) return new entities.NullItem;
        if (data.itemType || (data.itemType = data.cardassetid ? _convertCardAssetIdToItemType(data.cardassetid) : enums.ItemType.PLAYER), (data = _normalizePayload(data)).itemType === enums.ItemType.PLAYER) {
            var t = repositories.Item.getStaticDataByDefId(data.resourceId & enums.ItemMask.DATABASE);
            t && (data.firstName = t.firstName, data.lastName = t.lastName, data.knownAs = t.commonName || enums.Localization.BLANK_STR)
        }
        var item = new entities.Item(data.itemType);
        return _parseItemPayload.call(this, item, data), item
    }, ItemEntityFactory.prototype.createConsumable = function createConsumable(data) {
        if (!data) return new entities.NullItem;
        data.item.itemType || (data.item.itemType = data.item.cardassetid ? _convertCardAssetIdToItemType(data.item.cardassetid) : enums.ItemType.PLAYER), data.item = _normalizePayload(data.item);
        var item = new entities.Item(data.item.itemType);
        return _parseConsumablePayload.call(this, item, data), item
    }, ItemEntityFactory.prototype.createCustomBrickItem = function createItem(data) {
        if (!data) return new entities.NullItem;
        data = _normalizePayload(data, !1);
        var item = new entities.CustomBrickItem;
        return _parseItemPayload.call(this, item, data), item
    }, ItemEntityFactory.prototype.generateItemsFromItemData = function generateItemsFromItemData(t, i) {
        return t.map(function(data) {
            var item = utils.JS.isValid(data.count) ? this.createConsumable(data) : this.createItem(data);
            if (utils.JS.isValid(i)) {
                var duplicate = utils.JS.find(i, function(t) {
                    return t.itemId === item.id
                });
                utils.JS.isValid(duplicate) && (item.duplicateId = duplicate.duplicateItemId, utils.JS.isValid(duplicate.duplicateItemLoans) && (item.duplicateItemLoans = duplicate.duplicateItemLoans))
            }
            return item
        }, this)
    }, ItemEntityFactory.prototype.generateItemsFromAuctionData = function generateItemsFromAuctionData(t, i) {
        return t.map(function(data) {
            var item = this.createItem(data.itemData),
                t = item.getAuctionData();
            if (t.parseAuctionDataObject(data), 0 === item.id && (item.id = "Trade" + t.tradeId), !item.isConsumable() && utils.JS.isValid(i)) {
                var duplicate = utils.JS.find(i, function(t) {
                    return t.itemId === item.id
                });
                utils.JS.isValid(duplicate) && (item.duplicateId = duplicate.duplicateItemId)
            }
            return item
        }, this)
    }, new ItemEntityFactory
}(), utils.JS.inherits(ItemRepository, FUTHashTable), ItemRepository.prototype.reset = function reset() {
    this.clear(), this.endOfList = !1
}, ItemRepository.prototype.search = function search(t) {
    return this.values().filter(function(item) {
        if (t.untradeables === enums.SearchUntradeables.ONLY && !item.untradeable || t.untradeables === enums.SearchUntradeables.EXCLUDE && item.untradeable) return !1;
        if (t.type === enums.SearchType.PLAYER) {
            if (t.position !== enums.SearchType.ANY && repositories.Squad.getPositionByUniqueName(t.position).getId() !== item.preferredPosition) return !1;
            if (t.zone !== enums.SearchType.ANY) {
                var i = utils.JS.find(POSITION_ZONE_LOOKUP, function(i) {
                    return i.value === t.zone
                });
                if (i.minPosId > item.preferredPosition || i.maxPosId < item.preferredPosition) return !1
            }
            if (-1 !== t.playStyle && item.playStyle !== t.playStyle) return !1;
            if (t.defId.length > 0 && t.defId.indexOf(item.getMaskedResourceId()) < 0) return !1
        } else if (t.type === enums.SearchType.STAFF && t.category !== enums.SearchCategory.ANY && (item.isManager() && t.category !== enums.SearchCategory.MANAGER || item.isHeadCoach() && t.category !== enums.SearchCategory.COACH_HEAD || item.isFitnessCoach() && t.category !== enums.SearchCategory.COACH_FITNESS || item.isGKCoach() && t.category !== enums.SearchCategory.COACH_GK || item.isPhysio() && t.category !== enums.SearchCategory.PHYSIO)) return !1;
        if (t.type !== enums.SearchType.CONSUMABLES_DEVELOPMENT && t.type !== enums.SearchType.CONSUMABLES_TRAINING) {
            if (t.level !== enums.SearchType.ANY && (item.getTier() === enums.ItemRatingTier.BRONZE && t.level !== enums.SearchLevel.BRONZE || item.getTier() === enums.ItemRatingTier.SILVER && t.level !== enums.SearchLevel.SILVER || item.getTier() === enums.ItemRatingTier.GOLD && t.level !== enums.SearchLevel.GOLD)) return !1;
            if (-1 !== t.nation && t.nation !== item.nationId || -1 !== t.league && t.league !== item.leagueId || -1 !== t.club && t.club !== item.teamId) return !1
        }
        return !0
    })
}, communication.ClubConsumableSearchDelegate = function() {
    communication.BaseFUTDelegate.call(this), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "club/consumables/development", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON
}, utils.JS.inherits(communication.ClubConsumableSearchDelegate, communication.BaseFUTDelegate), communication.ClubSearchDelegate = function(t, i, s) {
    communication.BaseFUTDelegate.call(this), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "club", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON;
    var o = {},
        l = !1;
    if (o.sort = t.sort, t.year !== enums.SearchType.ANY ? (o.type = 1, o.year = t.year, l = utils.TextUtils.getYearFromString(t.year) <= enums.Year.YEAR_2012) : o.type = t.type === enums.SearchType.ANY ? enums.SearchType.PLAYER : t.type, t.category !== enums.SearchCategory.ANY && (o.type = t.category.toLowerCase()), o.type === enums.SearchType.PLAYER && t.level === enums.SearchLevel.SPECIAL) o.rare = t.level;
    else if (t.level !== enums.SearchLevel.ANY)
        if (l) {
            var u;
            for (u in enums.SearchLevel)
                if (enums.SearchLevel.hasOwnProperty(u) && t.level === enums.SearchLevel[u] && enums.ItemRatingTier.hasOwnProperty(u)) {
                    o.level = enums.ItemRatingTier[u];
                    break
                }
        } else o.level = t.level;
    if (t.club > 0 && (o.team = t.club), t.league > 0 && (o.league = t.league), t.nation > 0 && (o.nation = t.nation), t.untradeables !== enums.SearchUntradeables.DEFAULT && (o.untradeable = t.untradeables), t.isExactSearch && (o.filter = "exact"), t.zone !== enums.SearchType.ANY) {
        var h = utils.JS.find(PLAYER_ZONE_LOOKUP, function(i) {
            return i.value === t.zone
        });
        utils.JS.isValid(h) && (o.type = h.id)
    } else if (t.position !== enums.SearchType.ANY)
        if (l) {
            var p;
            for (p in enums.PlayerPositions)
                if (enums.PlayerPositions.hasOwnProperty(p) && t.position === enums.PlayerPositions[p] && enums.PlayerPositionsAsInts.hasOwnProperty(p)) {
                    o.position = enums.PlayerPositionsAsInts[p];
                    break
                }
        } else o.position = t.position;
    t.playStyle > 0 && (o.playStyle = t.playStyle), t.hasValidDefId() && (o.defId = t.defId), o.start = i, o.count = s, this.setURLVariables(o), this.useClickShield(!0)
}, utils.JS.inherits(communication.ClubSearchDelegate, communication.BaseFUTDelegate), ClubRepository.prototype.reset = function reset() {
    this._players.reset(), this._staff.reset(), this._consumables.reset(), this._badges.reset(), this._balls.reset(), this._kits.reset(), this._stadiums.reset(), this._activeItems.clear()
}, ClubRepository.prototype._getActiveItems = function _getActiveItems() {
    var t = [];
    return this._activeItems.keys().forEach(function(i) {
        var id = this._activeItems.get(i);
        switch (i) {
            case enums.ItemState.ACTIVE_BADGE:
                t.push(this._badges.get(id));
                break;
            case enums.ItemState.ACTIVE_BALL:
                t.push(this._balls.get(id));
                break;
            case enums.ItemState.ACTIVE_AWAY_KIT:
            case enums.ItemState.ACTIVE_HOME_KIT:
                t.push(this._kits.get(id));
                break;
            case enums.ItemState.ACTIVE_STADIUM:
                t.push(this._stadiums.get(id))
        }
    }, this), t
}, ClubRepository.prototype.getActiveItems = function getActiveItems(state) {
    var t = this._getActiveItems();
    return state ? utils.JS.find(t, function(t) {
        return t.state === state
    }) : t
}, ClubRepository.prototype.setActiveItem = function setActiveItem(item) {
    if (item.isActiveClubItem()) {
        var t = this.getActiveItems(item.state);
        utils.JS.isValid(t) && t.id !== item.id && (t.state = enums.ItemState.FREE), this._activeItems.set(item.state, item.id)
    }
}, ClubRepository.prototype._addClubItem = function _addClubItem(item) {
    item.isBadge() ? this._badges.set(item.id, item) : item.isBall() ? this._balls.set(item.id, item) : item.isKit() ? this._kits.set(item.id, item) : item.isStadium() && this._stadiums.set(item.id, item), this.setActiveItem(item)
}, ClubRepository.prototype._removeClubItem = function _removeClubItem(item) {
    item.isActiveClubItem() ? utils.Debug.Assert(!1, "[ClubRepository::_removeClubItem] Can't remove an active club item.") : item.isBadge() ? this._badges.remove(item.id) : item.isBall() ? this._balls.remove(item.id) : item.isKit() ? this._kits.remove(item.id) : item.isStadium() && this._stadiums.remove(item.id)
}, ClubRepository.prototype._addConsumable = function _addConsumable(item) {
    this._consumables.has(item.resourceId) ? this._consumables.get(item.resourceId).increaseStackCount() : this._consumables.set(item.resourceId, item)
}, ClubRepository.prototype._removeConsumable = function _removeConsumable(t) {
    0 === this._consumables.get(t).stackCount && this._consumables.remove(t)
}, ClubRepository.prototype.add = function add(item) {
    function _add(t) {
        t.isPlayer() ? this._players.set(t.id, t) : t.isStaff() ? this._staff.set(t.id, t) : t.isClubItem() ? this._addClubItem(t) : t.isConsumable() && this._addConsumable(t)
    }
    Array.isArray(item) ? item.forEach(function(t) {
        _add.call(this, t)
    }, this) : _add.call(this, item)
}, ClubRepository.prototype.remove = function remove(item) {
    function _remove(t) {
        t.isPlayer() ? this._players.remove(t.id) : item.isStaff() ? this._staff.remove(t.id) : item.isClubItem() ? this._removeClubItem(t) : item.isConsumable() && this._removeConsumable(t.resourceId)
    }
    Array.isArray(item) ? item.forEach(function(t) {
        _remove.call(this, t)
    }, this) : _remove.call(this, item)
}, ClubRepository.prototype.update = function update(item) {
    item.isPlayer() && this._players.has(item.id) && this._players.set(item.id, item)
}, ClubRepository.prototype.search = function search(t) {
    var i, s, event = new FUTObservable,
        o = new transferobjects.ItemDomainResponse;
    switch (t.type) {
        case enums.SearchType.PLAYER:
            i = this._players;
            break;
        case enums.SearchType.STAFF:
            i = this._staff;
            break;
        case enums.SearchType.CONSUMABLES_DEVELOPMENT:
        case enums.SearchType.CONSUMABLES_TRAINING:
            i = this._consumables;
            break;
        case enums.SearchType.CLUB_INFO:
            t.category === enums.SearchCategory.BADGE ? i = this._badges : t.category === enums.SearchCategory.KIT && (i = this._kits);
            break;
        case enums.SearchType.BALL:
            i = this._balls;
            break;
        case enums.SearchType.STADIUM:
            i = this._stadiums
    }
    return i ? !i.endOfList || t.year !== enums.SearchType.ANY && t.year !== utils.TextUtils.getYearString(enums.Year.ASSET) ? ((s = t.type === enums.SearchType.CONSUMABLES_DEVELOPMENT || t.type === enums.SearchType.CONSUMABLES_TRAINING ? new communication.ClubConsumableSearchDelegate : new communication.ClubSearchDelegate(t, t.offset, t.count)).addListener(communication.BaseDelegate.SUCCESS, this, function _onClubSearchSuccess(sender, response) {
        sender.clearListenersByScope(this);
        var s = Array.isArray(response.itemData) ? factories.Item.generateItemsFromItemData(response.itemData) : [],
            l = s.length <= t.count - 1,
            u = !t.isModified(!0) && (t.category === enums.SearchType.ANY || t.type === enums.SearchType.CLUB_INFO);
        if (i.endOfList = t.type === enums.SearchType.CONSUMABLES_DEVELOPMENT || l && u, o.success = !0, o.items = s, o.retrievedAll = l, s.length > 0)
            if (t.year === enums.SearchType.ANY || t.year === utils.TextUtils.getYearString(enums.Year.ASSET)) this.add(s);
            else if (t.type === enums.SearchType.PLAYER) return void
        function _loadStaticData() {
            function _onStaticLoadComplete(i, data) {
                i.unobserve(this), ++t >= s.length && event.notify(o)
            }
            var t = 0;
            s.forEach(function(t) {
                t.loadStaticData().observe(this, _onStaticLoadComplete)
            })
        }();
        event.notify(o)
    }), s.addListener(communication.BaseDelegate.FAIL, this, function _onClubSearchFail(sender, error) {
        sender.clearListenersByScope(this), o.error = error, event.notify(o)
    }), s.setImportant(!0), s.useClickShield(!0), s.send()) : (o.success = !0, o.items = i.search(t), event.notify(o)) : (utils.Debug.Assert(!1, "[ClubRepository::search] Invalid search, no repository associated to it."), event.notify(o)), event
}, NamespaceManager.Register("transferobjects"), transferobjects.ItemDomainResponse = function(data) {
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "success", {
        set: t.set.bind(t),
        get: t.get.bind(t)
    }), this.success = !!data && data.success, this.error = data ? data.error : null, this.items = data ? data.items : [], this.retrievedAll = !data || data.retrievedAll
}, NamespaceManager.Register("transferobjects"), transferobjects.StaticPlayerData = function(data) {
    this.id = data.id, Object.defineProperty(this, "id", {
        writable: !1
    }), this.firstName = data.f, Object.defineProperty(this, "firstName", {
        writable: !1
    }), this.lastName = data.l, Object.defineProperty(this, "lastName", {
        writable: !1
    }), this.commonName = data.c || null, Object.defineProperty(this, "commonName", {
        writable: !1
    }), this.name = "", Object.defineProperty(this, "name", {
        get: function() {
            return this.commonName || this.firstName + " " + this.lastName
        }
    }), this.rating = data.r, Object.defineProperty(this, "rating", {
        writable: !1
    }), this.nationId = data.n, Object.defineProperty(this, "nationId", {
        writable: !1
    })
}, NamespaceManager.Register("repositories"), repositories.Item = function() {
    function ItemDomainRepository() {
        var t;
        Object.defineProperty(this, "cachedDurationIndex", {
            get: function() {
                return t
            },
            set: function(index) {
                utils.JS.isNumber(index) && (t = index)
            }
        });
        var i;
        Object.defineProperty(this, "maxAllowedAuctions", {
            get: function() {
                return i
            },
            set: function(t) {
                utils.JS.isNumber(t) && (i = t)
            }
        }), this._pileSizes = new FUTHashTable({}), this._unassigned = new ItemRepository, this._transfer = new ItemRepository, this._inbox = new ItemRepository, this._club = new ClubRepository, this._unassignedCacheTimestamp = 0, this._transferCacheTimestamp = 0, this._inboxCacheTimestamp = 0, this.cachedDurationIndex = 0, this.maxAllowedAuctions = 30, this._pileSizes.set(enums.FUTItemPile.PURCHASED, 5), this._pileSizes.set(enums.FUTItemPile.TRANSFER, 30), this._pileSizes.set(enums.FUTItemPile.INBOX, 30)
    }
    var t = new FUTHashTable({});
    return ItemDomainRepository.prototype.reset = function reset() {
        this._unassigned.reset(), this._unassignedCacheTimestamp = 0, this._transfer.reset(), this._transferCacheTimestamp = 0, this._inbox.reset(), this._inboxCacheTimestamp = 0, this._club.reset()
    }, ItemDomainRepository.prototype.setDirty = function setDirty(t) {
        if (utils.JS.isValid(t)) switch (t) {
            case enums.FUTItemPile.PURCHASED:
                this._unassignedCacheTimestamp = 0;
                break;
            case enums.FUTItemPile.TRANSFER:
                this._transferCacheTimestamp = 0;
                break;
            case enums.FUTItemPile.INBOX:
                this._inboxCacheTimestamp = 0
        } else this._unassignedCacheTimestamp = 0, this._transferCacheTimestamp = 0, this._inboxCacheTimestamp = 0
    }, ItemDomainRepository.prototype.setPileSize = function setPileSize(t, size) {
        this._pileSizes.set(t, size)
    }, ItemDomainRepository.prototype.getPileSize = function getPileSize(t) {
        return utils.Debug.Assert(this._pileSizes.has(t), "[ItemDomainRepository::getPileSize] Unsupported pile requested."), this._pileSizes.get(t) || 0
    }, ItemDomainRepository.prototype.isPileFull = function isPileFull(t) {
        var i = 0,
            s = this._pileSizes.has(t) ? this._pileSizes.get(t) : 0;
        switch (t) {
            case enums.FUTItemPile.PURCHASED:
                i = this._unassigned.length;
                break;
            case enums.FUTItemPile.TRANSFER:
                i = this._transfer.length;
                break;
            case enums.FUTItemPile.INBOX:
                i = this._inbox.length;
                break;
            case enums.FUTItemPile.CLUB:
                return !1
        }
        return i >= s
    }, ItemDomainRepository.prototype.numItemsInCache = function numItemsInCache(t) {
        switch (t) {
            case enums.FUTItemPile.PURCHASED:
                return this._unassigned.length;
            case enums.FUTItemPile.TRANSFER:
                return this._transfer.length;
            case enums.FUTItemPile.INBOX:
                return this._inbox.length;
            default:
                return utils.Debug.Assert(!1, "Unsupported item pile: " + t), 0
        }
    }, ItemDomainRepository.prototype.hasStaticData = function hasStaticData() {
        return t.length > 0
    }, ItemDomainRepository.prototype.setStaticData = function setStaticData(data) {
        t.clear(), data.forEach(function(d) {
            var i = new transferobjects.StaticPlayerData(d);
            t.set(i.id, i)
        })
    }, ItemDomainRepository.prototype.getStaticDataByDefId = function getStaticDataByDefId(i) {
        return t.get(i)
    }, ItemDomainRepository.prototype.getStaticData = function getStaticData() {
        return t.values()
    }, ItemDomainRepository.prototype.getItemsById = function getItemsById(t) {
        var i = new FUTObservable,
            s = new transferobjects.ItemDomainResponse;
        t = Array.isArray(t) ? t : [t];
        var o = new communication.ItemDelegate(t);
        return o.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetItemDataSuccess(sender, response) {
            sender.clearListenersByScope(this), s.success = !0, s.items = response, i.notify(s)
        }), o.addListener(communication.BaseDelegate.FAIL, this, function _onGetItemDataFail(sender, error) {
            sender.clearListenersByScope(this), s.error = error, i.notify(s)
        }), o.useClickShield(!0), o.send(), i
    }, ItemDomainRepository.prototype.getWatchedItems = function getWatchedItems() {
        var event = new FUTObservable,
            t = new transferobjects.ItemDomainResponse;
        if (Date.now() < this._inboxCacheTimestamp + 6e4) return t.success = !0, t.items = this._inbox.values(), event.notify(t), event;
        var i = new communication.WatchListDelegate;
        return i.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetWatchListSuccess(sender, response) {
            sender.clearListenersByScope(this);
            var i = this.setWatchedItemsFromPayload(response);
            t.success = !0, t.items = i, event.notify(t)
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onGetWatchListFail(sender, error) {
            sender.clearListenersByScope(this), error.getCode() === enums.HTTPStatusCode.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.TRADING_ENABLED), t.error = error, event.notify(t)
        }), i.useClickShield(!0), i.send(), event
    }, ItemDomainRepository.prototype.setWatchedItemsFromPayload = function setWatchedItemsFromPayload(response) {
        this._inbox.clear(), this._inboxCacheTimestamp = Date.now();
        var t = factories.Item.generateItemsFromAuctionData(response.auctionInfo || [], response.duplicateItemIdList || []);
        return t.forEach(function(item) {
            this._inbox.set(item.id, item)
        }, this), this._inbox.endOfList = !0, t
    }, ItemDomainRepository.prototype.getTransferItems = function getTransferItems() {
        var event = new FUTObservable,
            t = new transferobjects.ItemDomainResponse;
        if (Date.now() < this._transferCacheTimestamp + 6e4) return t.success = !0, t.items = this._transfer.values(), event.notify(t), event;
        var i = new communication.TradePileDelegate;
        return i.useClickShield(!0), i.setImportant(!0), i.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetTradePileSuccess(sender, response) {
            sender.clearListenersByScope(this);
            var i = this.setTransferItemsFromPayload(response);
            t.success = !0, t.items = i, event.notify(t)
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onGetTradePileFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                t.error = error, event.notify(t)
            })
        }), i.send(), event
    }, ItemDomainRepository.prototype.setTransferItemsFromPayload = function setTransferItemsFromPayload(response) {
        this._transfer.clear(), this._transferCacheTimestamp = Date.now();
        var t = factories.Item.generateItemsFromAuctionData(response.auctionInfo || [], response.duplicateItemIdList || []);
        return t.forEach(function(item) {
            this._transfer.set(item.id, item)
        }, this), this._transfer.endOfList = !0, t
    }, ItemDomainRepository.prototype.getUnassignedItems = function getUnassignedItems() {
        var event = new FUTObservable,
            t = new transferobjects.ItemDomainResponse;
        if (Date.now() < this._unassignedCacheTimestamp + 6e4) return t.success = !0, t.items = this._unassigned.values(), event.notify(t), event;
        var i = new communication.UnassignedItemsDelegate;
        return i.useClickShield(!0), i.setImportant(!0), i.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetUnassignedSuccess(sender, response) {
            sender.clearListenersByScope(this);
            var i = this.setUnassignedItemsFromPayload(response);
            t.success = !0, t.items = i, event.notify(t)
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onGetUnassignedFail(sender, error) {
            sender.clearListenersByScope(this), t.error = error, event.notify(t)
        }), i.send(), event
    }, ItemDomainRepository.prototype.setUnassignedItemsFromPayload = function setUnassignedItemsFromPayload(response) {
        this._unassigned.clear(), this._unassignedCacheTimestamp = Date.now();
        var t = factories.Item.generateItemsFromItemData(response.itemData, response.duplicateItemIdList);
        return t.forEach(function(item) {
            this._unassigned.set(item.id, item)
        }, this), this._unassigned.endOfList = !0, t
    }, ItemDomainRepository.prototype.setActiveItem = function setActiveItem(item) {
        this._club.setActiveItem(item)
    }, ItemDomainRepository.prototype.getActiveItems = function getActiveItems(state) {
        return this._club.getActiveItems(state)
    }, ItemDomainRepository.prototype.getClubItems = function getClubItems(t) {
        var event = new FUTObservable;
        return this._club.search(t).observe(this, function _onClubSearchComplete(t, data) {
            t.unobserve(this), event.notify(data)
        }), event
    }, ItemDomainRepository.prototype.getConceptItems = function getConceptItems(t) {
        var event = new FUTObservable,
            i = new transferobjects.ItemDomainResponse,
            s = new communication.DreamSearchDelegate(t, t.offset, t.count);
        return s.addListener(communication.BaseDelegate.SUCCESS, this, function _onConceptSearchSuccess(sender, response) {
            sender.clearListenersByScope(this);
            var s = factories.Item.generateItemsFromItemData(response.itemData);
            i.success = !0, i.items = s, i.retrievedAll = s.length <= t.count - 1, event.notify(i)
        }), s.addListener(communication.BaseDelegate.FAIL, this, function _onConceptSearchFail(sender, error) {
            sender.clearListenersByScope(this), i.error = error, event.notify(i)
        }), s.useClickShield(!0), s.send(), event
    }, ItemDomainRepository.prototype.add = function add(t) {
        function _add(item) {
            var t = item.getAuctionData();
            if (t.watched && !t.tradeOwner) {
                if (this.isPileFull(enums.FUTItemPile.INBOX)) return;
                this._inbox.set(item.id, item)
            } else {
                if (this.isPileFull(item.pile)) return;
                switch (item.pile) {
                    case enums.FUTItemPile.PURCHASED:
                        this._unassigned.set(item.id, item);
                        break;
                    case enums.FUTItemPile.TRANSFER:
                        this._transfer.set(item.id, item);
                        break;
                    case enums.FUTItemPile.INBOX:
                        this._inbox.set(item.id, item);
                        break;
                    case enums.FUTItemPile.CLUB:
                        this._club.add(item)
                }
            }
            i.push(item)
        }
        var i = [];
        return Array.isArray(t) ? t.forEach(_add, this) : _add.call(this, t), i
    }, ItemDomainRepository.prototype.remove = function remove(t) {
        function _remove(item) {
            var t = item.getAuctionData();
            if (!t.watched || t.tradeOwner) switch (item.pile) {
                case enums.FUTItemPile.PURCHASED:
                    this._unassigned.remove(item.id);
                    break;
                case enums.FUTItemPile.TRANSFER:
                    this._transfer.remove(item.id);
                    break;
                case enums.FUTItemPile.INBOX:
                    this._inbox.remove(item.id);
                    break;
                case enums.FUTItemPile.CLUB:
                    this._club.remove(item)
            } else this._inbox.remove(item.id)
        }
        Array.isArray(t) ? t.forEach(_remove, this) : _remove.call(this, t)
    }, ItemDomainRepository.prototype.update = function update(t) {
        function _update(item) {
            switch (item.pile) {
                case enums.FUTItemPile.CLUB:
                    this._club.update(item);
                    break;
                default:
                    utils.Debug.Assert(!1, "ItemDomainRepository::update. This pile does not support updating items.")
            }
        }
        Array.isArray(t) ? t.forEach(_update, this) : _update.call(this, t)
    }, new ItemDomainRepository
}(), communication.ApplyConsumableDelegate = function(id, t) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "item/resource/" + id.toString(), models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setData({
        apply: t.map(function(itemId) {
            return {
                id: itemId
            }
        })
    })
}, utils.JS.inherits(communication.ApplyConsumableDelegate, communication.BaseFUTDelegate), communication.AuctionInfoDelegate = function(t) {
    communication.BaseFUTDelegate.call(this);
    var i = t.reduce(function(t, item) {
        var i = item.getAuctionData();
        return i.isValid() && (i.isUpdating = !0, t.push(i.tradeId)), t
    }, []);
    utils.Debug.Assert(i.length > 0, "[communication.AuctionInfoDelegate] No valid auctions to retrieve info for."), this.setCache(!1), this.setURLVariables({
        tradeIds: i.join(",")
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "trade/status", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.AuctionInfoDelegate, communication.BaseFUTDelegate), communication.AuctionRelistDelegate = function() {
    communication.BaseFUTDelegate.call(this)
}, utils.JS.inherits(communication.AuctionRelistDelegate, communication.BaseFUTDelegate), communication.AuctionRelistDelegate.prototype.execute = function() {
    var url = communication.BaseFUTDelegate.REQUEST_ROOT + "auctionhouse/relist";
    this.setRequest(url, models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
}, communication.AuctionRelistDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.FORBIDDEN:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.list.forbidden.title", "popup.error.relistall.forbidden.message");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this._networkError.isCodeValid() || (this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.relistall.title", "popup.error.relistall")), this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.ConsumeUnlockableDelegate = function(itemId) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "item/" + itemId, models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setData({
        apply: []
    })
}, utils.JS.inherits(communication.ConsumeUnlockableDelegate, communication.BaseFUTDelegate), communication.ListItemDelegate = function(data) {
    communication.BaseFUTDelegate.call(this);
    var t = {
        itemData: {
            id: data.itemId
        },
        startingBid: data.startingBid,
        duration: data.duration
    };
    0 !== data.buyNowPrice && (t.buyNowPrice = data.buyNowPrice), this.setData(t), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "auctionhouse", models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this._urlVariables.sku_b = "FFT18"
}, utils.JS.inherits(communication.ListItemDelegate, communication.BaseFUTDelegate), communication.ListItemDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.FORBIDDEN:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.list.forbidden.title", "popup.error.list.forbidden.message");
            break;
        case enums.NetworkError.PERMISSION_DENIED:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.list.PermissionDeniedTitle", "popup.error.list.PermissionDenied");
            break;
        case enums.NetworkError.STATE_INVALID:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.list.InvalidStateTitle", "popup.error.list.InvalidState");
            break;
        case enums.NetworkError.DESTINATION_FULL:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.SellItemTradePileFullTitle", "popup.error.tradetoken.SellItemTradePileFull");
            break;
        case enums.NetworkError.CARD_IN_TRADE:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.ItemInTradeOfferTitle", "popup.error.tradetoken.ItemInTradeOffer");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.MarketDataDelegate = function(t, i) {
    communication.BaseFUTDelegate.call(this);
    var s = {},
        o = t.map(function(item) {
            return i ? item.id : item.getDefId()
        });
    i ? s.itemIdList = o : s.defId = o, this.setURLVariables(s), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "marketdata/" + (i ? "item/" : "") + "pricelimits", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.MarketDataDelegate, communication.BaseFUTDelegate), communication.MoveItemDelegate = function(t, i, s) {
    communication.BaseFUTDelegate.call(this);
    var o;
    switch (i) {
        case enums.FUTItemPile.CLUB:
            o = "club";
            break;
        case enums.FUTItemPile.TRANSFER:
            o = "trade";
            break;
        default:
            utils.Debug.Assert(!1, "Unsupported destination pile when moving items. Will attempt to send to club..."), o = "club"
    }
    this.setData({
        itemData: t.map(function(item) {
            var data = {
                id: s ? item.resourceId : item.id,
                pile: o
            };
            if (!s) {
                var t = item.getAuctionData();
                item.isDuplicate() && i === enums.FUTItemPile.CLUB && (data.swap = item.duplicateId), t && t.isWon() && t.isHighestBid() && (data.tradeId = t.tradeId)
            }
            return data
        })
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + (s ? "item/resource" : "item"), models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.MoveItemDelegate, communication.BaseFUTDelegate), communication.MoveItemDelegate.prototype.onSuccess = function(response) {
    var t = response.itemData.length,
        errorCode = 0;
    if (0 !== t) {
        for (; t-- > 0;) {
            var i = response.itemData[t];
            if (i.success) return void this.dispatch(communication.BaseDelegate.SUCCESS, response);
            (!utils.JS.isNumber(errorCode) || errorCode <= 0) && (errorCode = i.errorCode || 0)
        }
        this.onFail(errorCode)
    } else this.dispatch(communication.BaseDelegate.SUCCESS, response)
}, communication.MoveItemDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.PERMISSION_DENIED:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.item.PermissionDeniedTitle", "popup.error.item.PermissionDenied");
            break;
        case enums.NetworkError.STATE_INVALID:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.item.InvalidStateTitle", "popup.error.item.InvalidState");
            break;
        case enums.NetworkError.DUPLICATE_ITEM_TYPE:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.item.DuplicatedItemTypeTitle", "popup.error.item.DuplicatedItemType");
            break;
        case enums.NetworkError.DESTINATION_FULL:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.DestinationFullTitle", "popup.error.item.DestinationFull");
            break;
        case enums.NetworkError.INVALID_DECK:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.InvalidDeckTitle", "popup.error.tradetoken.InvalidDeck");
            break;
        case enums.NetworkError.CARD_IN_TRADE:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.tradetoken.ItemInTradeOfferTitle", "popup.error.tradetoken.ItemInTradeOffer");
            break;
        case enums.NetworkError.NO_CARD_EXISTS:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.NoSuchCardTitle", "popup.error.NoSuchCard");
            break;
        case enums.NetworkError.PLAYER_HAS_RED_CARD:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.move.PlayerHasRedCardTitle", "popup.error.move.PlayerHasRedCard");
            break;
        case enums.NetworkError.REMOVE_WATCH_FAILURE:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.watchlist.RemoveWatchFailureTitle", "popup.error.watchlist.RemoveWatchFailure");
            break;
        case enums.NetworkError.SWAP_ITEM_WITH_ITSELF:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.CantSwapItemWithItselfTitle", "popup.error.CantSwapItemWithItself");
            break;
        case enums.NetworkError.USER_IS_HIGHEST_BIDDER:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.watchlist.UserIsHighestBidderTitle", "popup.error.watchlist.UserIsHighestBidder");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.RemoveSoldItemDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "trade/" + (t && t > 0 && "0" !== t ? t.toString() : "sold"), models.CommunicationModel.METHOD.DELETE, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.RemoveSoldItemDelegate, communication.BaseFUTDelegate), communication.UnWatchDelegate = function(t) {
    communication.BaseFUTDelegate.call(this);
    var i = t.map(function(t) {
        return t.tradeId
    }).join(",");
    this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "watchlist?tradeId=" + i, models.CommunicationModel.METHOD.DELETE, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.UnWatchDelegate, communication.BaseFUTDelegate), communication.UnWatchDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.PERMISSION_DENIED:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.unwatch.PermissionDeniedTitle", "popup.error.unwatch.PermissionDenied");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.WatchDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "watchlist", models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON), this.setData({
        auctionInfo: t.map(function(t) {
            return {
                id: t.tradeId
            }
        })
    })
}, utils.JS.inherits(communication.WatchDelegate, communication.BaseFUTDelegate), communication.WatchDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.PERMISSION_DENIED:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.watch.PermissionDeniedTitle", "popup.error.watch.PermissionDenied");
            break;
        case enums.NetworkError.CONFLICT:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.watch.ItemNoLongerAvailableTitle", "popup.error.watch.ItemNoLongerAvailable");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, NamespaceManager.Register("transferobjects"), transferobjects.ItemServiceResponse = function(data) {
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "success", {
        set: t.set.bind(t),
        get: t.get.bind(t)
    }), this.success = !!data && data.success, this.error = data ? data.error : null, this.itemIds = data ? data.itemIds : [], this.clubDuplicates = data ? data.clubDuplicates : []
}, NamespaceManager.Register("services"), services.Item = function() {
    function ItemService() {}
    return ItemService.prototype.move = function move(t, i) {
        function _runMoveDelegate() {
            if (0 === h.length && 0 === p.length) return s.notify(o), s;
            var t = [];
            h.length > 0 && t.push(new communication.MoveItemDelegate(h, i, !1)), p.length > 0 && t.push(new communication.MoveItemDelegate(p, i, !0));
            var l = new utils.DelegateChain(t, !0);
            l.addListener(utils.DelegateChain.SUCCESS, this, _onMoveSuccess), l.addListener(utils.DelegateChain.FAIL, this, _onMoveFail), l.execute()
        }

        function _onMoveSuccess(sender, t, m) {
            function _cleanupItem(item) {
                if (this._removeItems(item), o.itemIds.indexOf(item.id) >= 0) {
                    _ || i !== enums.FUTItemPile.CLUB && item.pile !== enums.FUTItemPile.CLUB || (_ = !0);
                    var t = utils.JS.find(u, function(d) {
                        return item.duplicateId === d.id
                    });
                    t && (o.clubDuplicates.push(t), repositories.Item.add(t)), item.clearAuction(), i === enums.FUTItemPile.CLUB ? this._replaceItemInConceptSquads(item) : item.pile === enums.FUTItemPile.CLUB && this._removeItemsFromSquads(item), item.pile = i, repositories.Item.add(item)
                } else p.length > 0 && i === enums.FUTItemPile.TRANSFER && (_ = !0)
            }
            sender.clearListenersByScope(this);
            var _ = !1;
            o.itemIds = m.reduce(function(t, response) {
                return response.itemData.forEach(function(i) {
                    i.success && t.push(i.id)
                }), t
            }, []), h.forEach(_cleanupItem, this), p.forEach(_cleanupItem, this), _ && repositories.Item.setDirty(), l.forEach(function(data) {
                data.duplicates.forEach(function(duplicate) {
                    duplicate.duplicateId = data.item
                })
            }), o.success = !0, s.notify(o), getDefaultDispatcher().notify(enums.AppNotification.ITEM_MOVE, this, o)
        }

        function _onMoveFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                o.error = error, s.notify(o)
            }.bind(this))
        }
        var s = new FUTObservable,
            o = new transferobjects.ItemServiceResponse,
            l = new FUTHashTable({}),
            u = [],
            h = [],
            p = [];
        if (Array.isArray(t) || (t = [t]), t.length < 1) return utils.Debug.Assert(!1, "[services.Item::move] Expected at least one item."), o.success = !0, s.notify(o), s;
        if (repositories.Item.isPileFull(i)) {
            var m = i === enums.FUTItemPile.TRANSFER ? utils.PopupManager.Alerts.TRANSFER_LIST_FULL : utils.PopupManager.Alerts.DESTINATION_FULL;
            return utils.PopupManager.ShowAlert(m, function() {
                s.notify(o)
            }), s
        }
        if (t.forEach(function(item) {
                if (i !== enums.FUTItemPile.TRANSFER || !item.untradeable) {
                    if (i === enums.FUTItemPile.CLUB && !item.isConsumable()) {
                        if (l.has(item.resourceId)) return void l.get(item.resourceId).duplicates.push(item);
                        l.set(item.resourceId, {
                            item: item.id,
                            duplicates: []
                        })
                    }
                    item.isClubConsumable() ? p.push(item) : h.push(item)
                }
            }), i === enums.FUTItemPile.CLUB) {
            var _ = "",
                length = h.length,
                g = h.reduce(function(t, item) {
                    return item.isDuplicate() && t.push(item.duplicateId), t
                }, []);
            g.length > 0 ? repositories.Item.getItemsById(g).observe(this, function(t, data) {
                t.unobserve(this), data.success ? (data.items.forEach(function(d) {
                    for (var t = length, i = []; t-- > 0;) {
                        var s = h[t];
                        s.duplicateId === d.id && (d.untradeable || d.isInjured() || d.isSuspended() ? 1 === length && (_ = d.untradeable ? "popup.error.tradepile.untradeableduplicate" : "popup.error.item.InjuredOrSuspended") : (d.duplicateId = s.id, d.pile = s.pile, u.push(d), i.push(s)))
                    }
                    h = i
                }), utils.JS.isEmpty(_) ? _runMoveDelegate.call(this) : (services.Notification.queue([gLocalization.lText(_), enums.UINotificationType.NEGATIVE]), s.notify(o))) : (services.Notification.queue([gLocalization.lText("popup.error.activesquad.SwapPlayerFailed"), enums.UINotificationType.NEGATIVE]), o.error = data.error, s.notify(o))
            }) : _runMoveDelegate.call(this)
        } else _runMoveDelegate.call(this);
        return s
    }, ItemService.prototype.relistExpiredAuctions = function relistExpiredAuctions() {
        function _onRelistAllFail(sender, error) {
            sender.clearListenersByScope(this);
            var s = function() {
                error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && gUserModel.setTradeAccess(models.UserModel.TRADE_ACCESS.BLACKLIST), i.error = error, t.notify(i)
            }.bind(this);
            NetworkErrorManager.handle(error, !1, s)
        }
        var t = new FUTObservable,
            i = new transferobjects.ItemServiceResponse,
            s = new communication.AuctionRelistDelegate;
        return s.addListener(communication.BaseDelegate.SUCCESS, this, function _onRelistAllSuccess(sender) {
            sender.clearListenersByScope(this), repositories.Item.setDirty(enums.FUTItemPile.TRANSFER), i.success = !0, t.notify(i)
        }), s.addListener(communication.BaseDelegate.FAIL, this, _onRelistAllFail), s.addListener(communication.BaseDelegate.CANCEL, this, _onRelistAllFail), s.execute(), t
    }, ItemService.prototype.clearSoldItems = function clearSoldItems(item) {
        function _onClearSoldSuccess(sender) {
            sender.clearListenersByScope(this), i.success = !0, item ? (this._removeItems(item), i.itemIds = [item.id], t.notify(i), getDefaultDispatcher().notify(enums.AppNotification.ITEM_CLEARSOLD, this, i)) : (repositories.Item.setDirty(enums.FUTItemPile.TRANSFER), repositories.Item.getTransferItems().observe(this, function(o, data) {
                o.unobserve(this);
                var l = s.reduce(function(t, item) {
                    var i, length = data.items.length;
                    for (i = 0; i < length; i++)
                        if (data.items[i].id === item.id) return t;
                    return t.push(item), t
                }, []);
                i.itemIds = l.map(function(item) {
                    return item.id
                }), t.notify(i), getDefaultDispatcher().notify(enums.AppNotification.ITEM_CLEARSOLD, this, i)
            }))
        }

        function _onClearSoldFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                i.error = error, t.notify(i)
            }.bind(this))
        }
        var t = new FUTObservable,
            i = new transferobjects.ItemServiceResponse,
            s = [];
        if (item) {
            utils.Debug.Assert(item.getAuctionData().isValid(), "Expected a valid auction.");
            var o = new communication.RemoveSoldItemDelegate(item.getAuctionData().tradeId);
            o.addListener(communication.BaseDelegate.SUCCESS, this, _onClearSoldSuccess), o.addListener(communication.BaseDelegate.FAIL, this, _onClearSoldFail), o.useClickShield(!0), o.send()
        } else repositories.Item.getTransferItems().observe(this, function(t, data) {
            t.unobserve(this), s = data.items;
            var i = new communication.RemoveSoldItemDelegate;
            i.addListener(communication.BaseDelegate.SUCCESS, this, _onClearSoldSuccess), i.addListener(communication.BaseDelegate.FAIL, this, _onClearSoldFail), i.useClickShield(!0), i.send()
        });
        return t
    }, ItemService.prototype.discard = function discard(t) {
        function _onDiscardComplete(s, data) {
            s.unobserve(this);
            var o = new transferobjects.ServiceResponse;
            if (o.success = data.success, o.status = data.status, o.data = {
                    itemIds: data.response.itemIds || []
                }, i.notify(o), data.success) {
                data.response.totalCredits && gUserModel.setCredits(data.response.totalCredits, !0);
                var l = [];
                Array.isArray(t) ? l = t.filter(function(item) {
                    return item.pile === enums.FUTItemPile.CLUB
                }) : t.pile === enums.FUTItemPile.CLUB && l.push(t), l.length > 0 && this._removeItemsFromSquads(l), this._removeItems(t), getDefaultDispatcher().notify(enums.AppNotification.ITEM_DISCARD, this, o.data)
            }
        }
        var i = new FUTObservable,
            s = services.Authentication;
        return Array.isArray(t) && (t = t.filter(function(item) {
            return item.isDiscardable()
        })), !Array.isArray(t) && t.isClubConsumable() ? accessobjects.Item.discardByResourceId(s, t).observe(this, _onDiscardComplete) : accessobjects.Item.discardByItemId(s, t).observe(this, _onDiscardComplete), i
    }, ItemService.prototype.combineLoans = function combineLoans(item) {
        var t = new FUTObservable,
            i = new transferobjects.ServiceResponse,
            s = services.Authentication;
        return item.isDuplicateLoanPlayer() ? accessobjects.Item.discardByItemId(s, item).observe(this, function _onCombineComplete(s, data) {
            s.unobserve(this), i.success = data.success, i.status = data.status, i.data = {
                itemIds: data.response.itemIds || []
            }, t.notify(i), data.success && (repositories.Item.getItemsById(item.duplicateId).observe(this, function(t, data) {
                data.items.length > 0 && repositories.Item.update(data.items[0])
            }), this._removeItems(item), getDefaultDispatcher().notify(enums.AppNotification.ITEM_DISCARD, this, i.data))
        }) : (utils.Debug.Assert(!1, "Attempted to combine loans from a an item that isn't a duplicate loaner."), i.success = !1, i.status = enums.HTTPStatusCode.BAD_REQUEST, t.notify(i)), t
    }, ItemService.prototype.redeem = function redeem(item) {
        function _onRedeemFail(sender, error) {
            sender.clearListenersByScope(this);
            var s = function() {
                i.error = error, t.notify(i)
            }.bind(this);
            NetworkErrorManager.handle(error, !1, s)
        }
        var t = new FUTObservable,
            i = new transferobjects.ItemServiceResponse;
        if (!item.isMiscItem()) return t.notify(i), t;
        var s = new communication.ConsumeUnlockableDelegate(item.id);
        return s.useClickShield(!0), s.addListener(communication.BaseDelegate.SUCCESS, this, function _onRedeemSuccess(sender, response) {
            sender.clearListenersByScope(this), services.Objectives.handlePayload(response.dynamicObjectivesUpdates), this._removeItems(item), item.isFreeCoins() ? (services.Notification.queue([gLocalization.lText("notification.coins.added"), enums.UINotificationType.POSITIVE]), gUserModel.updateCredits()) : item.isFreePack() ? (services.Notification.queue([gLocalization.lText("notification.pack.added"), enums.UINotificationType.POSITIVE]), repositories.User.getCurrent().incrementNumUnopenedPacks()) : item.isDraftToken() && (services.Notification.queue([gLocalization.lText("notification.drafttoken.added"), enums.UINotificationType.POSITIVE]), gUserModel.updateCredits()), i.success = !0, i.itemIds.push(item.id), t.notify(i), getDefaultDispatcher().notify(enums.AppNotification.ITEM_REDEEM, this, i)
        }), s.addListener(communication.BaseDelegate.FAIL, this, _onRedeemFail), s.addListener(communication.BaseDelegate.CANCEL, this, _onRedeemFail), s.send(), t
    }, ItemService.prototype.list = function list(item, t, i, duration) {
        function _onListSuccess(sender, response) {
            sender.clearListenersByScope(this), item.isStack() || item.id !== l || (item.getAuctionData().tradeId = utils.JS.isString(response.idStr) ? response.idStr : response.id.toString(), this.getAuctionInfo(item).observe(this, function(t, data) {
                t.unobserve(this), o.success = !0, o.itemIds.push(item.id), s.notify(o), getDefaultDispatcher().notify(enums.AppNotification.ITEM_LIST, this, o)
            }))
        }

        function _onListFail(sender, error) {
            sender.clearListenersByScope(this);
            var t = function() {
                error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && gUserModel.setTradeAccess(models.UserModel.TRADE_ACCESS.BLACKLIST), o.error = error, s.notify(o)
            }.bind(this);
            NetworkErrorManager.handle(error, !1, t)
        }

        function _runListDelegate(id) {
            var s = new communication.ListItemDelegate({
                itemId: id,
                startingBid: t,
                buyNowPrice: i,
                duration: duration
            });
            s.addListener(communication.BaseDelegate.SUCCESS, this, _onListSuccess), s.addListener(communication.BaseDelegate.FAIL, this, _onListFail), s.useClickShield(!0), s.send()
        }
        var s = new FUTObservable,
            o = new transferobjects.ItemServiceResponse,
            l = 0;
        return item.pile !== enums.FUTItemPile.TRANSFER ? this.move(item, enums.FUTItemPile.TRANSFER).observe(this, function(t, data) {
            t.unobserve(this), data.success && data.itemIds.length > 0 ? (l = data.itemIds[0], _runListDelegate.call(this, l)) : (o.error = data.error, s.notify(o))
        }) : (l = item.id, _runListDelegate.call(this, l)), s
    }, ItemService.prototype.getMarketData = function getMarketData(t) {
        var i = new FUTObservable,
            s = new transferobjects.ItemServiceResponse,
            o = [],
            l = !0;
        if (0 === (o = Array.isArray(t) ? t.reduce(function(t, item) {
                var i = item.getAuctionData();
                return (!i.isValid() || i.isClosedTrade() && !i.tradeOwner || i.isExpired() && i.tradeOwner) && item.isValid() && !item.concept && !item.untradeable && t.push(item), t
            }, []) : [t]).length) return s.success = !0, i.notify(s), i;
        var u = new communication.MarketDataDelegate(o, l);
        return u.addListener(communication.BaseDelegate.SUCCESS, this, function _onMarketDataSuccess(sender, response) {
            sender.clearListenersByScope(this), gSettingsModel.enableService(models.SettingsModel.MARKET_DATA_ENABLED), s.success = !0, s.itemIds = o.map(function(item) {
                return item.id
            }), response.forEach(function(data) {
                var item = utils.JS.find(o, function(t, index) {
                    return l ? t.id === data.itemId : t.resourceId === data.defId
                });
                item && item.setItemPriceLimits(new transferobjects.ItemPriceLimits(data.maxPrice, data.minPrice))
            }), i.notify(s)
        }), u.addListener(communication.BaseDelegate.FAIL, this, function _onMarketDataFail(sender, error) {
            sender.clearListenersByScope(this);
            var t = function() {
                enums.NetworkError.SERVICE_UNAVAILABLE_ERROR === error.getCode() && gSettingsModel.isMarketDataEnabled() && gSettingsModel.disableService(models.SettingsModel.MARKET_DATA_ENABLED), s.error = error, i.notify(s)
            }.bind(this);
            NetworkErrorManager.handle(error, !1, t)
        }), u.useClickShield(!0), u.send(), i
    }, ItemService.prototype.getAuctionInfo = function getAuctionInfo(t) {
        var i = new FUTObservable,
            s = new transferobjects.ItemServiceResponse,
            o = Array.isArray(t) ? t : [t];
        if (0 === (o = o.filter(function(item) {
                return item.getAuctionData().isValid()
            })).length) return i.notify(s), i;
        var l = new communication.AuctionInfoDelegate(o);
        return l.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetAuctionInfoSuccess(sender, response) {
            sender.clearListenersByScope(this);
            var t = response.auctionInfo.map(function(t) {
                var i = new entities.Auction;
                return i.parseAuctionDataObject(t), i
            });
            Array.isArray(response.auctionInfo) && response.auctionInfo.forEach(function(t) {
                var i = t.tradeId,
                    itemId = t.itemData.id;
                if (0 !== itemId) {
                    var s = "Trade" + i,
                        item = utils.JS.find(o, function(result) {
                            return result.id === s
                        });
                    utils.JS.isValid(item) && (item.id = itemId)
                }
            }), utils.JS.isNumber(response.credits) && response.credits !== gUserModel.getCredits() && gUserModel.setCredits(response.credits, !0), o.forEach(function(item) {
                if (response.duplicateItemIdList) {
                    var duplicate = utils.JS.find(response.duplicateItemIdList, function(t) {
                        return t.itemId === item.id
                    });
                    duplicate && (item.duplicateId = duplicate.duplicateItemId)
                }
                var i = item.getAuctionData(),
                    s = utils.JS.find(t, function(result) {
                        return result.compareTo(i)
                    });
                s && (i.update(s), i.isClosedTrade() && i.isHighestBid() ? item.pile = enums.FUTItemPile.INBOX : i.isBought() && (item.pile = enums.FUTItemPile.PURCHASED))
            }), s.success = !0, s.itemIds = o.map(function(item) {
                return item.id
            }), i.notify(s)
        }), l.addListener(communication.BaseDelegate.FAIL, this, function _onGetAuctionInfoFail(sender, error) {
            sender.clearListenersByScope(this);
            var t = function() {
                error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && gUserModel.setTradeAccess(models.UserModel.TRADE_ACCESS.BLACKLIST), s.error = error, i.notify(s)
            }.bind(this);
            NetworkErrorManager.handle(error, !1, t)
        }), l.send(), i
    }, ItemService.prototype.applyTo = function applyTo(t, i) {
        function _onApplySuccess(sender, data) {
            sender.clearListenersByScope(this), services.Objectives.handlePayload(data.dynamicObjectivesUpdates), data.itemData.forEach(function(item) {
                for (var t = i.length; t-- > 0;) {
                    var s = i[t];
                    if (s.id === item.id) {
                        if (s.contract = item.contract, s.leagueId = item.leagueId, s.isPlayer()) {
                            s.fitness = item.fitness, s.injuryGames = item.injuryGames, s.injuryType = item.injuryType, s.playStyle = item.playStyle;
                            var position = repositories.Squad.getPositionByUniqueName(item.preferredPosition);
                            s.preferredPosition = position ? position.getId() : 0, item.trainingItem && s.setTrainingItem(factories.Item.createItem(item.trainingItem))
                        }
                        repositories.Item.update(s), s.onDataUpdated.notify(s);
                        break
                    }
                }
                o.itemIds.push(item.id)
            }, this), this._removeItems(t), services.Notification.queue([gLocalization.lText("notification.item.appliedConsumable"), enums.UINotificationType.NEUTRAL]), o.success = !0, s.notify(o), getDefaultDispatcher().notify(enums.AppNotification.ITEM_APPLY, this, o)
        }

        function _onApplyFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !0, function() {
                services.Notification.queue([gLocalization.lText("notification.item.unableToApplyConsumable"), enums.UINotificationType.NEGATIVE]), o.error = error, s.notify(o)
            }.bind(this))
        }

        function _performApply() {
            if (!((i = Array.isArray(i) ? i.filter(t.canApplyTo, t) : t.canApplyTo(i) ? [i] : []).length > 0)) return utils.Debug.Assert(!1, "Unable to apply item."), void s.notify(o);
            utils.Debug.Assert(t.isTeamFitness() || !t.isTeamFitness() && 1 === i.length, "Cannot apply single-use consumables to multiple items. Will only apply to one."), !t.isTeamFitness() && i.length > 1 && (i = i.slice(0, 1));
            var l = new communication.ApplyConsumableDelegate(t.resourceId, i.map(function(item) {
                return item.id
            }));
            l.addListener(communication.BaseDelegate.SUCCESS, this, _onApplySuccess), l.addListener(communication.BaseDelegate.FAIL, this, _onApplyFail), l.useClickShield(!0), l.send()
        }
        var s = new FUTObservable,
            o = new transferobjects.ItemServiceResponse;
        return t.isClubConsumable() ? _performApply.call(this) : this.move(t, enums.FUTItemPile.CLUB).observe(this, function(t, data) {
            t.unobserve(this), data.success ? _performApply.call(this) : (services.Notification.queue([gLocalization.lText("notification.item.unableToApplyConsumable"), enums.UINotificationType.NEGATIVE]), o.error = data.error, s.notify(o))
        }), s
    }, ItemService.prototype.target = function target(t) {
        var i = new FUTObservable,
            s = new transferobjects.ItemServiceResponse,
            o = [];
        if (Array.isArray(t)) o = t.filter(function(item) {
            var t = item.getAuctionData();
            return t.isValid() && !t.tradeOwner
        });
        else {
            var l = t.getAuctionData();
            l.isValid() && !l.tradeOwner && o.push(t)
        }
        if (0 === o.length) return utils.Debug.Assert(!1, "No valid auctions to watch."), i.notify(s), i;
        var u = new communication.WatchDelegate(o.map(function(item) {
            return item.getAuctionData()
        }));
        return u.addListener(communication.BaseDelegate.SUCCESS, this, function _onWatchSuccess(sender) {
            sender.clearListenersByScope(this), o.forEach(function(item) {
                item.getAuctionData().watched = !0, repositories.Item.add(item), s.itemIds.push(item.id)
            }), s.success = !0, i.notify(s), getDefaultDispatcher().notify(enums.AppNotification.ITEM_WATCH, this, s)
        }), u.addListener(communication.BaseDelegate.FAIL, this, function _onWatchFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !0, function() {
                error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && gUserModel.setTradeAccess(models.UserModel.TRADE_ACCESS.BLACKLIST), s.error = error, i.notify(s)
            }.bind(this))
        }), u.useClickShield(!0), u.send(), i
    }, ItemService.prototype.untarget = function untarget(t) {
        var i = new FUTObservable,
            s = new transferobjects.ItemServiceResponse,
            o = [];
        if (Array.isArray(t) ? o = t.filter(function(item) {
                return item.getAuctionData().watched
            }) : t.getAuctionData().watched && o.push(t), 0 === o.length) return utils.Debug.Assert(!1, "No watched auctions to unwatch."), i.notify(s), i;
        var l = new communication.UnWatchDelegate(o.map(function(item) {
            return item.getAuctionData()
        }));
        return l.addListener(communication.BaseDelegate.SUCCESS, this, function _onUnwatchSuccess(sender) {
            sender.clearListenersByScope(this), repositories.Item.setDirty(enums.FUTItemPile.INBOX), o.forEach(function(item) {
                this._removeItems(item), item.getAuctionData().watched = !1, s.itemIds.push(item.id)
            }, this), s.success = !0, i.notify(s), getDefaultDispatcher().notify(enums.AppNotification.ITEM_UNWATCH, this, s)
        }), l.addListener(communication.BaseDelegate.FAIL, this, function _onUnwatchFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !0, function() {
                error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && gUserModel.setTradeAccess(models.UserModel.TRADE_ACCESS.BLACKLIST), s.error = error, i.notify(s)
            }.bind(this))
        }), l.useClickShield(!0), l.send(), i
    }, ItemService.prototype.activate = function activate(item, t) {
        function _onActivateComplete(t, data) {
            if (t.unobserve(this), s.success = data.success, s.error = data.error, data.success) services.Notification.queue([gLocalization.lText("notification.item.setAsActive"), enums.UINotificationType.NEUTRAL]), repositories.Item.setActiveItem(item), s.itemIds.push(item.id);
            else if (services.Notification.queue([gLocalization.lText("infopanel.label.makeActive"), enums.UINotificationType.NEGATIVE]), data.error) {
                if (data.error.getCode() !== enums.NetworkError.PERMISSION_DENIED) return void NetworkErrorManager.handle(data.error, !1, function() {
                    i.notify(s)
                });
                services.Notification.queue([gLocalization.lText("popup.error.NoSuchCardTitle"), enums.UINotificationType.NEGATIVE])
            }
            i.notify(s), getDefaultDispatcher().notify(enums.AppNotification.ITEM_ACTIVATE, this, s)
        }
        var i = new FUTObservable,
            s = new transferobjects.ItemServiceResponse;
        return item.pile !== enums.FUTItemPile.CLUB ? this.move(item, enums.FUTItemPile.CLUB).observe(this, function(o, data) {
            o.unobserve(this), data.success ? item.activate(t).observe(this, _onActivateComplete) : (services.Notification.queue([gLocalization.lText("infopanel.label.makeActive"), enums.UINotificationType.NEGATIVE]), s.error = data.error, i.notify(s))
        }) : item.activate(t).observe(this, _onActivateComplete), i
    }, ItemService.prototype.bid = function bid(item, t) {
        var i = new FUTObservable,
            s = new transferobjects.ItemServiceResponse,
            o = item.getAuctionData().watched;
        return item.bid(t).observe(this, function _onBidComplete(t, data) {
            t.unobserve(this), s.success = data.success, data.success ? (services.Objectives.handlePayload(data.dynamicObjectivesUpdates), o && item.getAuctionData().isBought() && repositories.Item.setDirty(enums.FUTItemPile.INBOX), s.itemIds = [item.id], repositories.Item.add(item), i.notify(s), getDefaultDispatcher().notify(enums.AppNotification.ITEM_BID, this, s)) : data.error ? (data.error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && gUserModel.setTradeAccess(models.UserModel.TRADE_ACCESS.BLACKLIST), s.error = data.error, i.notify(s)) : i.notify(s)
        }), i
    }, ItemService.prototype.getItemDataByDefId = function getItemDataByDefId(t) {
        var i = new FUTObservable,
            response = new transferobjects.ServiceResponse,
            s = services.Authentication;
        return accessobjects.Item.getItemDataByDefId(s, t).observe(this, function _onGetItemDataByDefIdComplete(t, s) {
            t.unobserve(this), response.success = s.success, response.status = s.status, response.data = {
                item: s.response.item
            }, i.notify(response)
        }), i
    }, ItemService.prototype._replaceItemInConceptSquads = function _replaceItemInConceptSquads(item) {
        item.isPlayer() && repositories.Squad.getSquads().observe(this, function(t, data) {
            var i = repositories.SBC.getCachedSets().reduce(function(t, set) {
                return set.challenges.length > 0 && set.challenges.forEach(function(i) {
                    i.squad && t.push(i.squad)
                }, this), t
            }, []);
            data.concat(i).forEach(function(t) {
                var index = t.containsDreamItem(item);
                index >= 0 && t.addItemToSlot(index, item)
            }, this)
        })
    }, ItemService.prototype._removeItemsFromSquads = function _removeItemsFromSquads(t) {
        function _removeItemFromSquad(t, item) {
            (item.isPlayer() || item.isManager()) && t.forEach(function(t) {
                t.containsItem(item, !0) && t.removeItem(item)
            }, this)
        }
        repositories.Squad.getSquads(!0).observe(this, function(i, data) {
            Array.isArray(t) ? t.forEach(function(t) {
                _removeItemFromSquad.call(this, data, t)
            }, this) : _removeItemFromSquad.call(this, data, t)
        })
    }, ItemService.prototype._removeItems = function _removeItems(t) {
        function _checkForConsumables(item) {
            item.isClubConsumable() && item.decreaseStackCount()
        }
        Array.isArray(t) ? t.forEach(function(t) {
            _checkForConsumables.call(this, t)
        }, this) : _checkForConsumables.call(this, t), repositories.Item.remove(t)
    }, new ItemService
}(), NamespaceManager.Register("transferobjects"), transferobjects.Notification = function() {
    return function NotificationDTO(message, type) {
        this.message = message, Object.defineProperty(this, "message", {
            writable: !1
        }), this.type = type, Object.defineProperty(this, "type", {
            writable: !1
        })
    }
}(), NamespaceManager.Register("services"), services.Notification = function() {
    function pushNotification() {
        if (this._queue.length > 0) {
            t || (t = setInterval(pushNotification.bind(this), 2e3));
            var i = this._queue.shift();
            this.display.notify(i)
        } else 0 === this._queue.length && (t = clearInterval(t))
    }

    function NotificationService() {
        this.display = new FUTObservable, Object.freeze(this.display), this._queue = [], Object.defineProperty(this, "_queue", {
            writable: !1,
            enumerable: !1
        })
    }
    var t;
    return NotificationService.prototype.clearAll = function clearAll() {
        t = clearInterval(t), this._queue.length = 0
    }, NotificationService.prototype.queue = function queue(i) {
        Array.prototype.slice.call(arguments).forEach(function(data) {
            if (Array.isArray(data)) {
                var t = new transferobjects.Notification(data[0], data[1]);
                this._queue.push(t)
            } else data instanceof transferobjects.Notification && this._queue.push(data)
        }, this), t || pushNotification.call(this)
    }, new NotificationService
}(), NamespaceManager.Register("repositories"), repositories.Objectives = function ObjectivesRepository() {
    this._objectives = new FUTHashTable({}), Object.defineProperty(this, "_objectives", {
        writable: !1,
        enumerable: !0
    }), this._cacheExpiration = 0, Object.defineProperty(this, "_cacheExpiration", {
        writable: !0,
        enumerable: !0
    })
}, repositories.Objectives.prototype.reset = function reset() {
    this._objectives.clear(), this._cacheExpiration = 0
}, repositories.Objectives.prototype.setCacheTimestamp = function setCacheTimestamp(timestamp) {
    this._cacheExpiration = timestamp
}, repositories.Objectives.prototype.isDirty = function isDirty() {
    return 0 === this._cacheExpiration || this._cacheExpiration < Math.round(Date.now() / 1e3)
}, repositories.Objectives.prototype.getObjectives = function getObjectives() {
    return this._objectives.values()
}, repositories.Objectives.prototype.getObjectiveById = function getObjectiveById(id) {
    return this._objectives.get(id)
}, repositories.Objectives.prototype.storeObjectives = function storeObjectives(t) {
    Array.isArray(t) ? t.forEach(function(t) {
        this._objectives.set(t.id, t)
    }, this) : this._objectives.set(t.id, t)
}, NamespaceManager.Register("services"), services.Objectives = function() {
    function ObjectivesService() {
        this._repository = new repositories.Objectives
    }
    return ObjectivesService.prototype.reset = function reset() {
        this._repository.reset()
    }, ObjectivesService.prototype.getObjectives = function getObjectives() {
        var event = new FUTObservable,
            t = new transferobjects.ServiceResponse;
        return t.data = {
            objectives: [],
            autoClaimedRewards: !1
        }, gSettingsModel.isObjectivesEnabled() ? this._repository.isDirty() ? (accessobjects.Objectives.getObjectives(services.Authentication).observe(this, function _onObjectivesRetrieved(i, s) {
            if (i.unobserve(this), t.success = s.success, t.status = s.status, t.success) {
                var o = s.response.dailyObjectives,
                    l = s.response.weeklyObjectives,
                    u = s.response.dailyAutoClaimed || s.response.weeklyAutoClaimed,
                    h = o.concat(l),
                    p = Math.round(Date.now() / 1e3) + 3600,
                    m = o.length > 0 ? Math.min(p, o[0].expiryTime) : p,
                    _ = l.length > 0 ? Math.min(p, l[0].expiryTime) : p,
                    g = Math.min(m, _);
                this._repository.reset(), this._repository.setCacheTimestamp(Math.max(g, Date.now() / 1e3 + 30)), this._repository.storeObjectives(h), t.data.objectives = h, t.data.autoClaimedRewards = u
            } else this._repository.setCacheTimestamp(Date.now() / 1e3 + 30), t.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.OBJECTIVES_ENABLED), services.Notification.queue([gLocalization.lText("notification.objectives.loadFailed"), enums.UINotificationType.NEGATIVE]);
            event.notify(t)
        }), event) : (t.success = !0, t.status = enums.HTTPStatusCode.OK, t.data.objectives = this._repository.getObjectives(), event.notify(t), event) : (t.status = enums.HTTPStatusCode.SERVICE_IS_DISABLED, event.notify(t), event)
    }, ObjectivesService.prototype.claimById = function claimById(id) {
        function _onObjectiveClaimed(s, o) {
            if (s.unobserve(this), i.success = o.success, i.status = o.status, o.success) {
                t.markAsRedeemed();
                var l = o.response.awards;
                i.data = {
                    awards: l
                }, this._handleClaim(l)
            } else i.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.OBJECTIVES_ENABLED), services.Notification.queue([gLocalization.lPrint("notification.objectives.claimFailed", [t.name]), enums.UINotificationType.NEGATIVE]);
            event.notify(i)
        }
        var t, event = new FUTObservable,
            i = new transferobjects.ServiceResponse;
        return this.getObjectives().observe(this, function(i) {
            i.unobserve(this), (t = this._repository.getObjectiveById(id)) && accessobjects.Objectives.claimById(services.Authentication, t.id).observe(this, _onObjectiveClaimed)
        }), event
    }, ObjectivesService.prototype.claimAll = function claimAll() {
        function _onObjectivesClaimed(i, s) {
            i.unobserve(this);
            var o = new transferobjects.ServiceResponse;
            if (o.success = s.success, o.status = s.status, o.success) {
                t.forEach(function(t) {
                    t.isUnclaimed() && t.markAsRedeemed()
                });
                var l = s.response.awards;
                o.data = {
                    awards: l
                }, this._handleClaim(l)
            } else o.status === enums.HTTPStatusCode.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.OBJECTIVES_ENABLED), services.Notification.queue([gLocalization.lText("notification.objectives.claimAllFailed"), enums.UINotificationType.NEGATIVE]);
            event.notify(o)
        }
        var t, event = new FUTObservable;
        return this.getObjectives().observe(this, function(i, s) {
            i.unobserve(this), s.success ? (t = s.data.objectives, accessobjects.Objectives.claimAll(services.Authentication).observe(this, _onObjectivesClaimed)) : event.notify(s)
        }), event
    }, ObjectivesService.prototype.handlePayload = function handlePayload(data) {
        if (data) {
            var t, i = data.completedDailyObjectives || [],
                s = data.completedWeeklyObjectives || [];
            this.getObjectives().observe(this, function(o) {
                o.unobserve(this), i.concat(s).forEach(function(i) {
                    if ((t = this._repository.getObjectiveById(i)).isDaily) {
                        var s = {
                            moment: PinManager.MILESTONE_EVT_MOMENT,
                            mode: PinManager.MILESTONE_EVT_MODE,
                            type: enums.PIN.MILESTONE_EVT_TYPE.OBJECTIVES,
                            mstid: enums.PIN.MILESTONE_EVT_ID.DAILY_OBJECTIVE + t.id
                        };
                        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, s))
                    }
                    t.markAsCompleted(), services.Notification.queue([gLocalization.lPrint("notification.objectives.completedObjective", [t.name]), enums.UINotificationType.POSITIVE])
                }, this), data.progressOnWeeklyObjectives && (data.progressOnWeeklyObjectives.forEach(function(i) {
                    (t = this._repository.getObjectiveById(i.objectiveId)) && (t.currentProgress = i.progressCount)
                }, this), services.Notification.queue([gLocalization.lPrint("notification.objectives.weeklyObjectiveProgress", [t.name]), enums.UINotificationType.POSITIVE])), (data.newDailyObjectives || data.newWeeklyObjectives) && this.reset()
            })
        }
    }, ObjectivesService.prototype._handleClaim = function _handleClaim(t) {
        var i = !1,
            s = !1,
            o = !1;
        t.forEach(function(a) {
            i = i || a.isItem, s = s || a.isPack, o = o || a.isCoin
        }, this), i && (services.Notification.queue([gLocalization.lText("notification.item.added"), enums.UINotificationType.POSITIVE]), repositories.Item.setDirty(enums.FUTItemPile.PURCHASED)), s && (services.Notification.queue([gLocalization.lText("notification.pack.added"), enums.UINotificationType.POSITIVE]), repositories.User.getCurrent().incrementNumUnopenedPacks()), o && (services.Notification.queue([gLocalization.lText("notification.coins.added"), enums.UINotificationType.POSITIVE]), gUserModel.updateCredits(!0))
    }, new ObjectivesService
}(), NamespaceManager.Register("accessobjects"), accessobjects.Onboarding = function() {
    function OnboardingDAO() {
        FUTObject.call(this), this.UTAS_REQUEST_PATH = "/ut/game/" + GAME_NAME + "/", Object.defineProperty(this, "UTAS_REQUEST_PATH", {
            writable: !1,
            enumerable: !0
        })
    }
    return utils.JS.inherits(OnboardingDAO, FUTObject), OnboardingDAO.prototype.getHistorical = function getHistorical(t) {
        function _mapToRewardDTO(t) {
            return new transferobjects.LoyaltyReward(t)
        }
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "user/historical"), s.observe(this, function _onGetHistoricalComplete(t, data) {
            t.unobserve(this);
            var key, s = new transferobjects.FUTHttpResponse;
            for (key in s) s.hasOwnProperty(key) && data.hasOwnProperty(key) && (s[key] = data[key]);
            s.response = {
                name: data.success ? data.response.clubName : "",
                abbr: data.success ? data.response.clubAbbr : "",
                rewards: data.success && data.response.returningUserRewards ? data.response.returningUserRewards.map(_mapToRewardDTO) : []
            }, i.notify(s)
        }), s.send(), i
    }, OnboardingDAO.prototype.createClub = function createClub(t, i, s) {
        var o = new FUTObservable,
            l = new FUTUtasHttpRequest(t);
        return l.setUrl(this.UTAS_REQUEST_PATH + "user"), l.setRequestType(enums.HTTPRequestMethod.POST), l.setRequestBody({
            clubName: i,
            clubAbbr: s,
            purchased: !0
        }), l.observe(this, function _onCreateClubComplete(t, data) {
            t.unobserve(this);
            var i = new transferobjects.FUTHttpResponse,
                s = utils.JS.isObject(data.response);
            i.success = data.success, i.status = data.status, i.response = {
                login: s ? data.response.login : {},
                starterPack: s ? data.response.starterPack : []
            }, i.maxAge = data.maxAge, i.retryAfter = data.retryAfter, o.notify(data)
        }), l.send(), o
    }, OnboardingDAO.prototype.getState = function getState(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "clientdata/onboarding"), s.observe(this, function _onGetStateComplete(t, data) {
            t.unobserve(this), i.notify(data)
        }), s.send(), i
    }, OnboardingDAO.prototype.setState = function setState(t, state) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(+this.UTAS_REQUEST_PATH + "clientdata/onboarding"), s.setRequestType(enums.HTTPRequestMethod.PUT), s.setRequestBody({
            entries: [{
                key: 0,
                value: state
            }]
        }), s.observe(this, function _onSetStateComplete(t, data) {
            t.unobserve(this), i.notify(data)
        }), s.send(), i
    }, OnboardingDAO.prototype.selectDefaultPack = function selectDefaultPack(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "user/action/ICEBREAKER_DEFAULT_STARTER_PACK_SELECTED"), s.setRequestType(enums.HTTPRequestMethod.POST), s.observe(this, function _onSelectDefaultPackComplete(t, data) {
            t.unobserve(this), i.notify(data)
        }), s.send(), i
    }, OnboardingDAO.prototype.selectCountry = function selectCountry(t, i) {
        var s = new FUTObservable,
            o = new FUTUtasHttpRequest(t);
        return o.setUrl(this.UTAS_REQUEST_PATH + "user/action/ONBOARDING_COUNTRY_" + i + "_SELECTED"), o.setRequestType(enums.HTTPRequestMethod.POST), o.observe(this, function _onSelectCountryComplete(t, data) {
            t.unobserve(this);
            var key, o = new transferobjects.FUTHttpResponse;
            for (key in o) o.hasOwnProperty(key) && data.hasOwnProperty(key) && (o[key] = data[key]);
            o.response = {
                countryId: i
            }, s.notify(o)
        }), o.send(), s
    }, OnboardingDAO.prototype.getBadges = function getBadges(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "onboarding/badges"), s.observe(this, function _onGetBadgesComplete(t, data) {
            t.unobserve(this);
            var key, s = new transferobjects.FUTHttpResponse;
            for (key in s) s.hasOwnProperty(key) && data.hasOwnProperty(key) && (s[key] = data[key]);
            s.response = {
                badges: data.success ? factories.Item.generateItemsFromItemData(data.response.badgeItemDataList) : []
            }, i.notify(s)
        }), s.send(), i
    }, OnboardingDAO.prototype.selectBadge = function selectBadge(t, i) {
        var s = new FUTObservable,
            o = new FUTUtasHttpRequest(t);
        return o.setUrl(this.UTAS_REQUEST_PATH + "onboarding/badge/" + i), o.setRequestType(enums.HTTPRequestMethod.POST), o.observe(this, function _onSelectBadgeComplete(t, data) {
            t.unobserve(this);
            var key, i = new transferobjects.FUTHttpResponse;
            for (key in i) i.hasOwnProperty(key) && data.hasOwnProperty(key) && (i[key] = data[key]);
            i.response = {
                badgeId: data.success ? data.response.badgeId : 0
            }, s.notify(i)
        }), o.send(), s
    }, OnboardingDAO.prototype.getKits = function getKits(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "onboarding/kits"), s.observe(this, function _onGetKitsComplete(t, data) {
            t.unobserve(this);
            var key, s = new transferobjects.FUTHttpResponse;
            for (key in s) s.hasOwnProperty(key) && data.hasOwnProperty(key) && (s[key] = data[key]);
            s.response = {
                homeKits: data.success ? factories.Item.generateItemsFromItemData(data.response.homeItemDataList) : [],
                awayKits: data.success ? factories.Item.generateItemsFromItemData(data.response.awayItemDataList) : []
            }, i.notify(s)
        }), s.send(), i
    }, OnboardingDAO.prototype.selectKits = function selectKits(t, i, s) {
        var o = new FUTObservable,
            l = new FUTUtasHttpRequest(t);
        return l.setUrl(this.UTAS_REQUEST_PATH + "onboarding/kits"), l.setRequestType(enums.HTTPRequestMethod.POST), l.setRequestBody({
            homeKitId: i,
            awayKitId: s
        }), l.observe(this, function _onSelectKitsComplete(t, data) {
            t.unobserve(this);
            var key, i = new transferobjects.FUTHttpResponse;
            for (key in i) i.hasOwnProperty(key) && data.hasOwnProperty(key) && (i[key] = data[key]);
            i.response = {
                awayKitId: data.success ? data.response.awayKitId : 0,
                homeKitId: data.success ? data.response.homeKitId : 0
            }, o.notify(i)
        }), l.send(), o
    }, OnboardingDAO.prototype.getLoanPlayers = function getLoanPlayers(t) {
        var i = new FUTObservable,
            s = new FUTUtasHttpRequest(t);
        return s.setUrl(this.UTAS_REQUEST_PATH + "loan/players"), s.observe(this, function _onGetLoanPlayersComplete(t, data) {
            t.unobserve(this);
            var s = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response);
            s.success = data.success, s.status = data.status, s.response = {
                items: o ? data.response.loans.map(function(t) {
                    return factories.Item.createItem(t.itemData)
                }) : []
            }, s.maxAge = data.maxAge, s.retryAfter = data.retryAfter, i.notify(s)
        }), s.send(), i
    }, OnboardingDAO.prototype.grantLoanPlayer = function grantLoanPlayer(t, i) {
        var s = new FUTObservable,
            o = new FUTUtasHttpRequest(t);
        return o.setUrl(this.UTAS_REQUEST_PATH + "loan/player/" + i.toString()), o.setRequestType(enums.HTTPRequestMethod.PUT), o.observe(this, function _onGrantLoanPlayerComplete(t, data) {
            t.unobserve(this);
            var i = new transferobjects.FUTHttpResponse,
                o = utils.JS.isObject(data.response);
            i.success = data.success, i.status = data.status, i.response = {
                item: o ? factories.Item.createItem(data.response) : null
            }, i.maxAge = data.maxAge, i.retryAfter = data.retryAfter, s.notify(i)
        }), o.send(), s
    }, new OnboardingDAO
}(), NamespaceManager.Register("services"), services.Onboarding = function() {
    function OnboardingService() {
        FUTObject.call(this)
    }
    return utils.JS.inherits(OnboardingService, FUTObject), OnboardingService.prototype.getCountries = function getCountries() {
        var t = new FUTObservable,
            i = new transferobjects.ServiceResponse;
        return i.success = !0, i.status = enums.HTTPStatusCode.OK, i.data = {
            countries: [enums.Country.ENGLAND, enums.Country.BRAZIL, enums.Country.FRANCE, enums.Country.ARGENTINA, enums.Country.GERMANY, enums.Country.ITALY, enums.Country.SPAIN, enums.Country.PORTUGAL, enums.Country.NETHERLANDS]
        }, t.notify(i), t
    }, OnboardingService.prototype.selectDefaultPack = function selectDefaultPack() {
        var t = new FUTObservable,
            i = services.Authentication,
            s = new transferobjects.ServiceResponse;
        return accessobjects.Onboarding.selectDefaultPack(i).observe(this, function _onSelectDefaultPackComplete(i, o) {
            i.unobserve(this), s.success = o.success, s.status = o.status, t.notify(s)
        }), t
    }, OnboardingService.prototype.selectCountry = function selectCountry(id) {
        var t = new FUTObservable,
            i = services.Authentication,
            s = new transferobjects.ServiceResponse,
            index = utils.FUTData.mapNationIdToOnboardingCountryId(id);
        return 0 === index ? (utils.Debug.Assert(!1, "Encountered an unsupported nation ID."), s.success = !1, s.status = enums.HTTPStatusCode.BAD_REQUEST, t.notify(s)) : accessobjects.Onboarding.selectCountry(i, index).observe(this, function _onSelectCountryComplete(i, o) {
            i.unobserve(this), s.success = o.success, s.status = o.status, s.data = {
                countryId: o.response.countryId
            }, t.notify(s)
        }), t
    }, OnboardingService.prototype.getBadges = function getBadges() {
        var t = new FUTObservable,
            i = services.Authentication;
        return accessobjects.Onboarding.getBadges(i).observe(this, function _onGetBadgesComplete(i, s) {
            i.unobserve(this);
            var o = new transferobjects.ServiceResponse;
            o.success = s.success, o.status = s.status, o.data = {
                badges: s.response.badges || []
            }, t.notify(o)
        }), t
    }, OnboardingService.prototype.selectBadge = function selectBadge(t) {
        var i = new FUTObservable,
            s = services.Authentication,
            o = new transferobjects.ServiceResponse;
        return t.isBadge() ? accessobjects.Onboarding.selectBadge(s, t.getDefId()).observe(this, function _onSelectBadgeComplete(s, l) {
            s.unobserve(this), l.success && (t.state = enums.ItemState.ACTIVE_BADGE, t.pile = enums.FUTItemPile.CLUB, repositories.Item.add(t)), o.success = l.success, o.status = l.status, o.data = {
                badgeId: l.response.badgeId
            }, i.notify(o)
        }) : (utils.Debug.Assert(!1, "Expected a badge item when selecting a badge."), o.success = !1, o.status = enums.HTTPStatusCode.BAD_REQUEST, i.notify(o)), i
    }, OnboardingService.prototype.getKits = function getKits() {
        var t = new FUTObservable,
            i = services.Authentication;
        return accessobjects.Onboarding.getKits(i).observe(this, function _onGetKitsComplete(i, s) {
            i.unobserve(this);
            var o = new transferobjects.ServiceResponse;
            o.success = s.success, o.status = s.status, o.data = {
                homeKits: s.response.homeKits || [],
                awayKits: s.response.awayKits || []
            }, t.notify(o)
        }), t
    }, OnboardingService.prototype.selectKits = function selectKits(t, i) {
        var s = new FUTObservable,
            o = services.Authentication,
            l = new transferobjects.ServiceResponse;
        return t.isKit() && i.isKit() ? accessobjects.Onboarding.selectKits(o, t.getDefId(), i.getDefId()).observe(this, function _onSelectKitsComplete(o, u) {
            o.unobserve(this), u.success && (t.state = enums.ItemState.ACTIVE_HOME_KIT, t.pile = enums.FUTItemPile.CLUB, i.state = enums.ItemState.ACTIVE_AWAY_KIT, i.pile = enums.FUTItemPile.CLUB, repositories.Item.add([t, i])), l.success = u.success, l.status = u.status, l.data = {
                awayKitId: u.response.awayKitId,
                homeKitId: u.response.homeKitId
            }, s.notify(l)
        }) : (utils.Debug.Assert(t.isKit(), "Expected a kit item when selecting a home kit."), utils.Debug.Assert(i.isKit(), "Expected a kit item when selecting an away kit."), l.success = !1, l.status = enums.HTTPStatusCode.BAD_REQUEST, s.notify(l)), s
    }, OnboardingService.prototype.getLoanPlayers = function getLoanPlayers() {
        var t = new FUTObservable,
            i = services.Authentication,
            s = new transferobjects.ServiceResponse;
        return accessobjects.Onboarding.getLoanPlayers(i).observe(this, function _onGetLoanPlayersComplete(i, o) {
            i.unobserve(this), s.data = {
                items: o.response.items || []
            }, s.success = o.success, s.status = o.status, t.notify(s)
        }), t
    }, OnboardingService.prototype.grantLoanPlayer = function grantLoanPlayer(item) {
        var t = new FUTObservable,
            i = services.Authentication,
            s = new transferobjects.ServiceResponse;
        return item.isLoaned() ? accessobjects.Onboarding.grantLoanPlayer(i, item.getDefId()).observe(this, function _onGrantLoanPlayerComplete(i, o) {
            i.unobserve(this), s.data = {
                item: o.response.item || null
            }, s.success = o.success, s.status = o.status, t.notify(s)
        }) : (s.success = !1, s.status = enums.HTTPStatusCode.BAD_REQUEST, t.notify(s)), t
    }, OnboardingService.prototype.createClub = function createClub() {
        function _onCreateClubComplete(i, response) {
            i.unobserve(this), s.success = response.success, s.status = response.status, response.success && (s.data = response.data), t.notify(s)
        }
        var t = new FUTObservable,
            i = services.Authentication,
            s = new transferobjects.ServiceResponse;
        return accessobjects.Onboarding.getHistorical(i).observe(this, function _onGetHistoricalComplete(o, l) {
            if (o.unobserve(this), l.success) {
                var data = l.response,
                    u = i.getCurrentUser().getSelectedPersona();
                u.setLoyaltyRewards(data.rewards), u.createClub(i, data.name, data.abbr).observe(this, _onCreateClubComplete)
            } else s.success = l.success, s.status = l.status, t.notify(s)
        }), t
    }, new OnboardingService
}(), communication.CreateShowOffSquadDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "showoff/" + t, models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setData({
        squadId: t
    })
}, utils.JS.inherits(communication.CreateShowOffSquadDelegate, communication.BaseFUTDelegate), communication.DeleteShowOffSquadDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setURLVariables({
        id: t
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "showoffdelete", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.DeleteShowOffSquadDelegate, communication.BaseFUTDelegate), communication.SquadCreateDelegate = function(name, t, i, s) {
    communication.BaseFUTDelegate.call(this);
    var o = {
        squadName: name,
        formation: t
    };
    Array.isArray(i) && i.length > 0 && (o.players = i.map(function(item, t) {
        var i = s || item.concept;
        return {
            index: t,
            itemData: item ? {
                id: i ? item.getMaskedResourceId() : item.id,
                dream: i
            } : {
                id: 0,
                dream: !1
            }
        }
    })), this.setData(o), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "squad", models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SquadCreateDelegate, communication.BaseFUTDelegate), communication.SquadCreateDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.NAME_EXISTS:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.duplicateSquadNameTitle", "popup.error.duplicateSquadName");
            break;
        case enums.NetworkError.PERMISSION_DENIED:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.squadsFullTitle", "popup.error.squadsFull");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.SquadDeleteDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "squad/" + t.toString(), models.CommunicationModel.METHOD.DELETE, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SquadDeleteDelegate, communication.BaseFUTDelegate), communication.SquadCopyDelegate = function(id, name) {
    communication.BaseFUTDelegate.call(this), this.setData({
        srcId: id,
        dstSquadName: name
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "squad/clone", models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SquadCopyDelegate, communication.BaseFUTDelegate), communication.SquadCopyDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.NAME_EXISTS:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.duplicateSquadNameTitle", "popup.error.duplicateSquadName");
            break;
        case enums.NetworkError.PERMISSION_DENIED:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.squadsFullTitle", "popup.error.squadsFull");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.SquadRenameDelegate = function SquadRenameDelegate(id, name) {
    communication.BaseFUTDelegate.call(this), this.setData({
        id: id,
        squadName: name
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "squad/" + id.toString(), models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SquadRenameDelegate, communication.BaseFUTDelegate), NamespaceManager.Register("services"), services.Squad = function() {
    function SquadService() {}
    return SquadService.prototype.create = function create(name, t, i, s) {
        var event = new FUTObservable,
            o = {
                success: !1,
                squad: null,
                error: null
            },
            l = new communication.SquadCreateDelegate(name, t, i, s);
        return l.addListener(communication.BaseDelegate.SUCCESS, this, function delegateSuccess(sender, data) {
            sender.clearListenersByScope(this), services.Notification.queue([gLocalization.lText("notification.squad.created"), enums.UINotificationType.NEUTRAL]);
            var t = gAuthenticationModel.getUser().selectedPersona;
            repositories.Squad.storeSquad(t, data).observe(this, function(t, i) {
                t.unobserve(this), repositories.Squad.setDirty(), i.setCacheTimestamp(Date.now()), o.success = !0, o.squad = i, event.notify(o), getDefaultDispatcher().notify(enums.AppNotification.SQUAD_CREATE, this, o)
            })
        }), l.addListener(communication.BaseDelegate.FAIL, this, function delegateFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                o.error = error, event.notify(o)
            }.bind(this))
        }), l.execute(), event
    }, SquadService.prototype.copy = function copy(id, name) {
        var event = new FUTObservable,
            t = {
                success: !1,
                squad: null,
                error: null
            },
            i = new communication.SquadCopyDelegate(id, name);
        return i.useClickShield(!0), i.addListener(communication.BaseDelegate.SUCCESS, this, function delegateSuccess(sender, data) {
            sender.clearListenersByScope(this);
            var i = gAuthenticationModel.getUser().selectedPersona;
            repositories.Squad.storeSquad(i, data).observe(this, function(i, s) {
                i.unobserve(this), services.Notification.queue([gLocalization.lText("notification.squad.copied"), enums.UINotificationType.NEUTRAL]), s.setCacheTimestamp(Date.now()), t.success = !0, t.squad = s, event.notify(t), getDefaultDispatcher().notify(enums.AppNotification.SQUAD_CREATE, this, t)
            })
        }), i.addListener(communication.BaseDelegate.FAIL, this, function delegateFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                switch (error.getCode()) {
                    case enums.NetworkError.NAME_EXISTS:
                        utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.DUPLICATE_SQUAD_NAME);
                        break;
                    case enums.NetworkError.PERMISSION_DENIED:
                        utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.SQUADS_FULL)
                }
                t.error = error, event.notify(t)
            }.bind(this))
        }), i.execute(), event
    }, SquadService.prototype.duplicate = function duplicate(t) {
        function _onCreateDuplicateComplete(t, data) {
            t.unobserve(this), event.notify(data)
        }
        var event = new FUTObservable;
        return repositories.Squad.getSquads().observe(this, function(i, data) {
            i.unobserve(this);
            var s = t.getPlayers().map(function(t) {
                    return t.getItem()
                }),
                name = t.getName();
            name = utils.TextUtils.squadNameExists(name, data) ? utils.TextUtils.createSquadNameCopy(name, data) : name, this.create(name, t.getFormation().getName(), s, !0).observe(this, _onCreateDuplicateComplete)
        }), event
    }, SquadService.prototype.rename = function rename(id, name) {
        function onGetSquad(i, s) {
            i.unobserve(this), services.Notification.queue([gLocalization.lText("notification.squad.renamed"), enums.UINotificationType.NEUTRAL]), s.setName(name, []), t.success = !0, t.squad = s || null, event.notify(t), getDefaultDispatcher().notify(enums.AppNotification.SQUAD_SAVE, s)
        }
        var event = new FUTObservable,
            t = {
                success: !1,
                squad: null,
                error: null
            },
            i = new communication.SquadRenameDelegate(id, name);
        return i.useClickShield(!0), i.addListener(communication.BaseDelegate.SUCCESS, this, function _onRenameSuccess(sender) {
            sender.clearListenersByScope(this), repositories.Squad.getSquadById(id).observe(this, onGetSquad)
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onRenameFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                t.error = error, event.notify(t)
            }.bind(this))
        }), i.execute(), event
    }, SquadService.prototype.remove = function remove(id) {
        var event = new FUTObservable,
            t = {
                success: !1,
                id: id,
                error: null
            },
            i = new communication.SquadDeleteDelegate(id);
        return i.addListener(communication.BaseDelegate.SUCCESS, this, function _onRemoveSuccess(sender) {
            sender.clearListenersByScope(this);
            var i = gAuthenticationModel.getUser().selectedPersona;
            repositories.Squad.removeSquad(i, id), repositories.Squad.setDirty(), t.success = !0, event.notify(t), getDefaultDispatcher().notify(enums.AppNotification.SQUAD_DELETE, this, t)
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onRemoveFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                t.error = error, event.notify(t)
            }.bind(this))
        }), i.useClickShield(!0), i.send(), event
    }, SquadService.prototype.addShowOff = function addShowOff(t) {
        function _onAddShowOffSuccess(sender, data) {
            sender.clearListenersByScope(this), repositories.Squad.getSquadById(t).observe(this, function(t, s) {
                if (t.unobserve(this), utils.JS.isValid(s)) {
                    var o = new transferobjects.ShowOffSquad(s, data);
                    repositories.Squad.addShowOffSquad(o), i.success = !0, i.url = o.url + ":" + gAuthenticationModel.getUser().getSelectedPersona().sku
                }
                event.notify(i)
            })
        }

        function _onAddShowOffFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                i.error = error, event.notify(i)
            }.bind(this))
        }

        function _createShowOff() {
            var i = new communication.CreateShowOffSquadDelegate(t);
            i.addListener(communication.BaseDelegate.SUCCESS, this, _onAddShowOffSuccess), i.addListener(communication.BaseDelegate.FAIL, this, _onAddShowOffFail), i.useClickShield(!0), i.send()
        }
        var event = new FUTObservable,
            i = {
                success: !1,
                url: "",
                error: null
            };
        return repositories.Squad.getShowOffSquads().observe(this, function(t, data) {
            if (t.unobserve(this), data.success)
                if (repositories.Squad.isShowOffListFull()) {
                    var keys = data.showOffSquads.map(function(t) {
                        return t.id
                    });
                    this.deleteShowOff(Math.min.apply(Math, keys)).observe(this, function(t, d) {
                        d.success && _createShowOff.call(this)
                    })
                } else _createShowOff.call(this)
        }), event
    }, SquadService.prototype.deleteShowOff = function deleteShowOff(t) {
        var event = new FUTObservable,
            i = {
                success: !1,
                error: null
            },
            s = new communication.DeleteShowOffSquadDelegate(t);
        return s.addListener(communication.BaseDelegate.SUCCESS, this, function _onDeleteShowOffSuccess(sender, data) {
            sender.clearListenersByScope(this), repositories.Squad.removeShowOffSquad(t), i.success = !0, event.notify(i)
        }), s.addListener(communication.BaseDelegate.FAIL, this, function _onDeleteShowOffFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                i.error = error, event.notify(i)
            }.bind(this))
        }), s.useClickShield(!0), s.send(), event
    }, SquadService.prototype.loadShowOffSquad = function loadShowOffSquad() {
        var event = new FUTObservable,
            t = {
                success: !1,
                squad: null,
                error: null
            };
        return repositories.Squad.loadShowOffSquad().observe(this, function _onLoadShowOff(i, data) {
            i.unobserve(this), data.success ? (t.success = !0, t.showOffDTO = data.showOffDTO) : services.Notification.queue([gLocalization.lText("squads.showoff.error.load"), enums.UINotificationType.NEGATIVE]), event.notify(t)
        }), event
    }, SquadService.prototype.setActiveSquad = function setActiveSquad(id) {
        var event = new FUTObservable,
            t = {
                success: !1,
                error: null
            };
        return repositories.Squad.getSquadById(id, -1).observe(this, function _onSetActiveComplete(i, s, error) {
            s ? (t.success = !0, repositories.Squad.setActiveSquadId(s.getId())) : error && (t.error = error), event.notify(t)
        }), event
    }, new SquadService
}(), NamespaceManager.Register("services"), services.URL = function() {
    function URLService() {}
    var t = new FUTHashTable({}),
        i = "";
    return URLService.prototype.registerDeepLinkID = function registerDeepLinkID(id, i) {
        t.set(id, i)
    }, URLService.prototype.findValidDeepLinkID = function findValidDeepLinkID(t) {
        return utils.JS.find(t, function(t) {
            return this._isValidDeepLinkID(t)
        }.bind(this)) || enums.DeepLinkSections.NONE
    }, URLService.prototype._isValidDeepLinkID = function _isValidDeepLinkID(id) {
        return t.has(id)
    }, URLService.prototype.setDeepLinkURL = function setDeepLinkURL(t, s) {
        if (!utils.JS.isEmpty(t)) {
            var url = decodeURIComponent(t).trim();
            0 !== url.indexOf("easfc://") && (url = "easfc://fut/" + t, s && (url += "/" + s)), i = url
        }
    }, URLService.prototype.getDeepLinkURL = function getDeepLinkURL() {
        return i
    }, URLService.prototype.clearDeepLinkURL = function clearDeepLinkURL() {
        i = ""
    }, URLService.prototype.hasDeepLinkURL = function hasDeepLinkURL() {
        return !utils.JS.isEmpty(i)
    }, URLService.prototype.processDeepLinkURL = function processDeepLinkURL() {
        if (!this.hasDeepLinkURL()) return !1;
        var t = this.process(this.getDeepLinkURL());
        return t && this.clearDeepLinkURL(), t
    }, URLService.prototype.process = function process(url) {
        if (0 === (url = decodeURIComponent(url).trim()).indexOf("easfc://")) {
            if (!this._checkAuth()) return !1;
            var i = url.substr("easfc://".length).split("/").filter(function(t) {
                    return "" !== t
                }),
                s = i.shift(),
                tag = i.shift();
            if ("fut" !== s || !this._isValidDeepLinkID(tag)) return utils.Debug.Assert(!1, "[services.URL::process] Unable to process unknown deep link: " + url), !1;
            t.get(tag)(i)
        } else {
            if (0 !== url.indexOf("https://") && 0 !== url.indexOf("http://")) return utils.Debug.Assert(!1, "[services.URL::process] Unable to process unknown or unsupported URL structure: " + url), !1;
            window.open(url, "_system")
        }
        return !0
    }, URLService.prototype._checkAuth = function _checkAuth() {
        var t = gAuthenticationModel.getFUTState();
        if (!gAuthenticationModel.getUser().getSelectedPersona().hasFUT || !gAuthenticationModel.isFullyAuthenticated()) {
            if (t !== enums.FUTAuthState.SERVER_DOWN) switch (NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("HOME")), t) {
                case enums.FUTAuthState.ACCOUNT_LOCKED:
                    NavManager.requestChildScreen(Screens.getView("ACCOUNT_LOCKED"));
                    break;
                case enums.FUTAuthState.CONCURRENT_SESSION:
                    NavManager.requestChildScreen(Screens.getView("SIGNED_ON_CONSOLE"));
                    break;
                case enums.FUTAuthState.NEW_TRIAL_USER:
                    NavManager.requestChildScreen(Screens.getView("GETTING_STARTED"), enums.GettingStartedTypes.FIFA);
                    break;
                default:
                    NavManager.requestChildScreen(Screens.getView("GETTING_STARTED"), enums.GettingStartedTypes.FUT)
            }
            return !1
        }
        return !0
    }, new URLService
}(), NamespaceManager.Register("valueobjects"), valueobjects.NetworkErrorVO = function(code, level, title, message) {
    this._code = code, this._level = level, this._title = title, this._message = message
}, valueobjects.NetworkErrorVO.prototype.getMessage = function() {
    return this._message
}, valueobjects.NetworkErrorVO.prototype.getTitle = function() {
    return this._title
}, valueobjects.NetworkErrorVO.prototype.getCode = function() {
    return this._code
}, valueobjects.NetworkErrorVO.prototype.getErrorLevel = function() {
    return this._level
}, valueobjects.NetworkErrorVO.prototype.isCritical = function() {
    return this._level === enums.NetworkErrorLevel.CRITICAL
}, valueobjects.NetworkErrorVO.prototype.isImportant = function() {
    return this._level === enums.NetworkErrorLevel.IMPORTANT
}, valueobjects.NetworkErrorVO.prototype.isUnimportant = function() {
    return this._level === enums.NetworkErrorLevel.UNIMPORTANT
}, valueobjects.NetworkErrorVO.prototype.isCodeValid = function() {
    return this._code > 0
};
var NetworkErrorManager = {};
NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS = 0, NetworkErrorManager.handle = function(t, i, s) {
    if (t.isCritical()) {
        s = gAuthenticationModel.errorLogout.bind(gAuthenticationModel);
        var o = {
            sid: services.Authentication.getSession(enums.AuthEnvironment.UTAS).id,
            type: PinManager.ERROR_EVT_TYPE,
            errid: enums.PIN.ERROR_EVT_ERRID.SERVER,
            server_type: PinManager.SERVER_TYPE
        };
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.ERROR, o))
    }!t.isUnimportant() || t.isUnimportant() && !i ? utils.PopupManager.displayNetworkError(t, s) : utils.JS.isFunction(s) && s()
}, NetworkErrorManager.trackServerError = function() {
    if (NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS++, NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS >= gConfigurationModel.getConfigNumber(models.ConfigurationModel.KEY_MAX_CONSECUTIVE_500_ERRORS)) {
        NetworkErrorManager.NUM_INTERNAL_SERVER_ERRORS = 0;
        var t = new valueobjects.NetworkErrorVO(enums.NetworkError.SERVER_ERROR, enums.NetworkErrorLevel.CRITICAL, "popup.error.cannotcontinueTitle", "popup.error.cannotcontinue");
        return NetworkErrorManager.handle(t, !1), !0
    }
    return !1
}, NamespaceManager.Register("utils"), utils.GoogleAnalytics = function() {
    window.ga("create", "UA-24487626-18")
}, utils.GoogleAnalytics.prototype.trackPage = function(url) {
    window.ga("send", "pageview", "/" + encodeURIComponent(url))
}, utils.GoogleAnalytics.prototype.trackEvent = function(category, action, screen, value) {
    window.ga("send", "event", category, action, screen, value)
}, utils.GoogleAnalytics.prototype.isEnabled = function(t) {
    var i = gConfigurationModel.getConfigObject(models.ConfigurationModel.KEY_ANALYTICS);
    return !!(utils.JS.isValid(i) && i.enabled && i.sectionEnabled[t] && gUserSettingsModel.getUsageSharingEnabled())
};
var TelemetryManager = {};
TelemetryManager.Sections = {
    LOGIN: "LOGIN",
    MOBILE_START: "MOBILE_START",
    HOME: "HOME",
    EASFC: "EASFC",
    SQUADS: "SQUADS",
    STORE: "STORE",
    OBJECTIVES: "OBJECTIVES",
    ONBOARDING: "ONBOARDING",
    SBC: "SBC",
    TOTW: "TOTW",
    CLUB: "CLUB",
    AUCTIONS: "AUCTIONS",
    MISC: "MISC"
}, TelemetryManager.Categories = {
    BUTTON_PRESS: "buttonpress",
    CAPTCHA: "captcha",
    FILTER: "filter",
    MARKET_STATUS: "marketstatus",
    OBJECTIVE_REWARDS_CLAIMED: "objectiverewardsclaimed",
    PATCH_FAIL: "patchfail",
    PN: "pn",
    SQUAD_BUILDING: "squadbuilding",
    ERROR: "error"
}, TelemetryManager.LegacyScreenIds = {
    ClubHub: "NavClub",
    TransfersHub: "NavTransfers",
    SquadsHub: "NavSquads",
    StoreHub: "NavStore"
};
var googleAnalytics = new utils.GoogleAnalytics;
TelemetryManager.convertToLegacyScreenId = function(screen) {
    return utils.JS.isString(TelemetryManager.LegacyScreenIds[screen]) ? TelemetryManager.LegacyScreenIds[screen] : screen
}, TelemetryManager.trackPage = function(t, url) {
    url = TelemetryManager.convertToLegacyScreenId(url), googleAnalytics.isEnabled(t) && (utils.JS.isString(url) ? googleAnalytics.trackPage(url) : utils.Debug.Assert(!1, "Invalid parameters set for TelemetryManager.trackPage"))
}, TelemetryManager.trackEvent = function(t, category, action, screen, value) {
    googleAnalytics.isEnabled(t) && (utils.JS.isString(category) && utils.JS.isString(action) ? (utils.JS.isString(screen) || (utils.Debug.Assert(!utils.JS.isValid(screen), "Invalid variable type for screen in TelemetryManager.trackEvent"), screen = NavManager.getCurrentScreen().getScreenId()), screen = TelemetryManager.convertToLegacyScreenId(screen), utils.JS.isNumber(value) || (utils.Debug.Assert(!utils.JS.isValid(value), "Invalid variable type for value in TelemetryManager.trackEvent"), value = 0), googleAnalytics.trackEvent(category, action, screen, value)) : utils.Debug.Assert(!1, "Invalid parameters set for TelemetryManager.trackEvent"))
}, TelemetryManager.getSection = function() {
    var screen = Screens._sections[NavManager.getCurrentScreen().getScreenId()],
        t = TelemetryManager.Sections.MISC;
    switch (screen) {
        case Screens.APP_SECTION.LOGIN:
            t = TelemetryManager.Sections.LOGIN;
            break;
        case Screens.APP_SECTION.MOBILE_START:
            t = TelemetryManager.Sections.MOBILE_START;
            break;
        case Screens.APP_SECTION.HOME:
            t = TelemetryManager.Sections.HOME;
            break;
        case Screens.APP_SECTION.SQUADS:
            t = TelemetryManager.Sections.SQUADS;
            break;
        case Screens.APP_SECTION.STORE:
            t = TelemetryManager.Sections.STORE;
            break;
        case Screens.APP_SECTION.OBJECTIVES:
            t = TelemetryManager.Sections.OBJECTIVES;
            break;
        case Screens.APP_SECTION.SBC:
            t = TelemetryManager.Sections.SBC;
            break;
        case Screens.APP_SECTION.TOTW:
            t = TelemetryManager.Sections.TOTW;
            break;
        case Screens.APP_SECTION.CLUB:
            t = TelemetryManager.Sections.CLUB;
            break;
        case Screens.APP_SECTION.AUCTION_SEARCH:
        case Screens.APP_SECTION.TRADE_PILE:
        case Screens.APP_SECTION.WATCH_LIST:
            t = TelemetryManager.Sections.AUCTIONS
    }
    return t
};
var gTelemetryManager = TelemetryManager;
NamespaceManager.Register("utils"), utils.OriginStore = function() {
    function OriginStoreUtil() {}
    var t = null;
    return OriginStoreUtil.prototype.init = function(i) {
        var s = this,
            locale = gLocalization.getLocale().replace("_", "-").toLowerCase(),
            o = document.createElement("link");
        o.href = gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_ORIGIN_CSS), o.rel = "stylesheet", o.type = "text/css", document.head.appendChild(o);
        var l = document.createElement("script");
        l.src = gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_ORIGIN_JS), l.onload = function() {
            t = new window.EA.ODC.StorePlugin({
                host: gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_ORIGIN_HOST),
                locale: locale,
                geoLocate: !0,
                useDefaultLanguage: !1,
                profileId: gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_ORIGIN_PROFILE),
                offerQuery: {
                    masterTitle: gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_ORIGIN_MASTER_TITLE),
                    platform: "pc-download",
                    gameType: "currency"
                },
                events: {
                    onCheckoutModalClose: function() {
                        s._onCheckoutSuccess()
                    }
                }
            }), i()
        }, document.head.appendChild(l)
    }, OriginStoreUtil.prototype.openStore = function() {
        t.open()
    }, OriginStoreUtil.prototype._onCheckoutSuccess = function() {
        gUserModel.updateCredits()
    }, new OriginStoreUtil
}(), NamespaceManager.Register("viewmodels"), viewmodels.ItemList = function ItemList(t) {
    FUTIterator.call(this, t), this.dataUpdated = new FUTObservable, Object.defineProperty(this, "dataUpdated", {
        writable: !1
    }), this._auctionUpdateArray = [], this._auctionUpdateInterval = 0, this._auctionObservable = null, this._updateIntervals = [{
        expires: 30,
        interval: 1
    }, {
        expires: 60,
        interval: 5
    }, {
        expires: 600,
        interval: 120
    }, {
        expires: 3600,
        interval: 600
    }, {
        expires: 432e3,
        interval: 43200
    }], this._pendingExpiryUpdateInterval = 5e3, this.sort = enums.SearchSort.DESCENDING
}, utils.JS.inherits(viewmodels.ItemList, FUTIterator), viewmodels.ItemList.prototype.add = function add(t, index) {
    viewmodels.ItemList.superClass_.add.call(this, t, index), utils.JS.isNumber(index) || this._organizeItems()
}, viewmodels.ItemList.prototype.addArray = function addArray(t) {
    var lastIndex = this.length;
    t.forEach(function(item) {
        this.add(item, lastIndex), lastIndex++
    }, this), this._organizeItems()
}, viewmodels.ItemList.prototype.removeArray = function removeArray(t) {
    function isInArray(item) {
        return !!utils.JS.find(t, function(t) {
            return item.id === t.id
        })
    }
    var i = [];
    this._collection.forEach(function(item) {
        isInArray(item) || i.push(item)
    }), this._collection = i, this._organizeItems()
}, viewmodels.ItemList.prototype.getItemList = function getItemList() {
    return this.values()
}, viewmodels.ItemList.prototype._organizeItems = function _organizeItems() {
    if (0 !== this.length) {
        var t = this.values().sort(this.sortByType.bind(this));
        this.resetCollection(t)
    }
}, viewmodels.ItemList.prototype.startAuctionUpdates = function startAuctionUpdates() {
    this.stopAuctionUpdates();
    var t = this._auctionUpdateArray.slice();
    this._auctionUpdateArray = this.values().filter(function(item) {
        var t = item.getAuctionData();
        if (!t.isUpdating && t.isActiveTrade()) {
            if ((t.expires <= 0 || t.getSecondsRemaining() <= 0) && t.getAge() < this._pendingExpiryUpdateInterval) return !1;
            for (var i = this._updateIntervals.length; i-- > 0;) {
                var s = this._updateIntervals[i];
                if (t.isStale() || t.getSecondsRemaining() <= s.expires && t.getAgeInSeconds() >= s.interval) return !0
            }
        }
        return !1
    }, this), this._auctionUpdateArray.length > 0 ? (this._auctionObservable = services.Item.getAuctionInfo(this._auctionUpdateArray), this._auctionObservable.observe(this, function(t, data) {
        t.unobserve(this), this.dataUpdated.notify(), this._auctionObservable = null, this._auctionUpdateInterval = setTimeout(this.startAuctionUpdates.bind(this), 1e3)
    })) : (t.length > 0 && this.dataUpdated.notify(), this._auctionUpdateInterval = setTimeout(this.startAuctionUpdates.bind(this), 1e3))
}, viewmodels.ItemList.prototype.stopAuctionUpdates = function stopAuctionUpdates() {
    this._auctionUpdateInterval = clearTimeout(this._auctionUpdateInterval), this._auctionObservable && (this._auctionObservable.unobserve(this), this._auctionObservable = null)
}, viewmodels.ItemList.prototype.sortByType = function sortByType(a, b) {
    var t, i = {
            EXPIRY: 0,
            CONCEPT: 1,
            LOAN: 2,
            UNTRADEABLE: 3,
            DISCARD: 4,
            TYPE: 5,
            LEGEND: 6,
            TOTW: 7,
            TIER: 8,
            RARE: 9,
            RATING: 10,
            RESOURCE: 11
        },
        s = [enums.ItemType.PLAYER, enums.ItemType.MANAGER, enums.ItemType.HEAD_COACH, enums.ItemType.FITNESS_COACH, enums.ItemType.PHYSIO, enums.ItemType.GK_COACH, enums.ItemType.CONTRACT, enums.ItemType.HEALTH, enums.ItemType.TRAINING, enums.ItemType.BADGE, enums.ItemType.KIT, enums.ItemType.BALL, enums.ItemType.STADIUM, enums.ItemType.MISC];
    t = a.getAuctionData().isActiveTrade() && b.getAuctionData().isActiveTrade() ? [i.EXPIRY, i.DISCARD, i.TYPE, i.LEGEND, i.TOTW, i.TIER, i.RARE, i.RATING, i.RESOURCE] : this.sort === enums.SearchSort.ASCENDING ? [i.CONCEPT, i.DISCARD, i.LOAN, i.RATING, i.RESOURCE] : [i.CONCEPT, i.LOAN, i.UNTRADEABLE, i.DISCARD, i.TYPE, i.LEGEND, i.TOTW, i.TIER, i.RARE, i.RATING, i.RESOURCE];
    for (var o = 0, l = 0; 0 === l && o !== t.length;) l = function getCompareVal(step, a, b) {
        switch (step) {
            case i.EXPIRY:
                return utils.JS.sortCompare(a.getAuctionData().getSecondsRemaining(), b.getAuctionData().getSecondsRemaining(), !1);
            case i.CONCEPT:
                return utils.JS.sortCompare(a.concept, b.concept, !0);
            case i.LOAN:
                return utils.JS.sortCompare(a.isLoaned(), b.isLoaned(), this.sort === enums.SearchSort.DESCENDING);
            case i.UNTRADEABLE:
                return utils.JS.sortCompare(a.untradeable, b.untradeable, !1);
            case i.DISCARD:
                return utils.JS.sortCompare(a.discardValue, b.discardValue, this.sort === enums.SearchSort.DESCENDING);
            case i.TYPE:
                return utils.JS.sortCompare(s.indexOf(a.type), s.indexOf(b.type), !1);
            case i.LEGEND:
                return utils.JS.sortCompare(a.isLegend(), b.isLegend(), !0);
            case i.TOTW:
                return utils.JS.sortCompare(a.isTeamOfTheWeek(), b.isTeamOfTheWeek(), !0);
            case i.TIER:
                return utils.JS.sortCompare(a.getTier(), b.getTier(), !0);
            case i.RARE:
                return utils.JS.sortCompare(a.rareflag, b.rareflag, !0);
            case i.RATING:
                return utils.JS.sortCompare(a.rating, b.rating, this.sort === enums.SearchSort.DESCENDING);
            case i.RESOURCE:
                return utils.JS.sortCompare(a.resourceId, b.resourceId, !1)
        }
    }.call(this, t[o], a, b), o++;
    return l
}, NamespaceManager.Register("viewmodels"), viewmodels.PaginatedItemList = function(t, i) {
    viewmodels.ItemList.call(this, t);
    var s = new valueobjects.NumberVO;
    Object.defineProperty(this, "numItemsPerPage", {
        get: s.get.bind(s),
        set: s.set.bind(s),
        enumerable: !0
    });
    var o = new valueobjects.BooleanVO;
    Object.defineProperty(this, "isFull", {
        get: o.get.bind(o),
        set: o.set.bind(o),
        enumerable: !0
    }), this.numItemsPerPage = utils.JS.isNumber(i) && i > 0 ? i : 15, this.isFull = !1
}, utils.JS.inherits(viewmodels.PaginatedItemList, viewmodels.ItemList), viewmodels.PaginatedItemList.prototype.resetCollection = function resetCollection(t) {
    this.superclass(t), this.isFull = !1
}, viewmodels.PaginatedItemList.prototype.getCurrentPage = function getCurrentPage() {
    return Math.max(Math.ceil((this.getIndex() + 1) / this.numItemsPerPage), 1)
}, viewmodels.PaginatedItemList.prototype.getNumPages = function getNumPages() {
    return Math.max(Math.ceil(this.length / this.numItemsPerPage), 1)
}, viewmodels.PaginatedItemList.prototype._getPageStartIndex = function _getPageStartIndex(page) {
    return page >= 1 ? (page - 1) * this.numItemsPerPage : 0
}, viewmodels.PaginatedItemList.prototype.getPageItems = function getPageItems() {
    var t = this._getPageStartIndex(this.getCurrentPage());
    return this.values().slice(t, t + this.numItemsPerPage)
}, viewmodels.PaginatedItemList.prototype.hasPreviousPage = function hasPreviousPage() {
    return this.getCurrentPage() > 1
}, viewmodels.PaginatedItemList.prototype.hasNextPage = function hasNextPage() {
    return this.getCurrentPage() < this.getNumPages()
}, viewmodels.PaginatedItemList.prototype.canShowPage = function canShowPage(page) {
    if (page = utils.JS.isNumber(page) ? page : this.getCurrentPage(), utils.Debug.Assert(page > 0 && page <= this.getNumPages(), "viewmodels.PaginatedItemList::canShowPage. Page number out of bounds."), this.isFull) return !0;
    var index = this._getPageStartIndex(page);
    return this.values().slice(index, index + this.numItemsPerPage).length === this.numItemsPerPage
}, viewmodels.PaginatedItemList.prototype.previousPage = function previousPage() {
    return this.hasPreviousPage() && this.setIndex(this._getPageStartIndex(this.getCurrentPage() - 1)), this.getPageItems()
}, viewmodels.PaginatedItemList.prototype.nextPage = function nextPage() {
    return this.hasNextPage() && this.setIndex(this._getPageStartIndex(this.getCurrentPage() + 1)), this.getPageItems()
}, NamespaceManager.Register("viewmodels"), viewmodels.Club = function ClubViewModel(t) {
    var i = gConfigurationModel.getConfigObject(models.ConfigurationModel.KEY_ITEMS_PER_PAGE),
        s = utils.JS.isValid(i) ? i[models.ConfigurationModel.ITEMS_PER_PAGE.CLUB] : 15;
    viewmodels.PaginatedItemList.call(this, t, s)
}, utils.JS.inherits(viewmodels.Club, viewmodels.PaginatedItemList), viewmodels.Club.prototype.shouldRequestItems = function shouldRequestItems() {
    return !this.isFull && this.length <= this.numItemsPerPage * this.getCurrentPage()
}, viewmodels.Club.prototype.removeEmptyConsumables = function removeEmptyConsumables() {
    var index = this.getIndex(),
        t = this.values(),
        i = this.isFull;
    t = t.filter(function(c) {
        return c.stackCount > 0
    }), this.resetCollection(t), this.isFull = i, this.setIndex(t.length > 0 ? Math.min(index, t.length - 1) : 0)
}, viewmodels.Club.prototype.getActiveItemsURLs = function getActiveItemsURLs() {
    return this._getItemsURLs()
}, viewmodels.Club.prototype.getActiveItemURL = function getActiveItemURL(t) {
    return this._getItemsURLs(t)
}, viewmodels.Club.prototype.getActiveItemsImgs = function getActiveItemsImgs() {
    var t, i = {},
        s = this._getItemsURLs();
    for (t in s)
        if (s.hasOwnProperty(t)) {
            var o = parseInt(t, 10),
                l = this._getImageLoadListener(o),
                u = new components.ImageLoader;
            u.setResource(s[o], !0).observe(this, l), i[o] = u
        }
    return i
}, viewmodels.Club.prototype.getActiveItemImg = function getActiveItemImg(t) {
    var i = new components.ImageLoader,
        s = this._getImageLoadListener(t);
    return i.setResource(this.getActiveItemURL(t), !0).observe(this, s), i
}, viewmodels.Club.prototype._getImageLoadListener = function _getImageLoadListener(t) {
    var i = null;
    switch (t) {
        case enums.UIActiveItemImgType.HOME_KIT:
        case enums.UIActiveItemImgType.AWAY_KIT:
            i = this._onKitLoad;
            break;
        case enums.UIActiveItemImgType.BADGE_NORMAL:
        case enums.UIActiveItemImgType.BADGE_DARK:
            i = this._onBadgeLoad;
            break;
        case enums.UIActiveItemImgType.BALL:
            i = this._onBallLoad;
            break;
        case enums.UIActiveItemImgType.STADIUM:
            i = this._onStadiumLoad;
            break;
        default:
            i = this._onKitLoad
    }
    return i
}, viewmodels.Club.prototype._onKitLoad = function onKitLoad(t, i, s, path, o) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/j(\d+)_\d+_\d+\.png/, "j$1_" + enums.PlaceholderAssetId.TEAM + "_" + enums.PlaceholderAssetId.KIT + ".png"))
}, viewmodels.Club.prototype._onBadgeLoad = function onBadgeLoad(t, i, s, path, o) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.TEAM + ".png"))
}, viewmodels.Club.prototype._onBallLoad = function onBallLoad(t, i, s, path, o) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.BALL + ".png"))
}, viewmodels.Club.prototype._onStadiumLoad = function onStadiumLoad(t, i, s, path, o) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.STADIUM + ".png"))
}, viewmodels.Club.prototype._getItemsURLs = function _getItemsURLs(t) {
    var i = {},
        s = utils.JS.isValid(t);
    if (s) {
        var state;
        switch (t) {
            case enums.UIActiveItemImgType.BADGE_NORMAL:
            case enums.UIActiveItemImgType.BADGE_DARK:
                state = enums.ItemState.ACTIVE_BADGE;
                break;
            case enums.UIActiveItemImgType.BALL:
                state = enums.ItemState.ACTIVE_BALL;
                break;
            case enums.UIActiveItemImgType.STADIUM:
                state = enums.ItemState.ACTIVE_STADIUM;
                break;
            case enums.UIActiveItemImgType.HOME_KIT:
                state = enums.ItemState.ACTIVE_HOME_KIT;
                break;
            case enums.UIActiveItemImgType.AWAY_KIT:
                state = enums.ItemState.ACTIVE_AWAY_KIT;
                break;
            default:
                utils.Debug.Assert(!1, "viewmodels.Club:_getItemsURLs. Expected an enums.UIActiveItemImgType.<number>")
        }
    }
    var o = repositories.Item.getActiveItems(state);
    return Array.isArray(o) || (o = [o]), o.forEach(function(o) {
        if (utils.JS.isValid(o)) {
            var l, u = o.getStaticData(),
                h = o.getYear(),
                url = "";
            switch (o.state) {
                case enums.ItemState.ACTIVE_BADGE:
                    if (s && t !== enums.UIActiveItemImgType.BADGE_NORMAL || (url = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, h, o.teamId), utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.CREST, o.teamId.toString(), h, enums.PlaceholderAssetKey.CREST_LIGHT) && (url = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, h)), l = enums.UIActiveItemImgType.BADGE_NORMAL), !s || t === enums.UIActiveItemImgType.BADGE_DARK) {
                        var p = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, h, o.teamId);
                        utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.CREST, o.teamId.toString(), h, enums.PlaceholderAssetKey.CREST_DARK) && (p = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, h)), i[enums.UIActiveItemImgType.BADGE_DARK] = p
                    }
                    break;
                case enums.ItemState.ACTIVE_BALL:
                    url = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BALL, h, u.assetId), utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.BALLS, u.assetId, h) && (url = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BALL, h)), l = enums.UIActiveItemImgType.BALL;
                    break;
                case enums.ItemState.ACTIVE_STADIUM:
                    url = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_STADIUM_FULL, h, u.assetId), l = enums.UIActiveItemImgType.STADIUM;
                    break;
                case enums.ItemState.ACTIVE_HOME_KIT:
                    url = utils.AssetLocator.getImage(u.assetType, h, o.teamId, u.assetYear), utils.AssetLocator.hasPlaceholderKit(url, h) && (url = utils.AssetLocator.getImage(u.assetType, h)), l = enums.UIActiveItemImgType.HOME_KIT;
                    break;
                case enums.ItemState.ACTIVE_AWAY_KIT:
                    url = utils.AssetLocator.getImage(u.assetType, h, o.teamId, u.assetYear), utils.AssetLocator.hasPlaceholderKit(url, h) && (url = utils.AssetLocator.getImage(u.assetType, h)), l = enums.UIActiveItemImgType.AWAY_KIT
            }
            utils.JS.isEmpty(url) || (i[l] = url)
        }
    }), s ? i[t] : i
}, NamespaceManager.Register("interfaces"), interfaces.View = function() {}, interfaces.View.prototype.getRoot = function() {}, interfaces.View.prototype.destroyGeneratedElements = function() {}, interfaces.View.prototype.destroy = function() {}, utils.JS.inherits(FUIView, FUIResponder), FUIView.prototype.getRoot = function getRoot() {}, FUIView.prototype.getRootElement = function getRootElement() {}, FUIView.prototype.getSuperview = function getSuperview() {
    return this._superview
}, FUIView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {}, FUIView.prototype.destroy = function destroy() {
    this.dealloc()
}, FUIView.prototype.dealloc = function dealloc() {
    this.superclass(), this.removeSubviews(), this.destroyGeneratedElements()
}, FUIView.prototype.removeSubviews = function removeSubviews(animate) {
    for (var t = this._subviews.length; t-- > 0;) this._subviews[0].view.removeFromSuperview(animate)
}, FUIView.prototype.addSubview = function addSubview(view, t) {
    utils.Debug.Assert(view.conforms && view.conforms(FUIView), "Expected parameter to be of type FUIView."), view.willAddToSuperview(this), t && 0 !== this.getRoot().find(t).length || (t = this.getRoot()), this._subviews.push({
        view: view,
        container: t
    }), view._superview = this, view.setEventDelegate(this), view.didAddToSuperview()
}, FUIView.prototype.willAddToSuperview = function willAddToSuperview(view) {}, FUIView.prototype.didAddToSuperview = function didAddToSuperview() {}, FUIView.prototype.removeFromSuperview = function removeFromSuperview(animate) {
    function _completeRemoveFromSuperview() {
        this._remove();
        var index = 0;
        utils.JS.find(this._superview._subviews, function(t, i) {
            return t.view === this && (index = i, !0)
        }.bind(this)), this.removeEventDelegate(this._superview), this._superview._subviews.splice(index, 1), this._superview.didRemoveSubview(this), this._superview = null
    }
    this._superview && (this._superview.willRemoveSubview(this), animate ? this.perform(enums.UIAnimation.FADE_OUT, _completeRemoveFromSuperview.bind(this)) : _completeRemoveFromSuperview.call(this))
}, FUIView.prototype.willRemoveSubview = function willRemoveSubview(view) {}, FUIView.prototype.didRemoveSubview = function didRemoveSubview(view) {}, FUIView.prototype.layoutSubviews = function layoutSubviews() {
    this._subviews.forEach(function(t) {
        t.view._remove(), t.container.append(t.view.getRootElement())
    }, this)
}, FUIView.prototype.isSubview = function isSubview(view) {
    return this === view || !!this._superview && this._superview.isSubview(view)
}, FUIView.prototype._setInteractionStateFlag = function _setInteractionStateFlag(t) {
    return t = !!t, this._interactionState !== t && (this._interactionState = t, !0)
}, FUIView.prototype.setInteractionState = function setInteractionState(t) {
    this._setInteractionStateFlag(t) && (this._interactionState ? this._startHandlingEvents(this.getRootElement()) : this._stopHandlingEvents())
}, FUIView.prototype.isInteractionEnabled = function isInteractionEnabled() {
    return this._interactionState
}, FUIView.prototype.getBoundingClientRect = function getBoundingClientRect() {
    return this.getRootElement().getBoundingClientRect()
}, FUIView.prototype.perform = function perform(t, i) {
    var s = this.getRootElement();
    s && (this._addListener(enums.Event.ANIMATIONEND, s, function _onAnimateComplete(e) {
        this._removeListenersByNS("viewAnimate"), this.removeClass(t), utils.JS.isFunction(i) && i()
    }.bind(this), "viewAnimate"), this.addClass(t))
}, FUIView.prototype.show = function show() {
    var t = this.getRootElement();
    "none" === t.style.display && (t.style.display = "none" !== this._defaultDisplay ? this._defaultDisplay : "block")
}, FUIView.prototype.hide = function hide() {
    var t = this.getRootElement(),
        display = t.style.display;
    "none" !== display && (this._defaultDisplay = display, t.style.display = "none")
}, FUIView.prototype.setDisplay = function setDisplay(t) {
    t = !!t, this.getRootElement().style.display = t ? "" : "none"
}, FUIView.prototype.setVisibility = function setVisibility(t) {
    t = !!t, this.getRootElement().style.visibility = t ? "visible" : "hidden"
}, FUIView.prototype.addClass = function addClass(t) {
    var root = this.getRootElement();
    utils.JS.isValid(root) && DOMKit.addClass(root, t)
}, FUIView.prototype.removeClass = function removeClass(t) {
    var root = this.getRootElement();
    utils.JS.isValid(root) && DOMKit.removeClass(root, t)
}, FUIView.prototype.toggleClass = function toggleClass(t, i) {
    var root = this.getRootElement();
    utils.JS.isValid(root) && DOMKit.toggleClass(root, t, i)
}, FUIView.prototype.hasClass = function hasClass(className) {
    var root = this.getRootElement();
    return !!utils.JS.isValid(root) && DOMKit.hasClass(root, className)
}, FUIView.prototype._remove = function _remove() {
    var root = this.getRootElement();
    utils.JS.isValid(root) && DOMKit.remove(root)
}, utils.JS.inherits(FUITargetActionView, FUIView), FUITargetActionView.prototype.dealloc = function dealloc() {
    this._targets.clear(), this._targets = null, this.superclass()
}, FUITargetActionView.prototype.addTarget = function addTarget(target, action, event) {
    this.getActions(target, event).indexOf(action) >= 0 || (this._targets.has(event) ? this._targets.get(event).push(Object.freeze({
        target: target,
        action: action
    })) : this._targets.set(event, [Object.freeze({
        target: target,
        action: action
    })]))
}, FUITargetActionView.prototype.removeTarget = function removeTarget(target, action, event) {
    if (this._targets.has(event)) {
        this._targets.get(event);
        var t = this._targets.get(event).filter(function(t) {
            return !(t.target === target && t.action === action)
        });
        this._targets.set(event, t)
    }
}, FUITargetActionView.prototype.getActions = function getActions(target, event) {
    var t = [],
        i = this._targets.get(event);
    return i && (t = i.reduce(function(t, i) {
        return i.target === target && t.push(i.action), t
    }, [])), t
}, FUITargetActionView.prototype._triggerActions = function _triggerActions(event, data) {
    data = data || null, this._targets.has(event) && this._targets.get(event).forEach(function(t) {
        t.action.call(t.target, this, event, data)
    }, this)
}, utils.JS.inherits(FUIControl, FUITargetActionView), FUIControl.prototype.blur = function blur() {
    var root = this.getRootElement();
    root === document.activeElement && root.blur()
}, FUIControl.prototype.focus = function focus() {
    var root = this.getRootElement();
    root !== document.activeElement && root.focus()
}, FUIControl.prototype.addTarget = function addTarget(target, action, event) {
    var t = this._evaluateEventString(event);
    utils.Debug.Assert(t, "Invalid assignment; expected enums.Event.<string>"), t && this.superclass(target, action, event)
}, FUIControl.prototype.removeTarget = function removeTarget(target, action, event) {
    var t = this._evaluateEventString(event);
    utils.Debug.Assert(t, "Invalid assignment; expected enums.Event.<string>"), t && this.superclass(target, action, event)
}, FUIControl.prototype.getActions = function getActions(target, event) {
    var t = this._evaluateEventString(event);
    return utils.Debug.Assert(t, "Invalid assignment; expected enums.Event.<string>"), t ? this.superclass(target, event) : []
}, FUIControl.prototype._triggerActions = function _triggerActions(event, data) {
    var t = this._evaluateEventString(event);
    utils.Debug.Assert(t, "Invalid assignment; expected enums.Event.<string>"), t && this.superclass(event, data)
}, FUIControl.prototype._evaluateEventString = function _evaluateEventString(t) {
    var i;
    for (i in enums.Event)
        if (enums.Event.hasOwnProperty(i) && t === enums.Event[i]) return !0;
    return !1
}, utils.JS.inherits(FUIButton, FUIControl), FUIButton.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, FUIButton.prototype.setInteractionState = function setInteractionState(t) {
    var i = this._interactionState;
    this.superclass(t), this._interactionState !== i && (this.getRootElement().disabled = !this._interactionState, this.toggleClass(enums.UIButtonState.DISABLED, !this._interactionState), this._interactionState || this.removeClass([enums.UIButtonState.ACTIVE, enums.UIButtonState.HOVER].join(" ")))
}, FUIButton.prototype.setText = function setText(text) {
    this.getRootElement().textContent = text
}, FUIButton.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), this.addClass(enums.UIButtonState.ACTIVE)
}, FUIButton.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), this.removeClass(enums.UIButtonState.ACTIVE)
}, FUIButton.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this.removeClass(enums.UIButtonState.ACTIVE)
}, FUIButton.prototype._touchCancelled = function _touchCancelled(e) {
    this.superclass(), this.removeClass(enums.UIButtonState.ACTIVE)
}, FUIButton.prototype._mouseLeave = function _mouseLeave(e) {
    this.superclass(), this.removeClass(enums.UIButtonState.ACTIVE), this.removeClass(enums.UIButtonState.HOVER)
}, FUIButton.prototype._mouseEnter = function _mouseEnter(e) {
    this.superclass(), this.addClass(enums.UIButtonState.HOVER)
}, FUIButton.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), this._triggerActions(enums.Event.TAP)
}, NamespaceManager.Register("views.buttons"), views.buttons.FlatButton = function FUIFlatButton() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(views.buttons.FlatButton, FUIButton), views.buttons.FlatButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("a");
        t.classList.add("btn-flat"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.FlatButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.buttons.FlatButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.FlatButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("components"), components.Header = function AppHeader() {
    FUIView.call(this), this._viewmodel = new viewmodels.Club([]), this._visible = !0, this.onHamburgerPress = new FUTObservable, Object.defineProperty(this, "onHamburgerPress", {
        writable: !1
    }), this._touchHandler = new FUTTouchHandler, this._generate()
}, utils.JS.inherits(components.Header, FUIView), components.Header.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("header");
        t.setAttribute("id", "header"), this.__mainHeader = document.createElement("div"), this.$_mainHeader = $(this.__mainHeader), this.__mainHeader.classList.add("mainHeader"), this._backButton = new views.buttons.FlatButton, this._backButton.getRootElement().classList.add("back"), this._backButton.getRootElement().classList.add("headerButton"), this.__mainHeader.appendChild(this._backButton.getRootElement()), this._settingsButton = new views.buttons.FlatButton, this._settingsButton.getRootElement().classList.add("settings"), this._settingsButton.getRootElement().classList.add("headerButton"), this.__mainHeader.appendChild(this._settingsButton.getRootElement()), this._hamburgerButton = new views.buttons.FlatButton, this._hamburgerButton.getRootElement().classList.add("hamburger"), this._hamburgerButton.getRootElement().classList.add("headerButton"), this.__mainHeader.appendChild(this._hamburgerButton.getRootElement()), this.__pageTitle = document.createElement("span"), this.$_pageTitle = $(this.__pageTitle), this.__pageTitle.setAttribute("id", "futHeaderTitle"), this.__pageTitle.classList.add("pageTitle"), this.__mainHeader.appendChild(this.__pageTitle), t.appendChild(this.__mainHeader), this.__subHeader = document.createElement("div"), this.$_subHeader = $(this.__subHeader), this.__subHeader.classList.add("currency"), this.__currencyChange = document.createElement("span"), this.$_currencyChange = $(this.__currencyChange), this.__currencyChange.classList.add("balance-change"), this.__subHeader.appendChild(this.__currencyChange), this.__subTitle = document.createElement("span"), this.$_subTitle = $(this.__subTitle), this.__subTitle.classList.add("subTitle"), this.__subHeader.appendChild(this.__subTitle), this.__userCoins = document.createElement("div"), this.$_userCoins = $(this.__userCoins), this.__userCoins.setAttribute("id", "user-coin");
        var i = document.createElement("div");
        this.__coinsLabel = document.createElement("span"), this.$_coinsLabel = $(this.__coinsLabel), this.__coinsLabel.classList.add("user-currency-label"), i.appendChild(this.__coinsLabel);
        var s = document.createElement("i");
        s.classList.add("icon_chevron"), s.classList.add("fut_icon"), i.appendChild(s), this.__coinsValue = document.createElement("span"), this.$_coinsValue = $(this.__coinsValue), this.__coinsValue.classList.add("user-currency-balance"), i.appendChild(this.__coinsValue), this.__userCoins.appendChild(i), this.__subHeader.appendChild(this.__userCoins), this.__userPoints = document.createElement("div"), this.$_userPoints = $(this.__userPoints), this.__userPoints.setAttribute("id", "user-point");
        var o = document.createElement("span");
        o.classList.add("add-icon"), this.__userPoints.appendChild(o);
        var l = document.createElement("div");
        this.__fifaPointsLabel = document.createElement("span"), this.$_fifaPointsLabel = $(this.__fifaPointsLabel), this.__fifaPointsLabel.classList.add("user-currency-label"), l.appendChild(this.__fifaPointsLabel);
        var u = document.createElement("i");
        u.classList.add("icon_chevron"), u.classList.add("fut_icon"), l.appendChild(u), this.__fifaPointsValue = document.createElement("span"), this.$_fifaPointsValue = $(this.__fifaPointsValue), this.__fifaPointsValue.classList.add("user-currency-balance"), l.appendChild(this.__fifaPointsValue), this.__userPoints.appendChild(l), this.__subHeader.appendChild(this.__userPoints), this.__userInfo = document.createElement("div"), this.$_userInfo = $(this.__userInfo), this.__userInfo.classList.add("user-info");
        var h = document.createElement("div");
        h.classList.add("user-data-container"), this.__established = document.createElement("span"), this.$_established = $(this.__established), this.__established.classList.add("user-info-date"), h.appendChild(this.__established), this.__userName = document.createElement("span"), this.$_userName = $(this.__userName), this.__userName.classList.add("user-info-club"), h.appendChild(this.__userName), this.__userInfo.appendChild(h), this._imageContainer = new components.ImageLoader, this._imageContainer.getRootElement().classList.add("imageContainer"), this.__userInfo.appendChild(this._imageContainer.getRootElement()), this.__subHeader.appendChild(this.__userInfo), t.appendChild(this.__subHeader), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.Header.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__mainHeader = null, this.$_mainHeader = null, this._backButton.destroy(), this._backButton = null, this._settingsButton.destroy(), this._settingsButton = null, this._hamburgerButton.destroy(), this._hamburgerButton = null, this.__pageTitle = null, this.$_pageTitle = null, this.__subHeader = null, this.$_subHeader = null, this.__currencyChange = null, this.$_currencyChange = null, this.__subTitle = null, this.$_subTitle = null, this.__userCoins = null, this.$_userCoins = null, this.__coinsLabel = null, this.$_coinsLabel = null, this.__coinsValue = null, this.$_coinsValue = null, this.__userPoints = null, this.$_userPoints = null, this.__fifaPointsLabel = null, this.$_fifaPointsLabel = null, this.__fifaPointsValue = null, this.$_fifaPointsValue = null, this.__userInfo = null, this.$_userInfo = null, this.__established = null, this.$_established = null, this.__userName = null, this.$_userName = null, this._imageContainer.destroy(), this._imageContainer = null
}, components.Header.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.Header.prototype.getRootElement = function getRootElement() {
    return this.__root
};
var gHeader = null;
components.Header.NO_HEADER = -1, components.Header.EMPTY = 0, components.Header.SETTINGS_BUTTON = 2, components.Header.BACK_BUTTON = 4, components.Header.CURRENCY = 8, components.Header.FIFA_POINTS = 16, components.Header.HAMBURGER_BUTTON = 32, components.Header.HIDE_ON_MOBILE = 64, components.Header.HIDE_ON_LANDSCAPE = 128, components.Header.UNAUTHENTICATED = 256, components.Header.DEFAULT_CHILD_PAGE = components.Header.BACK_BUTTON | components.Header.CURRENCY | components.Header.FIFA_POINTS, components.Header.LANDING_CLASS = "companion", components.Header.FUT_CLASS = "fut", components.Header.HIDE_USER_INFO = "hide-user-info", components.Header.prototype.init = function init() {
    this.superclass(), this.getRoot().addClass(components.Header.HIDE_USER_INFO), this._backButton.init(), this._settingsButton.init(), this._hamburgerButton.init(), this._backButton.addTarget(this, this._eBackButtonClicked, enums.Event.TAP), this._settingsButton.addTarget(this, this._eSettingsButtonClicked, enums.Event.TAP), this._hamburgerButton.addTarget(this, function() {
        this.onHamburgerPress.notify()
    }, enums.Event.TAP), getDefaultDispatcher().addObserver(enums.AppNotification.ITEM_ACTIVATE, this, this._setBadgeImgFromViewmodel), gUserModel.addListener(models.UserModel.EVENT_USER_CREDITS_CHANGED, this, this.setCoins), gUserModel.addListener(models.UserModel.EVENT_USER_FIFACASH_CHANGED, this, this.setFifaPoints)
}, components.Header.prototype.dealloc = function dealloc() {
    gUserModel.removeListener(models.UserModel.EVENT_USER_CREDITS_CHANGED, this, this.setCoins), gUserModel.removeListener(models.UserModel.EVENT_USER_FIFACASH_CHANGED, this, this.setFifaPoints), getDefaultDispatcher().removeObserver(enums.AppNotification.ITEM_ACTIVATE, this), this.onHamburgerPress.dealloc(), this.superclass()
}, components.Header.prototype.setupContent = function setupContent() {
    if (this.getRoot().removeClass("is-pc"), this._touchHandler.stopTouchHandling(), gAuthenticationModel.getUser().getSelectedPersona().isPC && utils.OriginStore.init(function() {
            this.getRoot().addClass("is-pc"), this._touchHandler.handleTouch(this.$_userPoints), this._touchHandler.touchstart.observe(this, this.onPointsTouchStart), this._touchHandler.touchmove.observe(this, this.onPointsTouchEnd), this._touchHandler.touchend.observe(this, this.onPointsTouchEnd), this._touchHandler.tap.observe(this, this.openStoreButtonClicked)
        }.bind(this)), this.$_coinsLabel.text(gLocalization.lText("header.Coins")), this.$_fifaPointsLabel.text(gLocalization.lText("header.FifaPoints")), gAuthenticationModel.getFUTState() !== enums.FUTAuthState.NO_DATA && gAuthenticationModel.getUser().getSelectedPersona().hasClubForCurrentYear) {
        if (gAuthenticationModel.getUser().getSelectedPersona().hasFUT && gAuthenticationModel.isFullyAuthenticated()) this._setBadgeImgFromViewmodel(), this.$_userName.text(gUserModel.getUserVO().getClubName()), this.$_established.text(utils.TextUtils.localizeEstablishedDate(gUserModel.getUserVO().getEstablished()));
        else {
            var t = gAuthenticationModel.getUser().getSelectedPersona().getCurrentClub();
            this._setBadgeImgURL(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, enums.Year.ASSET, t.assetId)), this.$_userName.text(t.name), this.$_established.text(utils.TextUtils.localizeEstablishedDate(new Date(1e3 * t.established)))
        }
        this.getRoot().removeClass(components.Header.HIDE_USER_INFO)
    } else this.getRoot().addClass(components.Header.HIDE_USER_INFO)
}, components.Header.prototype.setTitle = function setTitle(t) {
    (t = t.trim()).length > 18 ? this.$_pageTitle.addClass("long-text") : this.$_pageTitle.removeClass("long-text"), this.$_pageTitle.html(t)
}, components.Header.prototype.renderUnauthenticatedPersona = function renderUnauthenticatedPersona(t, i) {
    this.getRoot().removeClass(components.Header.HIDE_USER_INFO), this.$_userName.html(t), this.$_established.text(utils.TextUtils.localizeEstablishedDate(new Date(1e3 * i)))
}, components.Header.prototype.setSubTitle = function setSubTitle(t) {
    this.$_subTitle.html(t)
}, components.Header.prototype._setBadgeImgURL = function _setBadgeImgURL(url) {
    this._imageContainer.setResource(url, !0).observe(this, function(t, i) {
        if (t.unobserve(this), !i) {
            var s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, enums.Year.ASSET, utils.AssetLocator.ASSET_ID_DEFAULT);
            this._imageContainer.setResource(s)
        }
    })
}, components.Header.prototype._setBadgeImgFromViewmodel = function _setBadgeImgFromViewmodel() {
    this._setBadgeImgURL(this._viewmodel.getActiveItemURL(enums.UIActiveItemImgType.BADGE_NORMAL))
}, components.Header.prototype.setHeaderClass = function setHeaderClass(className) {
    var t = [components.Header.LANDING_CLASS, components.Header.FUT_CLASS].join(" ");
    this.$_mainHeader.removeClass(t), this.$_mainHeader.addClass(className)
}, components.Header.prototype.setViewState = function setViewState(state) {
    this.hideAllElements();
    var t = gSettingsModel.isServiceAvailable(models.SettingsModel.FIFA_POINTS_ENABLED);
    if (state !== components.Header.NO_HEADER) {
        this.setVisible(!0), this.$_pageTitle.toggleClass("fullWidth", state === components.Header.EMPTY), 0 != (state & components.Header.BACK_BUTTON) ? this._backButton.getRoot().removeClass("invisible") : 0 != (state & components.Header.SETTINGS_BUTTON) && this._settingsButton.getRoot().removeClass("invisible"), 0 != (state & components.Header.HAMBURGER_BUTTON) && this._hamburgerButton.getRoot().removeClass("invisible"), this.getRoot().toggleClass("hide-on-mobile", 0 != (state & components.Header.HIDE_ON_MOBILE)), this.getRoot().toggleClass("unauthentificated", 0 != (state & components.Header.UNAUTHENTICATED)), this.getRoot().parent().toggleClass("hide-header-on-mobile", 0 != (state & components.Header.HIDE_ON_MOBILE)), this.getRoot().parent().toggleClass("hide-header-on-landscape", 0 != (state & components.Header.HIDE_ON_LANDSCAPE));
        var i = this.getRoot().parent(),
            s = 0 != (state & (components.Header.CURRENCY | components.Header.FIFA_POINTS));
        this.$_subHeader.toggle(s), i.toggleClass("header-currency", s), this.$_subHeader.toggleClass("showFifaPoints", 0 != (state & components.Header.FIFA_POINTS) && t)
    } else this.setVisible(!1)
}, components.Header.prototype.hideAllElements = function hideAllElements() {
    this.setVisible(!1), this.$_subHeader.hide(), this._backButton.getRoot().addClass("invisible"), this._settingsButton.getRoot().addClass("invisible"), this._hamburgerButton.getRoot().addClass("invisible")
}, components.Header.prototype.setVisible = function setVisible(visible) {
    this._visible = visible, this._visible ? this.getRoot().parent().removeClass("noHeader") : this.getRoot().parent().addClass("noHeader")
}, components.Header.prototype.setCoins = function setCoins(sender, t, i) {
    this._setCurrency(enums.Currency.COINS, t, i)
}, components.Header.prototype.setFifaPoints = function setFifaPoints(sender, t, i) {
    this._setCurrency(enums.Currency.POINTS, t, i)
}, components.Header.prototype._setCurrency = function _setCurrency(type, t, i) {
    var s = type === enums.Currency.COINS ? this.$_coinsValue : this.$_fifaPointsValue;
    i && t.newVal !== t.oldVal ? isPhone() ? this._animatePhoneCurrencyChange(type, t) : this._animateLandscapeCurrencyChange(type, t) : s.html(gLocalization.lNum(t.newVal))
}, components.Header.prototype._animatePhoneCurrencyChange = function _animatePhoneCurrencyChange(type, t) {
    var i = t.newVal - t.oldVal,
        s = type === enums.Currency.COINS ? this.$_coinsValue : this.$_fifaPointsValue,
        o = type === enums.Currency.COINS ? "coinsChange" : "pointsChange";
    this.$_currencyChange.html((i > 0 ? "+" : "") + gLocalization.lNum(i)), this.$_subHeader.addClass(o), this.$_subHeader.on(enums.Event.ANIMATIONEND, function(e) {
        s.html(gLocalization.lNum(t.newVal)), $(this).removeClass(o), $(this).off(e)
    })
}, components.Header.prototype._animateLandscapeCurrencyChange = function _animateLandscapeCurrencyChange(type, t) {
    var i = t.newVal - t.oldVal,
        s = i > 0 ? "more" : "less",
        o = type === enums.Currency.COINS ? this.$_coinsValue : this.$_fifaPointsValue,
        l = type === enums.Currency.COINS ? this.$_userCoins : this.$_userPoints,
        u = type === enums.Currency.COINS ? "coinsChange" : "pointsChange";
    o.html((i > 0 ? "+" : "") + gLocalization.lNum(i)), l.addClass("anim-" + s), setTimeout(function() {
        o.html(gLocalization.lNum(t.newVal)), l.removeClass("anim-" + s), l.addClass(s)
    }.bind(this), 1e3), l.on(enums.Event.ANIMATIONEND, function(e) {
        l.removeClass(s), l.addClass(u), setTimeout(function() {
            l.removeClass(u)
        }.bind(this), 1e3), $(this).off(e)
    })
}, components.Header.prototype.setup = function setup(t) {
    this.setViewState(t.getHeaderState())
}, components.Header.prototype._eBackButtonClicked = function _eBackButtonClicked(sender, event, data) {
    NavManager.requestGoBackScreen()
}, components.Header.prototype._eSettingsButtonClicked = function _eSettingsButtonClicked(sender, event, data) {
    NavManager.requestChildScreen(Screens.getView("APP_SETTINGS"))
}, components.Header.prototype.openStoreButtonClicked = function openStoreButtonClicked(t, e) {
    gSettingsModel.isServiceAvailable(models.SettingsModel.MTX_ENABLED) ? utils.OriginStore.openStore() : this.removeClass("is-pc")
}, components.Header.prototype.onPointsTouchStart = function onPointsTouchStart(t, e) {
    this.$_userPoints.addClass("active")
}, components.Header.prototype.onPointsTouchEnd = function onPointsTouchEnd(t, e) {
    this.$_userPoints.removeClass("active")
}, NamespaceManager.Register("components"), components.NotificationBubble = function() {
    this._generate()
}, components.NotificationBubble.prototype._generate = function _generate() {
    this._generated || (this.__notificationBubble = document.createElement("div"), this.$_notificationBubble = $(this.__notificationBubble), this.__notificationBubble.classList.add("footerNotification"), this.__root = this.__notificationBubble, this.$_root = $(this.$_notificationBubble), this._generated = !0)
}, components.NotificationBubble.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__notificationBubble = null, this.$_notificationBubble = null
}, components.NotificationBubble.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.NotificationBubble.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.NotificationBubble.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.NotificationBubble.prototype.toggle = function(t) {
    this.$_notificationBubble.toggle(t)
}, components.NotificationBubble.prototype.setNumber = function(value) {
    var t = utils.JS.isValid(value) && value > 0;
    this.toggle(t), this.$_notificationBubble.html(t ? gLocalization.lNum(value) : "")
}, NamespaceManager.Register("components"), components.FooterButton = function FUIFooterButton() {
    FUIButton.call(this), this._unreadBubble = null, this._generate()
}, utils.JS.inherits(components.FooterButton, FUIButton), components.FooterButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("btnFooter"), t.setAttribute("aria-disabled", "false"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.FooterButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.FooterButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.FooterButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.FooterButton.prototype.dealloc = function dealloc() {
    this.removeUnreadBubble(), this.superclass()
}, components.FooterButton.prototype.removeUnreadBubble = function removeUnreadBubble() {
    utils.JS.isValid(this._unreadBubble) && (this.removeClass("unreadBubble"), this._unreadBubble.destroy(), this._unreadBubble = null)
}, components.FooterButton.prototype.addUnreadBubble = function addUnreadBubble() {
    var root = this.getRoot();
    utils.JS.isValid(this._unreadBubble) || (this.addClass("unreadBubble"), this._unreadBubble = new components.NotificationBubble), root.append(this._unreadBubble.getRoot())
}, NamespaceManager.Register("components"), components.Footer = function AppFooterView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(components.Footer, FUIView), components.Footer.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("nav");
        t.setAttribute("id", "footer"), this._btnLogo = new components.FooterButton, this._btnLogo.getRootElement().classList.add("btnLogo"), t.appendChild(this._btnLogo.getRootElement()), this._btnHome = new components.FooterButton, this._btnHome.getRootElement().classList.add("btnHome"), t.appendChild(this._btnHome.getRootElement()), this._btnSquads = new components.FooterButton, this._btnSquads.getRootElement().classList.add("btnSquads"), t.appendChild(this._btnSquads.getRootElement()), this._btnSBC = new components.FooterButton, this._btnSBC.getRootElement().classList.add("btnSBC"), t.appendChild(this._btnSBC.getRootElement()), this._btnTransfers = new components.FooterButton, this._btnTransfers.getRootElement().classList.add("btnTransfers"), t.appendChild(this._btnTransfers.getRootElement()), this._btnStore = new components.FooterButton, this._btnStore.getRootElement().classList.add("btnStore"), t.appendChild(this._btnStore.getRootElement()), this._btnClub = new components.FooterButton, this._btnClub.getRootElement().classList.add("btnClub"), t.appendChild(this._btnClub.getRootElement()), this._btnSettings = new components.FooterButton, this._btnSettings.getRootElement().classList.add("btnSettings"), t.appendChild(this._btnSettings.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.Footer.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._btnLogo.destroy(), this._btnLogo = null, this._btnHome.destroy(), this._btnHome = null, this._btnSquads.destroy(), this._btnSquads = null, this._btnSBC.destroy(), this._btnSBC = null, this._btnTransfers.destroy(), this._btnTransfers = null, this._btnStore.destroy(), this._btnStore = null, this._btnClub.destroy(), this._btnClub = null, this._btnSettings.destroy(), this._btnSettings = null
}, components.Footer.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.Footer.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.Footer.prototype.init = function init() {
    this.superclass(), isPhone() && this._btnSBC.setDisplay(!1), this._btnLogo.init(), this._btnHome.init(), this._btnSquads.init(), this._btnSBC.init(), this._btnTransfers.init(), this._btnStore.init(), this._btnClub.init(), this._btnSettings.init(), this._btnLogo.addTarget(this, function() {
        this.gotoScreen("HOME")
    }, enums.Event.TAP), this._btnHome.addTarget(this, function() {
        this.gotoScreen("HOME")
    }, enums.Event.TAP), this._btnSquads.addTarget(this, function() {
        this.gotoScreen("SQUADS_HUB")
    }, enums.Event.TAP), this._btnTransfers.addTarget(this, function() {
        this.gotoScreen("TRANSFERS_HUB")
    }, enums.Event.TAP), this._btnStore.addTarget(this, function() {
        this.gotoScreen("STORE_HUB")
    }, enums.Event.TAP), this._btnClub.addTarget(this, function() {
        this.gotoScreen("CLUB_HUB")
    }, enums.Event.TAP), this._btnSettings.addTarget(this, function() {
        this.gotoScreen("APP_SETTINGS")
    }, enums.Event.TAP), this._btnSBC.addTarget(this, function() {
        gSettingsModel.isSBCEnabled() ? this.gotoScreen("SBC_HUB") : services.Notification.queue([gLocalization.lText("sbc.notification.disabled"), enums.UINotificationType.NEGATIVE])
    }, enums.Event.TAP), this._btnHome.setText(gLocalization.lText("navbar.label.home")), this._btnSquads.setText(gLocalization.lText("nav.label.squads")), this._btnSBC.setText(gLocalization.lText("nav.label.sbc")), this._btnTransfers.setText(gLocalization.lText("nav.label.trading")), this._btnStore.setText(gLocalization.lText("navbar.label.store")), this._btnClub.setText(gLocalization.lText("nav.label.club")), this._btnSettings.setText(gLocalization.lText("button.settings")), this._btnHome.addClass(enums.UIState.SELECTED), NavManager.onScreenRequest.observe(this, this._onScreenRequested), this._toggleStoreNotificationBubble(repositories.User.getCurrent().getNumUnopenedPacks() > 0), getDefaultDispatcher().addObserver(enums.AppNotification.STORE_PACK_COUNT_CHANGE, this, this._nStorePackChange)
}, components.Footer.prototype.dealloc = function dealloc() {
    NavManager.onScreenRequest.unobserve(this), getDefaultDispatcher().removeObserver(enums.AppNotification.STORE_PACK_COUNT_CHANGE, this), this.superclass()
}, components.Footer.prototype.setInteractionState = function setInteractionState(t) {
    this.superclass(t), this._btnLogo.setInteractionState(t), this._btnHome.setInteractionState(t), this._btnSquads.setInteractionState(t), this._btnSBC.setInteractionState(t), this._btnTransfers.setInteractionState(t), this._btnStore.setInteractionState(t), this._btnClub.setInteractionState(t), this._btnSettings.setInteractionState(t)
}, components.Footer.prototype._onScreenRequested = function _onScreenRequested(t, i, s, o) {
    s === NavManager.SCREEN_TYPE.ROOT ? (this._btnHome.toggleClass(enums.UIState.SELECTED, i === Screens.getView("HOME")), this._btnSquads.toggleClass(enums.UIState.SELECTED, i === Screens.getView("SQUADS_HUB")), this._btnSBC.toggleClass(enums.UIState.SELECTED, i === Screens.getView("SBC_HUB")), this._btnTransfers.toggleClass(enums.UIState.SELECTED, i === Screens.getView("TRANSFERS_HUB")), this._btnStore.toggleClass(enums.UIState.SELECTED, i === Screens.getView("STORE_HUB")), this._btnClub.toggleClass(enums.UIState.SELECTED, i === Screens.getView("CLUB_HUB")), this._btnSettings.toggleClass(enums.UIState.SELECTED, i === Screens.getView("APP_SETTINGS"))) : o !== Screens.APP_SECTION.SETTINGS || isPhone() || this._btnSettings.hasClass(enums.UIState.SELECTED) || (DOMKit.removeClass(this.getRootElement().getElementsByTagName("button"), enums.UIState.SELECTED), this._btnSettings.addClass(enums.UIState.SELECTED))
}, components.Footer.prototype.gotoScreen = function gotoScreen(t) {
    gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.BUTTON_PRESS, "Nav - " + t), NavManager.requestRootScreen(Screens.getView(t))
}, components.Footer.prototype.show = function show() {
    var root = this.getRootElement();
    root && root.parentNode && DOMKit.removeClass(root.parentNode, "noFooter")
}, components.Footer.prototype.hide = function hide() {
    var root = this.getRootElement();
    root && root.parentNode && DOMKit.addClass(root.parentNode, "noFooter")
}, components.Footer.prototype.toggle = function toggle(t) {
    var root = this.getRootElement();
    root && root.parentNode && DOMKit.toggleClass(root.parentNode, "noFooter", t)
}, components.Footer.prototype.reset = function reset() {
    NavManager.onScreenRequest.unobserve(this), this._btnStore.removeUnreadBubble()
}, components.Footer.prototype.isVisible = function isVisible() {
    var root = this.getRootElement();
    return !(!root || !root.parentNode) && !DOMKit.hasClass(root.parentNode, "noFooter")
}, components.Footer.prototype.getStoreButton = function getStoreButton() {
    return this._btnStore
}, components.Footer.prototype._toggleStoreNotificationBubble = function _toggleStoreNotificationBubble(t) {
    t ? this._btnStore.addUnreadBubble() : this._btnStore.removeUnreadBubble()
}, components.Footer.prototype._nStorePackChange = function _nStorePackChange(t, object, data) {
    this._toggleStoreNotificationBubble(data.unopenedPacks > 0)
};
var gFooter = new components.Footer,
    Screens = {
        _controllers: {},
        _views: {},
        _sections: {},
        _pin: {}
    };
Screens.Register = function(t, view, i, s) {
    Screens[t] = view, Screens._sections[view] = i, utils.JS.isString(s) && (Screens._pin[view] = s)
}, Screens.getView = function(t) {
    return Screens[t] || ""
}, Screens.setPINName = function(t, i) {
    Screens._pin[t] = i
}, Screens.getPINName = function(t) {
    return Screens._pin[t]
}, Screens.OverrideView = function(t, i) {
    Screens._views[Screens[t]] = i
}, Screens.OverrideController = function(t, i) {
    Screens._controllers[Screens[t]] = i
}, Screens.CreateScreen = function(t) {
    var i = pages.controllers,
        s = Screens._views[t],
        o = Screens._controllers[t],
        l = s && pages[s] || pages[t],
        u = o && i[o] || i[t + "Controller"] || i.ScreenControllerBase;
    l || utils.Debug.Assert(!1, "Unable to find screen by id " + t + " (doesn't exist and no override was found)"), i.ScreenControllerBase;
    var h = new l,
        p = new u(h);
    return h.setController(p), h
}, Screens.APP_SECTION = {
    NONE: "",
    LOGIN: "LOGIN",
    MOBILE_START: "MOBILE_START",
    HOME: "HOME",
    FUT: "FUT",
    PLAYER_SEARCH: "PLAYER_SEARCH",
    AUCTION_SEARCH: "AUCTION_SEARCH",
    WATCH_LIST: "WATCH_LIST",
    SQUADS: "SQUADS",
    OBJECTIVES: "OBJECTIVES",
    SBC: "SBC",
    TOTW: "TOTW",
    CLUB: "CLUB",
    TRADE_PILE: "TRADE_PILE",
    UNASSIGNED: "UNASSIGNED",
    STORE: "STORE",
    SERVICE_UNAVAILABLE: "SCREEN_SERVICE_UNAVAILABLE",
    SETTINGS: "SETTINGS",
    DEBUG: "DEBUG"
}, NamespaceManager.Register("components"), components.BaseComponent = function() {
    utils.EventDispatcher.call(this)
}, utils.JS.inherits(components.BaseComponent, utils.EventDispatcher), components.BaseComponent.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.BaseComponent.prototype.getRoot = function() {
    return utils.Debug.Assert(!1, "Abstract method not overridden by Preprocessor: BaseComponent.getRoot"), null
}, NamespaceManager.Register("components"), components.FUTBody = function() {
    components.BaseComponent.call(this), this._generate()
}, utils.JS.inherits(components.FUTBody, components.BaseComponent), components.FUTBody.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("content"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.FUTBody.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.FUTBody.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.FUTBody.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.FUTBody.prototype.scrollTopTo = function(t) {
    $("#scrollWrapper", this.getRoot()).scrollTop(t)
}, components.FUTBody.prototype.setVisibility = function(t) {
    this.getRoot().toggleClass("invisible", !t)
};
var gFUTBody = new components.FUTBody;
NamespaceManager.Register("components"), components.ClickShield = function ClickShieldView() {
    FUIView.call(this), this._shieldCounter = {
        FULL: 0,
        LOADING: 0,
        INTERACTION: 0
    }, this.dismissed = new FUTObservable, Object.defineProperty(this, "dismissed", {
        writable: !1
    }), this._generate(), this._update(), this._startHandlingEvents(this.getRootElement())
}, utils.JS.inherits(components.ClickShield, FUIView), components.ClickShield.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "ClickShield"), this.__loaderIcon = document.createElement("img"), this.$_loaderIcon = $(this.__loaderIcon), this.__loaderIcon.setAttribute("src", "images/loader.svg"), this.__loaderIcon.classList.add("loaderIcon"), t.appendChild(this.__loaderIcon), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ClickShield.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__loaderIcon = null, this.$_loaderIcon = null
}, components.ClickShield.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ClickShield.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ClickShield.SHIELD = {
    NONE: 0,
    FULL: 1,
    LOADING: 2,
    INTERACTION: 4
}, components.ClickShield.prototype.dealloc = function dealloc() {
    this._stopHandlingEvents(), this.reset(), this.superclass()
}, components.ClickShield.prototype.reset = function reset() {
    this._shieldCounter.FULL = 0, this._shieldCounter.LOADING = 0, this._shieldCounter.INTERACTION = 0, this._update()
}, components.ClickShield.prototype.showShield = function(t) {
    if (t !== components.ClickShield.SHIELD.NONE) {
        switch (t) {
            case components.ClickShield.SHIELD.FULL:
                ++this._shieldCounter.FULL;
                break;
            case components.ClickShield.SHIELD.LOADING:
                ++this._shieldCounter.LOADING;
                break;
            case components.ClickShield.SHIELD.INTERACTION:
                ++this._shieldCounter.INTERACTION
        }
        this.__loaderIcon.src = isIE() ? "images/loader.gif" : "images/loader.svg", this._update()
    }
}, components.ClickShield.prototype.hideShield = function(t) {
    if (t !== components.ClickShield.SHIELD.NONE) {
        switch (t) {
            case components.ClickShield.SHIELD.FULL:
                utils.Debug.Assert(this._shieldCounter.FULL - 1 >= 0, "Hiding full shield when counter is 0."), this._shieldCounter.FULL >= 1 && --this._shieldCounter.FULL;
                break;
            case components.ClickShield.SHIELD.LOADING:
                utils.Debug.Assert(this._shieldCounter.LOADING - 1 >= 0, "Hiding loading shield when counter is 0."), this._shieldCounter.LOADING >= 1 && --this._shieldCounter.LOADING;
                break;
            case components.ClickShield.SHIELD.INTERACTION:
                utils.Debug.Assert(this._shieldCounter.INTERACTION - 1 >= 0, "Hiding interaction shield when counter is 0."), this._shieldCounter.INTERACTION >= 1 && --this._shieldCounter.INTERACTION
        }
        this._update(), this.isShowing() || this.dismissed.notify()
    }
}, components.ClickShield.prototype.isShowing = function isShowing() {
    return this._shieldCounter.FULL > 0 || this._shieldCounter.LOADING > 0 || this._shieldCounter.INTERACTION > 0
}, components.ClickShield.prototype.isInteractionShieldShowing = function isInteractionShieldShowing() {
    return this._shieldCounter.INTERACTION > 0
}, components.ClickShield.prototype._update = function _update() {
    DOMKit.toggleDisplayStyle(this.__loaderIcon, this._shieldCounter.LOADING > 0);
    var t = this._shieldCounter.INTERACTION > 0 && !(this._shieldCounter.LOADING > 0 || this._shieldCounter.FULL > 0);
    this.setDisplay(this.isShowing()), this.toggleClass("interaction", t)
}, components.ClickShield.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), e.preventDefault()
}, components.ClickShield.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), hideKeyboard()
}, components.ClickShield.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), hideKeyboard()
};
var gClickShield = new components.ClickShield;
NamespaceManager.Register("valueobjects"), valueobjects.PinEventVO = function(t, i) {
    var s = gAuthenticationModel.getUser();
    this._coreParams = {
        s: gPinManager.getCurrentStep(),
        pidt: "persona",
        pid: s && s.getSelectedPersona() ? s.getSelectedPersona().id : PinManager.UNKNOWN_PARAM,
        didm: {
            uuid: getUUID()
        },
        ts_event: (new Date).toISOString(),
        en: t
    }, s && (this._coreParams.pidm = {
        nucleus: s.id
    }), this._otherParams = i
}, valueobjects.PinEventVO.prototype.parseData = function(data) {
    this._coreParams = data._coreParams, this._otherParams = data._otherParams
}, valueobjects.PinEventVO.prototype.getCoreParams = function() {
    return utils.JS.isValid(gAuthenticationModel.getUser()) && (this._coreParams.dob = gAuthenticationModel.getUser().dateOfBirth.slice(0, -3)), this._coreParams
}, valueobjects.PinEventVO.prototype.getOtherParams = function() {
    return this._otherParams
}, valueobjects.PinEventVO.prototype.addOtherParam = function(name, value) {
    this._otherParams[name] = value
}, NamespaceManager.Register("utils"), utils.PinFactory = {}, utils.PinFactory.bootStartCounter = 0, utils.PinFactory.createEvent = function(t, i) {
    var event = new valueobjects.PinEventVO(t, i);
    return t === enums.PIN.EVENT.BOOT_START && (i.source = utils.PinFactory.bootStartCounter + "-" + i.source, utils.PinFactory.bootStartCounter++), event
}, utils.PinFactory.createPayload = function(t) {
    var i = utils.PinFactory._setupPayload();
    return t.forEach(function(e, t) {
        i.events.push(e.getOtherParams()), i.events[t].core = e.getCoreParams()
    }), i
}, utils.PinFactory._setupPayload = function() {
    PinManager.UNKNOWN_PARAM;
    var version = getAppVersion();
    isChrome() || (version += "." + gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_CHANGELIST));
    var t = gPinManager.getUniqueSessionID(),
        i = !utils.JS.isEmpty(t),
        s = {
            taxv: PinManager.TAXONOMY_VERSION,
            tidt: PinManager.TITLE_ID_TYPE,
            tid: enums.SKU.FUT,
            rel: "prod",
            v: version,
            ts_post: (new Date).toISOString(),
            gid: 0,
            plat: "web",
            et: "client",
            loc: gLocalization.getEffectiveLocale(),
            is_sess: i,
            custom: {
                networkAccess: isChrome() || "wifi" === navigator.connection.type ? "W" : "G"
            },
            events: []
        };
    i && (s.sid = t);
    var o = gAuthenticationModel.getUser(),
        l = utils.JS.isValid(o) ? o.getSelectedPersona() : null;
    return utils.JS.isValid(l) && (s.custom.service_plat = l.platform.toLowerCase()), s
}, communication.LogoutDelegate = function() {
    communication.BaseFUTDelegate.call(this)
}, utils.JS.inherits(communication.LogoutDelegate, communication.BaseFUTDelegate), communication.LogoutDelegate.prototype.execute = function() {
    if (this.getSessionInfo().isAuthenticated()) {
        this.useClickShield(!0), this.setRequest("/ut/auth", models.CommunicationModel.METHOD.DELETE, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
    } else this.dispatch(communication.BaseDelegate.SUCCESS)
}, communication.PileSizeDelegate = function() {
    communication.BaseFUTDelegate.call(this), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "clientdata/pileSize", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON
}, utils.JS.inherits(communication.PileSizeDelegate, communication.BaseFUTDelegate), communication.PileSizeDelegate.prototype.onSuccess = function(t) {
    if (communication.PileSizeDelegate.superClass_.onSuccess.call(this, t), t.entries && t.entries.length) {
        var i, s, o = t.entries.length;
        for (i = 0; i < o; ++i) switch ((s = t.entries[i]).key) {
            case communication.PileSizeDelegate.PILE_ID_TRADEPILE:
                repositories.Item.setPileSize(enums.FUTItemPile.TRANSFER, s.value);
                break;
            case communication.PileSizeDelegate.PILE_ID_WATCHLIST:
                repositories.Item.setPileSize(enums.FUTItemPile.INBOX, s.value);
                break;
            case communication.PileSizeDelegate.PILE_ID_SQUADSLOTS:
                repositories.Squad.MAX_SQUADS = s.value;
                break;
            case communication.PileSizeDelegate.MAX_ALLOWED_AUCTIONS:
                repositories.Item.maxAllowedAuctions = s.value
        }
    }
}, communication.PileSizeDelegate.PILE_ID_TRADEPILE = 2, communication.PileSizeDelegate.PILE_ID_CONSUMABLES = 3, communication.PileSizeDelegate.PILE_ID_WATCHLIST = 4, communication.PileSizeDelegate.PILE_ID_SQUADSLOTS = 6, communication.PileSizeDelegate.MAX_ALLOWED_AUCTIONS = 11, communication.SquadLoadDelegate = function SquadLoadDelegate(t, i) {
    communication.BaseFUTDelegate.call(this);
    var s = enums.UserSquadId.ACTIVE;
    if (utils.JS.isNumber(t) && t >= 0) s = t.toString();
    else {
        var o;
        for (o in enums.UserSquadId) enums.UserSquadId.hasOwnProperty(o) && enums.UserSquadId[o] === t && (s = t)
    }
    var url = communication.BaseFUTDelegate.REQUEST_ROOT + "squad/" + s;
    utils.JS.isNumber(i) && i > 0 && (url += "/user/" + i.toString()), this.setRequest(url, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SquadLoadDelegate, communication.BaseFUTDelegate), communication.UserModelDelegate = function() {
    communication.BaseFUTDelegate.call(this), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "user", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON
}, utils.JS.inherits(communication.UserModelDelegate, communication.BaseFUTDelegate), communication.UserModelDelegate.prototype.onSuccess = function(response) {
    var t = new valueobjects.UserVO;
    t.setClubName(response.clubName), t.setClubAbbr(response.clubAbbr), t.setEstablished(new Date(1e3 * response.established)), t.setTrophies(response.trophies), t.setWins(response.won), t.setDraws(response.draw), t.setLosses(response.loss), t.setBadgeId(this.parseClubIdFromActivesData(response.actives));
    var i = new valueobjects.CurrencyVO;
    if (i.parseCurrencyDataObject(response.currencies), gUserModel.setPersonaName(response.personaName), gUserModel.setUserVO(t), gUserModel.setCurrencyVO(i), gUserModel.setCurrencyDirtyFlag(!1), utils.JS.isValid(response.feature) && utils.JS.isValid(response.feature.trade) ? gUserModel.setTradeAccess(parseInt(response.feature.trade, 10)) : gUserModel.setTradeAccess(models.UserModel.TRADE_ACCESS.MAINTENANCE), response.unopenedPacks) {
        var s = repositories.User.getCurrent();
        s && s.setNumUnopenedPacks((response.unopenedPacks.recoveredPacks || 0) + (response.unopenedPacks.preOrderPacks || 0))
    }
    var o = factories.Item.generateItemsFromItemData(response.actives, null);
    repositories.Item.add(o), this.dispatch(communication.BaseDelegate.SUCCESS)
}, communication.UserModelDelegate.prototype.parseClubIdFromActivesData = function(t) {
    var object, i = 0;
    for (object in t)
        if (t.hasOwnProperty(object) && (object = t[object], enums.ItemType.BADGE === object.itemType)) {
            i = object.assetId;
            break
        }
    return i
}, communication.UserMassInfoDelegate = function() {
    communication.BaseFUTDelegate.call(this), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "usermassinfo", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON
}, utils.JS.inherits(communication.UserMassInfoDelegate, communication.BaseFUTDelegate), communication.UserMassInfoDelegate.prototype.onSuccess = function(t) {
    function callDelegate(t) {
        s++, t.addListener(communication.BaseDelegate.SUCCESS, this, delegateComplete), t.addListener(communication.BaseDelegate.FAIL, this, delegateComplete), t.send()
    }

    function delegateComplete() {
        0 === --s && this.dispatch(communication.BaseDelegate.SUCCESS)
    }
    var i, s = 0;
    if (t.settings && gSettingsModel.setConfigs(t.settings.configs), i = new communication.UserModelDelegate, t.userInfo ? i.onSuccess(t.userInfo) : callDelegate.call(this, i), i = new communication.PileSizeDelegate, t.pileSizeClientData ? i.onSuccess(t.pileSizeClientData) : callDelegate.call(this, i), t.purchasedItems && repositories.Item.setUnassignedItemsFromPayload(t.purchasedItems), t.squad) repositories.Squad.storeSquad(gAuthenticationModel.getUser().selectedPersona, t.squad), repositories.Squad.setActiveSquadId(t.squad.id);
    else {
        s++;
        var o = new communication.SquadLoadDelegate;
        o.addListener(communication.BaseDelegate.SUCCESS, this, function _loadSquadSuccess(sender, data) {
            sender.clearListenersByScope(this), repositories.Squad.storeSquad(gAuthenticationModel.getUser().selectedPersona, data), repositories.Squad.setActiveSquadId(data.id), delegateComplete.call(this)
        }), o.addListener(communication.BaseDelegate.FAIL, this, function _loadSquadFail(sender, error) {
            sender.clearListenersByScope(this), delegateComplete.call(this)
        }), o.send()
    }
    if (t.activeMessages) {
        var l = t.activeMessages.activeMessage;
        if (utils.JS.isValid(l) && Array.isArray(l)) {
            var u = l.filter(function(t) {
                    return utils.JS.isValid(t.rewardType)
                }),
                h = u.length > 0 ? u[0] : null;
            utils.JS.isValid(h) && repositories.Message.setDailyGift(h)
        } else utils.Debug.Assert(utils.JS.isValid(l) && Array.isArray(l), "WARNING - Data received did not contain an activeMessage variable. Did the data format change?")
    }
    0 === s && this.dispatch(communication.BaseDelegate.SUCCESS, t)
}, communication.TeamsConfigDelegate = function() {
    communication.BaseDelegate.call(this)
}, utils.JS.inherits(communication.TeamsConfigDelegate, communication.BaseDelegate), communication.TeamsConfigDelegate.prototype.execute = function() {
    var url = utils.AssetLocator.getStaticTeamConfigURI();
    utils.ResourceManager.RequestResource(url, this.onResourceCached.bind(this), this.onResourceCacheFailed.bind(this))
}, communication.TeamsConfigDelegate.prototype.onResourceCached = function(value) {
    this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setCache(isWeb()), this.send()
}, communication.TeamsConfigDelegate.prototype.onResourceCacheFailed = function() {
    this.onFail(enums.NetworkError.UNRECOVERABLE_ERROR)
}, communication.TeamsConfigDelegate.prototype.onSuccess = function(t) {
    communication.TeamsConfigDelegate.parseTeamConfig(t), communication.TeamsConfigDelegate.superClass_.onSuccess.call(this, t)
}, communication.TeamsConfigDelegate.parseTeamConfig = function(t) {
    t.Years.forEach(function(t) {
        var i = utils.TextUtils.getYearFromString(t.Year);
        repositories.TeamConfig.addTeams(t.Teams, i), t.InternationalTeams && repositories.TeamConfig.addTeams(t.InternationalTeams, i), t.LegendsTeams && repositories.TeamConfig.addTeams(t.LegendsTeams, i, !0), repositories.TeamConfig.addLeagues(t.Leagues, i), t.LegendsLeagues && repositories.TeamConfig.addLeagues(t.LegendsLeagues, i, !0), repositories.TeamConfig.addNations(t.Nations, i)
    }, this)
}, communication.StaticPlayerDataDelegate = function() {
    function StaticPlayerDataDelegate() {
        communication.BaseDelegate.call(this)
    }

    function onCacheSuccess(value) {
        this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setCache(isWeb()), StaticPlayerDataDelegate.superClass_.send.call(this)
    }

    function onCacheFail() {
        this.onFail(enums.NetworkError.NOT_FOUND)
    }
    return utils.JS.inherits(StaticPlayerDataDelegate, communication.BaseDelegate), StaticPlayerDataDelegate.prototype.send = function() {
        utils.ResourceManager.RequestResource(utils.AssetLocator.getPlayerSearchFileURI(), onCacheSuccess.bind(this), onCacheFail.bind(this))
    }, StaticPlayerDataDelegate
}(), communication.PlayerMetaDataDelegate = function() {
    function PlayerMetaDataDelegate() {
        communication.BaseDelegate.call(this)
    }

    function onCacheSuccess(value) {
        this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setCache(isWeb()), PlayerMetaDataDelegate.superClass_.send.call(this)
    }

    function onCacheFail() {
        this.onFail(enums.NetworkError.NOT_FOUND)
    }
    return utils.JS.inherits(PlayerMetaDataDelegate, communication.BaseDelegate), PlayerMetaDataDelegate.prototype.send = function() {
        utils.ResourceManager.RequestResource(utils.AssetLocator.getPlayerMetaFileURI(), onCacheSuccess.bind(this), onCacheFail.bind(this))
    }, PlayerMetaDataDelegate
}(), communication.PlayerIconDataDelegate = function() {
    function PlayerIconDataDelegate() {
        communication.BaseDelegate.call(this)
    }

    function onCacheSuccess(value) {
        this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setCache(isWeb()), PlayerIconDataDelegate.superClass_.send.call(this)
    }

    function onCacheFail() {
        this.onFail(enums.NetworkError.NOT_FOUND)
    }
    return utils.JS.inherits(PlayerIconDataDelegate, communication.BaseDelegate), PlayerIconDataDelegate.prototype.send = function() {
        utils.ResourceManager.RequestResource(utils.AssetLocator.getPlayerIconFileURI(), onCacheSuccess.bind(this), onCacheFail.bind(this))
    }, PlayerIconDataDelegate
}(), communication.PlaceholderAssetsDelegate = function() {
    communication.BaseDelegate.call(this)
}, utils.JS.inherits(communication.PlaceholderAssetsDelegate, communication.BaseDelegate), communication.PlaceholderAssetsDelegate.prototype.send = function send() {
    utils.ResourceManager.RequestResource(utils.AssetLocator.getStaticPlaceholderAssetConfigURI(), function _onCacheSuccess(value) {
        this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setCache(isWeb()), communication.PlaceholderAssetsDelegate.superClass_.send.call(this)
    }.bind(this), function _onCacheFail() {
        this.onFail(enums.NetworkError.UNRECOVERABLE_ERROR)
    }.bind(this))
}, communication.PlaceholderAssetsDelegate.prototype.onSuccess = function(t) {
    utils.AssetLocator.PLACEHOLDER_LOOKUP = t, communication.PlaceholderAssetsDelegate.superClass_.onSuccess.call(this, t)
}, communication.SquadDataDelegate = function() {
    communication.BaseDelegate.call(this)
}, utils.JS.inherits(communication.SquadDataDelegate, communication.BaseDelegate), communication.SquadDataDelegate.prototype.send = function send() {
    utils.ResourceManager.RequestResource(utils.AssetLocator.getSquadDataURI(utils.TextUtils.getYearString(enums.Year.ASSET)), function _onCacheSuccess(value) {
        this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setCache(isWeb()), communication.SquadDataDelegate.superClass_.send.call(this)
    }.bind(this), function _onCacheFail() {
        this.onFail(enums.NetworkError.UNRECOVERABLE_ERROR)
    }.bind(this))
}, communication.SquadDataDelegate.prototype.onSuccess = function(t) {
    repositories.Squad.setSquadDataLookup(t), repositories.PlayStyle.setPlayStyles(t.styleAttribMods), communication.SquadDataDelegate.superClass_.onSuccess.call(this, t)
}, communication.SetMTXTransactionDelegate = function(transaction) {
    communication.BaseFUTDelegate.call(this), this._url = "/ut/v2/game/fifa14/store/transaction/" + transaction.idStr, this._requestType = models.CommunicationModel.METHOD.PUT, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON, this._data = {
        state: transaction.state,
        useCount: 1,
        productId: transaction.productId,
        groupName: transaction.groupName
    }
}, utils.JS.inherits(communication.SetMTXTransactionDelegate, communication.BaseFUTDelegate), communication.SetMTXTransactionDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.NOT_ENOUGH_CREDIT:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.auctionInsufficientCoinsTitle", "popup.error.auctionInsufficientCoins");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, NamespaceManager.Register("entities"), entities.MTXTransaction = function(data) {
    this.firstPartyStoreId = data.firstPartyStoreId, Object.defineProperty(this, "firstPartyStoreId", {
        writable: !1
    }), this.groupName = data.groupName, Object.defineProperty(this, "groupName", {
        writable: !1
    }), this.NPTicketLength = data.NPTicketLength, Object.defineProperty(this, "NPTicketLength", {
        writable: !1
    }), this.packId = data.packId, Object.defineProperty(this, "packId", {
        writable: !1
    }), this.productId = data.productId, Object.defineProperty(this, "productId", {
        writable: !1
    }), this.purchasePackType = data.purchasePackType, Object.defineProperty(this, "purchasePackType", {
        writable: !1
    });
    var t;
    Object.defineProperty(this, "state", {
        get: function() {
            return t
        },
        set: function(i) {
            var key;
            for (key in enums.Purchase.State)
                if (enums.Purchase.State.hasOwnProperty(key) && enums.Purchase.State[key] === i) return void(t = i);
            utils.Debug.Assert(!1, "Invalid assignment to entity: MTXTransaction.state")
        }
    }), this.state = data.state, this.timestamp = data.timestamp, Object.defineProperty(this, "timestamp", {
        writable: !1
    }), this.id = data.transactionId, Object.defineProperty(this, "id", {
        writable: !1
    }), this.idStr = data.transactionIdString, Object.defineProperty(this, "idStr", {
        writable: !1
    }), this.useAuth = data.useAuth, Object.defineProperty(this, "useAuth", {
        writable: !1
    }), this.nextState = enums.Purchase.State.INVALID, Object.defineProperty(this, "nextState", {
        get: function() {
            switch (this.state) {
                case enums.Purchase.State.TRANSACTIONCREATED:
                    return enums.Purchase.State.PURCHASECOMPLETE;
                case enums.Purchase.State.PURCHASECOMPLETE:
                    return enums.Purchase.State.PURCHASECONSUMABLECOUNT;
                case enums.Purchase.State.TRANSACTIONCOMPLETE:
                    return enums.Purchase.State.TRANSACTIONCOMPLETE;
                default:
                    return enums.Purchase.State.INVALID
            }
        }
    })
}, entities.MTXTransaction.prototype.process = function() {
    function onProcessStateSuccess(sender, result) {
        sender.clearListenersByScope(this), this.state = result.state, processNextState(this)
    }

    function onProcessStateFail(sender, error) {
        sender.clearListenersByScope(this), error.getCode() === enums.NetworkError.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.STORE_ENABLED);
        NetworkErrorManager.handle(error, !0, function() {
            event.notify(0, error.getCode())
        })
    }

    function processNextState(transaction) {
        if (transaction.state = transaction.nextState, transaction.state !== enums.Purchase.State.TRANSACTIONCOMPLETE && transaction.state !== enums.Purchase.State.TRANSACTIONCANCEL) {
            var t = new communication.SetMTXTransactionDelegate(transaction);
            t.addListener(communication.BaseDelegate.SUCCESS, transaction, onProcessStateSuccess), t.addListener(communication.BaseDelegate.FAIL, transaction, onProcessStateFail), t.send()
        } else event.notify(transaction.packId)
    }
    var event = new FUTObservable;
    return processNextState(this), event
}, communication.GetMTXTransactionDelegate = function() {
    communication.BaseFUTDelegate.call(this), this._url = "/ut/v2/game/fifa14/store/transaction", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON
}, utils.JS.inherits(communication.GetMTXTransactionDelegate, communication.BaseFUTDelegate), communication.GetMTXTransactionDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.NOT_ENOUGH_CREDIT:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.auctionInsufficientCoinsTitle", "popup.error.auctionInsufficientCoins");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.StoreLocDelegate = function() {
    communication.BaseDelegate.call(this)
}, utils.JS.inherits(communication.StoreLocDelegate, communication.BaseDelegate), communication.StoreLocDelegate.prototype.execute = function() {
    var url = utils.AssetLocator.getStoreLocFileURI();
    utils.ResourceManager.RequestResource(url, this.onResourceCached.bind(this), this.onResourceCacheFailed.bind(this))
}, communication.StoreLocDelegate.prototype.onResourceCached = function(value) {
    this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_XML, models.CommunicationModel.CONTENT_TYPE.XML), this.send()
}, communication.StoreLocDelegate.prototype.onResourceCacheFailed = function() {
    this.onFail(enums.NetworkError.UNRECOVERABLE_ERROR)
}, communication.PhishingGetQuestionDelegate = function() {
    communication.BaseFUTDelegate.call(this)
}, utils.JS.inherits(communication.PhishingGetQuestionDelegate, communication.BaseFUTDelegate), communication.PhishingGetQuestionDelegate.prototype.execute = function() {
    var url = communication.BaseFUTDelegate.REQUEST_ROOT + "phishing/question";
    this.setRequest(url, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
}, communication.PhishingGetQuestionDelegate.prototype.handleErrorResponse = function(t) {
    utils.JS.isObject(t) && t.token && gUserSettingsModel.setUserItem(models.UserSettingsModel.SECURITY_TOKEN, t.token)
}, communication.PhishingGetQuestionDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.ALREADY_ANSWERED_PHISHING_QUESTION:
        case enums.NetworkError.ACCOUNT_LOCKED:
        case enums.NetworkError.NO_REMAINING_ATTEMPTS:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "", "");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.PersonaDelegate = function(t, i) {
    communication.BaseFUTDelegate.call(this), this._customURL = t, this._customProtocol = i, this.setURLVariables({
        filterConsoleLogin: !0,
        sku: enums.SKU.FUT,
        returningUserGameYear: (parseInt(utils.TextUtils.getYearString(), 10) - 1).toString()
    }), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "user/accountinfo", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.checkAuthentication(!1)
}, utils.JS.inherits(communication.PersonaDelegate, communication.BaseFUTDelegate), communication.PersonaDelegate.prototype.generateURL = function() {
    return this._customProtocol + "://" + this._customURL + this._url + this.generateUrlParams()
}, communication.PersonaDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.NO_USER:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.title.genericError", "popup.body.genericError");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, NamespaceManager.Register("valueobjects"), valueobjects.ShardDataItemVO = function() {
    this._shardId = "", this._clientFacingIpPort = "", this._clientProtocol = "", this._platforms = [], this._skus = []
}, valueobjects.ShardDataItemVO.prototype.parseItemDataObject = function(data) {
    this._shardId = data.shardId, this._clientFacingIpPort = data.clientFacingIpPort, this._clientProtocol = data.clientProtocol, this._platforms = data.platforms, this._skus = data.skus
}, valueobjects.ShardDataItemVO.prototype.getShardId = function() {
    return this._shardId
}, valueobjects.ShardDataItemVO.prototype.getClientFacingIpPort = function() {
    return this._clientFacingIpPort
}, valueobjects.ShardDataItemVO.prototype.getClientProtocol = function() {
    return this._clientProtocol
}, valueobjects.ShardDataItemVO.prototype.getPlatforms = function() {
    return this._platforms
}, valueobjects.ShardDataItemVO.prototype.containsPlatform = function(platform) {
    var t, length = this._platforms.length;
    for (t = 0; t < length; ++t)
        if (platform === this._platforms[t]) return !0;
    return !1
}, valueobjects.ShardDataItemVO.prototype.containsSku = function(t) {
    var i, length = this._skus.length;
    for (i = 0; i < length; ++i)
        if (t === this._skus[i]) return !0;
    return !1
}, communication.ShardInfoDelegate = function() {
    communication.BaseFUTDelegate.call(this)
}, utils.JS.inherits(communication.ShardInfoDelegate, communication.BaseFUTDelegate), communication.ShardInfoDelegate.prototype.execute = function() {
    this.checkAuthentication(!1);
    this.setRequest("/ut/shards/v2", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
}, communication.ShardInfoDelegate.prototype.getDefaultHeaders = function() {
    var t = gAuthenticationModel.getUser();
    return {
        "Easw-Session-Data-Nucleus-Id": t ? t.id : 0,
        "X-UT-SID": this.getSessionInfo().id,
        "X-UT-PHISHING-TOKEN": gUserSettingsModel.getUserItem(models.UserSettingsModel.SECURITY_TOKEN)
    }
}, communication.ShardInfoDelegate.prototype.generateURL = function() {
    return gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_DEFAULT_FUT_SERVICE_PROTOCOL) + "://" + gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_DEFAULT_FUT_SERVICE_URL) + this._url + this.generateUrlParams()
}, communication.ShardInfoDelegate.prototype.onSuccess = function(t) {
    var i = t.shardInfo.map(function(t) {
        var i = new valueobjects.ShardDataItemVO;
        return i.parseItemDataObject(t), i
    });
    this.dispatch(communication.BaseDelegate.SUCCESS, i)
}, communication.ExtendedLocDelegate = function() {
    communication.BaseDelegate.call(this)
}, utils.JS.inherits(communication.ExtendedLocDelegate, communication.BaseDelegate), communication.ExtendedLocDelegate.prototype.execute = function() {
    var url = gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + utils.AssetLocator.getExtendedLocFileURI();
    this.setRequest(url, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
}, communication.ExtendedLocDelegate.prototype.onResourceCached = function(value) {}, communication.ExtendedLocDelegate.prototype.onResourceCacheFailed = function() {
    this.onFail(enums.NetworkError.UNRECOVERABLE_ERROR)
}, communication.ExtendedLocDelegate.prototype.onSuccess = function(t) {
    gLocalization.appendAdditionalStrings(t), communication.ExtendedLocDelegate.superClass_.onSuccess.call(this, t)
}, communication.ExtendedLocDelegate.prototype.onFail = function(errorCode) {
    communication.ExtendedLocDelegate.superClass_.onFail.call(this, enums.NetworkError.UNRECOVERABLE_ERROR)
}, NamespaceManager.Register("repositories"), repositories.PlayerMeta = function() {
    function PlayerMetaRepository() {}
    var t = new FUTHashTable({});
    return PlayerMetaRepository.prototype.setData = function setData(data) {
        this.clearData();
        var index;
        for (index in data)
            if (data.hasOwnProperty(index)) {
                var i = new transferobjects.PlayerMetaData(parseInt(index, 10), data[index]);
                t.set(i.id, i)
            }
    }, PlayerMetaRepository.prototype.get = function get(i) {
        return t.get(i)
    }, PlayerMetaRepository.prototype.clearData = function clearData() {
        t.clear()
    }, new PlayerMetaRepository
}(), NamespaceManager.Register("transferobjects"), transferobjects.PlayerIconData = function(data) {
    this.playerId = data.playerId, Object.defineProperty(this, "playerId", {
        writable: !1
    }), this.iconId = data.iconId, Object.defineProperty(this, "iconId", {
        writable: !1
    })
}, NamespaceManager.Register("repositories"), repositories.PlayerIcon = function() {
    function PlayerIconRepository() {}
    var t = new FUTHashTable({});
    return PlayerIconRepository.prototype.reset = function reset() {
        t.clear()
    }, PlayerIconRepository.prototype.setData = function setData(data) {
        this.reset(), data.forEach(function _storeIconEntry(i) {
            var s = new transferobjects.PlayerIconData(i);
            t.set(s.playerId, s)
        })
    }, PlayerIconRepository.prototype.get = function get(i) {
        return t.get(i)
    }, new PlayerIconRepository
}(), NamespaceManager.Register("viewmodels"), viewmodels.OnboardingState = function OnboardingStateViewmodel() {
    FUTObject.call(this), this._countryId = 0, this._homeKitId = 0, this._awayKitId = 0, this._badgeId = 0, this._loanerDefId = 0
}, utils.JS.inherits(viewmodels.OnboardingState, FUTObject), viewmodels.OnboardingState.prototype.getCountryId = function getCountryId() {
    return this._countryId
}, viewmodels.OnboardingState.prototype.setCountryId = function setCountryId(id) {
    this._countryId = id
}, viewmodels.OnboardingState.prototype.getHomeKitId = function getHomeKitId() {
    return this._homeKitId
}, viewmodels.OnboardingState.prototype.setHomeKitId = function setHomeKitId(id) {
    this._homeKitId = id
}, viewmodels.OnboardingState.prototype.hasHomeKit = function hasHomeKit() {
    return 0 !== this._homeKitId
}, viewmodels.OnboardingState.prototype.getAwayKitId = function getAwayKitId() {
    return this._awayKitId
}, viewmodels.OnboardingState.prototype.setAwayKitId = function setAwayKitId(id) {
    this._awayKitId = id
}, viewmodels.OnboardingState.prototype.hasAwayKit = function hasAwayKit() {
    return 0 !== this._awayKitId
}, viewmodels.OnboardingState.prototype.getBadgeId = function getBadgeId() {
    return this._badgeId
}, viewmodels.OnboardingState.prototype.setBadgeId = function setBadgeId(id) {
    this._badgeId = id
}, viewmodels.OnboardingState.prototype.hasBadge = function hasBadge() {
    return 0 !== this._badgeId
}, viewmodels.OnboardingState.prototype.getLoanerDefId = function getLoanerDefId() {
    return this._loanerDefId
}, viewmodels.OnboardingState.prototype.setLoanerDefId = function setLoanerDefId(id) {
    this._loanerDefId = id
}, viewmodels.OnboardingState.prototype.hasLoaner = function hasLoaner() {
    return 0 !== this._loanerDefId
}, viewmodels.OnboardingState.prototype.isComplete = function isComplete() {
    return this.hasBadge()
}, NamespaceManager.Register("models"), models.LoginModel = function() {
    utils.EventDispatcher.call(this), this._currentLoginStep = 0, this._isRunning = !1, this._onboardingState = null
}, utils.JS.inherits(models.LoginModel, utils.EventDispatcher), models.LoginModel.LOGIN_STEP = {
    EXTENDED_LOC: 0,
    SHARD_INFO: 1,
    PERSONA_LIST: 2,
    FUT_AUTH: 3,
    CHECK_SECURITY: 4,
    RUN_PRE_BOOT_SEQUENCE: 5,
    RUN_BOOT_SEQUENCE: 6,
    HOME_SCREEN: 7
}, models.LoginModel.prototype.login = function(resume) {
    utils.Debug.Assert(!this._isRunning, "[LOGIN] Attempted to login when a login/logout request is already running."), this._isRunning || (gClickShield.showShield(components.ClickShield.SHIELD.LOADING), this._isRunning = !0, resume || (this._currentLoginStep = 0), this._runCurrentStep())
}, models.LoginModel.prototype._runNextStep = function() {
    this._currentLoginStep++, this._runCurrentStep()
}, models.LoginModel.prototype._runCurrentStep = function() {
    switch (this._currentLoginStep) {
        case models.LoginModel.LOGIN_STEP.EXTENDED_LOC:
            this._getExtendedLocFile();
            break;
        case models.LoginModel.LOGIN_STEP.SHARD_INFO:
            this._requestShardInfo();
            break;
        case models.LoginModel.LOGIN_STEP.PERSONA_LIST:
            this._getFUTPersonaList();
            break;
        case models.LoginModel.LOGIN_STEP.FUT_AUTH:
            this._authenticateWithFUT();
            break;
        case models.LoginModel.LOGIN_STEP.CHECK_SECURITY:
            this._getPhishingQuestion();
            break;
        case models.LoginModel.LOGIN_STEP.RUN_PRE_BOOT_SEQUENCE:
            this._runPreBootStaticDataChain();
            break;
        case models.LoginModel.LOGIN_STEP.RUN_BOOT_SEQUENCE:
            this._runInitialMassBoot();
            break;
        case models.LoginModel.LOGIN_STEP.HOME_SCREEN:
            this._gotoHomeScreen();
            break;
        default:
            utils.Debug.Assert(!1, "[models.LoginModel] Invalid or unsupported bootflow step requested."), this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }
}, models.LoginModel.prototype._getExtendedLocFile = function() {
    var t = new communication.ExtendedLocDelegate;
    t.addListener(communication.BaseDelegate.SUCCESS, this, this._getExtendedLocFileSuccess), t.addListener(communication.BaseDelegate.FAIL, this, this._getExtendedLocFileFail), t.addListener(communication.BaseDelegate.CANCEL, this, this._getExtendedLocFileFail), t.execute()
}, models.LoginModel.prototype._getExtendedLocFileSuccess = function(sender) {
    sender.clearListenersByScope(this), this._runNextStep()
}, models.LoginModel.prototype._getExtendedLocFileFail = function(sender) {
    sender.clearListenersByScope(this), this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.LoginModel.prototype._requestShardInfo = function() {
    var t = new communication.ShardInfoDelegate;
    t.addListener(communication.BaseDelegate.SUCCESS, this, this._onShardInfoSuccess), t.addListener(communication.BaseDelegate.FAIL, this, this._onShardInfoFail), t.addListener(communication.BaseDelegate.CANCEL, this, this._onShardInfoFail), t.execute()
}, models.LoginModel.prototype._onShardInfoSuccess = function(sender, data) {
    sender.clearListenersByScope(this), gAuthenticationModel.setShardInfoList(data), this._runNextStep()
}, models.LoginModel.prototype._onShardInfoFail = function(sender, error) {
    sender.clearListenersByScope(this), this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.LoginModel.prototype._getFUTPersonaList = function() {
    function processShard() {
        if (++t >= gAuthenticationModel.getShardInfoList().length)
            if (gAuthenticationModel.getUser().personas.length < 1) this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("GETTING_STARTED"), enums.GettingStartedTypes.FIFA) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            else {
                var i = gAuthenticationModel.getUser().getSelectedPersona();
                if (i.sku === enums.SKU.NONE) this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("GETTING_STARTED"), enums.GettingStartedTypes.NO_SKU) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
                else if (i.isSwitch) this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("GETTING_STARTED"), enums.GettingStartedTypes.PLATFORM_SWITCH) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
                else if (i.state === enums.UserState.RETURNING_USER_EXPIRED) this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("WEBSTART_ACCESS_OVER"), enums.GettingStartedTypes.FIFA) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
                else if (i.isReturningUser || i.hasFullAccess) {
                    var s = gAuthenticationModel.getShardItemBySKU(i.sku),
                        o = services.Authentication.getSession(enums.AuthEnvironment.UTAS);
                    if (utils.Debug.Assert(utils.JS.isValid(s), "No shard was found for the selected persona."), !s) return this._isRunning = !1, void utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this));
                    o.protocol = s._clientProtocol, o.hostname = s._clientFacingIpPort, this._runNextStep()
                } else {
                    this._isRunning = !1;
                    var l = i.isFreeTrial ? enums.GettingStartedTypes.FREE_TRIAL : i.isAccessTrial ? enums.GettingStartedTypes.ACCESS_TRIAL : enums.GettingStartedTypes.FUT;
                    NavManager.requestChildScreen(Screens.getView("GETTING_STARTED"), l) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
                }
            }
    }

    function onSuccess(sender, result) {
        result.userAccountInfo.personas.forEach(function(t) {
            gAuthenticationModel.getUser().addPersona(t)
        }), processShard.call(this)
    }

    function onFail(sender, error) {
        processShard.call(this)
    }
    var t = 0;
    gAuthenticationModel.getShardInfoList().forEach(function(t) {
        var i = new communication.PersonaDelegate(t._clientFacingIpPort, t._clientProtocol);
        i.addListener(communication.BaseDelegate.SUCCESS, this, onSuccess), i.addListener(communication.BaseDelegate.FAIL, this, onFail), i.addListener(communication.BaseDelegate.CANCEL, this, onFail), i.send()
    }, this)
}, models.LoginModel.prototype._authenticateWithFUT = function() {
    gAuthenticationModel.addListener(models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL, this, this._onAuthenticateWithFUTSuccess), gAuthenticationModel.addListener(models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED, this, this._onAuthenticateWithFUTFail), gAuthenticationModel.authenticate(enums.FOSService.FUT)
}, models.LoginModel.prototype._onAuthenticateWithFUTSuccess = function() {
    gAuthenticationModel.removeListener(models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL, this, this._onAuthenticateWithFUTSuccess), gAuthenticationModel.removeListener(models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED, this, this._onAuthenticateWithFUTFail);
    var t = {
        type: PinManager.SERVER_TYPE,
        status: enums.PIN.LOGIN_EVT_STATUS.SUCCESS,
        userid: gAuthenticationModel.getUser().getSelectedPersona().id
    };
    gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.LOGIN, t)), this._runNextStep()
}, models.LoginModel.prototype._onAuthenticateWithFUTFail = function(sender, t, error) {
    gAuthenticationModel.removeListener(models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL, this, this._onAuthenticateWithFUTSuccess), gAuthenticationModel.removeListener(models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED, this, this._onAuthenticateWithFUTFail);
    var i = {
        type: PinManager.SERVER_TYPE,
        status: enums.PIN.LOGIN_EVT_STATUS.FAIL,
        status_code: error.toString()
    };
    switch (gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.LOGIN, i)), error) {
        case enums.NetworkError.NO_INTERNET_CONNECTION:
            this._isRunning = !1, utils.PopupManager.showNoInternetConnectionPopup(), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        case enums.NetworkError.INVALID_CREDENTIALS:
            this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        case enums.NetworkError.ACCOUNT_BANNED:
            this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ACCOUNT_BANNED, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        case enums.NetworkError.UPDATE_REQUIRED:
            utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.UPDATE_FUT, null, this.onUpdateFUTOK.bind(this), this.onUpdateFUTCancel.bind(this));
            break;
        case enums.NetworkError.DID_CREATE_EXCEEDED:
            this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.DID_CREATE_EXCEEDED, this.logout.bind(this));
            break;
        case enums.NetworkError.DID_LOGIN_EXCEEDED:
            this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.DID_LOGIN_EXCEEDED, this.logout.bind(this));
            break;
        case enums.NetworkError.DEVICE_SUSPENDED:
            this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.DEVICE_SUSPENDED, this.logout.bind(this));
            break;
        case enums.NetworkError.LOGGED_IN_ON_CONSOLE:
            this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("SIGNED_ON_CONSOLE")) || (NavManager.getCurrentScreen().getScreenId() === Screens.getView("SIGNED_ON_CONSOLE") ? NavManager.getCurrentScreen().setInteractionsEnabled(!0) : utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this))), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        default:
            this._currentLoginStep = models.LoginModel.LOGIN_STEP.HOME_SCREEN, this._runCurrentStep()
    }
}, models.LoginModel.prototype.onUpdateFUTOK = function() {
    isChrome() ? this.onUpdateFUTCancel() : window.plugins.utilities.showStoreAppPage(this.onForceUpdateSuccess.bind(this), this.onUpdateFUTCancel.bind(this))
}, models.LoginModel.prototype.onForceUpdateSuccess = function() {
    this._isRunning = !1, this.logout(), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.LoginModel.prototype.onUpdateFUTCancel = function() {
    this._isRunning = !1, this.logout(), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.LoginModel.prototype._getPhishingQuestion = function() {
    var t = new communication.PhishingGetQuestionDelegate;
    t.addListener(communication.BaseDelegate.SUCCESS, this, this._onGetPhishingQuestionSuccess), t.addListener(communication.BaseDelegate.FAIL, this, this._onGetPhishingQuestionFail), t.addListener(communication.BaseDelegate.CANCEL, this, this._onGetPhishingQuestionFail), t.setImportant(!0), t.execute()
}, models.LoginModel.prototype._onGetPhishingQuestionSuccess = function(sender, data) {
    sender.clearListenersByScope(this), this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("PHISHING"), data) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.LoginModel.prototype._onGetPhishingQuestionFail = function(sender, error) {
    switch (sender.clearListenersByScope(this), error.getCode()) {
        case enums.NetworkError.ALREADY_ANSWERED_PHISHING_QUESTION:
        case enums.NetworkError.SERVICE_IS_DISABLED:
            services.Authentication.getSession(enums.AuthEnvironment.UTAS).securityQuestionAnswered = !0, this._runNextStep();
            break;
        case enums.NetworkError.NO_CONTENT:
            this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("NO_SECURITY_QUESTION")) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        case enums.NetworkError.ACCOUNT_LOCKED:
        case enums.NetworkError.NO_REMAINING_ATTEMPTS:
            services.Authentication.getSession(enums.AuthEnvironment.UTAS).accountLocked = !0, this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("ACCOUNT_LOCKED")) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        case enums.NetworkError.NO_INTERNET_CONNECTION:
            this._isRunning = !1, utils.PopupManager.showNoInternetConnectionPopup(), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        case enums.NetworkError.FUN_CAPTCHA_REQUIRED:
            this._isRunning = !1, this._fcHealthCheck().observe(this, this._onHealthCheckComplete);
            break;
        case enums.NetworkError.CAPTCHA_REQUIRED:
            this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("CAPTCHA_REQUIRED")) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
            break;
        default:
            this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }
}, models.LoginModel.prototype._runPreBootStaticDataChain = function() {
    var t = new communication.StoreLocDelegate;
    t.setImportant(!1), t.addListener(communication.BaseDelegate.SUCCESS, this, this._onStoreLocSuccess), t.addListener(communication.BaseDelegate.FAIL, this, this._onStaticDataFail);
    var i = new communication.TeamsConfigDelegate;
    i.setImportant(!0);
    var s = new communication.StaticPlayerDataDelegate;
    s.addListener(communication.BaseDelegate.SUCCESS, this, this._onStaticDataSuccess), s.addListener(communication.BaseDelegate.FAIL, this, this._onStaticDataFail), s.setImportant(!0);
    var o = new communication.PlayerMetaDataDelegate;
    o.addListener(communication.BaseDelegate.SUCCESS, this, this._onPlayerMetaDataSuccess), o.addListener(communication.BaseDelegate.FAIL, this, this._onPlayerMetaDataFail), o.setImportant(!0);
    var l = new communication.PlayerIconDataDelegate;
    l.addListener(communication.BaseDelegate.SUCCESS, this, this._onPlayerIconDataSuccess), l.addListener(communication.BaseDelegate.FAIL, this, this._onPlayerIconDataFail), l.setImportant(!0);
    var u = new communication.PlaceholderAssetsDelegate;
    u.setImportant(!0);
    var h = new communication.SquadDataDelegate;
    h.setImportant(!0);
    var p = [t, i, s, o, u, h, l],
        m = new utils.DelegateChain(p, !1);
    m.addListener(utils.DelegateChain.SUCCESS, this, this._onRunPreBootStaticDataChainSuccess), m.addListener(utils.DelegateChain.FAIL, this, this._onRunInitialBootChainFailure), m.execute()
}, models.LoginModel.prototype._onStaticDataSuccess = function(sender, response) {
    sender.clearListenersByScope(this);
    var t = [].concat(response.Players);
    gAuthenticationModel.getUser().getSelectedPersona().isGen3 || (t = t.concat(response.LegendsPlayers)), repositories.Item.setStaticData(t)
}, models.LoginModel.prototype._onStaticDataFail = function(sender) {
    sender.clearListenersByScope(this)
}, models.LoginModel.prototype._onPlayerMetaDataSuccess = function(sender, response) {
    sender.clearListenersByScope(this), repositories.PlayerMeta.setData(response)
}, models.LoginModel.prototype._onPlayerMetaDataFail = function(sender) {
    sender.clearListenersByScope(this)
}, models.LoginModel.prototype._onPlayerIconDataSuccess = function(sender, response) {
    sender.clearListenersByScope(this), repositories.PlayerIcon.setData(response)
}, models.LoginModel.prototype._onPlayerIconDataFail = function(sender) {
    sender.clearListenersByScope(this)
}, models.LoginModel.prototype._onStoreLocSuccess = function(sender, response) {
    sender.clearListenersByScope(this), gLocalization.appendStoreDescriptionsToLoc(response)
}, models.LoginModel.prototype._onRunPreBootStaticDataChainSuccess = function(sender) {
    sender.clearListenersByScope(this), gAuthenticationModel.getUser().getSelectedPersona().isEligibleForMobileStart ? (this._isRunning = !1, this._currentLoginStep++, gUserSettingsModel.checkUserItemBool(models.UserSettingsModel.EULA_ACCEPTED) ? NavManager.requestRootScreen(Screens.getView("MOBILE_START_INTRO")) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)) : NavManager.requestRootScreen(Screens.getView("EULA"), {
        nextScreen: Screens.getView("MOBILE_START_INTRO")
    }), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)) : this._runNextStep()
}, models.LoginModel.prototype._runInitialMassBoot = function() {
    var t = new communication.TOTWHistoryDelegate(0, 90);
    t.setImportant(!1), t.execute();
    var i = new communication.UserMassInfoDelegate;
    i.addListener(communication.BaseDelegate.SUCCESS, this, this._onRunInitialBootSuccess), i.addListener(communication.BaseDelegate.FAIL, this, this._onRunInitialMassBootFailure), i.send()
}, models.LoginModel.prototype._runInitialBootChain = function _runInitialBootChain() {
    var t = new communication.UserModelDelegate;
    t.addListener(communication.BaseDelegate.SUCCESS, this, this._onUserDataSuccess), t.addListener(communication.BaseDelegate.FAIL, this, this._onUserDataFail), t.setImportant(!0);
    var i = new communication.PileSizeDelegate;
    i.setImportant(!0);
    var s = new communication.DailyGiftDelegate;
    s.setImportant(!1);
    var o = [t, i, s],
        l = new utils.DelegateChain(o, !1);
    l.addListener(utils.DelegateChain.SUCCESS, this, this._onRunInitialBootSuccess), l.addListener(utils.DelegateChain.FAIL, this, this._onRunInitialBootChainFailure), l.execute()
}, models.LoginModel.prototype._onUserDataSuccess = function _onUserDataSuccess(sender, response) {
    sender.clearListenersByScope(this), repositories.Squad.setActiveSquadId(response.squadList.activeSquadId), response.squadList.squad.forEach(function(t) {
        repositories.Squad.storeSquad(response.personaId, t)
    })
}, models.LoginModel.prototype._onUserDataFail = function _onUserDataFail(sender) {
    sender.clearListenersByScope(this)
}, models.LoginModel.prototype._setOnboardingState = function _setOnboardingState(t, i) {
    if (t) {
        var s = Array.isArray(t.entries) ? t.entries[0] : null;
        s && (this._onboardingState = new viewmodels.OnboardingState, this._onboardingState.setLoanerDefId(s.value))
    }
    i && (this._onboardingState || (this._onboardingState = new viewmodels.OnboardingState), Array.isArray(i.entries) && i.entries.forEach(function(t) {
        switch (t.key) {
            case enums.OnboardingStateType.HOME_KIT:
                this._onboardingState.setHomeKitId(t.value);
                break;
            case enums.OnboardingStateType.AWAY_KIT:
                this._onboardingState.setAwayKitId(t.value);
                break;
            case enums.OnboardingStateType.BADGE:
                this._onboardingState.setBadgeId(t.value);
                break;
            case enums.OnboardingStateType.NATION:
                this._onboardingState.setCountryId(t.value)
        }
    }, this))
}, models.LoginModel.prototype._onRunInitialBootSuccess = function _onRunInitialBootSuccess(sender, response) {
    sender.clearListenersByScope(this);
    var t = repositories.User.getCurrent().getSelectedPersona();
    if (t.isGen3 || this._setOnboardingState(response.loanPlayerClientData, response.onboardingClientData), t.isPC) {
        var i = new communication.GetMTXTransactionDelegate;
        i.addListener(communication.BaseDelegate.SUCCESS, this, this._onGetMTXSuccess), i.addListener(communication.BaseDelegate.FAIL, this, this._onGetMTXFail), i.send()
    } else gSettingsModel.setFIFAPointsUnrecoveredTransation(!0), this._runNextStep()
}, models.LoginModel.prototype._onRunInitialMassBootFailure = function(sender, error) {
    sender.clearListenersByScope(this), this._runInitialBootChain()
}, models.LoginModel.prototype._onRunInitialBootChainFailure = function(sender, error, t) {
    sender.clearListenersByScope(this), this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.LoginModel.prototype._onGetMTXSuccess = function(sender, data) {
    if (sender.clearListenersByScope(this), data.state !== enums.Purchase.State.NOTRANSACTION) {
        var transaction = new entities.MTXTransaction(data);
        if (transaction.nextState !== enums.Purchase.State.INVALID) transaction.process().observe(this, function onProcessComplete(t, i, errorCode) {
            if (t.unobserve(this), errorCode && (gSettingsModel.setFIFAPointsUnrecoveredTransation(!1), gSettingsModel.isServiceAvailable(models.SettingsModel.FIFA_POINTS_ENABLED))) {
                var s = new valueobjects.NetworkErrorVO(enums.NetworkError.FIFA_POINTS_FAILED, enums.NetworkErrorLevel.UNIMPORTANT, "popup.error.ServiceIsDisabledTitle", "popup.error.mobile.invalidTransactionState");
                utils.PopupManager.displayNetworkError(s)
            }
            this._runNextStep()
        });
        else {
            if (gSettingsModel.setFIFAPointsUnrecoveredTransation(!1), gSettingsModel.isServiceAvailable(models.SettingsModel.FIFA_POINTS_ENABLED)) {
                var t = new valueobjects.NetworkErrorVO(enums.NetworkError.FIFA_POINTS_FAILED, enums.NetworkErrorLevel.UNIMPORTANT, "popup.error.ServiceIsDisabledTitle", "popup.error.mobile.invalidTransactionState");
                utils.PopupManager.displayNetworkError(t)
            }
            this._runNextStep()
        }
    } else gSettingsModel.setFIFAPointsUnrecoveredTransation(!0), this._runNextStep()
}, models.LoginModel.prototype._onGetMTXFail = function(sender, error) {
    if (sender.clearListenersByScope(this), gSettingsModel.setFIFAPointsUnrecoveredTransation(!1), gSettingsModel.isServiceAvailable(models.SettingsModel.FIFA_POINTS_ENABLED)) {
        var t = new valueobjects.NetworkErrorVO(enums.NetworkError.FIFA_POINTS_FAILED, enums.NetworkErrorLevel.UNIMPORTANT, "popup.error.ServiceIsDisabledTitle", "popup.error.mobile.invalidTransactionState");
        utils.PopupManager.displayNetworkError(t)
    }
    this._runNextStep()
}, models.LoginModel.prototype._gotoHomeScreen = function() {
    this._isRunning = !1, gHeader.setupContent(), services.Authentication.getSession(enums.AuthEnvironment.UTAS).state === enums.AuthenticationState.STATE_AUTHENTICATION_FAILED ? utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.SERVER_DOWN, this.logout.bind(this)) : this._onboardingState && !this._onboardingState.isComplete() ? gUserSettingsModel.checkUserItemBool(models.UserSettingsModel.EULA_ACCEPTED) ? (NavManager.requestRootScreen(Screens.getView("MOBILE_START_INTRO"), {
        state: this._onboardingState
    }), this._onboardingState = null) : NavManager.requestRootScreen(Screens.getView("EULA"), {
        nextScreen: Screens.getView("MOBILE_START_INTRO"),
        nextScreenData: {
            state: this._onboardingState
        }
    }) : (controllers.SettingsUpdaterController.startTimer(), NavManager.attemptHomeScreenTransition()), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.LoginModel.prototype.logout = function() {
    if (utils.Debug.Assert(!this._isRunning, "[LOGIN] Attempted to logout when a login/logout request is already running."), !this._isRunning) {
        this._isRunning = !0, gClickShield.showShield(components.ClickShield.SHIELD.LOADING), gFooter.hide();
        var t = new communication.LogoutDelegate;
        t.addListener(communication.BaseDelegate.SUCCESS, this, this._eadpLogout), t.addListener(communication.BaseDelegate.FAIL, this, this._eadpLogout), t.addListener(communication.BaseDelegate.CANCEL, this, this._eadpLogout), t.execute()
    }
}, models.LoginModel.prototype._eadpLogout = function(sender) {
    sender.clearListenersByScope(this), eadp.identity.logout(this._completeLogout.bind(this))
}, models.LoginModel.prototype._completeLogout = function() {
    gClickShield.hideShield(components.ClickShield.SHIELD.LOADING), this._resetApp(), this._isRunning = !1
}, models.LoginModel.prototype.switchPersona = function(t) {
    repositories.User.getCurrent().selectedPersona = t.id, this._resetModels(), gFooter.hide();
    var i = services.Authentication.getSession(enums.AuthEnvironment.UTAS);
    if (t.isSwitch) NavManager.requestChildScreen(Screens.getView("GETTING_STARTED"), enums.GettingStartedTypes.PLATFORM_SWITCH) || utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this));
    else if (t.hasFUT) {
        var s = gAuthenticationModel.getShardItemBySKU(t.sku);
        i.protocol = s._clientProtocol, i.hostname = s._clientFacingIpPort, this._currentLoginStep = models.LoginModel.LOGIN_STEP.FUT_AUTH, this.login(!0)
    } else i.state = enums.AuthenticationState.STATE_AUTHENTICATION_FAILED, i.status = enums.HTTPStatusCode.NO_USER, this._currentLoginStep = models.LoginModel.LOGIN_STEP.HOME_SCREEN, this.login(!0)
}, models.LoginModel.prototype._resetApp = function() {
    controllers.SettingsUpdaterController.clearTimer(), this._resetModels(), repositories.User.reset(), services.Authentication.reset(), gUserSettingsModel.clearUserKey(), gUserModel.reset(), gPinManager.resetUniqueSessionID(), gFooter.reset(), NavManager.reset()
}, models.LoginModel.prototype._resetModels = function() {
    gStaffStatsModel.reset(), gTOTWHistoryModel.reset(), repositories.Item.reset(), repositories.Message.reset(), repositories.SBC.reset(), repositories.Squad.reset(), repositories.TeamConfig.reset(), services.Champions.reset(), services.Objectives.reset()
}, models.LoginModel.prototype._onHealthCheckComplete = function _onHealthCheckComplete(t, i) {
    t.unobserve(this), utils.JS.isValid(i) && !0 === i._value ? (NavManager.requestChildScreen(Screens.getView("FUN_CAPTCHA_REQUIRED")) || gAuthenticationModel.logout(), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)) : this._handleFunCaptchaOutage()
}, models.LoginModel.prototype._handleFunCaptchaOutage = function _handleFunCaptchaOutage() {
    var t = new communication.FunCaptchaValidateDelegate("");
    t.addListener(communication.BaseDelegate.SUCCESS, this, function _onCaptchaValidateSuccess(sender) {
        sender.clearListenersByScope(this), gAuthenticationModel.login(!0)
    }), t.addListener(communication.BaseDelegate.FAIL, this, function _onCaptchaValidateFail(sender, error) {
        sender.clearListenersByScope(this), error._code === enums.NetworkError.CAPTCHA_REQUIRED ? NavManager.requestChildScreen(Screens.getView("CAPTCHA_REQUIRED")) || gAuthenticationModel.logout() : gAuthenticationModel.logout(), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }), t.send()
}, models.LoginModel.prototype._fcHealthCheck = function _fcHealthCheck() {
    function _onFcHealthCheckSuccess(sender, response) {
        sender.clearListenersByScope(this);
        var i = new valueobjects.FunCaptchaHealthCheckStatusVO;
        i.parseFCHealthCheckDataObject(response), utils.JS.isValid(i) && utils.JS.isValid(i.getStatus()) ? t.set(i.getStatus()) : t.set(!1), event.notify(t)
    }
    var event = new FUTObservable,
        t = new valueobjects.BooleanVO,
        i = new communication.FunCaptchaHealthCheckDelegate;
    return i.addListener(communication.BaseDelegate.SUCCESS, this, _onFcHealthCheckSuccess), i.addListener(communication.BaseDelegate.FAIL, this, _onFcHealthCheckSuccess), i.send(), event
}, NamespaceManager.Register("models"), models.AuthenticationModel = function() {
    utils.EventDispatcher.call(this), this._loginModel = null, this._shardInfoList = null
}, utils.JS.inherits(models.AuthenticationModel, utils.EventDispatcher), models.AuthenticationModel.prototype.getUser = function getUser() {
    return repositories.User.getCurrent()
}, models.AuthenticationModel.prototype.getSessionInfo = function(t) {
    return services.Authentication.getSession(enums.AuthEnvironment.UTAS)
}, models.AuthenticationModel.prototype.setLoginModel = function(t) {
    this._loginModel = t
}, models.AuthenticationModel.prototype.login = function(resume) {
    utils.Debug.Assert(utils.JS.isValid(this._loginModel), "[AuthenticationModel] Login model hasn't been defined."), this._loginModel.login(resume)
}, models.AuthenticationModel.prototype._logout = function(t) {
    gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.LOGOUT, {
        type: PinManager.SERVER_TYPE,
        end_reason: t
    })), utils.Debug.Assert(utils.JS.isValid(this._loginModel), "[AuthenticationModel] Login model hasn't been defined."), this._loginModel.logout()
}, models.AuthenticationModel.prototype.logout = function() {
    this._logout(enums.PIN.LOGOUT_EVT_END_REASON.NORMAL)
}, models.AuthenticationModel.prototype.errorLogout = function() {
    this._logout(enums.PIN.LOGOUT_EVT_END_REASON.ERROR)
}, models.AuthenticationModel.prototype.switchPersona = function(t) {
    utils.Debug.Assert(utils.JS.isValid(this._loginModel), "[AuthenticationModel] Login model hasn't been defined."), this._loginModel.switchPersona(t)
}, models.AuthenticationModel.prototype.setShardInfoList = function(list) {
    this._shardInfoList = list
}, models.AuthenticationModel.prototype.getShardInfoList = function() {
    return this._shardInfoList
}, models.AuthenticationModel.prototype.getShardItemBySKU = function(t) {
    for (var i = this._shardInfoList.length; i-- > 0;)
        if (this._shardInfoList[i].containsSku(t)) return this._shardInfoList[i];
    return null
}, models.AuthenticationModel.prototype.authenticate = function authenticate(t) {
    var i = this.getSessionInfo(t);
    services.Authentication.authenticate(i.environment).observe(this, function _onAuthComplete(i, data) {
        i.unobserve(this), data.success ? this.dispatch(models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL, t) : this.dispatch(models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED, t, data.status)
    })
}, models.AuthenticationModel.prototype.getFUTState = function() {
    var t = services.Authentication.getSession(enums.AuthEnvironment.UTAS),
        status = t.statusCode,
        i = !1;
    if (status !== enums.HTTPStatusCode.OK) switch (status) {
        case enums.HTTPStatusCode.NO_USER:
            return enums.FUTAuthState.NO_DATA;
        case enums.HTTPStatusCode.SERVER_ERROR:
        case enums.HTTPStatusCode.NOT_FOUND:
            return enums.FUTAuthState.SERVER_DOWN;
        case enums.HTTPStatusCode.LOGGED_IN_ON_CONSOLE:
            return enums.FUTAuthState.CONCURRENT_SESSION;
        default:
            i = !0
    }
    var s = repositories.User.getCurrent();
    if (!utils.JS.isValid(s)) return enums.FUTAuthState.NO_DATA;
    var o = s.getSelectedPersona();
    return o ? !o.isAccessTrial && !o.isFreeTrial || o.isReturningUser ? i ? enums.FUTAuthState.SERVER_DOWN : t.accountLocked ? enums.FUTAuthState.ACCOUNT_LOCKED : t.securityQuestionAnswered ? enums.FUTAuthState.COMPLETE : enums.FUTAuthState.NO_SECURITY_QUESTION : enums.FUTAuthState.NEW_TRIAL_USER : enums.FUTAuthState.NO_DATA
}, models.AuthenticationModel.prototype.isFullyAuthenticated = function() {
    return this.getFUTState() === enums.FUTAuthState.COMPLETE
}, models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL = "models.AuthenticationModel.EVENT_AUTHENTICATION_SUCCESSFUL", models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED = "models.AuthenticationModel.EVENT_AUTHENTICATION_FAILED";
var gAuthenticationModel = new models.AuthenticationModel;
NamespaceManager.Register("utils"), utils.ScreenServiceMap = function() {}, utils.ScreenServiceMap.init = function() {
    utils.ScreenServiceMap.MAP = [{
        appSection: Screens.APP_SECTION.WATCH_LIST,
        services: [models.SettingsModel.TRADING_ENABLED]
    }, {
        appSection: Screens.APP_SECTION.AUCTION_SEARCH,
        services: [models.SettingsModel.TRADING_ENABLED]
    }, {
        appSection: Screens.APP_SECTION.STORE,
        services: [models.SettingsModel.CARD_PACK_STORE_ENABLED, models.SettingsModel.STORE_ENABLED]
    }]
}, utils.ScreenServiceMap.getServicesByAppSection = function(t) {
    var i, s;
    for (s = utils.ScreenServiceMap.MAP.length, i = 0; i < s; i++)
        if (utils.ScreenServiceMap.MAP[i].appSection === t) return utils.ScreenServiceMap.MAP[i].services;
    return []
}, utils.ScreenServiceMap.MAP = [], NamespaceManager.Register("models"), models.SettingsModel = function() {
    this._configs = new FUTHashTable({}), this._isFIFAPointsUnrecoveredTransationEnabled = !0, this._supportedServices = [models.SettingsModel.CARD_PACK_STORE_ENABLED, models.SettingsModel.STORE_ENABLED, models.SettingsModel.COIN_ENABLED, models.SettingsModel.FIFA_POINTS_ENABLED, models.SettingsModel.TRADING_ENABLED, models.SettingsModel.MTX_ENABLED, models.SettingsModel.OBJECTIVES_ENABLED, models.SettingsModel.SBC_ENABLED, models.SettingsModel.TOTW_HISTORY_ENABLED, models.SettingsModel.LIVE_MESSAGING_ENABLED], this._configsRetrieved = !1
}, models.SettingsModel.prototype.getSupportedServices = function() {
    return this._supportedServices
}, models.SettingsModel.prototype.getConfigs = function() {
    return this._configs.keys().map(function(key, t) {
        return {
            k: key,
            v: this.getConfigsByKey(key)
        }
    }, this)
}, models.SettingsModel.prototype.getConfigsByKey = function(key) {
    return this._configs.get(key)
}, models.SettingsModel.prototype.setConfigsByKey = function(key, value) {
    this._configs.set(key, value)
}, models.SettingsModel.prototype.setConfigs = function(t) {
    t.forEach(function(t) {
        this.setConfigsByKey(t.type, t.value)
    }, this), this._configsRetrieved = !0
}, models.SettingsModel.prototype.checkConfigsRetrieved = function() {
    return this._configsRetrieved
}, models.SettingsModel.prototype.isUpdateRequired = function() {
    if (this._configs.length < 1) return !0;
    var t, keys = this._configs.keys();
    for (t = 0; t < keys.length; t++) {
        var i = keys[t];
        if (!this._configs.get(i) && this.isServiceSupported(i)) return !0
    }
    return !1
}, models.SettingsModel.prototype.isServiceSupported = function(t) {
    var i, s;
    for (s = this._supportedServices.length, i = 0; i < s; i++)
        if (this._supportedServices[i] === t) return !0;
    return !1
}, models.SettingsModel.prototype.isServiceAvailable = function(t) {
    var i = this.getConfigsByKey(t);
    return !0 === i || 1 === i || null === i
}, models.SettingsModel.prototype.enableService = function(t) {
    this.setConfigsByKey(t, !0)
}, models.SettingsModel.prototype.disableService = function(t) {
    this.setConfigsByKey(t, !1)
}, models.SettingsModel.prototype.isKillSwitchOn = function(t) {
    var i, s, o = utils.ScreenServiceMap.getServicesByAppSection(t);
    for (s = o.length, i = 0; i < s; i++)
        if (this.isServiceSupported(o[i]) && !this.isServiceAvailable(o[i])) return !0;
    return !1
}, models.SettingsModel.prototype.isFIFAPointsUnrecoveredTransation = function() {
    return this._isFIFAPointsUnrecoveredTransationEnabled
}, models.SettingsModel.prototype.setFIFAPointsUnrecoveredTransation = function(isEnabled) {
    this._isFIFAPointsUnrecoveredTransationEnabled = isEnabled
}, models.SettingsModel.prototype.checkKillSwitch = function(t, i) {
    if (this.isKillSwitchOn(t)) return services.Notification.queue([gLocalization.lText("killswitch.sectionDisabled." + t), enums.UINotificationType.NEGATIVE]), i && NavManager.requestChildScreen(i), !0
}, models.SettingsModel.prototype.isTradingEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.TRADING_ENABLED)
}, models.SettingsModel.prototype.isMarketDataEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.MARKET_DATA_ENABLED)
}, models.SettingsModel.prototype.isObjectivesEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.OBJECTIVES_ENABLED)
}, models.SettingsModel.prototype.isDailyObjectivesEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.DAILY_OBJECTIVES_ENABLED)
}, models.SettingsModel.prototype.isWeeklyObjectivesEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.WEEKLY_OBJECTIVES_ENABLED)
}, models.SettingsModel.prototype.isTOTWHistoryEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.TOTW_HISTORY_ENABLED)
}, models.SettingsModel.prototype.isSBCEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.SBC_ENABLED)
}, models.SettingsModel.prototype.isLegacyYearIdEnabled = function() {
    return !this._configs.has(models.SettingsModel.LEGACY_YEAR_ENABLED) || 1 === parseInt(this._configs.get(models.SettingsModel.LEGACY_YEAR_ENABLED), 10)
}, models.SettingsModel.prototype.isSquadRatingFloatCalculationEnabled = function() {
    return this.isServiceAvailable(models.SettingsModel.FLOAT_SQUAD_RATING_CALCULATION_ENABLED)
}, models.SettingsModel.STORE_ENABLED = "storeEnabled", models.SettingsModel.CARD_PACK_STORE_ENABLED = "cardPackStoreEnabled", models.SettingsModel.COIN_ENABLED = "coinEnabled", models.SettingsModel.FIFA_POINTS_ENABLED = "fifaPointsEnabled", models.SettingsModel.TRADING_ENABLED = "tradingEnabled", models.SettingsModel.MTX_ENABLED = "mtxEnabled", models.SettingsModel.MARKET_DATA_ENABLED = "marketDataEnabled", models.SettingsModel.OBJECTIVES_ENABLED = "enableDynamicObjectives", models.SettingsModel.DAILY_OBJECTIVES_ENABLED = "enableDailyDynamicObjectives", models.SettingsModel.WEEKLY_OBJECTIVES_ENABLED = "enableWeeklyDynamicObjectives", models.SettingsModel.SBC_ENABLED = "enableSquadBuildingSetsFeature", models.SettingsModel.SBC_ALLOW_UNTRADEABLE = "allowUntradeableForSquadBuildingSets", models.SettingsModel.SBC_GRACE_PERIOD_MINUTES = "squadBuildingSetsGracePeriodMinutes", models.SettingsModel.TOTW_HISTORY_ENABLED = "totwHistoryEnabled", models.SettingsModel.LIVE_MESSAGING_ENABLED = "enableLiveMessaging", models.SettingsModel.LEGACY_YEAR_ENABLED = "enableLegacyYearInfoInItemResourceId", models.SettingsModel.FLOAT_SQUAD_RATING_CALCULATION_ENABLED = "enableFloatPointSquadRating";
var gSettingsModel = new models.SettingsModel;
NamespaceManager.Register("pages"), pages.ScreenBase = function() {
    utils.EventDispatcher.call(this), this._screenId = "", this._previousScreenId = null, this._controller = null, this._interactionEnabled = !1, this._headerState = components.Header.EMPTY, this._images = [], this._forwardTransitionAnimIn = "", this._forwardTransitionAnimOut = "", this._backwardTransitionAnimIn = "", this._backwardTransitionAnimOut = "", this._didGoBack = !1
}, utils.JS.inherits(pages.ScreenBase, utils.EventDispatcher), pages.ScreenBase.prototype.init = function(data, t) {}, pages.ScreenBase.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, pages.ScreenBase.prototype.getScreenId = function() {
    return this._screenId
}, pages.ScreenBase.prototype.setScreenId = function(t) {
    this._screenId = t
}, pages.ScreenBase.prototype.setPreviousScreenId = function(t) {
    this._previousScreenId = t
}, pages.ScreenBase.prototype.getPreviousScreenId = function() {
    return this._previousScreenId
}, pages.ScreenBase.prototype.getController = function() {
    return this._controller
}, pages.ScreenBase.prototype.setController = function(controller) {
    this._controller = controller
}, pages.ScreenBase.prototype.getNativeScrollSupported = function() {
    return !0
}, pages.ScreenBase.prototype.setDidGoBack = function(t) {
    this._didGoBack = t
}, pages.ScreenBase.prototype.didGoBack = function() {
    return this._didGoBack
}, pages.ScreenBase.prototype.addImage = function(t) {
    utils.JS.isValid(t) && this._images.push(t)
}, pages.ScreenBase.prototype.setImages = function(images) {
    this._images = images
}, pages.ScreenBase.prototype.getImages = function() {
    return this._images
}, pages.ScreenBase.prototype.start = function() {}, pages.ScreenBase.prototype.stop = function() {}, pages.ScreenBase.prototype.onAppPaused = function() {}, pages.ScreenBase.prototype.onAppResumed = function() {
    var images = this.getImages();
    images.forEach(function(t, i) {
        utils.JS.isValid(t.getRoot()) && !t.getRoot().complete ? t.getRoot().attr("src", t.src) : images.splice(i, 1)
    })
}, pages.ScreenBase.prototype.beforeAnimateIn = function() {}, pages.ScreenBase.prototype.afterAnimateOut = function() {}, pages.ScreenBase.prototype.animateIn = function() {}, pages.ScreenBase.prototype.animateOut = function() {}, pages.ScreenBase.prototype.moveOffScreen = function(t) {
    t ? this.getRoot().addClass("offScreen") : this.getRoot().removeClass("offScreen")
}, pages.ScreenBase.prototype.isInteractionEnabled = function() {
    return this._interactionEnabled
}, pages.ScreenBase.prototype.setInteractionsEnabled = function(enabled) {
    this._interactionEnabled !== enabled && (this._interactionEnabled = enabled, this.dispatch(pages.ScreenBase.INTERACTION_STATE_CHANGED, enabled), enabled ? gClickShield.isInteractionShieldShowing() && gClickShield.hideShield(components.ClickShield.SHIELD.INTERACTION) : gClickShield.showShield(components.ClickShield.SHIELD.INTERACTION))
}, pages.ScreenBase.prototype.updateHeader = function(state, title, t) {
    this._headerState = state, t = t || "", gHeader.setTitle(title), gHeader.setSubTitle(""), gHeader.setHeaderClass(t)
}, pages.ScreenBase.prototype.getHeaderState = function() {
    return this._headerState
}, pages.ScreenBase.prototype.setForwardTransitionAnimIn = function(value) {
    this._forwardTransitionAnimIn = value
}, pages.ScreenBase.prototype.setForwardTransitionAnimOut = function(value) {
    this._forwardTransitionAnimOut = value
}, pages.ScreenBase.prototype.setBackwardTransitionAnimIn = function(value) {
    this._backwardTransitionAnimIn = value
}, pages.ScreenBase.prototype.setBackwardTransitionAnimOut = function(value) {
    this._backwardTransitionAnimOut = value
}, pages.ScreenBase.prototype.getTransitionAnimIn = function(direction) {
    var t;
    return direction === NavManager.TRANSITION_TYPE_BACKWARD ? t = this._backwardTransitionAnimIn : direction === NavManager.TRANSITION_TYPE_FORWARD && (t = this._forwardTransitionAnimIn), utils.JS.isString(t) && "" !== t ? t : pages.ScreenBase.DEFAULT_IN_ANIM
}, pages.ScreenBase.prototype.getTransitionAnimOut = function(direction) {
    var t;
    return direction === NavManager.TRANSITION_TYPE_BACKWARD ? t = this._backwardTransitionAnimOut : direction === NavManager.TRANSITION_TYPE_FORWARD && (t = this._forwardTransitionAnimOut), utils.JS.isString(t) && "" !== t ? t : pages.ScreenBase.DEFAULT_OUT_ANIM
}, pages.ScreenBase.prototype.supportsLandscapeOrientation = function() {
    return !1
}, pages.ScreenBase.prototype.getSupportedOrientations = function() {
    return this.supportsLandscapeOrientation() ? [pages.controllers.ScreenControllerBase.ORIENTATION_STATE.PORTRAIT, pages.controllers.ScreenControllerBase.ORIENTATION_STATE.PORTRAIT_DOWN, pages.controllers.ScreenControllerBase.ORIENTATION_STATE.LANDSCAPE_LEFT, pages.controllers.ScreenControllerBase.ORIENTATION_STATE.LANDSCAPE_RIGHT] : [pages.controllers.ScreenControllerBase.ORIENTATION_STATE.PORTRAIT, pages.controllers.ScreenControllerBase.ORIENTATION_STATE.PORTRAIT_DOWN]
}, pages.ScreenBase.prototype.destroyHtmlLinks = function(t) {
    $('a[target="_blank"]', t).each(function() {
        $(this).off(enums.Event.TAP)
    })
}, pages.ScreenBase.INTERACTION_STATE_CHANGED = "pages.ScreenBase.INTERACTION_STATE_CHANGED", pages.ScreenBase.DEFAULT_IN_ANIM = "fade-in-screen", pages.ScreenBase.DEFAULT_OUT_ANIM = "fade-out-screen", utils.JS.inherits(FUIViewController, FUIResponder), FUIViewController.prototype.init = function init() {
    this.initialized || (this.superclass(), this.initialized = !0)
}, FUIViewController.prototype.dealloc = function dealloc() {
    this.removeFromParentViewController(), this._childViewControllers.forEach(function(c) {
        c.willMove(this), c._parentViewController = null, c.didMove(this)
    }, this), this._childViewControllers = [], this._view && (this._view.dealloc(), this._view = null), this.superclass()
}, FUIViewController.prototype.getParentViewController = function getParentViewController() {
    return this._parentViewController
}, FUIViewController.prototype.getNavigationController = function getNavigationController() {
    for (var t = this.getParentViewController(); null !== t;) {
        if (t.isSubClass(FUINavigationController)) return t;
        t = t.getParentViewController()
    }
    return null
}, FUIViewController.prototype.getRootNavigationController = function getRootNavigationController() {
    for (var t = this.getNavigationController(), i = null; null !== t;) i = t, t = t.getNavigationController();
    return i
}, FUIViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return null
}, FUIViewController.prototype._loadView = function _loadView() {
    if (!this.hasLoaded) {
        var view = this._getViewInstanceFromData();
        view && (this._view = view, this._view.setEventDelegate(this), this._view.init())
    }
}, FUIViewController.prototype.getView = function getView() {
    return this._view || (this.isLoading = !0, this._loadView(), this.isLoading = !1, this.viewDidLoad()), this.hasLoaded || this.isLoading || (this.hasLoaded = !0), this._view
}, FUIViewController.prototype.setView = function setView(view) {
    if (view !== this._view) {
        if (this._view) {
            var t = this._view;
            t.removeFromSuperview(), t.dealloc()
        }
        this._view = view
    }
}, FUIViewController.prototype.isViewDisplayed = function isViewDisplayed() {
    function _checkIfInElement(t, i) {
        var parent = t.parentNode;
        return !!parent && (parent === i || _checkIfInElement(parent, i))
    }
    return _checkIfInElement(this.getView().getRootElement(), document.getElementsByTagName("body")[0])
}, FUIViewController.prototype.addChildViewController = function addChildViewController(t) {
    t.willMove(this), this._childViewControllers.push(t), t._parentViewController = this, t.setEventDelegate(this), t.didMove(this)
}, FUIViewController.prototype.removeChildViewController = function removeChildViewController(t) {
    var index = this._childViewControllers.indexOf(t);
    if (index >= 0) {
        t.willMove(this);
        var view = this.getView(),
            i = t.getView();
        view && i && i.isSubview(view) && i.removeFromSuperview(), t.removeEventDelegate(this), t._parentViewController === this && (t._parentViewController = null), this._childViewControllers.splice(index, 1), t.didMove(this)
    }
}, FUIViewController.prototype.removeFromParentViewController = function removeFromParentViewController() {
    var parent = this.getParentViewController();
    parent && parent.removeChildViewController(this)
}, FUIViewController.prototype.getNavigationTitle = function getNavigationTitle() {
    return ""
}, FUIViewController.prototype.getToolbarItems = function getToolbarItems() {
    return this.getNavigationController().getToolbarItems()
}, FUIViewController.prototype.getNavigationItem = function getNavigationItem() {
    return null
}, FUIViewController.prototype.willMove = function willMove(t) {}, FUIViewController.prototype.didMove = function didMove(t) {}, FUIViewController.prototype.viewDidLoad = function viewDidLoad() {}, FUIViewController.prototype.viewWillAppear = function viewWillAppear() {}, FUIViewController.prototype.viewWillDisappear = function viewWillDisappear() {}, FUIViewController.prototype.viewDidAppear = function viewDidAppear() {}, FUIViewController.prototype.viewDidDisappear = function viewDidDisappear() {}, NamespaceManager.Register("views.buttons"), views.buttons.DefaultButton = function FUIDefaultButton() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(views.buttons.DefaultButton, FUIButton), views.buttons.DefaultButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("standard"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.DefaultButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.buttons.DefaultButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.DefaultButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.buttons.DefaultButton.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), this._triggerActions(enums.Event.TOUCHSTART)
}, views.buttons.DefaultButton.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this._triggerActions(enums.Event.TOUCHEND)
}, views.buttons.DefaultButton.prototype._touchCancelled = function _touchCancelled(e) {
    this.superclass(), this._triggerActions(enums.Event.TOUCHCANCEL)
}, NamespaceManager.Register("components"), components.TextField = function() {
    components.BaseComponent.call(this), this._generate()
}, utils.JS.inherits(components.TextField, components.BaseComponent), components.TextField.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("textField"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.TextField.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.TextField.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.TextField.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.TextField.prototype.setText = function(text) {
    this.getRoot().html(text)
}, NamespaceManager.Register("utils"), utils.ResourceManager = {}, utils.ResourceManager.RequestResource = function(t, i, s) {
    isChrome() ? i({
        resource: t,
        path: gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + t
    }) : window.plugins.resCache.cacheResource(i, s, t, gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT))
}, utils.ResourceManager.RequestExternalResource = function(t, i, s) {
    isChrome() ? i({
        resource: t,
        path: t
    }) : window.plugins.resCache.cacheResource(i, s, utils.HTTP.getUriPath(t), utils.HTTP.getUriHost(t))
}, utils.ResourceManager.isResourceAvailable = function(t, i, s) {
    isChrome() ? i(gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + t) : window.plugins.resCache.isResourceAvailable(i, s, t, gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT))
}, utils.ResourceManager.getCachedResource = function(t, i, s) {
    isChrome() ? i({
        resource: t,
        path: gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + t
    }) : window.plugins.resCache.getCachedResource(i, s, t, gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT))
}, utils.ResourceManager.ClearCache = function(t, i) {
    isChrome() ? t() : window.plugins.resCache.clearCache(t, i)
}, NamespaceManager.Register("components"), components.ImageLoader = function ImageLoaderView() {
    FUIView.call(this), this.src = "", this.path = "", this._useCache = !0, Object.defineProperty(this, "_useCache", {
        writable: !0,
        enumerable: !1
    }), this._imageLoadEvent = new FUTObservable, this._generate()
}, utils.JS.inherits(components.ImageLoader, FUIView), components.ImageLoader.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("img");
        t.setAttribute("src", "images/transparent.png"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ImageLoader.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.ImageLoader.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ImageLoader.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ImageLoader.prototype.allowImageCaching = function allowImageCaching(t) {
    this._useCache = !!t
}, components.ImageLoader.prototype.setLocalResource = function setLocalResource(src) {
    this.src = src;
    var root = this.getRootElement();
    if (root) {
        var t = utils.JS.isString(src) && src.length > 0;
        this.toggleClass("hidden", !t), root.src = t ? src : ""
    }
}, components.ImageLoader.prototype.replaceAndShowResource = function replaceAndShowResource(src) {
    var root = this.getRootElement();
    root && (this._useCache || (src = src + "?" + Date.now()), this.removeClass("hidden"), root.src = src)
}, components.ImageLoader.prototype.setExternalResource = function setExternalResource(t, i) {
    return this._loadResource(t, i, !0)
}, components.ImageLoader.prototype.setResource = function setResource(t, i) {
    return this._loadResource(t, i, !1)
}, components.ImageLoader.prototype._loadResource = function _loadResource(t, i, s) {
    function onResourceLoadSuccess(value) {
        if (this.src = value.path, this.path = value.resource, i)
            if (isChrome() || isWeb()) {
                var root = this.getRootElement();
                this._addListener(enums.Event.LOAD, root, this._handleLoadSuccessEvent.bind(this)), this._addListener(enums.Event.ERROR, root, this._handleLoadFailEvent.bind(this))
            } else this._imageLoadEvent.notify(!0, this, this.src);
        this.replaceAndShowResource(this.src)
    }

    function onResourceLoadFail(value) {
        value.resource, i && this._imageLoadEvent.notify(!1, this, gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + t)
    }
    return this.src = t, this.path = t, NavManager.getCurrentScreen().addImage(this), this.addClass("hidden"), utils.HTTP.urlHasImage(this.src) ? (!0 === s ? utils.ResourceManager.RequestExternalResource(t, onResourceLoadSuccess.bind(this), onResourceLoadFail.bind(this)) : utils.ResourceManager.RequestResource(t, onResourceLoadSuccess.bind(this), onResourceLoadFail.bind(this)), this._imageLoadEvent) : (this._imageLoadEvent.notify(!1, this, this.src), this._imageLoadEvent)
}, components.ImageLoader.prototype._handleLoadSuccessEvent = function _handleLoadSuccessEvent(e) {
    var r = this.getRootElement();
    r.complete && 0 === r.naturalWidth ? this._imageLoadEvent.notify(!1, this, this.src) : this._imageLoadEvent.notify(!0, this, this.src), this._removeListenersByName(enums.Event.LOAD, enums.Event.ERROR)
}, components.ImageLoader.prototype._handleLoadFailEvent = function _handleLoadFailEvent(e) {
    this._imageLoadEvent.notify(!1, this, this.src), this._removeListenersByName(enums.Event.LOAD, enums.Event.ERROR)
}, NamespaceManager.Register("views.popups"), views.popups.DailyGift = function DailyGiftPopupView() {
    FUIView.call(this), this.onComplete = new FUTObservable, Object.defineProperty(this, "onComplete", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.popups.DailyGift, FUIView), views.popups.DailyGift.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("popupDailyGift");
        var i = document.createElement("header");
        this.__popupTitle = document.createElement("h1"), this.$_popupTitle = $(this.__popupTitle), this.__popupTitle.classList.add("popupTitle"), i.appendChild(this.__popupTitle), t.appendChild(i), this.__textInfo = document.createElement("p"), this.$_textInfo = $(this.__textInfo), this.__textInfo.classList.add("text-info"), t.appendChild(this.__textInfo);
        var s = document.createElement("div");
        s.classList.add("bodySection"), this.__packGiftImage = document.createElement("div"), this.$_packGiftImage = $(this.__packGiftImage), this.__packGiftImage.classList.add("packGiftImage"), this._packBackgroundImage = new components.ImageLoader, this._packBackgroundImage.getRootElement().classList.add("packBackgroundImage"), this.__packGiftImage.appendChild(this._packBackgroundImage.getRootElement()), this._packForegroundImage = new components.ImageLoader, this._packForegroundImage.getRootElement().classList.add("packForegroundImage"), this.__packGiftImage.appendChild(this._packForegroundImage.getRootElement()), this._packLogoImage = new components.ImageLoader, this._packLogoImage.getRootElement().classList.add("packLogoImage"), this.__packGiftImage.appendChild(this._packLogoImage.getRootElement()), s.appendChild(this.__packGiftImage), this.__coinGiftImage = document.createElement("div"), this.$_coinGiftImage = $(this.__coinGiftImage), this.__coinGiftImage.classList.add("coinGiftImage"), this._coinGiftBackground = new components.ImageLoader, this._coinGiftBackground.getRootElement().classList.add("packBackgroundImage"), this.__coinGiftImage.appendChild(this._coinGiftBackground.getRootElement()), this._coinGiftForeground = new components.ImageLoader, this._coinGiftForeground.getRootElement().classList.add("packForegroundImage"), this.__coinGiftImage.appendChild(this._coinGiftForeground.getRootElement()), this._coinGiftLogoImage = new components.ImageLoader, this._coinGiftLogoImage.getRootElement().classList.add("packLogoImage"), this.__coinGiftImage.appendChild(this._coinGiftLogoImage.getRootElement()), s.appendChild(this.__coinGiftImage), this._giftType = new components.TextField, s.appendChild(this._giftType.getRootElement()), t.appendChild(s), this._claimButton = new views.buttons.DefaultButton, this._claimButton.getRootElement().classList.add("call-to-action"), t.appendChild(this._claimButton.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.DailyGift.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__popupTitle = null, this.$_popupTitle = null, this.__textInfo = null, this.$_textInfo = null, this.__packGiftImage = null, this.$_packGiftImage = null, this._packBackgroundImage.destroy(), this._packBackgroundImage = null, this._packForegroundImage.destroy(), this._packForegroundImage = null, this._packLogoImage.destroy(), this._packLogoImage = null, this.__coinGiftImage = null, this.$_coinGiftImage = null, this._coinGiftBackground.destroy(), this._coinGiftBackground = null, this._coinGiftForeground.destroy(), this._coinGiftForeground = null, this._coinGiftLogoImage.destroy(), this._coinGiftLogoImage = null, this._giftType.destroy(), this._giftType = null, this._claimButton.destroy(), this._claimButton = null
}, views.popups.DailyGift.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.DailyGift.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.DailyGift.COIN_ASSET_ID = 23, views.popups.DailyGift.prototype.init = function init() {
    this._claimButton.init(), this._claimButton.setText(gLocalization.lText("common.dialog.accept")), this._claimButton.addTarget(this.onComplete, this.onComplete.notify, enums.Event.TAP), this.$_textInfo.html(gLocalization.lText("dailyreward.popupInfo")), this.superclass()
}, views.popups.DailyGift.prototype.dealloc = function dealloc() {
    this.onComplete.dealloc(), this.superclass()
}, views.popups.DailyGift.prototype.render = function render(type, value) {
    var t = 0;
    "coin" === type ? (this.$_packGiftImage.hide(), this.$_coinGiftImage.show(), t = views.popups.DailyGift.COIN_ASSET_ID, this._coinGiftBackground.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_BACKGROUND, enums.Year.ASSET, t, t)), this._coinGiftForeground.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BOOST_COIN, enums.Year.ASSET, 1, 0)), this._coinGiftLogoImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_LOGO, enums.Year.ASSET, t)), this._giftType.setText(gLocalization.lNum(value) + " " + gLocalization.lText("card.title.coins"))) : "pack" === type && (t = enums.Purchase.DisplayGroupId.MYPACKS, this.$_packGiftImage.show(), this.$_coinGiftImage.hide(), this._packBackgroundImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_BACKGROUND, enums.Year.ASSET, t, t)), this._packForegroundImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_FOREGROUND, enums.Year.ASSET, t, 0)), this._packLogoImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_LOGO, enums.Year.ASSET, t)), this._giftType.setText(gLocalization.lText("FUT_STORE_PACK_" + value.toString() + "_NAME_MOBILE"))), this.$_popupTitle.html(gLocalization.lText("dailyreward.popupheader").toUpperCase())
}, NamespaceManager.Register("interfaces"), interfaces.KeyboardEventDelegate = function() {}, interfaces.KeyboardEventDelegate.prototype.handleKeyUpEvent = function(e) {}, NamespaceManager.Register("controllers.views.popups"), controllers.views.popups.BasePopup = function BasePopup() {
    FUIViewController.call(this), this.onExit = new FUTObservable, Object.defineProperty(this, "onExit", {
        writable: !1
    });
    var animate = new valueobjects.BooleanVO;
    Object.defineProperty(this, "animate", {
        set: animate.set.bind(animate),
        get: animate.get.bind(animate)
    }), this.animate = !1
}, utils.JS.inherits(controllers.views.popups.BasePopup, FUIViewController), controllers.views.popups.BasePopup.prototype.init = function init() {
    this.superclass(), getKeyboardEventController().registerDelegate(this, UTKeyboardEventController.PRIORITY.POPUP)
}, controllers.views.popups.BasePopup.prototype.dealloc = function dealloc() {
    this.onExit.dealloc(), this.onExit = null, getKeyboardEventController().unregisterDelegate(this, UTKeyboardEventController.PRIORITY.POPUP), this.superclass()
}, controllers.views.popups.BasePopup.prototype.onBackButton = function onBackButton() {
    return this.closePopup(), !1
}, controllers.views.popups.BasePopup.prototype.closePopup = function closePopup() {
    this.onExit.notify()
}, controllers.views.popups.BasePopup.prototype.handleKeyUpEvent = function handleKeyUpEvent(e) {
    e.key !== enums.KeyboardKey.ESCAPE && e.key !== enums.KeyboardKey.MS_ESCAPE || this.onExit.notify(enums.UIDialogOptions.CANCEL)
}, NamespaceManager.Register("controllers.views.popups"), controllers.views.popups.DailyGift = function DailyGift(t) {
    controllers.views.popups.BasePopup.call(this), this._rewardType = t.rewardType || "", Object.defineProperty(this, "_rewardType", {
        writable: !1
    }), this._rewardValue = t.rewardValue || -1, Object.defineProperty(this, "_rewardValue", {
        writable: !1
    })
}, utils.JS.inherits(controllers.views.popups.DailyGift, controllers.views.popups.BasePopup), controllers.views.popups.DailyGift.prototype.init = function init() {
    this.superclass(), this.getView().render(this._rewardType, this._rewardValue), this.getView().onComplete.observe(this, this.onExit.notify.bind(this.onExit)), gTelemetryManager.trackPage(TelemetryManager.Sections.MISC, "Daily Gift")
}, controllers.views.popups.DailyGift.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.DailyGift
}, NamespaceManager.Register("pages.controllers"), pages.controllers.ScreenControllerBase = function(view) {
    this._view = view
}, pages.controllers.ScreenControllerBase.prototype.getView = function() {
    return this._view
}, pages.controllers.ScreenControllerBase.prototype.init = function() {
    repositories.Message.getDailyGift().observe(this, this.onDailyGift)
}, pages.controllers.ScreenControllerBase.prototype.destroy = function() {}, pages.controllers.ScreenControllerBase.prototype.onAppPaused = function() {}, pages.controllers.ScreenControllerBase.prototype.onAppResumed = function() {
    gAuthenticationModel.isFullyAuthenticated() && controllers.SettingsUpdaterController.startTimer(), repositories.Squad.hasExternalShowOffSquad() && services.Squad.loadShowOffSquad().observe(this, function(t, i) {
        t.unobserve(this), i.success && NavManager.requestChildScreen(Screens.getView("SHOW_OFF_SQUAD"), {
            showOffDTO: i.showOffDTO
        })
    })
}, pages.controllers.ScreenControllerBase.prototype.getDataCache = function() {
    return null
}, pages.controllers.ScreenControllerBase.prototype.setPreviousScreenId = function(t) {
    this.getView().setPreviousScreenId(t)
}, pages.controllers.ScreenControllerBase.prototype.getPreviousScreenId = function() {
    return this.getView().getPreviousScreenId()
}, pages.controllers.ScreenControllerBase.prototype.onDailyGift = function(t, i, data) {
    function onGiftClaimed(t, i, data, errorCode) {
        t.unobserve(this), i ? (services.Notification.queue([gLocalization.lText("infopanel.label.claimed"), enums.UINotificationType.POSITIVE]), "pack" === data.rewardType && repositories.User.getCurrent().incrementNumUnopenedPacks()) : services.Notification.queue([gLocalization.lText("dailyreward.claimfailed"), enums.UINotificationType.NEGATIVE])
    }
    if (t.unobserve(this), i) {
        var s = new controllers.views.popups.DailyGift(data.dailyGift);
        s.onExit.observe(this, function onCloseDailyGiftPopup(t) {
            t.unobserve(this), data.dailyGift.claim().observe(this, onGiftClaimed)
        }), gPopupClickShield.setActivePopup(s)
    }
}, pages.controllers.ScreenControllerBase.prototype.onOrientationChanged = function(orientation) {}, pages.controllers.ScreenControllerBase.prototype.onScreenInitialized = function(data, t) {}, pages.controllers.ScreenControllerBase.prototype.onScreenStarted = function() {}, pages.controllers.ScreenControllerBase.prototype.onScreenStopped = function() {}, pages.controllers.ScreenControllerBase.prototype.onScreenTransitionRequest = function(t) {
    return !0
}, pages.controllers.ScreenControllerBase.prototype.onRequestBack = function() {
    return !0
}, pages.controllers.ScreenControllerBase.prototype.onDeviceBackButton = function() {
    return !0
}, pages.controllers.ScreenControllerBase.prototype.onActiveScreenTransitionRequest = function() {}, pages.controllers.ScreenControllerBase.ORIENTATION_STATE = {
    PORTRAIT_DOWN: 180,
    LANDSCAPE_LEFT: -90,
    LANDSCAPE_RIGHT: 90,
    PORTRAIT: 0
}, NamespaceManager.Register("interfaces"), interfaces.EADPIdentityManager = function() {}, interfaces.EADPIdentityManager.prototype.isAuthenticated = function(t) {}, interfaces.EADPIdentityManager.prototype.getToken2CodeRedirectUri = function() {}, interfaces.EADPIdentityManager.prototype.clearStorage = function() {}, interfaces.EADPIdentityManager.prototype.checkEADPAuth = function checkEADPAuth(t, i) {}, interfaces.EADPIdentityManager.prototype.getUserInfo = function getUserInfo(t, i) {}, interfaces.EADPIdentityManager.prototype.initiateLoginFlow = function(t, i, s) {}, interfaces.EADPIdentityManager.prototype.getLoginUrl = function getLoginUrl() {}, utils.JS.inherits(EADPIdentityManager, FUTObject), EADPIdentityManager.prototype.setLocale = function setLocale(locale) {
    this.locale = locale
}, EADPIdentityManager.prototype.setRedirectUri = function setRedirectUri(uri) {
    this.redirect_uri = uri
}, EADPIdentityManager.prototype.setDeviceId = function setDeviceId(t) {
    this.device_id = t
}, EADPIdentityManager.prototype.setConnectHost = function setConnectHost(t) {
    this.connectHost = t
}, EADPIdentityManager.prototype.setPortalHost = function setPortalHost(t) {
    this.portalHost = t
}, EADPIdentityManager.prototype.setProxyHost = function setProxyHost(t) {
    this.proxyHost = t
}, EADPIdentityManager.prototype.setClientScope = function setClientScope(scope) {
    this.mobile_client_scope = scope
}, EADPIdentityManager.prototype.setClientId = function setClientId(id) {
    this.mobile_client_id = id
}, EADPIdentityManager.prototype.setClientSecret = function setClientSecret(t) {
    this.mobile_client_secret = t
}, EADPIdentityManager.prototype.getAccessToken = function getAccessToken() {
    var t = getStorage();
    return t ? t.getItem("_eadp.identity.access_token") : null
}, EADPIdentityManager.prototype.getRefreshToken = function() {
    var t = getStorage();
    return t ? t.getItem("_eadp.identity.refresh_token") : null
}, EADPIdentityManager.prototype.isAuthenticated = function isAuthenticated(t) {
    eadp.identity.getAccessToken() && eadp.identity.getRefreshToken() && t()
}, EADPIdentityManager.prototype.isExternalLink = function isExternalLink(url) {
    return null !== url && "" !== url && (-1 === url.lastIndexOf(this.connectHost) && -1 === url.lastIndexOf(this.portalHost) && -1 === url.lastIndexOf("127.0.0.1") && -1 === url.lastIndexOf("/fifa/fltOnlineAssets/"))
}, EADPIdentityManager.prototype.isErrorPattern = function isErrorPattern(url, pattern, t) {
    var i = this.portalHost + pattern;
    return null !== url && "" !== url && (0 === url.lastIndexOf(i) && -1 === url.lastIndexOf(t + "="))
}, EADPIdentityManager.prototype.getToken2CodeRedirectUri = function getToken2CodeRedirectUri() {
    return "nucleus:rest"
}, EADPIdentityManager.prototype.clearStorage = function clearStorage() {
    var t = getStorage();
    t && (t.setItem("_eadp.identity.access_token", ""), t.setItem("_eadp.identity.expire", ""), t.setItem("_eadp.identity.timestamp", ""), t.setItem("_eadp.identity.refresh_token", ""), t.setItem("_eadp.identity.pidId", ""))
}, EADPIdentityManager.prototype.getResponseType = function getResponseType() {
    return "code"
}, EADPIdentityManager.prototype.checkEADPAuth = function checkEADPAuth(t, i) {
    var s = {
        client_id: this.mobile_client_id,
        response_type: this.getResponseType(),
        display: "web2/login",
        locale: this.locale,
        redirect_uri: "nucleus:rest",
        prompt: "none"
    };
    this.mobile_client_scope && (s.scope = this.mobile_client_scope);
    var o = new FUTHttpRequest;
    o.setUrl(this.connectHost + "/connect/auth"), o.setUrlVariables(s), o.observe(this, function _onAuthCheckComplete(s, data) {
        s.unobserve(this), data.success && utils.JS.isObject(data.response) && data.response.code ? t() : i()
    }), o.send()
}, EADPIdentityManager.prototype.getUserInfo = function getUserInfo(t, i) {
    function _cbUserInfoTokenRefresh(code) {
        code ? i(code) : this.getUserInfo(t, i)
    }
    var s = new FUTHttpRequest;
    s.setUrl(this.proxyHost + "/proxy/identity/pids/me"), s.setRequestHeader("Authorization", "Bearer " + this.getAccessToken()), s.setRequestHeader("Accept", "application/json; charset=utf-8; */*; q=0.01"), s.observe(this, function _onGetUserInfoComplete(s, data) {
        if (s.unobserve(this), data.success) {
            var o = getStorage();
            o ? (o.setItem("_eadp.identity.pidId", data.response.pid.pidId), t(data.response.pid)) : i(this.error.LOCAL_STORAGE)
        } else data.status === enums.HTTPStatusCode.FORBIDDEN ? this.tokenRefresh(_cbUserInfoTokenRefresh.bind(this)) : i(this.error.SERVER)
    }), s.send()
}, EADPIdentityManager.prototype.tokenRefresh = function tokenRefresh(t) {
    var i = this.getRefreshToken();
    if (!i) return utils.Debug.Assert(!1, "[EADPlib] Token refresh flow attempted when refresh token is null."), void t(this.error.REFRESH_TOKEN);
    var s = new FUTHttpRequest;
    s.setContentType(enums.HTTPContentType.FORM_DATA), s.setRequestType(enums.HTTPRequestMethod.POST), s.setUrl(this.connectHost + "/connect/token"), s.observe(this, function _onTokenRefreshComplete(i, data) {
        if (i.unobserve(this), data.success) {
            var s = getStorage();
            s ? (s.setItem("_eadp.identity.access_token", data.response.access_token), s.setItem("_eadp.identity.expire", data.response.expires_id), s.setItem("_eadp.identity.timestamp", Date.now()), s.setItem("_eadp.identity.refresh_token", data.response.refresh_token), t()) : t(this.error.LOCAL_STORAGE)
        } else t(this.error.REFRESH_TOKEN)
    }), s.setUrlVariables({
        client_id: this.mobile_client_id,
        refresh_token: i,
        client_secret: this.mobile_client_secret,
        grant_type: "refresh_token"
    }), s.send()
}, EADPIdentityManager.prototype.closeLoginFlow = function() {
    var t = document.getElementById("eadp_chrome_iframe");
    t.outerHTML = "", t = null
}, EADPIdentityManager.prototype.initiateLoginFlow = function initiateLoginFlow(t, i, s) {
    var o = document.getElementById(t);
    if (o) {
        this.exchangeAccessTokenSuccessCallback = i, this.exchangeAccessTokenFailCallback = s;
        var l = document.createElement("iframe");
        l.src = this.getLoginUrl(), l.id = "eadp_chrome_iframe", l.frameBorder = 0, l.onload = function() {
            var url = document.getElementById(l.id).src;
            if (-1 !== url.indexOf("code=")) {
                var code = url.split("code=")[1].split("&")[0];
                this.exchangeAccessToken(code, i, s)
            }
        }.bind(this), o.appendChild(l)
    }
}, EADPIdentityManager.prototype.exchangeAccessToken = function exchangeAccessToken(code, t, i) {
    var s = new FUTHttpRequest;
    s.setRequestType(enums.HTTPRequestMethod.POST), s.setUrl(this.connectHost + "/connect/token"), s.setContentType(enums.HTTPContentType.FORM_DATA), s.setUrlVariables({
        grant_type: "authorization_code",
        code: code,
        client_id: this.mobile_client_id,
        client_secret: this.mobile_client_secret
    }), s.observe(this, function _onExchangeAccessTokenComplete(s, data) {
        if (s.unobserve(this), data.success) {
            var o = getStorage();
            o ? (o.setItem("_eadp.identity.access_token", data.response.access_token), o.setItem("_eadp.identity.expire", data.response.expires_in), o.setItem("_eadp.identity.timestamp", Date.now()), o.setItem("_eadp.identity.refresh_token", data.response.refresh_token), t(data.response.access_token)) : i(this.error.LOCAL_STORAGE)
        } else i(this.error.SERVER)
    }), s.send()
}, EADPIdentityManager.prototype.getLoginUrl = function getLoginUrl() {
    var t = {
        prompt: "login",
        accessToken: this.getAccessToken(),
        client_id: this.mobile_client_id,
        response_type: this.getResponseType(),
        display: "web2/login",
        locale: this.locale,
        machineProfileKey: this.device_id
    };
    return null !== t.accessToken && "" !== t.accessToken && delete t.prompt, utils.JS.isEmpty(this.mobile_client_scope) || (t.scope = this.mobile_client_scope), this.connectHost + "/connect/auth" + utils.HTTP.generateUrlParams(t)
}, EADPIdentityManager.prototype.token2code = function token2code(t, i, s) {
    function _cbToken2CodeTokenRefresh(code) {
        code ? (code === this.error.REFRESH_TOKEN && (o.status = enums.HTTPStatusCode.INVALID_CREDENTIALS), s(o)) : this.token2code(t, i, s)
    }
    var o, l = new FUTHttpRequest;
    l.setUrl(this.connectHost + "/connect/auth"), l.setUrlVariables({
        client_id: t,
        redirect_uri: this.getToken2CodeRedirectUri(),
        response_type: "code",
        access_token: this.getAccessToken()
    }), l.observe(this, function _onToken2CodeComplete(t, data) {
        t.unobserve(this), data.success ? i(data) : data.status === enums.HTTPStatusCode.BAD_REQUEST ? (o = data, this.tokenRefresh(_cbToken2CodeTokenRefresh.bind(this))) : s(data)
    }), l.send()
}, EADPIdentityManager.prototype.logout = function(t) {
    var i = new FUTHttpRequest;
    i.setRequestType(enums.HTTPRequestMethod.GET), i.setUrl(this.connectHost + "/connect/logout"), i.setTimeout(5e3), i.observe(this, function _onLogoutComplete(i, data) {
        i.unobserve(this), this.clearStorage(), t()
    }), i.setUrlVariables({
        client_id: this.mobile_client_id,
        redirect_uri: "nucleus:rest"
    }), i.send()
}, utils.JS.inherits(EADPIdentityManager_Web, EADPIdentityManager), EADPIdentityManager_Web.prototype.isAuthenticated = function isAuthenticated(t) {
    eadp.identity.getAccessToken() && t()
}, EADPIdentityManager_Web.prototype.getResponseType = function getResponseType() {
    return "token"
}, EADPIdentityManager_Web.prototype.parseCheckEADPResponse = function parseCheckEADPResponse(responseText, t, i) {
    try {
        var json = JSON.parse(responseText);
        if (json.access_token) return this.setAccessToken(json.access_token), t()
    } catch (t) {}
    i()
}, EADPIdentityManager_Web.prototype.setAccessToken = function setAccessToken(t) {
    getStorage().setItem("_eadp.identity.access_token", t)
}, EADPIdentityManager_Web.prototype.tokenRefresh = function tokenRefresh(t) {
    this.checkEADPAuth(t.bind(this), t.bind(this, this.error.REFRESH_TOKEN))
}, EADPIdentityManager_Web.prototype.initiateLoginFlow = function initiateLoginFlow(t, i, s) {
    window.top.location = this.getLoginUrl()
}, EADPIdentityManager_Web.prototype.getLoginUrl = function getLoginUrl() {
    var t = {
        prompt: "login",
        accessToken: this.getAccessToken(),
        client_id: this.mobile_client_id,
        response_type: this.getResponseType(),
        display: "web2/login",
        locale: this.locale,
        redirect_uri: this.redirect_uri
    };
    return null !== t.accessToken && "" !== t.accessToken && delete t.prompt, utils.JS.isEmpty(this.mobile_client_scope) || (t.scope = this.mobile_client_scope), this.connectHost + "/connect/auth" + utils.HTTP.generateUrlParams(t)
}, EADPIdentityManager_Web.prototype.logout = function(context, t) {
    var i = {
            client_id: this.mobile_client_id,
            redirect_uri: this.redirect_uri
        },
        url = this.connectHost + "/connect/logout" + utils.HTTP.generateUrlParams(i);
    this.clearStorage(), window.top.location = url
};
var eadp = {};
eadp.identity = new EADPIdentityManager_Web, Screens.Register("LOGIN", "Login", Screens.APP_SECTION.LOGIN), pages.Login = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.NO_HEADER, gLocalization.lText("navbar.label.loginfut")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "Login"), this._generate()
}, utils.JS.inherits(pages.Login, pages.ScreenBase), pages.Login.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.Login.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.Login.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.Login.prototype.getRootElement = function getRootElement() {
    return this.__root
}, models.ShowOffLoginModel = function() {
    models.LoginModel.call(this), this._showOffDTO = null
}, utils.JS.inherits(models.ShowOffLoginModel, models.LoginModel), models.ShowOffLoginModel.LOGIN_STEP = {
    PRE_LOAD_SQUAD: 0,
    LOAD_SQUAD: 1,
    SQUAD_SCREEN: 2
}, models.ShowOffLoginModel.prototype._runCurrentStep = function() {
    switch (this._currentLoginStep) {
        case models.ShowOffLoginModel.LOGIN_STEP.PRE_LOAD_SQUAD:
            this._onPreLoadSquad();
            break;
        case models.ShowOffLoginModel.LOGIN_STEP.LOAD_SQUAD:
            this._getShowOffSquad();
            break;
        case models.ShowOffLoginModel.LOGIN_STEP.SQUAD_SCREEN:
            this._goToSquadScreen();
            break;
        default:
            utils.Debug.Assert(!1, "[models.ShowOffLoginModel] Invalid or unsupported bootflow step requested."), this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }
}, models.ShowOffLoginModel.prototype._onPreLoadSquad = function() {
    var t = new communication.SquadDataDelegate;
    t.setImportant(!0);
    var i = new communication.TeamsConfigDelegate;
    i.setImportant(!0);
    var s = new communication.PlayerMetaDataDelegate;
    s.addListener(communication.BaseDelegate.SUCCESS, this, this._onPlayerMetaDataSuccess), s.addListener(communication.BaseDelegate.FAIL, this, this._onPlayerMetaDataFail), s.setImportant(!0);
    var o = new communication.StaticPlayerDataDelegate;
    o.addListener(communication.BaseDelegate.SUCCESS, this, this._onStaticDataSuccess), o.addListener(communication.BaseDelegate.FAIL, this, this._onStaticDataFail), o.setImportant(!0);
    var l = new communication.PlayerIconDataDelegate;
    l.addListener(communication.BaseDelegate.SUCCESS, this, this._onPlayerIconDataSuccess), l.addListener(communication.BaseDelegate.FAIL, this, this._onPlayerIconDataFail), l.setImportant(!0);
    var u = new communication.ExtendedLocDelegate;
    u.setImportant(!0);
    var h = new communication.PlaceholderAssetsDelegate;
    h.setImportant(!0);
    var p = [t, i, s, o, l, u, h],
        m = new utils.DelegateChain(p, !1);
    m.addListener(utils.DelegateChain.SUCCESS, this, this._onPreLoadSquadSuccess), m.addListener(utils.DelegateChain.FAIL, this, this._onPreLoadSquadFail), m.execute()
}, models.ShowOffLoginModel.prototype._onStaticDataSuccess = function(sender, response) {
    sender.clearListenersByScope(this), repositories.Item.setStaticData([].concat(response.Players, response.LegendsPlayers))
}, models.ShowOffLoginModel.prototype._onPreLoadSquadSuccess = function(sender) {
    sender.clearListenersByScope(this), this._runNextStep()
}, models.ShowOffLoginModel.prototype._onPreLoadSquadFail = function(sender) {
    sender.clearListenersByScope(this), this._isRunning = !1, utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.logout.bind(this)), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.ShowOffLoginModel.prototype._getShowOffSquad = function() {
    services.Squad.loadShowOffSquad().observe(this, function(t, i) {
        t.unobserve(this), i.success ? (this._showOffDTO = i.showOffDTO, this._runNextStep()) : (window.location.search.substring(1).length && void 0 !== window.history && void 0 !== window.history.pushState && window.history.pushState({}, document.title, window.location.pathname), this._isRunning = !1, gClickShield.hideShield(components.ClickShield.SHIELD.LOADING))
    })
}, models.ShowOffLoginModel.prototype._goToSquadScreen = function() {
    this._isRunning = !1, NavManager.requestChildScreen(Screens.getView("SHOW_OFF_SQUAD"), {
        showOffDTO: this._showOffDTO
    }), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
}, models.ShowOffLoginModel.prototype.logout = function() {
    utils.Debug.Assert(!this._isRunning, "[LOGIN] Attempted to logout when a login/logout request is already running."), this._isRunning || (gFooter.hide(), this._resetApp())
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.FUTLogo = function FUTLogoView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.bootFlow.FUTLogo, FUIView), views.bootFlow.FUTLogo.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("header");
        t.classList.add("FUTLogo-container"), t.classList.add("header"), this._eaSportsLogo = new components.ImageLoader, this._eaSportsLogo.getRootElement().classList.add("EALogo"), t.appendChild(this._eaSportsLogo.getRootElement()), this._futProductLogo = new components.ImageLoader, this._futProductLogo.getRootElement().classList.add("FIFALogo"), t.appendChild(this._futProductLogo.getRootElement()), this._licenseLogo = new components.ImageLoader, this._licenseLogo.getRootElement().classList.add("licenseLogo"), t.appendChild(this._licenseLogo.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.FUTLogo.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._eaSportsLogo.destroy(), this._eaSportsLogo = null, this._futProductLogo.destroy(), this._futProductLogo = null, this._licenseLogo.destroy(), this._licenseLogo = null
}, views.bootFlow.FUTLogo.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.FUTLogo.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.FUTLogo.prototype.init = function init() {
    this.superclass();
    var product = enums.Product.COMPANION;
    product = enums.Product.WEB;
    var t = gLocalization.getLanguage();
    this._eaSportsLogo.setLocalResource("images/logo/ea_sports_logo.png"), this._futProductLogo.setLocalResource(utils.AssetLocator.getFUTProductColorLogoURI(t, product)), this._licenseLogo.setLocalResource(utils.AssetLocator.getLicenseLogoURI(t))
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.Login = function() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.bootFlow.Login, FUIView), views.bootFlow.Login.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "Login"), t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-login"), i.classList.add("l-login"), i.classList.add("boot-box");
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-primary-content");
        var l = document.createElement("div");
        l.classList.add("flush-top"), l.classList.add("layout-article"), l.classList.add("boot-content"), this._futLogo = new views.bootFlow.FUTLogo, l.appendChild(this._futLogo.getRootElement()), this._btnLogin = new views.buttons.DefaultButton, this._btnLogin.getRootElement().classList.add("call-to-action"), l.appendChild(this._btnLogin.getRootElement()), this._linkGettingStarted = new views.buttons.FlatButton, this._linkGettingStarted.getRootElement().classList.add("camel-case"), l.appendChild(this._linkGettingStarted.getRootElement()), o.appendChild(l), s.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("boot-secondary-content"), s.appendChild(u), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.Login.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._futLogo.destroy(), this._futLogo = null, this._btnLogin.destroy(), this._btnLogin = null, this._linkGettingStarted.destroy(), this._linkGettingStarted = null
}, views.bootFlow.Login.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.Login.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.Login.prototype.init = function init() {
    this.superclass(), this._btnLogin.init(), this._btnLogin.setText(gLocalization.lText("login.loginButtonText")), this._linkGettingStarted.init(), this._linkGettingStarted.setText(gLocalization.lText("login.gettingstarted")), this._linkGettingStarted.addTarget(this, this._eGettingStarted, enums.Event.TAP), this._futLogo.init()
}, views.bootFlow.Login.prototype.getLoginButton = function getLoginButton() {
    return this._btnLogin
}, views.bootFlow.Login.prototype.enableLoginButton = function enableLoginButton(t) {
    this._btnLogin.setInteractionState(t)
}, views.bootFlow.Login.prototype._eGettingStarted = function _eGettingStarted(sender, e) {
    services.URL.process(gLocalization.lText("link.gettingstarted"))
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.Login = function() {
    FUIViewController.call(this), this._inAppBrowser = null, this._successCallbackDelegate = null, this._errorCallbackDelegate = null, this._linkCallbackDelegate = null, this._browserDismissedCallbackDelegate = null, this._recreateOnResume = !1
}, utils.JS.inherits(controllers.bootFlow.Login, FUIViewController), controllers.bootFlow.Login.IOS_STATUS_BAR_STYLE = {
    DEFAULT: 0,
    BLACK: 1
}, controllers.bootFlow.Login.prototype.init = function init() {
    this.superclass(), eadp.identity.setConnectHost(gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_EADP_CONNECT_HOST)), eadp.identity.setPortalHost(gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_EADP_PORTAL_HOST)), eadp.identity.setProxyHost(gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_EADP_PROXY_HOST)), eadp.identity.setClientId(gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_EADP_CLIENT_ID)), eadp.identity.setClientSecret(gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_EADP_CLIENT_SECRET)), eadp.identity.setLocale(gLocalization.getEffectiveLocale()), eadp.identity.setDeviceId(getUUID());
    var url = window.location.href,
        t = utils.HTTP.getParamsFromUrl(url),
        uri = utils.HTTP.getUriRoot(url),
        i = services.URL.findValidDeepLinkID(t.keys());
    i !== enums.DeepLinkSections.NONE && (services.URL.setDeepLinkURL(i, t.get(i)), getStorage().setItem("deepLinkURL", services.URL.getDeepLinkURL())), uri = uri.replace(/\/$/, "") + "/auth.html", eadp.identity.setRedirectUri(uri), this.getView().getLoginButton().addTarget(this, this._eLoginSelected, enums.Event.TAP)
}, controllers.bootFlow.Login.prototype.dealloc = function dealloc() {
    this.superclass()
}, controllers.bootFlow.Login.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.Login
}, controllers.bootFlow.Login.prototype.onScreenInitialized = function onScreenInitialized(data, t, i) {
    var s = this,
        o = function() {
            s.getView().enableLoginButton(!0)
        },
        l = function() {
            eadp.identity.getUserInfo(s._onEadpUserInfoSuccess.bind(s), s._onEadpUserInfoFail.bind(s))
        };
    i ? eadp.identity.clearStorage() : repositories.Squad.hasExternalShowOffSquad() ? this.startUnauthenticatedLoginFlow() : (this.getView().enableLoginButton(!1), eadp.identity.getAccessToken() ? l() : eadp.identity.checkEADPAuth(l, o))
}, controllers.bootFlow.Login.prototype.onAppResumed = function onAppResumed() {
    repositories.Squad.hasExternalShowOffSquad() && (this.isLoginViewOpen() && (this.closeLoginView(), this.getView().enableLoginButton(!0)), this.startUnauthenticatedLoginFlow()), this._recreateOnResume && (this._recreateOnResume = !1, this.createLoginView())
}, controllers.bootFlow.Login.prototype.onDeviceBackButton = function onDeviceBackButton() {
    return !this.isLoginViewOpen() || (this.closeLoginView(), this.enableLoginButton(!0), !1)
}, controllers.bootFlow.Login.prototype.startUnauthenticatedLoginFlow = function startUnauthenticatedLoginFlow() {
    gAuthenticationModel.setLoginModel(new models.ShowOffLoginModel), gAuthenticationModel.login()
}, controllers.bootFlow.Login.prototype._onEadpLoginComplete = function _onEadpLoginComplete() {
    eadp.identity.getUserInfo(this._onEadpUserInfoSuccess.bind(this), this._onEadpUserInfoFail.bind(this))
}, controllers.bootFlow.Login.prototype._onEadpUserInfoFail = function _onEadpUserInfoFail(error) {
    if (error === eadp.identity.error.LOCAL_STORAGE) return utils.Debug.Assert(!1, "[controllers.LoginController] Unable to save EADP Identity data in local storage."), void this.getView().enableLoginButton(!0);
    error !== eadp.identity.error.REFRESH_TOKEN ? error !== eadp.identity.error.SERVER || this.getView().enableLoginButton(!0) : this.getView().enableLoginButton(!0)
}, controllers.bootFlow.Login.prototype._onEadpUserInfoSuccess = function _onEadpUserInfoSuccess(t) {
    gAuthenticationModel.setLoginModel(new models.LoginModel), repositories.User.setCurrent(new entities.User(t)), gUserSettingsModel.setUserKey(t.pidId.toString()), isChrome() || window.plugins.utilities.registerNimble(t.pidId, function() {}, function() {}), gAuthenticationModel.login()
}, controllers.bootFlow.Login.prototype._eLoginSelected = function _eLoginSelected(sender, t) {
    gClientUpdate.disablePolling(), gTelemetryManager.trackEvent(TelemetryManager.Sections.LOGIN, TelemetryManager.Categories.BUTTON_PRESS, "Login"), this.getView().enableLoginButton(!1), this.createLoginView()
}, controllers.bootFlow.Login.prototype.createLoginView = function createLoginView() {
    if (!hasConnection()) return utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, function() {
        this.getView().enableLoginButton(!0)
    }.bind(this)), !1;
    if (isChrome()) eadp.identity.initiateLoginFlow("Login", this.onAccessTokenSuccess.bind(this), this.onAccessTokenFail.bind(this));
    else {
        var t = eadp.identity.getLoginUrl();
        this._inAppBrowser = window.open(t, "_blank", "location=no"), this._successCallbackDelegate = this.iabLoadStart.bind(this), this._errorCallbackDelegate = this.iabLoadError.bind(this), this._browserDismissedCallbackDelegate = this.iabExit.bind(this), this._linkCallbackDelegate = this.iabLoadStop.bind(this), this._inAppBrowser.addEventListener("loadstart", this._successCallbackDelegate, !1), this._inAppBrowser.addEventListener("loadstart", this._linkCallbackDelegate, !1), this._inAppBrowser.addEventListener("loadstop", this._linkCallbackDelegate, !1), this._inAppBrowser.addEventListener("loaderror", this._errorCallbackDelegate, !1), this._inAppBrowser.addEventListener("exit", this._browserDismissedCallbackDelegate, !1)
    }
}, controllers.bootFlow.Login.prototype.closeLoginView = function closeLoginView() {
    this.isLoginViewOpen() && (this._inAppBrowser.removeEventListener("loadstart", this._successCallbackDelegate, !1), this._inAppBrowser.removeEventListener("loadstart", this._linkCallbackDelegate, !1), this._inAppBrowser.removeEventListener("loadstop", this._linkCallbackDelegate, !1), this._inAppBrowser.removeEventListener("loaderror", this._errorCallbackDelegate, !1), this._inAppBrowser.removeEventListener("exit", this._browserDismissedCallbackDelegate, !1), this._successCallbackDelegate = null, this._errorCallbackDelegate = null, this._browserDismissedCallbackDelegate = null, this._inAppBrowser.close(), this._inAppBrowser = null, gClientUpdate.pollForUpdates(function() {
        gNavManager.requestRootScreen(Screens.getView(gClientUpdate.getScreenName()))
    }))
}, controllers.bootFlow.Login.prototype.iabLoadStart = function iabLoadStart(event) {
    if (eadp.identity.isErrorPattern(event.url, "/p/mobile/fifa/companion/code", "code")) gAuthenticationModel.logout(), this.closeLoginView(), this.getView().enableLoginButton(!0);
    else if (event.url && -1 !== event.url.indexOf("code=")) {
        this.closeLoginView();
        var code = event.url.split("code=")[1].split("&")[0];
        eadp.identity.exchangeAccessToken(code, this.onAccessTokenSuccess.bind(this), this.onAccessTokenFail.bind(this))
    }
}, controllers.bootFlow.Login.prototype.iabLoadStop = function iabLoadStop(event) {
    eadp.identity.isExternalLink(event.url) && (this.closeLoginView(), this._recreateOnResume = !0, services.URL.process(event.url))
}, controllers.bootFlow.Login.prototype.iabLoadError = function iabLoadError(event) {
    utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE, this.iabExit.bind(this))
}, controllers.bootFlow.Login.prototype.iabExit = function iabExit(event) {
    this.closeLoginView(), this.getView().enableLoginButton(!0)
}, controllers.bootFlow.Login.prototype.onAccessTokenSuccess = function onAccessTokenSuccess(t) {
    isChrome() && eadp.identity.closeLoginFlow(), this._onEadpLoginComplete()
}, controllers.bootFlow.Login.prototype.onAccessTokenFail = function onAccessTokenFail(t) {
    this._onEadpLoginComplete()
}, controllers.bootFlow.Login.prototype.isLoginViewOpen = function isLoginViewOpen() {
    return utils.JS.isValid(this._inAppBrowser)
}, pages.controllers.LoginController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._viewController = new controllers.bootFlow.Login
}, utils.JS.inherits(pages.controllers.LoginController, pages.controllers.ScreenControllerBase), pages.controllers.LoginController.prototype.init = function() {
    this._viewController.init(), this.getView().getRoot().append(this._viewController.getView().getRoot())
}, pages.controllers.LoginController.prototype.onScreenInitialized = function(data, t) {
    this._viewController.onScreenInitialized(data, t, this.getView().didGoBack())
}, pages.controllers.LoginController.prototype.destroy = function() {
    this._viewController.dealloc(), this._viewController = null
}, pages.controllers.LoginController.prototype.onAppResumed = function() {
    this._viewController.onAppResumed()
}, pages.controllers.LoginController.prototype.onDeviceBackButton = function() {
    return this._viewController.onDeviceBackButton()
}, NamespaceManager.Register("views"), views.TextInput = function FUITextInput() {
    FUIView.call(this), this._generate(), Object.defineProperty(this, "type", {
        get: function() {
            return this.getRoot().attr("type")
        },
        set: function(t) {
            var key;
            for (key in enums.UIInputType)
                if (enums.UIInputType.hasOwnProperty(key) && enums.UIInputType[key] === t) return void this.getRoot().attr("type", t);
            utils.Debug.Assert(!1, "Invalid assignment to component: TextInput.type")
        },
        enumerable: !0
    }), Object.defineProperty(this, "value", {
        get: function() {
            return this.getRoot().val().toString()
        },
        set: function(t) {
            this.getRoot().val(t)
        },
        enumerable: !0
    }), this.type = enums.UIInputType.TEXT, this.value = "", this.onChange = new FUTObservable, Object.defineProperty(this, "onChange", {
        writable: !1,
        enumerable: !0
    }), this.onInput = new FUTObservable, Object.defineProperty(this, "onInput", {
        writable: !1,
        enumerable: !0
    }), this._selectionTimeout = 0, Object.defineProperty(this, "_selectionTimeout", {
        writable: !0,
        enumerable: !1
    }), this._blurTimeout = 0, Object.defineProperty(this, "_blurTimeout", {
        writable: !0,
        enumerable: !1
    })
}, utils.JS.inherits(views.TextInput, FUIView), views.TextInput.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("input");
        t.setAttribute("type", "text"), t.classList.add("textInput"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.TextInput.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.TextInput.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.TextInput.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.TextInput.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, views.TextInput.prototype.dealloc = function dealloc() {
    this._selectionTimeout = clearTimeout(this._selectionTimeout), this._blurTimeout = clearTimeout(this._blurTimeout), this.onChange.dealloc(), this.onInput.dealloc(), this.onChange = null, this.onInput = null, this.superclass()
}, views.TextInput.prototype.setInteractionState = function setInteractionState(t) {
    this._setInteractionStateFlag(t);
    var root = this.getRoot(),
        i = "textEvent";
    if (!this._interactionState && root.is(":focus") && root.blur(), root.prop("disabled", !this._interactionState), root.toggleClass(enums.UIState.DISABLED, !this._interactionState), this._interactionState) {
        var s = root.get(0);
        this._addListener(enums.Event.FOCUS, s, this._handleFocusEvent.bind(this), i), this._addListener(enums.Event.BLUR, s, this._handleBlurEvent.bind(this), i), this._addListener(enums.Event.CHANGE, s, this._handleChangeEvent.bind(this), i), this._addListener(enums.Event.INPUT, s, this._handleInputEvent.bind(this), i), this._addListener(enums.Event.CUT, s, this._handleInputEvent.bind(this), i), this._addListener(enums.Event.PASTE, s, this._handleInputEvent.bind(this), i)
    } else this._removeListenersByNS(i)
}, views.TextInput.prototype.setPlaceholder = function(value) {
    this.getRoot().attr("placeholder", value)
}, views.TextInput.prototype.setMaxLength = function(value) {
    this.getRoot().attr("maxlength", value)
}, views.TextInput.prototype.clear = function() {
    this.value = ""
}, views.TextInput.prototype._handleChangeEvent = function _handleChangeEvent(e) {
    this.onChange.notify(this.value, e)
}, views.TextInput.prototype._handleInputEvent = function _handleInputEvent(e) {
    this.onInput.notify(this.value, e), this.onChange.notify(this.value, e)
}, views.TextInput.prototype._handleFocusEvent = function _handleFocusEvent(e) {
    this._selectionTimeout = setTimeout(function _setSelectionRange() {
        var t = this.getRoot().get(0);
        t.setSelectionRange(0, t.value.length)
    }.bind(this), 50)
}, views.TextInput.prototype._handleBlurEvent = function _handleBlurEvent(e) {
    this._selectionTimeout = clearTimeout(this._selectionTimeout)
}, Screens.Register("PHISHING", "Phishing", Screens.APP_SECTION.LOGIN), pages.Phishing = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.SETTINGS_BUTTON : components.Header.NO_HEADER, gLocalization.lText("title.securityquestion")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "Security Question"), this._generate()
}, utils.JS.inherits(pages.Phishing, pages.ScreenBase), pages.Phishing.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.Phishing.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.Phishing.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.Phishing.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("utils"), utils.MD5Hash = {}, utils.MD5Hash.r1Shifts = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22], utils.MD5Hash.r2Shifts = [5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20], utils.MD5Hash.r3Shifts = [4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23], utils.MD5Hash.r4Shifts = [6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21], utils.MD5Hash.hex_chr = "0123456789abcdef", utils.MD5Hash._numToHex = function(t) {
    var i, s = "";
    for (i = 0; i <= 3; i++) s += utils.MD5Hash.hex_chr.charAt(t >> 8 * i + 4 & 15) + utils.MD5Hash.hex_chr.charAt(t >> 8 * i & 15);
    return s
}, utils.MD5Hash._chunkMessage = function(t) {
    var i, s = t.length,
        o = 1 + (s + 8 >> 6),
        l = new Array(16 * o);
    for (i = 0; i < 16 * o; i++) l[i] = 0;
    for (i = 0; i < s; i++) l[i >> 2] |= t.charCodeAt(i) << i % 4 * 8;
    return l[i >> 2] |= 128 << i % 4 * 8, l[16 * o - 2] = 8 * s, l
}, utils.MD5Hash._add = function(x, y) {
    var t = (65535 & x) + (65535 & y);
    return (x >> 16) + (y >> 16) + (t >> 16) << 16 | 65535 & t
}, utils.MD5Hash._bitwiseRotate = function(x, c) {
    return x << c | x >>> 32 - c
}, utils.MD5Hash._cmn = function(t, a, b, x, i, s) {
    return utils.MD5Hash._add(utils.MD5Hash._bitwiseRotate(utils.MD5Hash._add(utils.MD5Hash._add(a, t), utils.MD5Hash._add(x, s)), i), b)
}, utils.MD5Hash._md5_f = function(a, b, c, d, x, t, i) {
    return utils.MD5Hash._cmn(b & c | ~b & d, a, b, x, t, i)
}, utils.MD5Hash._md5_g = function(a, b, c, d, x, t, i) {
    return utils.MD5Hash._cmn(b & d | c & ~d, a, b, x, t, i)
}, utils.MD5Hash._md5_h = function(a, b, c, d, x, t, i) {
    return utils.MD5Hash._cmn(b ^ c ^ d, a, b, x, t, i)
}, utils.MD5Hash._md5_i = function(a, b, c, d, x, t, i) {
    return utils.MD5Hash._cmn(c ^ (b | ~d), a, b, x, t, i)
}, utils.MD5Hash.md5 = function(t) {
    var i, x = utils.MD5Hash._chunkMessage(t),
        a = 1732584193,
        b = -271733879,
        c = -1732584194,
        d = 271733878,
        s = x.length;
    for (i = 0; i < s; i += 16) {
        var o = a,
            l = b,
            u = c,
            h = d;
        a = utils.MD5Hash._md5_f(a, b, c, d, x[i], utils.MD5Hash.r1Shifts[0], -680876936), d = utils.MD5Hash._md5_f(d, a, b, c, x[i + 1], utils.MD5Hash.r1Shifts[1], -389564586), c = utils.MD5Hash._md5_f(c, d, a, b, x[i + 2], utils.MD5Hash.r1Shifts[2], 606105819), b = utils.MD5Hash._md5_f(b, c, d, a, x[i + 3], utils.MD5Hash.r1Shifts[3], -1044525330), a = utils.MD5Hash._md5_f(a, b, c, d, x[i + 4], utils.MD5Hash.r1Shifts[4], -176418897), d = utils.MD5Hash._md5_f(d, a, b, c, x[i + 5], utils.MD5Hash.r1Shifts[5], 1200080426), c = utils.MD5Hash._md5_f(c, d, a, b, x[i + 6], utils.MD5Hash.r1Shifts[6], -1473231341), b = utils.MD5Hash._md5_f(b, c, d, a, x[i + 7], utils.MD5Hash.r1Shifts[7], -45705983), a = utils.MD5Hash._md5_f(a, b, c, d, x[i + 8], utils.MD5Hash.r1Shifts[8], 1770035416), d = utils.MD5Hash._md5_f(d, a, b, c, x[i + 9], utils.MD5Hash.r1Shifts[9], -1958414417), c = utils.MD5Hash._md5_f(c, d, a, b, x[i + 10], utils.MD5Hash.r1Shifts[10], -42063), b = utils.MD5Hash._md5_f(b, c, d, a, x[i + 11], utils.MD5Hash.r1Shifts[11], -1990404162), a = utils.MD5Hash._md5_f(a, b, c, d, x[i + 12], utils.MD5Hash.r1Shifts[12], 1804603682), d = utils.MD5Hash._md5_f(d, a, b, c, x[i + 13], utils.MD5Hash.r1Shifts[13], -40341101), c = utils.MD5Hash._md5_f(c, d, a, b, x[i + 14], utils.MD5Hash.r1Shifts[14], -1502002290), b = utils.MD5Hash._md5_f(b, c, d, a, x[i + 15], utils.MD5Hash.r1Shifts[15], 1236535329), a = utils.MD5Hash._md5_g(a, b, c, d, x[i + 1], utils.MD5Hash.r2Shifts[0], -165796510), d = utils.MD5Hash._md5_g(d, a, b, c, x[i + 6], utils.MD5Hash.r2Shifts[1], -1069501632), c = utils.MD5Hash._md5_g(c, d, a, b, x[i + 11], utils.MD5Hash.r2Shifts[2], 643717713), b = utils.MD5Hash._md5_g(b, c, d, a, x[i], utils.MD5Hash.r2Shifts[3], -373897302), a = utils.MD5Hash._md5_g(a, b, c, d, x[i + 5], utils.MD5Hash.r2Shifts[4], -701558691), d = utils.MD5Hash._md5_g(d, a, b, c, x[i + 10], utils.MD5Hash.r2Shifts[5], 38016083), c = utils.MD5Hash._md5_g(c, d, a, b, x[i + 15], utils.MD5Hash.r2Shifts[6], -660478335), b = utils.MD5Hash._md5_g(b, c, d, a, x[i + 4], utils.MD5Hash.r2Shifts[7], -405537848), a = utils.MD5Hash._md5_g(a, b, c, d, x[i + 9], utils.MD5Hash.r2Shifts[8], 568446438), d = utils.MD5Hash._md5_g(d, a, b, c, x[i + 14], utils.MD5Hash.r2Shifts[9], -1019803690), c = utils.MD5Hash._md5_g(c, d, a, b, x[i + 3], utils.MD5Hash.r2Shifts[10], -187363961), b = utils.MD5Hash._md5_g(b, c, d, a, x[i + 8], utils.MD5Hash.r2Shifts[11], 1163531501), a = utils.MD5Hash._md5_g(a, b, c, d, x[i + 13], utils.MD5Hash.r2Shifts[12], -1444681467), d = utils.MD5Hash._md5_g(d, a, b, c, x[i + 2], utils.MD5Hash.r2Shifts[13], -51403784), c = utils.MD5Hash._md5_g(c, d, a, b, x[i + 7], utils.MD5Hash.r2Shifts[14], 1735328473), b = utils.MD5Hash._md5_g(b, c, d, a, x[i + 12], utils.MD5Hash.r2Shifts[15], -1926607734), a = utils.MD5Hash._md5_h(a, b, c, d, x[i + 5], utils.MD5Hash.r3Shifts[0], -378558), d = utils.MD5Hash._md5_h(d, a, b, c, x[i + 8], utils.MD5Hash.r3Shifts[1], -2022574463), c = utils.MD5Hash._md5_h(c, d, a, b, x[i + 11], utils.MD5Hash.r2Shifts[2], 1839030562), b = utils.MD5Hash._md5_h(b, c, d, a, x[i + 14], utils.MD5Hash.r3Shifts[3], -35309556), a = utils.MD5Hash._md5_h(a, b, c, d, x[i + 1], utils.MD5Hash.r3Shifts[4], -1530992060), d = utils.MD5Hash._md5_h(d, a, b, c, x[i + 4], utils.MD5Hash.r3Shifts[5], 1272893353), c = utils.MD5Hash._md5_h(c, d, a, b, x[i + 7], utils.MD5Hash.r3Shifts[6], -155497632), b = utils.MD5Hash._md5_h(b, c, d, a, x[i + 10], utils.MD5Hash.r3Shifts[7], -1094730640), a = utils.MD5Hash._md5_h(a, b, c, d, x[i + 13], utils.MD5Hash.r3Shifts[8], 681279174), d = utils.MD5Hash._md5_h(d, a, b, c, x[i], utils.MD5Hash.r3Shifts[9], -358537222), c = utils.MD5Hash._md5_h(c, d, a, b, x[i + 3], utils.MD5Hash.r3Shifts[10], -722521979), b = utils.MD5Hash._md5_h(b, c, d, a, x[i + 6], utils.MD5Hash.r3Shifts[11], 76029189), a = utils.MD5Hash._md5_h(a, b, c, d, x[i + 9], utils.MD5Hash.r3Shifts[12], -640364487), d = utils.MD5Hash._md5_h(d, a, b, c, x[i + 12], utils.MD5Hash.r3Shifts[13], -421815835), c = utils.MD5Hash._md5_h(c, d, a, b, x[i + 15], utils.MD5Hash.r3Shifts[14], 530742520), b = utils.MD5Hash._md5_h(b, c, d, a, x[i + 2], utils.MD5Hash.r3Shifts[15], -995338651), a = utils.MD5Hash._md5_i(a, b, c, d, x[i], utils.MD5Hash.r4Shifts[0], -198630844), d = utils.MD5Hash._md5_i(d, a, b, c, x[i + 7], utils.MD5Hash.r4Shifts[1], 1126891415), c = utils.MD5Hash._md5_i(c, d, a, b, x[i + 14], utils.MD5Hash.r4Shifts[2], -1416354905), b = utils.MD5Hash._md5_i(b, c, d, a, x[i + 5], utils.MD5Hash.r4Shifts[3], -57434055), a = utils.MD5Hash._md5_i(a, b, c, d, x[i + 12], utils.MD5Hash.r4Shifts[4], 1700485571), d = utils.MD5Hash._md5_i(d, a, b, c, x[i + 3], utils.MD5Hash.r4Shifts[5], -1894986606), c = utils.MD5Hash._md5_i(c, d, a, b, x[i + 10], utils.MD5Hash.r4Shifts[6], -1051523), b = utils.MD5Hash._md5_i(b, c, d, a, x[i + 1], utils.MD5Hash.r4Shifts[7], -2054922799), a = utils.MD5Hash._md5_i(a, b, c, d, x[i + 8], utils.MD5Hash.r4Shifts[8], 1873313359), d = utils.MD5Hash._md5_i(d, a, b, c, x[i + 15], utils.MD5Hash.r4Shifts[9], -30611744), c = utils.MD5Hash._md5_i(c, d, a, b, x[i + 6], utils.MD5Hash.r4Shifts[10], -1560198380), b = utils.MD5Hash._md5_i(b, c, d, a, x[i + 13], utils.MD5Hash.r4Shifts[11], 1309151649), a = utils.MD5Hash._md5_i(a, b, c, d, x[i + 4], utils.MD5Hash.r4Shifts[12], -145523070), d = utils.MD5Hash._md5_i(d, a, b, c, x[i + 11], utils.MD5Hash.r4Shifts[13], -1120210379), c = utils.MD5Hash._md5_i(c, d, a, b, x[i + 2], utils.MD5Hash.r4Shifts[14], 718787259), b = utils.MD5Hash._md5_i(b, c, d, a, x[i + 9], utils.MD5Hash.r4Shifts[15], -343485551), b = utils.MD5Hash._md5_i(b, c, d, a, x[i + 9], utils.MD5Hash.r4Shifts[15], -343485551), a = utils.MD5Hash._add(a, o), b = utils.MD5Hash._add(b, l), c = utils.MD5Hash._add(c, u), d = utils.MD5Hash._add(d, h)
    }
    return utils.MD5Hash._numToHex(a) + utils.MD5Hash._numToHex(b) + utils.MD5Hash._numToHex(c) + utils.MD5Hash._numToHex(d)
}, communication.PhishingValidateAnswerDelegate = function(data) {
    communication.BaseFUTDelegate.call(this), this._data = data
}, utils.JS.inherits(communication.PhishingValidateAnswerDelegate, communication.BaseFUTDelegate), communication.PhishingValidateAnswerDelegate.prototype.execute = function() {
    var url = communication.BaseFUTDelegate.REQUEST_ROOT + "phishing/validate?answer=" + this._data;
    this.setRequest(url, models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
}, communication.PhishingValidateAnswerDelegate.prototype.onSuccess = function(t) {
    t.token ? (gUserSettingsModel.setUserItem(models.UserSettingsModel.SECURITY_TOKEN, t.token), this.dispatch(communication.BaseDelegate.SUCCESS, t)) : this.onFail(enums.NetworkError.UNRECOVERABLE_ERROR)
}, communication.PhishingValidateAnswerDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.PERMISSION_DENIED:
        case enums.NetworkError.ACCOUNT_LOCKED:
        case enums.NetworkError.NO_REMAINING_ATTEMPTS:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "", "");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.BootFlow = function BootFlowView() {
    FUIView.call(this)
}, utils.JS.inherits(views.bootFlow.BootFlow, FUIView), views.bootFlow.BootFlow.prototype.init = function init() {
    this.superclass(), this._settingsBtn.init(), this._settingsBtn.setText(gLocalization.lText("button.settings"))
}, views.bootFlow.BootFlow.prototype.getSettingsButton = function getSettingsButton() {
    return this._settingsBtn
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.EULA = function() {
    views.bootFlow.BootFlow.call(this), this._generate()
}, utils.JS.inherits(views.bootFlow.EULA, views.bootFlow.BootFlow), views.bootFlow.EULA.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-eula"), i.classList.add("l-eula"), i.classList.add("boot-box");
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content"), this._futLogo = new views.bootFlow.FUTLogo, l.appendChild(this._futLogo.getRootElement()), o.appendChild(l), s.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("layout-article"), u.classList.add("boot-primary-content");
        var h = document.createElement("div");
        h.classList.add("flat"), h.classList.add("layout-article"), h.classList.add("boot-content"), this.__title = document.createElement("h2"), this.$_title = $(this.__title), h.appendChild(this.__title), this.__eulaText = document.createElement("p"), this.$_eulaText = $(this.__eulaText), h.appendChild(this.__eulaText);
        var p = document.createElement("p");
        this._eulaLink = new views.buttons.FlatButton, this._eulaLink.getRootElement().classList.add("camel-case"), p.appendChild(this._eulaLink.getRootElement()), h.appendChild(p);
        var m = document.createElement("p");
        this._privacyLink = new views.buttons.FlatButton, this._privacyLink.getRootElement().classList.add("camel-case"), m.appendChild(this._privacyLink.getRootElement()), h.appendChild(m), this._cancelButton = new views.buttons.DefaultButton, h.appendChild(this._cancelButton.getRootElement()), this._acceptButton = new views.buttons.DefaultButton, this._acceptButton.getRootElement().classList.add("call-to-action"), h.appendChild(this._acceptButton.getRootElement()), u.appendChild(h), s.appendChild(u), i.appendChild(s), t.appendChild(i), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.EULA.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._futLogo.destroy(), this._futLogo = null, this.__title = null, this.$_title = null, this.__eulaText = null, this.$_eulaText = null, this._eulaLink.destroy(), this._eulaLink = null, this._privacyLink.destroy(), this._privacyLink = null, this._cancelButton.destroy(), this._cancelButton = null, this._acceptButton.destroy(), this._acceptButton = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.EULA.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.EULA.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.EULA.prototype.init = function init() {
    this.superclass(), this._cancelButton.init(), this._cancelButton.setText(gLocalization.lText("common.dialog.cancel")), this._acceptButton.init(), this._acceptButton.setText(gLocalization.lText("EULA.accept")), this._eulaLink.init(), this._eulaLink.setText(gLocalization.lText("EULA.view")), this._privacyLink.init(), this._privacyLink.setText(gLocalization.lText("more.privacy")), this._futLogo.init();
    var t = gLocalization.lText("EULA.text.mobile");
    t = gLocalization.lText("EULA.text.web"), this.__eulaText.textContent = t, this.$_title.html(gLocalization.lText("EULA.view"))
}, views.bootFlow.EULA.prototype.getAcceptButton = function getAcceptButton() {
    return this._acceptButton
}, views.bootFlow.EULA.prototype.getCancelButton = function getCancelButton() {
    return this._cancelButton
}, views.bootFlow.EULA.prototype.getEULALink = function getEULALink() {
    return this._eulaLink
}, views.bootFlow.EULA.prototype.getPrivacyLink = function getPrivacyLink() {
    return this._privacyLink
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.BootFlow = function BootFlowViewController() {
    FUIViewController.call(this)
}, utils.JS.inherits(controllers.bootFlow.BootFlow, FUIViewController), controllers.bootFlow.BootFlow.prototype.init = function init() {
    this.superclass(), this.getView().getSettingsButton().addTarget(this, this._eSettingsSelected, enums.Event.TAP)
}, controllers.bootFlow.BootFlow.prototype._eSettingsSelected = function _eSettingsSelected(sender, t) {
    NavManager.requestChildScreen(Screens.getView("APP_SETTINGS"), {
        showHeader: !0
    })
}, NamespaceManager.Register("transferobjects"), transferobjects.PersonaClub = function(data) {
    this.abbr = data.clubAbbr, Object.defineProperty(this, "abbr", {
        writable: !1,
        enumerable: !0
    }), this.name = data.clubName, Object.defineProperty(this, "name", {
        writable: !1,
        enumerable: !0
    }), this.established = data.established, Object.defineProperty(this, "established", {
        writable: !1,
        enumerable: !0
    }), this.lastAccessTime = data.lastAccessTime, Object.defineProperty(this, "lastAccessTime", {
        writable: !1,
        enumerable: !0
    }), this.assetId = data.assetId, Object.defineProperty(this, "assetId", {
        writable: !1,
        enumerable: !0
    }), this.sku = data.sku, Object.defineProperty(this, "sku", {
        writable: !1,
        enumerable: !0
    }), this.platform = utils.FUTData.mapSkuToPlatform(this.sku), Object.defineProperty(this, "platform", {
        writable: !1,
        enumerable: !0
    }), this.year = data.year, Object.defineProperty(this, "year", {
        writable: !1,
        enumerable: !0
    }), this.isXbox = this.platform === enums.Platform.XBX || this.platform === enums.Platform.XBO, Object.defineProperty(this, "isXbox", {
        writable: !1,
        enumerable: !0
    }), this.isPlaystation = this.platform === enums.Platform.PS3 || this.platform === enums.Platform.PS4, Object.defineProperty(this, "isPlaystation", {
        writable: !1,
        enumerable: !0
    }), this.isPC = this.platform === enums.Platform.PC, Object.defineProperty(this, "isPC", {
        writable: !1,
        enumerable: !0
    }), this.isSwitch = this.platform === enums.Platform.SWI, Object.defineProperty(this, "isSwitch", {
        writable: !1,
        enumerable: !0
    }), this.isGen3 = this.platform === enums.Platform.PS3 || this.platform === enums.Platform.XBX, Object.defineProperty(this, "isGen3", {
        writable: !1,
        enumerable: !0
    })
}, NamespaceManager.Register("transferobjects"), transferobjects.LoyaltyReward = function LoyaltyRewardDTO(data) {
    this.quantity = data.rewardQuantity, Object.defineProperty(this, "quantity", {
        writable: !1
    }), this.type = data.rewardType, Object.defineProperty(this, "type", {
        writable: !1
    }), this.value = data.rewardValue, Object.defineProperty(this, "value", {
        writable: !1
    }), this.itemData = data.itemData ? factories.Item.createItem(data.itemData) : null
}, NamespaceManager.Register("entities"), entities.Persona = function(data) {
    var t;
    Object.defineProperty(this, "sku", {
        get: function() {
            return t
        },
        set: function(i) {
            this.clubs.has(i) && (t = i)
        }
    }), this.id = data.personaId, Object.defineProperty(this, "id", {
        writable: !1
    }), this.name = data.personaName, Object.defineProperty(this, "name", {
        writable: !1
    }), this.isReturningUser = 1 === data.returningUser, Object.defineProperty(this, "isReturningUser", {
        writable: !1
    }), this.isFreeTrial = data.trialFree, Object.defineProperty(this, "isFreeTrial", {
        writable: !1
    }), this.isAccessTrial = data.trial, Object.defineProperty(this, "isAccessTrial", {
        writable: !1
    }), this.state = data.userState || enums.UserState.NONE, Object.defineProperty(this, "state", {
        writable: !1
    }), this.clubs = new FUTHashTable({}), this.sku = enums.SKU.NONE;
    var i = 0;
    data.userClubList.forEach(function(t) {
        var s = parseInt(utils.TextUtils.getYearString(), 10);
        if (!(parseInt(t.year, 10) > s || (this.isReturningUser && (s -= 1), parseInt(t.year, 10) < s))) {
            var o = enums.SKU.NONE;
            if (utils.JS.isValid(t.skuAccessList)) {
                var l;
                for (l in t.skuAccessList)
                    if (t.skuAccessList.hasOwnProperty(l) && t.skuAccessList[l] === t.lastAccessTime) {
                        o = l;
                        break
                    }
                var u = new transferobjects.PersonaClub({
                    clubAbbr: t.clubAbbr,
                    clubName: t.clubName,
                    established: t.established,
                    lastAccessTime: t.lastAccessTime,
                    assetId: t.assetId,
                    platform: t.platform,
                    sku: o,
                    year: t.year
                });
                this.clubs.set(u.sku, u), u.lastAccessTime > i && (i = u.lastAccessTime, this.sku = u.sku)
            }
        }
    }, this), utils.Debug.Assert(this.sku !== enums.SKU.NONE, "this account has no sku"), this.hasFUT = this.clubs.length > 0, Object.defineProperty(this, "hasFUT", {
        writable: !1
    }), this.hasClubForCurrentYear = !1, Object.defineProperty(this, "hasClubForCurrentYear", {
        get: function() {
            return utils.JS.isValid(this.clubs.find(function(t) {
                return t.year === utils.TextUtils.getYearString()
            }))
        }
    }), this.hasFullAccess = !this.isAccessTrial && !this.isFreeTrial && this.hasClubForCurrentYear, Object.defineProperty(this, "hasFullAccess", {
        writable: !1
    }), this.isEligibleForMobileStart = !1, Object.defineProperty(this, "isEligibleForMobileStart", {
        get: function() {
            return !!this.isReturningUser && (!this.hasClubForCurrentYear || (this.sku === enums.SKU.PREV_XBX && !this.clubs.has(enums.SKU.XBX) || this.sku === enums.SKU.PREV_XBO && !this.clubs.has(enums.SKU.XBO) || this.sku === enums.SKU.PREV_PS3 && !this.clubs.has(enums.SKU.PS3) || this.sku === enums.SKU.PREV_PS4 && !this.clubs.has(enums.SKU.PS4) || this.sku === enums.SKU.PREV_PC && !this.clubs.has(enums.SKU.PC)))
        }
    }), this.platform = enums.Platform.NONE, Object.defineProperty(this, "platform", {
        get: function() {
            return this.clubs.has(this.sku) ? this.clubs.get(this.sku).platform : enums.Platform.NONE
        }
    }), this.isXbox = !1, Object.defineProperty(this, "isXbox", {
        get: function() {
            return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isXbox
        }
    }), this.isPlaystation = !1, Object.defineProperty(this, "isPlaystation", {
        get: function() {
            return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isPlaystation
        }
    }), this.isPC = !1, Object.defineProperty(this, "isPC", {
        get: function() {
            return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isPC
        }
    }), this.isSwitch = !1, Object.defineProperty(this, "isSwitch", {
        get: function() {
            return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isSwitch
        }
    }), this.isGen3 = !1, Object.defineProperty(this, "isGen3", {
        get: function() {
            return !!this.clubs.has(this.sku) && this.clubs.get(this.sku).isGen3
        }
    }), this.lastAccessTime = 0, Object.defineProperty(this, "lastAccessTime", {
        get: function() {
            return this.clubs.has(this.sku) ? this.clubs.get(this.sku).lastAccessTime : 0
        }
    }), this._loyaltyRewards = []
}, entities.Persona.prototype.getValidClubs = function() {
    return this.clubs.filter(function(t) {
        var i = utils.TextUtils.getYearString(),
            s = (parseInt(i, 10) - 1).toString();
        return t.year === i || !this.hasClubForCurrentYear && this.isReturningUser && this.state !== enums.UserState.RETURNING_USER_EXPIRED && t.year === s
    }, this)
}, entities.Persona.prototype.getCurrentClub = function() {
    return this.clubs.get(this.sku)
}, entities.Persona.prototype.createClub = function(t, i, s) {
    var o = new FUTObservable;
    return this.hasClubForCurrentYear || !this.isReturningUser || this.state === enums.UserState.RETURNING_USER_EXPIRED ? (o.notify({
        success: !1,
        status: enums.HTTPStatusCode.FORBIDDEN,
        data: null
    }), o) : (accessobjects.Onboarding.createClub(t, i, s).observe(this, function _onCreateClubComplete(t, i) {
        if (t.unobserve(this), i.success) {
            var s = i.response,
                l = utils.FUTData.mapSkuToCurrentYear(this.sku),
                u = utils.JS.find(s.login.actives, function(item) {
                    return item.header && "Badge" === item.header
                }),
                h = utils.JS.isValid(u) ? u.assetId : -1,
                p = new transferobjects.PersonaClub({
                    clubAbbr: s.login.clubAbbr,
                    clubName: s.login.clubName,
                    established: parseInt(s.login.established, 10),
                    lastAccessTime: parseInt(s.login.established, 10),
                    assetId: h,
                    platform: this.platform,
                    sku: l,
                    year: utils.TextUtils.getYearString()
                });
            this.clubs.set(p.sku, p), this.sku = p.sku;
            var m = s.starterPack.map(function(item) {
                    return factories.Item.createItem(item)
                }),
                _ = null,
                g = m.filter(function(item) {
                    return item.isPlayer()
                });
            g.length > 0 ? g.forEach(function(t) {
                (!utils.JS.isValid(_) || _.rating < t.rating) && (_ = t)
            }) : m.forEach(function(item) {
                (!utils.JS.isValid(_) || _.discardValue < item.discardValue) && (_ = item)
            }), o.notify({
                success: !0,
                status: i.status,
                data: {
                    items: m,
                    highestRated: _
                }
            })
        } else o.notify({
            success: !1,
            status: i.status,
            data: null
        })
    }), o)
}, entities.Persona.prototype.setLoyaltyRewards = function setLoyaltyRewards(t) {
    this._loyaltyRewards = t
}, entities.Persona.prototype.getLoyaltyRewards = function getLoyaltyRewards() {
    return this._loyaltyRewards
}, NamespaceManager.Register("views"), views.Persona = function PersonaView() {
    FUIView.call(this), this._currentPlatform = enums.UIPlatform.NONE, this._generate()
}, utils.JS.inherits(views.Persona, FUIView), views.Persona.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("persona"), this.__userInfo = document.createElement("div"), this.$_userInfo = $(this.__userInfo), this.__userInfo.classList.add("user-info"), this.__imageContainer = document.createElement("div"), this.$_imageContainer = $(this.__imageContainer), this.__imageContainer.classList.add("imageContainer"), this._imgBadge = new components.ImageLoader, this.__imageContainer.appendChild(this._imgBadge.getRootElement()), this.__userInfo.appendChild(this.__imageContainer);
        var i = document.createElement("div");
        i.classList.add("user-data-container"), this.__userName = document.createElement("h1"), this.$_userName = $(this.__userName), i.appendChild(this.__userName), this.__established = document.createElement("h2"), this.$_established = $(this.__established), i.appendChild(this.__established), this.__userInfo.appendChild(i), t.appendChild(this.__userInfo), this.__platform = document.createElement("div"), this.$_platform = $(this.__platform), this.__platform.classList.add("platform"), this.__personaSelector = document.createElement("div"), this.$_personaSelector = $(this.__personaSelector), this.__personaSelector.classList.add("btn-container"), this._actionBtn = new views.buttons.FlatButton, this._actionBtn.getRootElement().classList.add("persona-selector"), this.__personaSelector.appendChild(this._actionBtn.getRootElement()), this.__platform.appendChild(this.__personaSelector), t.appendChild(this.__platform), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.Persona.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__userInfo = null, this.$_userInfo = null, this.__imageContainer = null, this.$_imageContainer = null, this._imgBadge.destroy(), this._imgBadge = null, this.__userName = null, this.$_userName = null, this.__established = null, this.$_established = null, this.__platform = null, this.$_platform = null, this.__personaSelector = null, this.$_personaSelector = null, this._actionBtn.destroy(), this._actionBtn = null
}, views.Persona.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.Persona.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.Persona.prototype.init = function init() {
    this.superclass(), this._actionBtn.setText(gLocalization.lText("more.persona")), this._actionBtn.init(), this._actionBtn.getRoot().hide()
}, views.Persona.prototype.setClubBadge = function setClubBadge(t) {
    this._imgBadge.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, enums.Year.ASSET, t)), this._imgBadge.addClass("iconActive")
}, views.Persona.prototype.setUsername = function setUsername(name) {
    this.__userName.textContent = name
}, views.Persona.prototype.setEstablishedDate = function setEstablishedDate(time) {
    this.__established.textContent = utils.TextUtils.localizeEstablishedDate(new Date(1e3 * time))
}, views.Persona.prototype.setPlatform = function setPlatform(platform) {
    if (this._currentPlatform !== platform) {
        switch (this._currentPlatform !== enums.UIPlatform.NONE && this.__platform.classList.remove(this._currentPlatform), platform) {
            case enums.Platform.XBO:
                this._currentPlatform = enums.UIPlatform.XBO;
                break;
            case enums.Platform.XBX:
                this._currentPlatform = enums.UIPlatform.XBX;
                break;
            case enums.Platform.PS4:
                this._currentPlatform = enums.UIPlatform.PS4;
                break;
            case enums.Platform.PS3:
                this._currentPlatform = enums.UIPlatform.PS3;
                break;
            case enums.Platform.PC:
                this._currentPlatform = enums.UIPlatform.PC;
                break;
            case enums.Platform.SWI:
                this._currentPlatform = enums.UIPlatform.SWI;
                break;
            default:
                utils.Debug.Assert(!1, "Encountered an unsupported SKU")
        }
        this.__platform.classList.add(this._currentPlatform)
    }
}, views.Persona.prototype.getActionButton = function getActionButton() {
    return this._actionBtn
}, views.Persona.prototype.setBtnText = function setBtnText(text) {
    this._actionBtn.setText(text)
}, views.Persona.prototype.setBtnVisibility = function setBtnVisibility(t) {
    var i = this.__personaSelector.classList;
    this._actionBtn.setDisplay(t), t ? i.add("multiPersona") : i.remove("multiPersona")
}, NamespaceManager.Register("viewmodels"), viewmodels.PersonaSelector = function(t) {
    FUTIterator.call(this, t)
}, utils.JS.inherits(viewmodels.PersonaSelector, FUTIterator), viewmodels.PersonaSelector.prototype.getClubs = function() {
    var t = [];
    return this.values().forEach(function(i) {
        var s = [],
            o = new FUTHashTable({});
        i.clubs.forEach(function(t) {
            (!o.has(t.platform) || o.get(t.platform).year < t.year) && o.set(t.platform, t)
        }), (s = s.concat(o.values())).length > 0 && t.push({
            persona: i,
            clubs: s
        })
    }), t
}, viewmodels.PersonaSelector.prototype.isMultiPersona = function() {
    return [].concat.apply([], this.getClubs().map(function(t) {
        return t.clubs
    })).length > 1
}, NamespaceManager.Register("controllers.views"), controllers.views.Persona = function PersonaViewController() {
    FUIViewController.call(this), this._personasViewmodel = new viewmodels.PersonaSelector(gAuthenticationModel.getUser().personas.values())
}, utils.JS.inherits(controllers.views.Persona, FUIViewController), controllers.views.Persona.prototype.init = function init() {
    this.initialized || (this.superclass(), this.getView().getActionButton().addTarget(this, this._ePersonaSelectorSelected, enums.Event.TAP))
}, controllers.views.Persona.prototype.dealloc = function dealloc() {
    this.superclass(), this._personasViewmodel = null
}, controllers.views.Persona.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.Persona
}, controllers.views.Persona.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView(),
        t = repositories.User.getCurrent(),
        state = gAuthenticationModel.getFUTState(),
        i = state !== enums.FUTAuthState.NO_DATA && t;
    if (view.setDisplay(i), i) {
        var s = t.getSelectedPersona(),
            o = s ? s.getCurrentClub() : null;
        s && (view.setBtnVisibility(this._personasViewmodel.isMultiPersona()), view.setPlatform(s.platform)), o && (view.setClubBadge(o.assetId), view.setEstablishedDate(o.established), view.setUsername(s.hasFUT && state === enums.FUTAuthState.COMPLETE ? s.name : o.name))
    }
}, controllers.views.Persona.prototype._ePersonaSelectorSelected = function _ePersonaSelectorSelected(sender, t) {
    NavManager.requestChildScreen(Screens.getView("SETTINGS_PERSONA_SELECTOR"), {
        viewmodel: this._personasViewmodel
    })
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.Phishing = function() {
    views.bootFlow.BootFlow.call(this), this.onSubmit = new FUTObservable, Object.defineProperty(this, "onSubmit", {
        writable: !1
    }), this.onTextChange = new FUTObservable, Object.defineProperty(this, "onTextChange", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.bootFlow.Phishing, views.bootFlow.BootFlow), views.bootFlow.Phishing.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-phishing"), i.classList.add("l-phishing"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content"), o.appendChild(l), s.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("layout-article"), u.classList.add("boot-primary-content");
        var h = document.createElement("div");
        h.classList.add("flat"), h.classList.add("layout-article"), h.classList.add("boot-content"), this.__title = document.createElement("h2"), this.$_title = $(this.__title), h.appendChild(this.__title), this.__questionText = document.createElement("p"), this.$_questionText = $(this.__questionText), h.appendChild(this.__questionText), this._textInput = new views.TextInput, this._textInput.getRootElement().classList.add("isolated-section"), h.appendChild(this._textInput.getRootElement()), this.__errorText = document.createElement("p"), this.$_errorText = $(this.__errorText), this.__errorText.classList.add("errorText"), h.appendChild(this.__errorText), this._phishingOK = new views.buttons.DefaultButton, this._phishingOK.getRootElement().classList.add("call-to-action"), h.appendChild(this._phishingOK.getRootElement()), u.appendChild(h), s.appendChild(u), i.appendChild(s), t.appendChild(i), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.Phishing.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this.__title = null, this.$_title = null, this.__questionText = null, this.$_questionText = null, this._textInput.destroy(), this._textInput = null, this.__errorText = null, this.$_errorText = null, this._phishingOK.destroy(), this._phishingOK = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.Phishing.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.Phishing.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.Phishing.prototype.init = function init() {
    this.superclass(), this._textInput.init(), this._textInput.setPlaceholder(gLocalization.lText("phishing.input.placeholder")), this._textInput.type = enums.UIInputType.PASSWORD, this.$_title.html(gLocalization.lText("title.securityquestion")), this._phishingOK.init(), this._phishingOK.setText(gLocalization.lText("common.dialog.continue")), this._phishingOK.setInteractionState(!1), this._phishingOK.addTarget(this.onSubmit, this.onSubmit.notify, enums.Event.TAP), this._textInput.onChange.observe(this, function(t, e) {
        this.onTextChange.notify(e)
    })
}, views.bootFlow.Phishing.prototype.dealloc = function dealloc() {
    this.onSubmit.dealloc(), this.onSubmit = null, this.superclass()
}, views.bootFlow.Phishing.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, views.bootFlow.Phishing.prototype.setQuestionId = function setQuestionId(value) {
    this.$_questionText.html(gLocalization.lText("phishing.question" + value))
}, views.bootFlow.Phishing.prototype.errorVisibility = function errorVisibility(value) {
    this.$_errorText.toggle(value)
}, views.bootFlow.Phishing.prototype.setRemainingAttempts = function(value) {
    value > 1 ? this.$_errorText.html(gLocalization.lPrint("phishing.invalid.answers", [value])) : this.$_errorText.html(gLocalization.lPrint("phishing.invalid.answer", [value]))
}, views.bootFlow.Phishing.prototype.enableControlsAfterFailure = function() {
    this._textInput.setInteractionState(!0)
}, views.bootFlow.Phishing.prototype.clearAnswerInput = function() {
    this._textInput.clear()
}, views.bootFlow.Phishing.prototype.disableInputs = function() {
    this._phishingOK.setInteractionState(!1), this._textInput.setInteractionState(!1)
}, views.bootFlow.Phishing.prototype.enableInputs = function() {
    this._phishingOK.setInteractionState(!0), this._textInput.setInteractionState(!0)
}, views.bootFlow.Phishing.prototype.getInputValue = function getInputValue() {
    return this._textInput.value
}, views.bootFlow.Phishing.prototype.toggleOkButton = function toggleOkButton(value) {
    this._phishingOK.setInteractionState(value)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.Phishing = function PhishingViewController() {
    controllers.bootFlow.BootFlow.call(this), this._remainingAttempts = 0, this._questionId = "", this._delegate = null, this._personaController = null
}, utils.JS.inherits(controllers.bootFlow.Phishing, controllers.bootFlow.BootFlow), controllers.bootFlow.Phishing.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews(), view.onTextChange.observe(this, this._onTextChange), view.onSubmit.observe(this, this.phishingSubmitClicked)
}, controllers.bootFlow.Phishing.prototype.dealloc = function dealloc() {
    this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.bootFlow.Phishing.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.Phishing
}, controllers.bootFlow.Phishing.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear()
}, controllers.bootFlow.Phishing.prototype.getDataCache = function getDataCache() {
    return {
        question: this._questionId,
        attempts: this._remainingAttempts
    }
}, controllers.bootFlow.Phishing.prototype.setQuestionId = function setQuestionId(id) {
    this._questionId = id, this.getView().setQuestionId(this._questionId)
}, controllers.bootFlow.Phishing.prototype.setRemainingAttempts = function setRemainingAttempts(t) {
    this._remainingAttempts = t
}, controllers.bootFlow.Phishing.prototype._clearDelegate = function _clearDelegate() {
    utils.JS.isValid(this._delegate) && (this._delegate.clearListenersByScope(this), this._delegate = null)
}, controllers.bootFlow.Phishing.prototype._onTextChange = function _onTextChange(t, event) {
    var view = this.getView(),
        i = view.getInputValue().length > 3;
    view.toggleOkButton(i), i && event.keyCode === enums.KeyCode.RETURN && this.phishingSubmitClicked()
}, controllers.bootFlow.Phishing.prototype.phishingSubmitClicked = function phishingSubmitClicked() {
    var view = this.getView();
    hideKeyboard(), view.disableInputs(), view.errorVisibility(!1), this._onRequestValidateAnswer($.trim(view.getInputValue()))
}, controllers.bootFlow.Phishing.prototype._onRequestValidateAnswer = function _onRequestValidateAnswer(t) {
    utils.Debug.Assert(null === this._delegate, "Duplicate delegates in controllers.bootFlow.Phishing._requestValidateAnswer()"), this.getView().setInteractionState(!1);
    var i = utils.MD5Hash.md5(t);
    this._delegate = new communication.PhishingValidateAnswerDelegate(i), this._delegate.addListener(communication.BaseDelegate.SUCCESS, this, this._onRequestValidateAnswerSuccess), this._delegate.addListener(communication.BaseDelegate.FAIL, this, this._onRequestValidateAnswerFailed), this._delegate.useClickShield(!0), this._delegate.execute()
}, controllers.bootFlow.Phishing.prototype._onRequestValidateAnswerSuccess = function _onRequestValidateAnswerSuccess(sender) {
    this._clearDelegate(), this.getView().setInteractionState(!0), services.Authentication.getSession(enums.AuthEnvironment.UTAS).securityQuestionAnswered = !0, gAuthenticationModel.login(!0)
}, controllers.bootFlow.Phishing.prototype._onRequestValidateAnswerFailed = function _onRequestValidateAnswerFailed(sender, error) {
    var view = this.getView();
    this._clearDelegate(), view.setInteractionState(!0), error.getCode() === enums.NetworkError.PERMISSION_DENIED ? this._onRequestValidateAnswerWrongAnswer() : error.getCode() === enums.NetworkError.ACCOUNT_LOCKED || error.getCode() === enums.NetworkError.NO_REMAINING_ATTEMPTS ? this._onRequestValidateAnswerAccountLocked() : NetworkErrorManager.handle(error, !1, function() {
        view.clearAnswerInput(), view.enableControlsAfterFailure(), view.toggleOkButton(view.getInputValue().length > 3)
    }.bind(this))
}, controllers.bootFlow.Phishing.prototype._onRequestValidateAnswerWrongAnswer = function _onRequestValidateAnswerWrongAnswer() {
    var view = this.getView();
    view.clearAnswerInput(), view.enableControlsAfterFailure(), view.toggleOkButton(view.getInputValue().length > 3), --this._remainingAttempts > 0 ? (view.setRemainingAttempts(this._remainingAttempts), view.errorVisibility(!0)) : (view.errorVisibility(!1), this._onRequestValidateAnswerAccountLocked())
}, controllers.bootFlow.Phishing.prototype._onRequestValidateAnswerAccountLocked = function _onRequestValidateAnswerAccountLocked() {
    services.Authentication.getSession(enums.AuthEnvironment.UTAS).accountLocked = !0, NavManager.requestSiblingScreen(Screens.getView("ACCOUNT_LOCKED"))
}, pages.controllers.PhishingController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.Phishing
}, utils.JS.inherits(pages.controllers.PhishingController, pages.controllers.ScreenControllerBase), pages.controllers.PhishingController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.PhishingController.prototype.destroy = function() {
    pages.controllers.PhishingController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.PhishingController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.PhishingController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear(), t ? (this._controller.setQuestionId(t.question), this._controller.setRemainingAttempts(t.attempts)) : (this._controller.setQuestionId(data.question), this._controller.setRemainingAttempts(data.attempts))
}, pages.controllers.PhishingController.prototype.getDataCache = function getDataCache() {
    return this._controller.getDataCache()
}, NamespaceManager.Register("pages"), Screens.Register("CAPTCHA_REQUIRED", "CaptchaRequired", Screens.APP_SECTION.LOGIN), pages.CaptchaRequired = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.BACK_BUTTON : components.Header.NO_HEADER, gLocalization.lText("navbar.label.captcha")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "Captcha"), this._generate()
}, utils.JS.inherits(pages.CaptchaRequired, pages.ScreenBase), pages.CaptchaRequired.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.CaptchaRequired.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.CaptchaRequired.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.CaptchaRequired.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.CaptchaRequired = function() {
    views.bootFlow.BootFlow.call(this), this.onContinue = new FUTObservable, Object.defineProperty(this, "onContinue", {
        writable: !1
    }), this.onRefresh = new FUTObservable, Object.defineProperty(this, "onRefresh", {
        writable: !1
    }), this.onTextChange = new FUTObservable, Object.defineProperty(this, "onTextChange", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.bootFlow.CaptchaRequired, views.bootFlow.BootFlow), views.bootFlow.CaptchaRequired.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, views.bootFlow.CaptchaRequired.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "CaptchaRequired"), t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-noQuestion"), i.classList.add("l-noQuestion"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content");
        var u = document.createElement("div");
        u.classList.add("page-exclamation-icon"), l.appendChild(u), o.appendChild(l), s.appendChild(o);
        var h = document.createElement("div");
        h.classList.add("boot-primary-content");
        var p = document.createElement("div");
        p.classList.add("boot-content"), this.__infoTitle = document.createElement("h2"), this.$_infoTitle = $(this.__infoTitle), p.appendChild(this.__infoTitle), this.__infoText = document.createElement("p"), this.$_infoText = $(this.__infoText), p.appendChild(this.__infoText), this.__icon = document.createElement("div"), this.$_icon = $(this.__icon), this.__icon.setAttribute("id", "securityIcon"), this.__captchaImageContainer = document.createElement("div"), this.$_captchaImageContainer = $(this.__captchaImageContainer), this.__captchaImageContainer.classList.add("captchaImageContainer"), this.__captchaImage = document.createElement("div"), this.$_captchaImage = $(this.__captchaImage), this.__captchaImage.classList.add("captchaImage"), this.__captchaImageContainer.appendChild(this.__captchaImage), this.__icon.appendChild(this.__captchaImageContainer), this._refreshLink = new views.buttons.FlatButton, this._refreshLink.getRootElement().classList.add("refreshBtn"), this.__icon.appendChild(this._refreshLink.getRootElement()), p.appendChild(this.__icon), this.__captchaAnswerContainer = document.createElement("div"), this.$_captchaAnswerContainer = $(this.__captchaAnswerContainer), this._textInput = new views.TextInput, this.__captchaAnswerContainer.appendChild(this._textInput.getRootElement()), this.__errorText = document.createElement("p"), this.$_errorText = $(this.__errorText), this.__errorText.classList.add("errorText"), this.__captchaAnswerContainer.appendChild(this.__errorText), this._validateCaptcha = new views.buttons.DefaultButton, this._validateCaptcha.getRootElement().classList.add("call-to-action"), this.__captchaAnswerContainer.appendChild(this._validateCaptcha.getRootElement()), p.appendChild(this.__captchaAnswerContainer), this.__captchaWaitContainer = document.createElement("div"), this.$_captchaWaitContainer = $(this.__captchaWaitContainer), this.__captchaWaitContainer.classList.add("captchaWaitContainer"), this.__captchaWaitText = document.createElement("p"), this.$_captchaWaitText = $(this.__captchaWaitText), this.__captchaWaitText.classList.add("captchaWaitText"), this.__captchaWaitText.classList.add("textCenter"), this.__captchaWaitContainer.appendChild(this.__captchaWaitText);
        var m = document.createElement("div");
        m.classList.add("captchaWaitBox"), this.__captchaWaitTime = document.createElement("p"), this.$_captchaWaitTime = $(this.__captchaWaitTime), this.__captchaWaitTime.classList.add("timeRemaining"), this.__captchaWaitTime.classList.add("textCenter"), this.__captchaWaitTime.classList.add("globalMargin"), m.appendChild(this.__captchaWaitTime), this.__captchaWaitContainer.appendChild(m), p.appendChild(this.__captchaWaitContainer), h.appendChild(p), s.appendChild(h), i.appendChild(s), t.appendChild(i), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.CaptchaRequired.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this.__infoTitle = null, this.$_infoTitle = null, this.__infoText = null, this.$_infoText = null, this.__icon = null, this.$_icon = null, this.__captchaImageContainer = null, this.$_captchaImageContainer = null, this.__captchaImage = null, this.$_captchaImage = null, this._refreshLink.destroy(), this._refreshLink = null, this.__captchaAnswerContainer = null, this.$_captchaAnswerContainer = null, this._textInput.destroy(), this._textInput = null, this.__errorText = null, this.$_errorText = null, this._validateCaptcha.destroy(), this._validateCaptcha = null, this.__captchaWaitContainer = null, this.$_captchaWaitContainer = null, this.__captchaWaitText = null, this.$_captchaWaitText = null, this.__captchaWaitTime = null, this.$_captchaWaitTime = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.CaptchaRequired.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.CaptchaRequired.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.CaptchaRequired.prototype.init = function init() {
    this._validateCaptcha.init(), this._validateCaptcha.setText(gLocalization.lText("common.dialog.continue")), this._validateCaptcha.setInteractionState(!1), this._validateCaptcha.addTarget(this.onContinue, this.onContinue.notify, enums.Event.TAP), this._textInput.init(), this._textInput.setPlaceholder(gLocalization.lText("phishing.input.placeholder")), this._textInput.setMaxLength(8), this._textInput.onChange.observe(this, function(t, e) {
        this.onTextChange.notify(e)
    }), this._refreshLink.init(), this._refreshLink.addTarget(this.onRefresh, this.onRefresh.notify, enums.Event.TAP), this._refreshLink.setText(gLocalization.lText("captcha.refresh")), this.$_infoTitle.html(gLocalization.lText("title.securityquestion")), this.$_infoText.html(gLocalization.lText("captcha.info.body")), this.$_captchaWaitContainer.hide(), this.$_captchaWaitText.html(gLocalization.lText("captcha.info.wait")), this.$_errorText.html(gLocalization.lText("captcha.error.incorrectanswer")), this.superclass()
}, views.bootFlow.CaptchaRequired.prototype.dealloc = function dealloc() {
    this.onContinue.dealloc(), this.onTextChange.dealloc(), this.onContinue = null, this.onTextChange = null, this.superclass()
}, views.bootFlow.CaptchaRequired.prototype.toggleCaptchaImageDisplay = function toggleCaptchaImageDisplay(show) {
    this.$_icon.toggleClass("iconHidden", show), this.$_captchaImageContainer.toggle(show)
}, views.bootFlow.CaptchaRequired.prototype.showCaptchaImageLoading = function showCaptchaImageLoading() {
    this.$_captchaAnswerContainer.show(), this.$_captchaWaitContainer.hide(), this.clearAnswerInput(), this.toggleCaptchaImageDisplay(!1), this._textInput.setInteractionState(!1)
}, views.bootFlow.CaptchaRequired.prototype.showCaptchaWait = function showCaptchaWait(t) {
    this._refreshLink.hide(), this.$_captchaImageContainer.hide(), this.$_captchaAnswerContainer.hide(), this.$_captchaWaitContainer.show()
}, views.bootFlow.CaptchaRequired.prototype.updateRemainingCaptchaTime = function updateRemainingCaptchaTime(t) {
    this.$_captchaWaitTime.html(gLocalization.lTimeRemaining(t))
}, views.bootFlow.CaptchaRequired.prototype.toggleInputs = function toggleInputs(t) {
    this._validateCaptcha.setInteractionState(t), this._textInput.setInteractionState(t)
}, views.bootFlow.CaptchaRequired.prototype.toggleContinueButton = function toggleContinueButton(value) {
    this._validateCaptcha.setInteractionState(value)
}, views.bootFlow.CaptchaRequired.prototype.setCaptchaImage = function setCaptchaImage(t) {
    var i = '<img src="data:image/jpg;base64,' + t + '"></img>';
    this._refreshLink.show(), this.$_captchaImage.empty(), this.$_captchaImage.append(i), this.toggleCaptchaImageDisplay(!0), this._textInput.setInteractionState(!0), gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.CAPTCHA, "Image Loaded")
}, views.bootFlow.CaptchaRequired.prototype.clearAnswerInput = function clearAnswerInput() {
    this._textInput.clear()
}, views.bootFlow.CaptchaRequired.prototype.getInputValue = function getInputValue() {
    return this._textInput.value
}, views.bootFlow.CaptchaRequired.prototype.errorVisibility = function errorVisibility(value) {
    this.$_errorText.toggle(value)
}, communication.CaptchaImageDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "captcha/img", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT, models.CommunicationModel.CONTENT_TYPE.TEXT_PLAIN), this.addHeader("X-HTTP-Accept-Content-Encoding", "base64")
}, utils.JS.inherits(communication.CaptchaImageDelegate, communication.BaseFUTDelegate), communication.CaptchaImageDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.SERVICE_UNAVAILABLE_ERROR:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.title.genericError", "popup.body.genericError");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.CaptchaValidateDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "captcha/validate", models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON), this.setData({
        answer: t
    })
}, utils.JS.inherits(communication.CaptchaValidateDelegate, communication.BaseFUTDelegate), communication.CaptchaValidateDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.CONFLICT:
        case enums.NetworkError.SERVICE_UNAVAILABLE_ERROR:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.title.genericError", "popup.body.genericError");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.CaptchaTokenExchangeDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "captcha/exchange", models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.setData({})
}, utils.JS.inherits(communication.CaptchaTokenExchangeDelegate, communication.BaseFUTDelegate), communication.CaptchaTokenExchangeDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.SERVICE_UNAVAILABLE_ERROR:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.title.genericError", "popup.body.genericError");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.CaptchaRequired = function CaptchaRequiredViewController() {
    controllers.bootFlow.BootFlow.call(this), this._timeoutId = 0, this._intervalId = 0, this._cooldownSeconds = 0, this._captchaAttempt = !1, this._personaController = null
}, utils.JS.inherits(controllers.bootFlow.CaptchaRequired, controllers.bootFlow.BootFlow), controllers.bootFlow.CaptchaRequired.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews(), view.onContinue.observe(this, function() {
        this._requestCaptchaValidation(view.getInputValue())
    }), view.onRefresh.observe(this, this._requestCaptchaExchange), view.onTextChange.observe(this, this._onTextChange), view.errorVisibility(!1), this._requestCaptchaExchange()
}, controllers.bootFlow.CaptchaRequired.prototype.dealloc = function dealloc() {
    this._timeoutId = clearTimeout(this._timeoutId), this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.bootFlow.CaptchaRequired.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.CaptchaRequired
}, controllers.bootFlow.CaptchaRequired.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear()
}, controllers.bootFlow.CaptchaRequired.prototype.onCaptchaCooldown = function onCaptchaCooldown() {
    this._cooldownSeconds = services.Authentication.getSession(enums.AuthEnvironment.UTAS).captchaCooldown, this.getView().showCaptchaWait(), this.getView().updateRemainingCaptchaTime(this._cooldownSeconds), clearInterval(this._intervalId), this._intervalId = setInterval(this.updateRemainingCaptchaTime.bind(this), 1e3), this._timeoutId = setTimeout(function _onTimeoutCaptchaTokenExchange() {
        clearTimeout(this._timeoutId), this._requestCaptchaExchange()
    }.bind(this), 1e3 * this._cooldownSeconds), gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.CAPTCHA, "User Throttled")
}, controllers.bootFlow.CaptchaRequired.prototype._requestCaptchaImage = function _requestCaptchaImage() {
    var view = this.getView();
    view.showCaptchaImageLoading(), view.toggleInputs(!1);
    var t = new communication.CaptchaImageDelegate;
    t.addListener(communication.BaseDelegate.SUCCESS, this, function _onRequestCaptchaImageSuccess(sender, response) {
        sender.clearListenersByScope(this), view.setCaptchaImage(response), view.toggleInputs(!0), this.updateContinueButtonEnabledState()
    }), t.addListener(communication.BaseDelegate.FAIL, this, function _onRequestCaptchaImageFail(sender, error) {
        sender.clearListenersByScope(this), enums.NetworkError.SERVICE_UNAVAILABLE_ERROR === error.getCode() ? (view.clearAnswerInput(), this.onCaptchaCooldown()) : NetworkErrorManager.handle(error, !1, function() {
            view.clearAnswerInput(), view.toggleCaptchaImageDisplay(!0), view.toggleInputs(!0), this.updateContinueButtonEnabledState(), view.errorVisibility(!1)
        }.bind(this))
    }), t.useClickShield(!0), t.setImportant(!0), t.send()
}, controllers.bootFlow.CaptchaRequired.prototype._requestCaptchaValidation = function _requestCaptchaValidation(t) {
    var view = this.getView();
    if (!this._captchaAttempt)
        if (hideKeyboard(), hasConnection()) {
            this._captchaAttempt = !0, view.errorVisibility(!1), view.toggleInputs(!1);
            var i = new communication.CaptchaValidateDelegate(t);
            i.addListener(communication.BaseDelegate.SUCCESS, this, function _onCaptchaValidateSuccess(sender) {
                sender.clearListenersByScope(this), gAuthenticationModel.login(!0)
            }), i.addListener(communication.BaseDelegate.FAIL, this, function _onCaptchaValidateFail(sender, error) {
                sender.clearListenersByScope(this), this._captchaAttempt = !1, enums.HTTPStatusCode.SERVICE_UNAVAILABLE_ERROR === error.getCode() ? (view.clearAnswerInput(), this.onCaptchaCooldown()) : enums.HTTPStatusCode.NO_INTERNET_CONNECTION === error.getCode() ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.NO_INTERNET_CONNECTION), view.toggleInputs(!0)) : NetworkErrorManager.handle(error, !0, function() {
                    view.clearAnswerInput(), view.toggleInputs(!0), view.errorVisibility(!0), this.updateContinueButtonEnabledState(), enums.HTTPStatusCode.CONFLICT === error.getCode() && this._requestCaptchaImage()
                }.bind(this))
            }), i.send()
        } else utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.NO_INTERNET_CONNECTION)
}, controllers.bootFlow.CaptchaRequired.prototype._requestCaptchaExchange = function _requestCaptchaExchange() {
    var view = this.getView();
    view.showCaptchaImageLoading();
    var t = new communication.CaptchaTokenExchangeDelegate;
    t.addListener(communication.BaseDelegate.SUCCESS, this, function _onCaptchaTokenExchangeSuccess(sender) {
        sender.clearListenersByScope(this), this._requestCaptchaImage(), view.errorVisibility(!1)
    }), t.addListener(communication.BaseDelegate.FAIL, this, function _onCaptchaTokenExchangeFail(sender, error) {
        sender.clearListenersByScope(this), enums.NetworkError.SERVICE_UNAVAILABLE_ERROR === error.getCode() ? this.onCaptchaCooldown() : NetworkErrorManager.handle(error, !1, function() {
            view.toggleCaptchaImageDisplay(!0), view.toggleInputs(!0), view.errorVisibility(!1), this.updateContinueButtonEnabledState()
        }.bind(this))
    }), t.setImportant(!0), t.send()
}, controllers.bootFlow.CaptchaRequired.prototype.updateRemainingCaptchaTime = function updateRemainingCaptchaTime() {
    var t = --this._cooldownSeconds;
    t <= 0 && (clearInterval(this._intervalId), this._intervalId = 0, t = 0), this.getView().updateRemainingCaptchaTime(t)
}, controllers.bootFlow.CaptchaRequired.prototype._onTextChange = function _onTextChange(t, event) {
    this.updateContinueButtonEnabledState(), !this._captchaAttempt && utils.JS.isValid(event.keyCode) && event.keyCode === enums.KeyCode.RETURN && this._requestCaptchaValidation(this.getView().getInputValue())
}, controllers.bootFlow.CaptchaRequired.prototype.updateContinueButtonEnabledState = function updateContinueButtonEnabledState() {
    this.getView().toggleContinueButton(this.getView().getInputValue().length > 0)
}, pages.controllers.CaptchaRequiredController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.CaptchaRequired
}, utils.JS.inherits(pages.controllers.CaptchaRequiredController, pages.controllers.ScreenControllerBase), pages.controllers.CaptchaRequiredController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.CaptchaRequiredController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.CaptchaRequiredController.superClass_.destroy.call(this)
}, pages.controllers.CaptchaRequiredController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.CaptchaRequiredController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.CaptchaRequiredController.prototype.onRequestBack = function onRequestBack() {
    return gAuthenticationModel.logout(), !1
}, NamespaceManager.Register("pages"), Screens.Register("FUN_CAPTCHA_REQUIRED", "FunCaptchaRequired", Screens.APP_SECTION.LOGIN), pages.FunCaptchaRequired = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.BACK_BUTTON : components.Header.NO_HEADER, gLocalization.lText("navbar.label.captcha")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "CaptchaV2"), this._generate()
}, utils.JS.inherits(pages.FunCaptchaRequired, pages.ScreenBase), pages.FunCaptchaRequired.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.FunCaptchaRequired.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.FunCaptchaRequired.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.FunCaptchaRequired.prototype.getRootElement = function getRootElement() {
    return this.__root
}, communication.FunCaptchaValidateDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "captcha/fun/validate", models.CommunicationModel.METHOD.POST, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON), this.setData({
        funCaptchaToken: t
    })
}, utils.JS.inherits(communication.FunCaptchaValidateDelegate, communication.BaseFUTDelegate), communication.FunCaptchaValidateDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.CONFLICT:
        case enums.NetworkError.SERVICE_UNAVAILABLE_ERROR:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, gLocalization.lText("popup.title.genericError"), gLocalization.lText("popup.body.genericError"));
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.FunCaptchaHealthCheckDelegate = function() {
    communication.BaseDelegate.call(this), this.setRequest("https://funcaptcha.com/fc/healthcheck/", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.FunCaptchaHealthCheckDelegate, communication.BaseDelegate), communication.FunCaptchaBlobDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "captcha/fun/data", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.FunCaptchaBlobDelegate, communication.BaseFUTDelegate), communication.FunCaptchaValidateDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.CONFLICT:
        case enums.NetworkError.SERVICE_UNAVAILABLE_ERROR:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, gLocalization.lText("popup.title.genericError"), gLocalization.lText("popup.body.genericError"));
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, NamespaceManager.Register("valueobjects"), valueobjects.FunCaptchaHealthCheckStatusVO = function() {
    this._status = !1, this._error = "", this._case = 0, this._region = "", this._instance = "", this._time = ""
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.parseFCHealthCheckDataObject = function(data) {
    this.setStatus(data.status), this.setError(data.error), this.setRegion(data.region), this.setInstance(data.instance), this.setTime(data.time)
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.setStatus = function(value) {
    this._status = value
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.getStatus = function() {
    return this._status
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.setError = function(value) {
    this._error = value
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.getError = function() {
    return this._error
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.setRegion = function(value) {
    this._region = value
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.getRegion = function() {
    return this._region
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.setInstance = function(value) {
    this._instance = value
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.getInstance = function() {
    return this._instance
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.setTime = function(value) {
    this._time = value
}, valueobjects.FunCaptchaHealthCheckStatusVO.prototype.getTime = function() {
    return this._time
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.FunCaptchaRequired = function() {
    views.bootFlow.BootFlow.call(this), this._generate()
}, utils.JS.inherits(views.bootFlow.FunCaptchaRequired, views.bootFlow.BootFlow), views.bootFlow.FunCaptchaRequired.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, views.bootFlow.FunCaptchaRequired.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "FunCaptchaRequired"), t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-noQuestion"), i.classList.add("l-noQuestion"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content");
        var u = document.createElement("div");
        u.classList.add("page-exclamation-icon"), l.appendChild(u), o.appendChild(l), s.appendChild(o);
        var h = document.createElement("div");
        h.classList.add("boot-primary-content");
        var p = document.createElement("div");
        p.classList.add("boot-content"), this.__infoTitle = document.createElement("h2"), this.$_infoTitle = $(this.__infoTitle), p.appendChild(this.__infoTitle), this.__infoText = document.createElement("p"), this.$_infoText = $(this.__infoText), p.appendChild(this.__infoText);
        var m = document.createElement("div");
        m.setAttribute("id", "funCaptchaDiv"), p.appendChild(m), h.appendChild(p), s.appendChild(h), i.appendChild(s), t.appendChild(i), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.FunCaptchaRequired.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this.__infoTitle = null, this.$_infoTitle = null, this.__infoText = null, this.$_infoText = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.FunCaptchaRequired.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.FunCaptchaRequired.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.FunCaptchaRequired.prototype.init = function init() {
    this.superclass(), this._loadFunCaptcha()
}, views.bootFlow.FunCaptchaRequired.prototype._loadFunCaptcha = function _loadFunCaptcha() {
    function _initCaptcha(key, blob) {
        var t = document.getElementById("loadFunCaptchaScript");
        if (!utils.JS.isValid(t)) {
            var language = gLocalization.getLanguage();
            (t = document.createElement("script")).id = "loadFunCaptchaScript";
            var i = "";
            null !== blob && (i = "'data': {'blob':'" + blob + "'},");
            var s = "{'public_key': '" + key + "', " + i + "'target_html': 'funCaptchaDiv',\t'callback': pages.controllers.FunCaptchaRequiredController.captchaCompletedCallback, 'language': '" + language + "'}";
            t.innerHTML = "var funCaptcha;function loadFunCaptcha() {\tif(!utils.JS.isValid(funCaptcha)){\t\tfunCaptcha = new FunCaptcha(" + s + ");\t}else{\t\tfunCaptcha.refresh_session();\t}};", document.body.appendChild(t)
        }
        var o = document.createElement("script");
        o.id = "funCaptchaHeaderScript", o.type = "text/javascript", o.async = !0, o.defer = !0, o.src = "https://funcaptcha.com/fc/api/?onload=loadFunCaptcha", document.head.appendChild(o)
    }
    this.$_infoTitle.html(gLocalization.lText("navbar.label.captcha")), this.$_infoText.html(gLocalization.lText("captcha.info.body"));
    var t = new communication.FunCaptchaBlobDelegate;
    t.addListener(communication.BaseDelegate.SUCCESS, this, function _onCaptchaDataSuccess(sender, data) {
        sender.clearListenersByScope(this), _initCaptcha(data.pk || gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_FUNCAPTCHA_PK), data.blob || null)
    }), t.addListener(communication.BaseDelegate.FAIL, this, function _onCaptchaDataFail(sender, error) {
        sender.clearListenersByScope(this), error._code === enums.NetworkError.CAPTCHA_REQUIRED ? NavManager.requestChildScreen(Screens.getView("CAPTCHA_REQUIRED")) || gAuthenticationModel.logout() : _initCaptcha(gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_FUNCAPTCHA_PK), null)
    }), t.send()
}, views.bootFlow.FunCaptchaRequired.prototype.dealloc = function dealloc() {
    this.superclass();
    var t = document.getElementById("funCaptchaHeaderScript");
    utils.JS.isValid(t) && t.parentNode.removeChild(t)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.FunCaptchaRequired = function FunCaptchaRequiredViewController() {
    controllers.bootFlow.BootFlow.call(this), this._personaController = null
}, utils.JS.inherits(controllers.bootFlow.FunCaptchaRequired, controllers.bootFlow.BootFlow), controllers.bootFlow.FunCaptchaRequired.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews()
}, controllers.bootFlow.FunCaptchaRequired.prototype.dealloc = function dealloc() {
    this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.bootFlow.FunCaptchaRequired.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.FunCaptchaRequired
}, controllers.bootFlow.FunCaptchaRequired.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear()
}, pages.controllers.FunCaptchaRequiredController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.FunCaptchaRequired
}, utils.JS.inherits(pages.controllers.FunCaptchaRequiredController, pages.controllers.ScreenControllerBase), pages.controllers.FunCaptchaRequiredController.prototype.init = function() {
    this._controller.init()
}, pages.controllers.FunCaptchaRequiredController.prototype.destroy = function() {
    this._controller.dealloc(), this._controller = null, pages.controllers.FunCaptchaRequiredController.superClass_.destroy.call(this)
}, pages.controllers.FunCaptchaRequiredController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.FunCaptchaRequiredController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.FunCaptchaRequiredController.prototype.onRequestBack = function onRequestBack() {
    return gAuthenticationModel.logout(), !1
}, pages.controllers.FunCaptchaRequiredController.captchaCompletedCallback = function captchaCompletedCallback() {
    var t = document.getElementById("FunCaptcha-Token").value,
        i = new communication.FunCaptchaValidateDelegate(t);
    i.addListener(communication.BaseDelegate.SUCCESS, this, function _onCaptchaValidateSuccess(sender) {
        sender.clearListenersByScope(this), gAuthenticationModel.login(!0)
    }), i.addListener(communication.BaseDelegate.FAIL, this, function _onCaptchaValidateFail(sender, t) {
        t._code === enums.NetworkError.CAPTCHA_REQUIRED ? NavManager.requestSiblingScreen(Screens.getView("CAPTCHA_REQUIRED")) || gAuthenticationModel.logout() : gAuthenticationModel.logout()
    }), i.send()
}, NamespaceManager.Register("views.onboarding"), views.onboarding.WelcomeBack = function() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.onboarding.WelcomeBack, FUIView), views.onboarding.WelcomeBack.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("boot-with-persona"), i.classList.add("p-onboarding"), i.classList.add("l-onboarding"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content"), s.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("boot-primary-content");
        var u = document.createElement("div");
        u.classList.add("boot-content"), u.classList.add("layout-article"), this.__welcomeText = document.createElement("p"), this.$_welcomeText = $(this.__welcomeText), this.__welcomeText.classList.add("title"), u.appendChild(this.__welcomeText), this.__welcomeDesc = document.createElement("p"), this.$_welcomeDesc = $(this.__welcomeDesc), u.appendChild(this.__welcomeDesc);
        var h = document.createElement("div");
        h.classList.add("button-container"), this._btnSubmit = new views.buttons.DefaultButton, this._btnSubmit.getRootElement().classList.add("call-to-action"), h.appendChild(this._btnSubmit.getRootElement()), u.appendChild(h), l.appendChild(u), s.appendChild(l), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.WelcomeBack.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this.__welcomeText = null, this.$_welcomeText = null, this.__welcomeDesc = null, this.$_welcomeDesc = null, this._btnSubmit.destroy(), this._btnSubmit = null
}, views.onboarding.WelcomeBack.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.WelcomeBack.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.WelcomeBack.prototype.init = function init() {
    this.superclass(), this._btnSubmit.init(), this._btnSubmit.setText(gLocalization.lText("mobilestart.label.getStarted"))
}, views.onboarding.WelcomeBack.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, views.onboarding.WelcomeBack.prototype.setTitle = function setTitle(t) {
    this.__welcomeText.innerHTML = t
}, views.onboarding.WelcomeBack.prototype.setDescription = function setDescription(t) {
    this.__welcomeDesc.textContent = t
}, views.onboarding.WelcomeBack.prototype.getSubmitButton = function getSubmitButton() {
    return this._btnSubmit
}, Screens.Register("MOBILE_START_INTRO", "MobileStartIntro", Screens.APP_SECTION.MOBILE_START, "Mobile Start/Onboarding Flow"), pages.MobileStartIntro = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.NO_HEADER, "", components.Header.LANDING_CLASS), gTelemetryManager.trackPage(TelemetryManager.Sections.MISC, "Mobile Start - Welcome"), this._generate()
}, utils.JS.inherits(pages.MobileStartIntro, pages.ScreenBase), pages.MobileStartIntro.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.MobileStartIntro.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.MobileStartIntro.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.MobileStartIntro.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.buttons"), views.buttons.NavigationButton = function FUINavigationButton() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(views.buttons.NavigationButton, FUIButton), views.buttons.NavigationButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("btnNavigation"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.NavigationButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.buttons.NavigationButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.NavigationButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views"), views.NavigationBar = function FUINavigationBar() {
    FUIView.call(this);
    var visible = new valueobjects.BooleanVO;
    Object.defineProperty(this, "_visible", {
        get: visible.get.bind(visible),
        set: visible.set.bind(visible),
        enumerable: !1
    }), this._visible = !0, this._primaryButton = null, this._secondaryButton = null, this._currentStyle = enums.UINavigationBarStyle.DEFAULT, this._generate()
}, utils.JS.inherits(views.NavigationBar, FUIView), views.NavigationBar.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("NavigationBar"), this.__title = document.createElement("h1"), this.$_title = $(this.__title), this.__title.classList.add("title"), t.appendChild(this.__title), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.NavigationBar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null
}, views.NavigationBar.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.NavigationBar.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.NavigationBar.prototype.dealloc = function dealloc() {
    this._primaryButton = null, this._secondaryButton = null, this.superclass()
}, views.NavigationBar.prototype.layoutSubviews = function layoutSubviews() {
    this._subviews.forEach(function(t) {
        t.view.getRoot().detach()
    });
    var root = this.getRoot();
    this._primaryButton && root.prepend(this._primaryButton.getRoot()), this._secondaryButton && root.append(this._secondaryButton.getRoot())
}, views.NavigationBar.prototype.setPrimaryButton = function setPrimaryButton(button) {
    this._primaryButton && this._primaryButton.removeFromSuperview(), button && this.addSubview(button), this._primaryButton = button
}, views.NavigationBar.prototype.setSecondaryButton = function setSecondaryButton(button) {
    this._secondaryButton && this._secondaryButton.removeFromSuperview(), button && this.addSubview(button), this._secondaryButton = button
}, views.NavigationBar.prototype.setButtons = function setButtons(t, i) {
    this.setPrimaryButton(t), this.setSecondaryButton(i), this.layoutSubviews()
}, views.NavigationBar.prototype.setHeader = function setHeader(text) {
    this.__title.textContent = text
}, views.NavigationBar.prototype.setStyle = function setStyle(style) {
    this._currentStyle !== style && (this.removeClass(this._currentStyle), this.addClass(style), this._currentStyle = style)
}, views.NavigationBar.prototype.setVisible = function setVisible(visible, t, i) {
    if (visible = !!visible, this._visible !== visible) {
        if (t) {
            var animation = this._visible ? enums.UIAnimation.FADE_OUT : enums.UIAnimation.FADE_IN;
            visible && this.setVisibility(!0), this.perform(animation, function() {
                visible || this.setVisibility(!1), utils.JS.isFunction(i) && i()
            }.bind(this))
        } else this.setVisibility(visible), utils.JS.isFunction(i) && i();
        this._visible = visible
    }
}, views.NavigationContainer = function FUINavigationContainer() {
    FUIView.call(this), this._navbar = null, this._toolbar = null, this._generate()
}, utils.JS.inherits(views.NavigationContainer, FUIView), views.NavigationContainer.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("FUINavigation"), this.__content = document.createElement("div"), this.$_content = $(this.__content), this.__content.classList.add("FUINavigationContent"), t.appendChild(this.__content), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.NavigationContainer.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__content = null, this.$_content = null
}, views.NavigationContainer.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.NavigationContainer.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.NavigationContainer.prototype.dealloc = function dealloc() {
    this._navbar = null, this._toolbar = null, this.superclass()
}, views.NavigationContainer.prototype.layoutSubviews = function layoutSubviews() {
    this._subviews.forEach(function(t) {
        t.view.getRoot().detach(), t.view !== this._navbar && t.view !== this._toolbar && t.container.append(t.view.getRoot())
    });
    var root = this.getRoot();
    this._navbar && root.prepend(this._navbar.getRoot()), this._toolbar && root.append(this._toolbar.getRoot())
}, views.NavigationContainer.prototype.getContentContainer = function getContentContainer() {
    return this.$_content
}, views.NavigationContainer.prototype.hasNavigationBar = function hasNavigationBar() {
    return this._navbar instanceof views.NavigationBar
}, views.NavigationContainer.prototype.hasToolbar = function hasToolbar() {
    return this._toolbar instanceof views.Toolbar
}, views.NavigationContainer.prototype.appendNavigationBar = function appendNavigationBar(t) {
    this._navbar || (this.addSubview(t), this._navbar = t, this.layoutSubviews())
}, views.NavigationContainer.prototype.removeNavigationBar = function removeNavigationBar(animate) {
    this._navbar && (this._navbar.removeFromSuperview(animate), this._navbar = null)
}, views.NavigationContainer.prototype.appendToolbar = function appendToolbar(toolbar) {
    this._toolbar || (this.addSubview(toolbar), this._toolbar = toolbar, this.layoutSubviews())
}, views.NavigationContainer.prototype.setNavigationContext = function setNavigationContext(view) {
    var t = this.getContentContainer();
    this.addSubview(view, t), t.append(view.getRoot())
}, views.NavigationContainer.prototype.removeToolbar = function removeToolbar(animate) {
    this._toolbar && (this._toolbar.removeFromSuperview(animate), this._toolbar = null)
}, views.NavigationContainer.prototype._applyBarDisplayAnimation = function _applyBarDisplayAnimation(t) {
    t.style.transition = "top 0.3s, bottom 0.3s", this._addListener(enums.Event.TRANSITIONEND, t, function _onBarAnimateComplete() {
        t.style.transition = "", this._removeListenersByNS("barAnimate")
    }.bind(this), "barAnimate")
}, views.NavigationContainer.prototype.showNavigationBar = function showNavigationBar(animate) {
    requestAnimationFrame(function _showNavigationBar() {
        if (this._navbar) {
            var t = this.$_content.get(0),
                height = this._navbar.getRootElement().clientHeight + "px";
            animate && this._applyBarDisplayAnimation(t), t.style.top = height, this._navbar.setVisible(!0, animate)
        }
    }.bind(this))
}, views.NavigationContainer.prototype.hideNavigationBar = function hideNavigationBar(animate) {
    requestAnimationFrame(function _hideNavigationBar() {
        if (this._navbar) {
            var t = this.$_content.get(0);
            animate && this._applyBarDisplayAnimation(t), t.style.top = "", this._navbar.setVisible(!1, animate)
        }
    }.bind(this))
}, views.NavigationContainer.prototype.showToolbar = function showToolbar(animate) {
    requestAnimationFrame(function _showToolbar() {
        if (this._toolbar) {
            var t = this.$_content.get(0),
                height = this._toolbar.getRootElement().clientHeight + "px";
            animate && this._applyBarDisplayAnimation(t), t.style.bottom = height, this._toolbar.setVisible(!0, animate)
        }
    }.bind(this))
}, views.NavigationContainer.prototype.hideToolbar = function hideToolbar(animate) {
    requestAnimationFrame(function _hideToolbar() {
        if (this._toolbar) {
            var t = this.$_content.get(0);
            animate && this._applyBarDisplayAnimation(t), t.style.bottom = "", this._toolbar.setVisible(!1, animate)
        }
    }.bind(this))
}, NamespaceManager.Register("views.buttons"), views.buttons.ToolbarButton = function FUIToolbarButton() {
    FUIButton.call(this), this._unreadBubble = null, this._generate()
}, utils.JS.inherits(views.buttons.ToolbarButton, FUIButton), views.buttons.ToolbarButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("btnToolbar"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.ToolbarButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.buttons.ToolbarButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.ToolbarButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.Toolbar = function FUIToolbar() {
    FUIView.call(this);
    var visible = new valueobjects.BooleanVO;
    Object.defineProperty(this, "_visible", {
        get: visible.get.bind(visible),
        set: visible.set.bind(visible),
        enumerable: !1
    }), this._visible = !0, this._generate()
}, utils.JS.inherits(views.Toolbar, FUIView), views.Toolbar.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("nav");
        t.classList.add("FUIToolbar"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.Toolbar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.Toolbar.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.Toolbar.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.Toolbar.prototype.setButtons = function setButtons(buttons) {
    this.removeSubviews(), buttons.forEach(function(t) {
        this.addSubview(t)
    }, this), this.layoutSubviews()
}, views.Toolbar.prototype.setVisible = function setVisible(visible, t, i) {
    if (visible = !!visible, this._visible !== visible) {
        var root = this.getRoot();
        if (t) {
            var animation = this._visible ? enums.UIAnimation.FADE_OUT : enums.UIAnimation.FADE_IN;
            this._visible || root.show(), this.perform(animation, function() {
                this._visible && root.hide(), utils.JS.isFunction(i) && i()
            })
        } else root.toggle(visible), utils.JS.isFunction(i) && i();
        this._visible = visible
    }
}, utils.JS.inherits(FUINavigationController, FUIViewController), FUINavigationController.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var t = this.getRootController();
        t.initialized || t.init();
        var i = this.getPrimaryNavigationItem();
        i.init(), i.addTarget(this, this._eBackButtonTapped, enums.Event.TAP), this._navigationBar.init(), this._toolbar.init()
    }
}, FUINavigationController.prototype.initWithRootController = function initWithRootController(t) {
    this.initialized || (utils.Debug.Assert(t.conforms(FUIViewController), "Initialization expected an instance of FUIViewController."), this._rootController = t, this.init(), this.addChildViewController(t))
}, FUINavigationController.prototype.dealloc = function dealloc() {
    this._navigationBar && (this._navigationBar.dealloc(), this._navigationBar = null), this._toolbar && (this._toolbar.dealloc(), this._toolbar = null), this.getPrimaryNavigationItem().dealloc(), this._rootController = null, this._currentController = null, this._currentView = null, this._childViewControllers.forEach(function(c) {
        c.dealloc()
    }), this.superclass()
}, FUINavigationController.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new FUIViewController
}, FUINavigationController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.NavigationContainer
}, FUINavigationController.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(), this._currentController && this._currentController.viewWillAppear()
}, FUINavigationController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this._currentController && this._currentController.viewWillDisappear()
}, FUINavigationController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), !this._currentController && this._rootController ? this._showController(this._rootController, !0) : this._currentController && this._currentController.viewDidAppear()
}, FUINavigationController.prototype.viewDidDisappear = function viewDidDisappear() {
    this.superclass(), this._currentController && this._currentController.viewDidDisappear()
}, FUINavigationController.prototype.setNavigationTitle = function setNavigationTitle(title) {
    this._navigationBar.setHeader(title)
}, FUINavigationController.prototype.setNavigationStyle = function setNavigationStyle(style) {
    this._navigationBar.setStyle(style)
}, FUINavigationController.prototype.setNavigationVisibility = function setNavigationVisibility(visible, t) {
    if (visible = !!visible, this.isNavVisible !== visible) {
        var view = this.getView();
        this.isNavVisible = visible, view.hasNavigationBar() || view.appendNavigationBar(this._navigationBar), this.isNavVisible ? view.showNavigationBar(t) : view.hideNavigationBar(t)
    }
}, FUINavigationController.prototype.setToolbarVisibility = function setToolbarVisibility(visible, t) {
    if (visible = !!visible, this.isToolbarVisible !== visible) {
        var view = this.getView();
        this.isToolbarVisible = visible, view.hasToolbar() || view.appendToolbar(this._toolbar), this.isToolbarVisible ? view.showToolbar(t) : view.hideToolbar(t)
    }
}, FUINavigationController.prototype.getRootController = function getRootController() {
    return this._rootController || (this._rootController = this._getRootControllerInstance(), this.addChildViewController(this._rootController)), this._rootController
}, FUINavigationController.prototype.getCurrentController = function getCurrentController() {
    return this._currentController
}, FUINavigationController.prototype.getCurrentView = function getCurrentView() {
    return this._currentView
}, FUINavigationController.prototype.getToolbarItems = function getToolbarItems() {
    return []
}, FUINavigationController.prototype.getPrimaryNavigationItem = function getPrimaryNavigationItem() {
    return this._backButton
}, FUINavigationController.prototype._showController = function _showController(t, i) {
    if (this._currentController !== t) {
        gClickShield.showShield(components.ClickShield.SHIELD.INTERACTION), this._navigationBar.setInteractionState(!1), this._toolbar.setInteractionState(!1);
        var s = this._currentController;
        if (this._currentController = t, this._currentView = t.getView(), s) {
            s.viewWillDisappear();
            var o = s.getView();
            o && o.removeFromSuperview(i)
        }
        this._currentController.viewWillAppear(), this._navigationBar.setHeader(this.getNavigationTitle()), this._navigationBar.setSecondaryButton(this._currentController.getNavigationItem()), this._navigationBar.layoutSubviews(), this._toolbar.setButtons(this._currentController.getToolbarItems());
        var view = this.getView();
        this._currentView.getSuperview() !== view && view.setNavigationContext(this._currentView), this._navigationBar.setInteractionState(!0), this._toolbar.setInteractionState(!0), s && (s.viewDidDisappear(), this._childViewControllers.indexOf(s) < 0 && s.dealloc()), this._currentController.viewDidAppear(), setTimeout(function() {
            gClickShield.hideShield(components.ClickShield.SHIELD.INTERACTION)
        }, 300)
    }
}, FUINavigationController.prototype.pushViewController = function pushViewController(t, i) {
    this._isTransitioning || this._childViewControllers.indexOf(t) >= 0 || (this._isTransitioning = !0, 1 === this._childViewControllers.length && (this._navigationBar.setPrimaryButton(this.getPrimaryNavigationItem()), this._navigationBar.layoutSubviews()), this.addChildViewController(t), this._showController(t, i), this._isTransitioning = !1)
}, FUINavigationController.prototype.popViewController = function popViewController(t) {
    if (this._isTransitioning) return null;
    var lastIndex = this._childViewControllers.length - 1,
        controller = this._childViewControllers[lastIndex],
        i = this._childViewControllers[lastIndex - 1];
    return controller && i ? (this._isTransitioning = !0, this._showController(i, t), this.removeChildViewController(controller), controller.dealloc(), this._childViewControllers.length <= 1 && (this._navigationBar.setPrimaryButton(null), this._navigationBar.layoutSubviews()), this._isTransitioning = !1, controller) : (utils.Debug.Assert(!1, "Expected the stack to not be empty or at the root already"), null)
}, FUINavigationController.prototype.popToViewController = function popToViewController(t, i) {
    if (this._isTransitioning) return null;
    var controller = null;
    for (this._isTransitioning = !0; this._childViewControllers.length >= 1 && (controller = this._childViewControllers[this._childViewControllers.length - 1]) !== t;) controller._parentViewController = null, this._childViewControllers.pop(), controller !== this._currentController && controller.dealloc();
    return utils.Debug.Assert(this._childViewControllers.length >= 1, "View controller not found in navigation stack; stack is now empty."), this._childViewControllers.length <= 1 && this._navigationBar.setPrimaryButton(null), this._showController(this._childViewControllers[this._childViewControllers.length - 1], i), this._isTransitioning = !1, controller
}, FUINavigationController.prototype.popToRootViewController = function popToRootViewController(t) {
    return this._childViewControllers.length > 0 ? this.popToViewController(this._childViewControllers[0], t) : null
}, FUINavigationController.prototype.getNavigationTitle = function getNavigationTitle() {
    return this._currentController ? this._currentController.getNavigationTitle() : this._rootController ? this._rootController.getNavigationTitle() : ""
}, FUINavigationController.prototype._eBackButtonTapped = function _eBackButtonTapped(sender, event, data) {
    this.popViewController(!0)
}, NamespaceManager.Register("interfaces"), interfaces.SlotIterationDelegate = function() {}, interfaces.SlotIterationDelegate.prototype.setSlot = function(sender, index) {}, interfaces.SlotIterationDelegate.prototype.nextSlot = function(sender) {}, interfaces.SlotIterationDelegate.prototype.prevSlot = function(sender) {}, NamespaceManager.Register("views"), views.SplitView = function SplitView() {
    FUIView.call(this), this._lView = null, this._rView = null, this._generate()
}, utils.JS.inherits(views.SplitView, FUIView), views.SplitView.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("split-screen"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.SplitView.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.SplitView.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.SplitView.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.SplitView.prototype.dealloc = function dealloc() {
    this.superclass(), this._lView = null, this._rView = null
}, views.SplitView.prototype.appendLeft = function appendLeft(view) {
    this._lView = view, this.addSubview(this._lView), this.getRoot().append(this._lView.getRoot()), this._lView.getRoot().addClass(enums.UILayout.LEFT)
}, views.SplitView.prototype.appendRight = function appendRight(view) {
    this._rView = view, this.addSubview(this._rView), this.getRoot().append(this._rView.getRoot()), this._rView.getRoot().addClass(enums.UILayout.RIGHT)
}, views.SplitView.prototype.hideLeft = function hideLeft() {
    this._lView && this._lView.hide(), this._rView && this._rView.getRoot().removeClass(enums.UILayout.RIGHT)
}, views.SplitView.prototype.hideRight = function hideRight() {
    this._rView && this._rView.hide(), this._lView && this._lView.getRoot().removeClass(enums.UILayout.LEFT)
}, utils.JS.inherits(FUISplitViewController, FUIViewController), FUISplitViewController.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.SplitView
}, FUISplitViewController.prototype._setRightController = function _setRightController(t, i) {
    if (this._rightController !== t) {
        var s = this._rightController;
        if (this._rightController = t, s) {
            s.viewWillDisappear();
            var o = s.getView();
            o && o.removeFromSuperview(i)
        }
        this._rightController.viewWillAppear();
        var view = this.getView(),
            l = t.getView();
        l.getSuperview() !== view && view.appendRight(l), s && s.viewDidDisappear(), this._rightController.viewDidAppear()
    }
}, FUISplitViewController.prototype._removeRightController = function _removeRightController() {
    if (utils.JS.isValid(this._rightController)) {
        this._rightController.viewWillDisappear();
        var t = this._rightController.getView();
        t && t.removeFromSuperview(), this.getView().layoutSubviews()
    }
}, FUISplitViewController.prototype._setLeftController = function _setLeftController(t, i) {
    if (this._leftController !== t) {
        var s = this._leftController;
        if (this._leftController = t, s) {
            s.viewWillDisappear();
            var o = s.getView();
            o && o.removeFromSuperview(i)
        }
        this._leftController.viewWillAppear();
        var view = this.getView(),
            l = t.getView();
        l.getSuperview() !== view && view.appendLeft(l), s && s.viewDidDisappear(), this._leftController.viewDidAppear()
    }
}, FUISplitViewController.prototype.hideLeftController = function hideLeftController() {
    this.getView().hideLeft()
}, FUISplitViewController.prototype.hideRightController = function hideRightController() {
    this.getView().hideRight()
}, FUISplitViewController.prototype.viewDidLoad = function viewDidLoad() {
    this.superclass(), this._leftController && this._leftController.viewDidLoad(), this._rightController && this._rightController.viewDidLoad()
}, FUISplitViewController.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(), this._leftController && this._leftController.viewWillAppear(), this._rightController && this._rightController.viewWillAppear()
}, FUISplitViewController.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this._leftController && this._leftController.viewWillDisappear(), this._rightController && this._rightController.viewWillDisappear()
}, FUISplitViewController.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._leftController && this._leftController.viewDidAppear(), this._rightController && this._rightController.viewDidAppear()
}, FUISplitViewController.prototype.viewDidDisappear = function viewDidDisappear() {
    this.superclass(), this._leftController && this._leftController.viewDidDisappear(), this._rightController && this._rightController.viewDidDisappear()
}, NamespaceManager.Register("interfaces"), interfaces.SquadViewDelegate = function ISquadViewDelegate() {}, interfaces.SquadViewDelegate.prototype.updateSlot = function updateSlot(t) {}, interfaces.SquadViewDelegate.prototype.selectSlot = function selectSlot(index) {}, NamespaceManager.Register("utils"), utils.DragDrop = function DragDropUtility(t) {
    utils.EventDispatcher.call(this), this.classes = {
        droppable: "isDroppable",
        dragging: "isDragging",
        dropSlot: "droppable",
        dragSlot: "draggable",
        swapAnimate: "animateReplace"
    }, this.$draggablesContainer = t, this._containerCollisionData = {
        top: t.offset().top,
        left: t.offset().left,
        width: parseInt(t.width(), 10),
        height: parseInt(t.height(), 10)
    }, Object.defineProperty(this, "_containerCollisionData", {
        writable: !0,
        enumerable: !1
    }), this.dropContainers = {}, this.droppablesContainer = "", this.$currentItem = null, this.$dropTarget = null, this.$droppables = null, this.dropCache = {}, this.collisionData = [], this.moveDistanceThreshold = 5, this.dragging = !1, this.moved = !1, this.validDrop = !1, this.enabled = !1, this.EVENT_NAMESPACE = "dragdrop", this.currentTouch = null, this.onTouchStartEventDelegate = this.onTouchStart.bind(this), this.onTouchEndEventDelegate = this.onTouchEnd.bind(this), this.onMoveEventDelegate = this.onMove.bind(this)
}, utils.JS.inherits(utils.DragDrop, utils.EventDispatcher), utils.DragDrop.prototype.enable = function enable() {
    this.addAllEventListeners(), this.updateDropSlotCache(), this.enabled = !0
}, utils.DragDrop.prototype.disable = function disable() {
    this.removeAllEventListeners(), this.$droppables = null, this.dropCache = {}, this.collisionData = [], this.enabled = !1
}, utils.DragDrop.prototype.setDraggable = function setDraggable(item, t) {
    item.toggleClass(this.classes.dragSlot, t)
}, utils.DragDrop.prototype.setDroppable = function setDroppable(item, t) {
    item.toggleClass(this.classes.dropSlot, t)
}, utils.DragDrop.prototype.setSwapAnimation = function setSwapAnimation(item, animate) {
    item.toggleClass(this.classes.swapAnimate, animate)
}, utils.DragDrop.prototype.addDropContainer = function addDropContainer(name, t, active) {
    this.dropContainers[name] = t, active && (this.droppablesContainer = name)
}, utils.DragDrop.prototype.updateDropSlotCache = function updateDropSlotCache() {
    var t, i = this.dropContainers;
    this.dropCache = {};
    for (t in i) i.hasOwnProperty(t) && (this.dropCache[t] = i[t].find(".droppable"));
    this.refreshDroppables()
}, utils.DragDrop.prototype.setDroppablesContainer = function setDroppablesContainer(t) {
    utils.Debug.Assert(this.dropContainers[t], "Attempted to set droppables container to a non-existent container."), t && this.dropContainers[t] && (this.droppablesContainer = t, this.refreshDroppables())
}, utils.DragDrop.prototype.refreshDroppables = function refreshDroppables() {
    var t = this.droppablesContainer;
    this.dropCache[t] ? this.$droppables = this.dropCache[t] : this.$droppables = this.dropContainers[t].find(".droppable")
}, utils.DragDrop.prototype.clearActiveCollisions = function clearActiveCollisions() {
    var t;
    for (t in this.collisionData) this.collisionData.hasOwnProperty(t) && this.collisionData[t].hover && (this.collisionData[t].hover = !1, $(this.collisionData[t].droppable).parent().removeClass(this.classes.droppable))
}, utils.DragDrop.prototype.updateCollisionData = function updateCollisionData() {
    this.clearActiveCollisions(), this.collisionData = [];
    for (var t = this.$droppables.length; t-- > 0;) {
        var i = this.$droppables[t].getBoundingClientRect();
        this.collisionData[t] = {
            top: i.top,
            right: i.right,
            bottom: i.bottom,
            left: i.left,
            droppable: this.$droppables[t],
            hover: !1
        }
    }
}, utils.DragDrop.prototype.isDragging = function isDragging() {
    return this.dragging && this.moved
}, utils.DragDrop.prototype.updateDroppables = function updateDroppables(t) {
    function _addDroppableClass(t) {
        t.parent().addClass(this.classes.droppable)
    }

    function _removeDroppableClass(t) {
        t.parent().removeClass(this.classes.droppable)
    }
    var i = !1;
    this.collisionData.forEach(function(s) {
        var o = $(s.droppable);
        s.droppable !== this.$currentItem.get(0) && (utils.JS.isValid(t) && t.clientX >= s.left && t.clientX <= s.right && t.clientY >= s.top && t.clientY <= s.bottom ? (i = !0, this.validDrop = !0, s.hover || (s.hover = !0, this.$dropTarget = o, requestAnimationFrame(_addDroppableClass.bind(this, o)))) : s.hover && (s.hover = !1, requestAnimationFrame(_removeDroppableClass.bind(this, o))))
    }, this), i || (this.validDrop = !1, this.$dropTarget = null)
}, utils.DragDrop.prototype.onMove = function onMove(e) {
    if (this.enabled && utils.JS.isValid(this.currentTouch)) {
        var t;
        if (window.TouchEvent && e.originalEvent instanceof TouchEvent) {
            for (var i = e.originalEvent.touches.length; i-- > 0;)
                if (e.originalEvent.touches[i].identifier === this.currentTouch.id) {
                    t = e.originalEvent.touches[i];
                    break
                }
        } else t = e.originalEvent;
        if (t) {
            if (e.preventDefault(), !this.moved) {
                if (this.moved = Math.abs(t.clientX - this.currentTouch.clientX) > this.moveDistanceThreshold || Math.abs(t.clientY - this.currentTouch.clientY) > this.moveDistanceThreshold, !this.moved) return;
                this.dispatch(utils.DragDrop.DRAG.START, this.$currentItem)
            }
            var s = this.$dropTarget;
            this.updateDroppables(t);
            var width = this.$currentItem.get(0).clientWidth,
                height = this.$currentItem.get(0).clientHeight,
                o = t.clientX - width / 2,
                l = t.clientY - height / 2;
            o < this._containerCollisionData.left ? o = this._containerCollisionData.left : o + width >= this._containerCollisionData.left + this._containerCollisionData.width && (o = this._containerCollisionData.left + this._containerCollisionData.width - width), l < this._containerCollisionData.top ? l = this._containerCollisionData.top : l + height >= this._containerCollisionData.top + this._containerCollisionData.height && (l = this._containerCollisionData.top + this._containerCollisionData.height - height), requestAnimationFrame(function() {
                if (this.$currentItem.css({
                        left: o,
                        top: l
                    }), this.dispatch(utils.DragDrop.DRAG.MOVE, t), this.validDrop && s !== this.$dropTarget) {
                    var data = {
                        dragging: this.$currentItem,
                        target: this.$dropTarget
                    };
                    this.dispatch(utils.DragDrop.DRAG.DROPPABLE, data)
                }
            }.bind(this))
        }
    }
}, utils.DragDrop.prototype.startDrag = function startDrag(event) {
    if (utils.JS.isValid(event.draggable)) {
        this.currentTouch = jQuery.extend(!0, {}, event), this.$currentItem = $(event.draggable), this.updateCollisionData(), this.$draggablesContainer.on(enums.Event.MOUSEUP + "." + this.EVENT_NAMESPACE + " " + enums.Event.TOUCHCANCEL + "." + this.EVENT_NAMESPACE, this.onTouchEndEventDelegate), this.$draggablesContainer.on(enums.Event.MOUSEMOVE + "." + this.EVENT_NAMESPACE, this.onMoveEventDelegate), this.$draggablesContainer.on(enums.Event.TOUCHEND + "." + this.EVENT_NAMESPACE + " " + enums.Event.TOUCHCANCEL + "." + this.EVENT_NAMESPACE, this.onTouchEndEventDelegate), this.$draggablesContainer.on(enums.Event.TOUCHMOVE + "." + this.EVENT_NAMESPACE, this.onMoveEventDelegate);
        var t = event.draggable.parentElement.getBoundingClientRect();
        this.$currentItem.css({
            top: t.top,
            left: t.left
        }).addClass(this.classes.dragging), this.dragging = !0
    }
}, utils.DragDrop.prototype.cancelDrag = function cancelDrag() {
    this.dragging && this.onTouchEnd()
}, utils.DragDrop.prototype.onTouchStart = function onTouchStart(e) {
    var t;
    window.TouchEvent && e.originalEvent instanceof TouchEvent ? ((t = e.originalEvent.touches[0]).draggable = e.currentTarget, t.id = e.originalEvent.touches[0].identifier) : (t = e.originalEvent).draggable = e.currentTarget, gNavManager.getCurrentScreen().isInteractionEnabled() && this.enabled && !this.dragging && this.startDrag(t)
}, utils.DragDrop.prototype.resetDrag = function resetDrag() {
    this.$currentItem.removeClass(this.classes.dragging).css("left", "").css("top", ""), this.dragDropEnd()
}, utils.DragDrop.prototype.onTouchEnd = function onTouchEnd(e) {
    if (utils.JS.isValid(e) && window.TouchEvent && e.originalEvent instanceof TouchEvent)
        for (var t = e.originalEvent.touches.length; t > 0;)
            if (--t, e.originalEvent.touches[t].identifier === this.currentTouch.id) return;
    if (this.$draggablesContainer.off(enums.Event.MOUSEUP + "." + this.EVENT_NAMESPACE + " " + enums.Event.TOUCHCANCEL + "." + this.EVENT_NAMESPACE, this.onTouchEndEventDelegate), this.$draggablesContainer.off(enums.Event.MOUSEMOVE + "." + this.EVENT_NAMESPACE, this.onMoveEventDelegate), this.$draggablesContainer.off(enums.Event.TOUCHEND + "." + this.EVENT_NAMESPACE + " " + enums.Event.TOUCHCANCEL + "." + this.EVENT_NAMESPACE, this.onTouchEndEventDelegate), this.$draggablesContainer.off(enums.Event.TOUCHMOVE + "." + this.EVENT_NAMESPACE, this.onMoveEventDelegate), this.dragging)
        if (this.validDrop) {
            this.$dropTarget.parent().removeClass(this.classes.droppable);
            var data = {
                dragging: this.$currentItem,
                target: this.$dropTarget
            };
            this.dispatch(utils.DragDrop.DRAG.DROP, data)
        } else this.dispatch(utils.DragDrop.DRAG.END, this.$currentItem)
}, utils.DragDrop.prototype.dragDropEnd = function dragDropEnd() {
    this.validDrop && this.updateDropSlotCache(), this.updateDroppables(), this.$dropTarget = this.$currentItem = null, this.dragging = !1, this.moved = !1
}, utils.DragDrop.prototype.removeAllEventListeners = function removeAllEventListeners() {
    this.$draggablesContainer.off(enums.Event.MOUSEDOWN + "." + this.EVENT_NAMESPACE, this.onTouchStartEventDelegate), this.$draggablesContainer.off(enums.Event.TOUCHSTART + "." + this.EVENT_NAMESPACE, this.onTouchStartEventDelegate)
}, utils.DragDrop.prototype.addAllEventListeners = function addAllEventListeners() {
    this.$draggablesContainer.on(enums.Event.MOUSEDOWN + "." + this.EVENT_NAMESPACE, ".draggable", this.onTouchStartEventDelegate), this.$draggablesContainer.on(enums.Event.TOUCHSTART + "." + this.EVENT_NAMESPACE, ".draggable", this.onTouchStartEventDelegate)
}, utils.DragDrop.DRAG = {
    START: "utils.DragDrop.DRAG.START",
    MOVE: "utils.DragDrop.DRAG.MOVE",
    DROPPABLE: "utils.DragDrop.DRAG.DROPPABLE",
    END: "utils.DragDrop.DRAG.END",
    DROP: "utils.DragDrop.DRAG.DROP"
}, NamespaceManager.Register("views.squads"), views.squads.SlotPedestal = function SquadSlotPedestalView() {
    FUIView.call(this), this._states = {
        NONE: "no-state",
        RED: "feedback-red",
        ORANGE: "feedback-orange",
        GREEN: "feedback-green"
    }, Object.defineProperty(this, "_states", {
        writable: !1,
        enumerable: !1
    }), this._currentState = this._states.NONE, this._generate()
}, utils.JS.inherits(views.squads.SlotPedestal, FUIView), views.squads.SlotPedestal.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("no-state"), t.classList.add("squadSlotPedestal"), this.__label = document.createElement("span"), this.$_label = $(this.__label), this.__label.classList.add("label"), t.appendChild(this.__label), this.__value = document.createElement("span"), this.$_value = $(this.__value), this.__value.classList.add("value"), t.appendChild(this.__value), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SlotPedestal.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__label = null, this.$_label = null, this.__value = null, this.$_value = null
}, views.squads.SlotPedestal.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SlotPedestal.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SlotPedestal.prototype.render = function render(t, i) {
    var s = i ? t.getPositionBonus() : 0,
        o = s > 0 ? t.getChemistry().toString() : "",
        l = t.getItem().isManager() ? gLocalization.lText("extendedPlayerInfo.positions.manager") : utils.FUTLocalization.getLocalizedPositionStringById(t.getGeneralPosition()),
        state = this._states.NONE;
    s >= 3 ? state = this._states.GREEN : s >= 1 ? state = this._states.ORANGE : s > 0 && (state = this._states.RED), this.getRoot().removeClass(this._currentState).addClass(state), this.$_label.html(l), this.$_value.html(o), this._currentState = state
}, NamespaceManager.Register("views.squads"), views.squads.Slot = function SquadSlotView() {
    FUITargetActionView.call(this), this._itemView = null, this._slotIndex = -1, this._uniquePosition = -1, this._isManager = !1, this._generate()
}, utils.JS.inherits(views.squads.Slot, FUITargetActionView), views.squads.Slot.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("squadSlot"), this._pedestal = new views.squads.SlotPedestal, t.appendChild(this._pedestal.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.Slot.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._pedestal.destroy(), this._pedestal = null
}, views.squads.Slot.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.Slot.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.Slot.prototype.init = function init() {
    this.superclass(), this.getRoot().data("view", this), this.setInteractionState(!0), this.allowLegacyPropagation = !0
}, views.squads.Slot.prototype.dealloc = function dealloc() {
    this._itemView.destroy(), this._itemView = null, this.superclass()
}, views.squads.Slot.prototype.render = function render(t, i, s) {
    i = !utils.JS.isBoolean(i) || i, s = !utils.JS.isBoolean(s) || s, this.getRootElement().setAttribute("index", t.getIndex()), this._isManager = t.getItem().isManager(), this._slotIndex = t.getIndex(), this._uniquePosition = t.getUniquePosition();
    var o = this._renderItem(t.getItem(), i);
    this.renderPedestal(t, s), o && this.getRootElement().appendChild(this._itemView.getRootElement())
}, views.squads.Slot.prototype._renderItem = function _renderItem(item, t) {
    var i = !1;
    return this._itemView && !this._itemView.canRender(item) && (this._itemView.dealloc(), this._itemView = null), this._itemView || (this._itemView = factories.ItemView.createSmallItem(item), i = !0), this._itemView.renderConcept(t), this._itemView.render(item), i
}, views.squads.Slot.prototype.renderPedestal = function renderPedestal(t, i) {
    this._pedestal.render(t, i)
}, views.squads.Slot.prototype.setLockedState = function setLockedState(t) {
    this.toggleClass("locked", t)
}, views.squads.Slot.prototype.getIndex = function getIndex() {
    return this._slotIndex
}, views.squads.Slot.prototype.getUniquePosition = function getUniquePosition() {
    return this._uniquePosition
}, views.squads.Slot.prototype.getChemLineCoordinate = function getChemLineCoordinate() {
    var root = this.getRoot(),
        t = root.position();
    return {
        x: t.left,
        y: t.top + root.height() / 2 - 5
    }
}, views.squads.Slot.prototype.getItemView = function getItemView() {
    return this._itemView
}, views.squads.Slot.prototype.setItemView = function setItemView(view) {
    this._itemView = view
}, views.squads.Slot.prototype._tapDetected = function _tapDetected(e) {
    this._triggerActions(enums.Event.TAP)
}, views.squads.Slot.prototype._mouseLeave = function _mouseLeave(e) {
    this._triggerActions(enums.Event.MOUSELEAVE)
}, views.squads.Slot.prototype._mouseEnter = function _mouseEnter(e) {
    this._triggerActions(enums.Event.MOUSEENTER)
}, NamespaceManager.Register("views.squads"), views.squads.Pitch = function SquadPitchView() {
    FUITargetActionView.call(this);
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "renderChemistry", {
        get: t.get.bind(t),
        set: t.set.bind(t),
        enumerable: !0
    }), this._slots = [], Object.defineProperty(this, "_slots", {
        enumerable: !1
    }), this._currentTheme = enums.SquadPitchThemes.NONE, Object.defineProperty(this, "_currentTheme", {
        enumerable: !1
    }), this._currentType = enums.SquadPitchTypes.REGULAR, Object.defineProperty(this, "_currentType", {
        enumerable: !1
    }), this._currentMode = enums.SquadPitchModes.REGULAR, Object.defineProperty(this, "_currentMode", {
        enumerable: !1
    }), this._currentFormation = "", Object.defineProperty(this, "_currentFormation", {
        enumerable: !1
    }), this.renderChemistry = !0, this._cachedLinks = [], this._windowResizeCallback = this._eWindowResize.bind(this), this._isAnimating = !1, this._delayedDrawTimeout = 0, this._generate()
}, utils.JS.inherits(views.squads.Pitch, FUITargetActionView), views.squads.Pitch.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("squadPitch"), this.__squadCanvas = document.createElement("canvas"), this.$_squadCanvas = $(this.__squadCanvas), this.__squadCanvas.setAttribute("width", "400"), this.__squadCanvas.setAttribute("height", "300"), this.__squadCanvas.classList.add("squadCanvas"), t.appendChild(this.__squadCanvas), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.Pitch.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__squadCanvas = null, this.$_squadCanvas = null
}, views.squads.Pitch.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.Pitch.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.Pitch.prototype.init = function init() {
    this.superclass(), this.allowLegacyPropagation = !0, window.addEventListener(enums.Event.RESIZE, this._windowResizeCallback, !1)
}, views.squads.Pitch.prototype.dealloc = function dealloc() {
    this._slots = [], this._cachedLinks = [], clearTimeout(this._delayedDrawTimeout), window.removeEventListener(enums.Event.RESIZE, this._windowResizeCallback, !1), this.superclass()
}, views.squads.Pitch.prototype.didRemoveSubview = function didRemoveSubview(view) {
    this.superclass(), view.dealloc()
}, views.squads.Pitch.prototype._tapDetected = function _tapDetected(e) {
    this.$_squadCanvas.is(e.target) && this._triggerActions(enums.Event.TAP)
}, views.squads.Pitch.prototype.setTheme = function setTheme(t) {
    this.removeClass(this._currentTheme), this.addClass(t), this._currentTheme = t
}, views.squads.Pitch.prototype.setType = function setType(type) {
    this.removeClass(this._currentType), this.addClass(type), this._currentType = type
}, views.squads.Pitch.prototype.setMode = function setMode(mode) {
    this.removeClass(this._currentMode), this.addClass(mode), this._currentMode = mode
}, views.squads.Pitch.prototype.setFormation = function setFormation(t, links, i) {
    function _eFormationAddAnimComplete(e) {
        root && (root.off(enums.Event.TRANSITIONEND), this._isAnimating = !1, this.renderChemistry && this._currentFormation === s && this._renderChemistryLines(links), utils.JS.isFunction(i) && i())
    }
    var s = "formation" + t,
        root = this.getRoot();
    this._cachedLinks = links, this._clearChemistryLines(), this._updateCanvasSize(), this._currentFormation !== s ? (this._isAnimating = !0, "" !== this._currentFormation ? root.on(enums.Event.TRANSITIONEND, function _eFormationClearAnimComplete(e) {
        root && (root.off(enums.Event.TRANSITIONEND), setTimeout(function() {
            root.on(enums.Event.TRANSITIONEND, _eFormationAddAnimComplete.bind(this)).addClass(s)
        }.bind(this), 10))
    }.bind(this)).removeClass(this._currentFormation) : root.on(enums.Event.TRANSITIONEND, _eFormationAddAnimComplete.bind(this)).addClass(s), this._currentFormation = s) : this._isAnimating || (this.renderChemistry && this._renderChemistryLines(links), utils.JS.isFunction(i) && i())
}, views.squads.Pitch.prototype.getSlotViews = function getSlotViews() {
    return this._slots
}, views.squads.Pitch.prototype.setSlots = function setSlots(t, i, s) {
    this._slots.forEach(function(t) {
        t.removeFromSuperview()
    }), this._slots = [], t.forEach(function(t) {
        if (!(t.getIndex() < 0)) {
            var o = new views.squads.Slot;
            o.init(), o.render(t, i, s), this.addSubview(o), this._slots.push(o)
        }
    }, this), this.layoutSubviews()
}, views.squads.Pitch.prototype.updateSlot = function updateSlot(t, i, s) {
    var view = utils.JS.find(this._slots, function(i) {
        return i.getIndex() === t.getIndex()
    });
    view && view.render(t, i, s)
}, views.squads.Pitch.prototype.setLockedSlots = function setLockedSlots(t) {
    this._slots.forEach(function(i) {
        i.setLockedState(t.indexOf(i.getIndex()) >= 0)
    })
}, views.squads.Pitch.prototype.updateChemistry = function updateChemistry(t, links) {
    this._slots.forEach(function _updateSlotChemistry(view) {
        var i = utils.JS.find(t, function(t) {
            return t.getIndex() === view.getIndex()
        });
        i && view.renderPedestal(i, !0)
    }, this), this._clearChemistryLines(), this._updateCanvasSize(), this.renderChemistry && this._renderChemistryLines(links)
}, views.squads.Pitch.prototype._updateCanvasSize = function _updateCanvasSize() {
    this.$_squadCanvas.attr("width", this.getRoot().width()), this.$_squadCanvas.attr("height", this.getRoot().height())
}, views.squads.Pitch.prototype._clearChemistryLines = function _clearChemistryLines() {
    var canvas = this.$_squadCanvas.get(0),
        width = canvas.width;
    canvas.width = width, canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height)
}, views.squads.Pitch.prototype._getSlotViewByUniquePosition = function _getSlotViewByUniquePosition(id) {
    return utils.JS.find(this._slots, function(t) {
        return t.getUniquePosition() === id
    })
}, views.squads.Pitch.prototype._renderChemistryLines = function _renderChemistryLines(links) {
    links.forEach(function(link) {
        var t = this._getSlotViewByUniquePosition(link.getPositionA()),
            i = this._getSlotViewByUniquePosition(link.getPositionB());
        utils.Debug.Assert(utils.JS.isValid(t), "Slot with unique position " + link.getPositionA() + " not found."), utils.Debug.Assert(utils.JS.isValid(i), "Slot with unique position " + link.getPositionB() + " not found."), t && i && this._drawLine(t.getChemLineCoordinate(), i.getChemLineCoordinate(), link.getChemistry())
    }, this)
}, views.squads.Pitch.prototype._drawLine = function _drawLine(t, i, s) {
    var context = this.$_squadCanvas.get(0).getContext("2d"),
        color = "#a31a19";
    s >= 5 ? color = "#a5f35c" : s >= 1 && (color = "#cf8600"), context.lineWidth = 3, context.strokeStyle = color, context.lineCap = "round", context.shadowOffsetY = 1.5, context.shadowColor = "rgba(0, 0, 0, 0.5)", context.shadowBlur = 1.5, context.beginPath(), context.moveTo(t.x, t.y), context.lineTo(i.x, i.y), context.stroke()
}, views.squads.Pitch.prototype._redrawCanvas = function _redrawCanvas() {
    this._isAnimating || (this._clearChemistryLines(), this._updateCanvasSize(), this._renderChemistryLines(this._cachedLinks))
}, views.squads.Pitch.prototype._eWindowResize = function _eWindowResize(e) {
    this.renderChemistry && (this._redrawCanvas(), clearTimeout(this._delayedDrawTimeout), this._delayedDrawTimeout = setTimeout(function() {
        this._redrawCanvas()
    }.bind(this), 200))
}, NamespaceManager.Register("views.buttons"), views.buttons.SquadTabButton = function FUISquadTabButton() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(views.buttons.SquadTabButton, FUIButton), views.buttons.SquadTabButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("btnSquadTab");
        var i = document.createElement("div");
        i.classList.add("icon"), t.appendChild(i), this.__text = document.createElement("span"), this.$_text = $(this.__text), t.appendChild(this.__text), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.SquadTabButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__text = null, this.$_text = null
}, views.buttons.SquadTabButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.SquadTabButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.buttons.SquadTabButton.prototype.setText = function setText(text) {
    this.$_text.text(text)
}, views.buttons.SquadTabButton.prototype.assignLeft = function assignLeft() {
    this.getRoot().removeClass("right").addClass("left")
}, views.buttons.SquadTabButton.prototype.setArrowDirection = function setArrowDirection(dir) {
    this.getRoot().removeClass(enums.UIDirection.RIGHT).removeClass(enums.UIDirection.LEFT).removeClass(enums.UIDirection.UP).removeClass(enums.UIDirection.DOWN).addClass(dir)
}, views.buttons.SquadTabButton.prototype.setType = function setType(type) {
    this.getRoot().removeClass(enums.UISquadTabTypes.WORK_AREA).removeClass(enums.UISquadTabTypes.DOCK_TAB).removeClass(enums.UISquadTabTypes.DEFAULT).addClass(type)
}, views.buttons.SquadTabButton.prototype.assignRight = function assignRight() {
    this.getRoot().removeClass("left").addClass("right")
}, NamespaceManager.Register("views.squads"), views.squads.SlotDock = function SquadSlotDockView() {
    FUIView.call(this);
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "isAnimating", {
        get: t.get.bind(t),
        set: t.set.bind(t),
        enumerable: !0
    });
    var i = new valueobjects.BooleanVO;
    Object.defineProperty(this, "isVisible", {
        get: i.get.bind(i),
        set: i.set.bind(i),
        enumerable: !0
    }), this._slots = [], Object.defineProperty(this, "_slots", {
        enumerable: !1
    }), this.$_instructions = null, this.isAnimating = !1, this.isVisible = !1, this._generate()
}, utils.JS.inherits(views.squads.SlotDock, FUIView), views.squads.SlotDock.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("slotDock"), t.classList.add("slideUpPanel"), this.__content = document.createElement("div"), this.$_content = $(this.__content), this.__content.classList.add("content-container"), this.__slotContainer = document.createElement("div"), this.$_slotContainer = $(this.__slotContainer), this.__slotContainer.classList.add("squadItemContainer"), this.__content.appendChild(this.__slotContainer), t.appendChild(this.__content), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SlotDock.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__content = null, this.$_content = null, this.__slotContainer = null, this.$_slotContainer = null
}, views.squads.SlotDock.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SlotDock.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SlotDock.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0), this.allowLegacyPropagation = !0
}, views.squads.SlotDock.prototype.setInteractionState = function setInteractionState(t) {
    t = !!t, this.isInteractionEnabled() !== t && this.superclass(t)
}, views.squads.SlotDock.prototype.dealloc = function dealloc() {
    this._slots = [], this._onOpenCallback = null, this._onCloseCallback = null, this.superclass()
}, views.squads.SlotDock.prototype.getSlotViews = function getSlotViews() {
    return this._slots
}, views.squads.SlotDock.prototype.setSlots = function setSlots(t, i) {
    this._slots.forEach(function(t) {
        t.removeFromSuperview()
    }), this._slots = [], t.forEach(function(t) {
        if (!(t.getIndex() < 0)) {
            var s = new views.squads.Slot;
            s.init(), s.render(t, i, !1), this.addSubview(s, this.$_slotContainer), this._slots.push(s)
        }
    }, this), this.layoutSubviews()
}, views.squads.SlotDock.prototype.updateSlot = function updateSlot(t, i) {
    var view = utils.JS.find(this._slots, function(i) {
        return i.getIndex() === t.getIndex()
    });
    view && view.render(t, i)
}, views.squads.SlotDock.prototype.setInstructions = function setInstructions(text) {
    this.$_instructions || (this.$_instructions = $(document.createElement("p")), this.$_instructions.addClass("dockInstructions"), this.$_content.append(this.$_instructions)), this.$_instructions.html(text)
}, views.squads.SlotDock.prototype._setViewState = function _setViewState(t, i) {
    this.isAnimating = !0, requestAnimationFrame(function() {
        this.getRoot().css("bottom", t ? this.$_content.height() : 0), this.getRoot().on(enums.Event.TRANSITIONEND, function() {
            this.getRoot().off(enums.Event.TRANSITIONEND), this.isVisible = t, this.isAnimating = !1, utils.JS.isFunction(i) && i()
        }.bind(this))
    }.bind(this))
}, views.squads.SlotDock.prototype.setIsSBC = function setIsSBC(value) {
    this.getRoot().toggleClass("sbc", value)
}, views.squads.SlotDock.prototype.getContentHeight = function getContentHeight() {
    return this.$_content.height()
}, views.squads.SlotDock.prototype.open = function open(t) {
    this.isAnimating || this._setViewState(!0, t)
}, views.squads.SlotDock.prototype.close = function close(t) {
    this.isAnimating || this._setViewState(!1, t)
}, views.squads.SlotDock.prototype.toggle = function toggle() {
    this.isAnimating || (this.isVisible ? this.close() : this.open())
}, NamespaceManager.Register("components"), components.ChemistryBar = function() {
    this._generate(), this._value = 0, this.$_chemistryValue.html("0"), this.$_coloredBar.css("width", "0%")
}, components.ChemistryBar.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("chemistryBar");
        var i = document.createElement("div");
        i.classList.add("greyBar"), i.classList.add("chemistryRatingBars"), this.__coloredBar = document.createElement("div"), this.$_coloredBar = $(this.__coloredBar), this.__coloredBar.classList.add("coloredBar"), i.appendChild(this.__coloredBar), t.appendChild(i), this.__chemistryValue = document.createElement("span"), this.$_chemistryValue = $(this.__chemistryValue), this.__chemistryValue.classList.add("chemistryValue"), t.appendChild(this.__chemistryValue), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ChemistryBar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__coloredBar = null, this.$_coloredBar = null, this.__chemistryValue = null, this.$_chemistryValue = null
}, components.ChemistryBar.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ChemistryBar.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ChemistryBar.CSS = {
    POSITIVE_CHANGE: "greenTextColor",
    NEGATIVE_CHANGE: "redTextColor",
    HIGH_CHEM: "greenBar",
    MEDIUM_CHEM: "orangeBar",
    LOW_CHEM: "redBar"
}, components.ChemistryBar.ANIMATION_DURATION = 1350, components.ChemistryBar.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.ChemistryBar.prototype.setChemistry = function(value) {
    this.$_chemistryValue.html(value.toString());
    var t = components.ChemistryBar.CSS.LOW_CHEM;
    value >= 75 ? t = components.ChemistryBar.CSS.HIGH_CHEM : value > 25 && (t = components.ChemistryBar.CSS.MEDIUM_CHEM), this.$_coloredBar.removeClass([components.ChemistryBar.CSS.HIGH_CHEM, components.ChemistryBar.CSS.MEDIUM_CHEM, components.ChemistryBar.CSS.LOW_CHEM].join(" ")).addClass(t).css("width", value + "%"), this._value = value
}, components.ChemistryBar.prototype.updateChemistry = function(t) {
    if (t !== this._value) {
        var i = (t - this._value).toString(),
            s = this._value > t ? components.ChemistryBar.CSS.NEGATIVE_CHANGE : components.ChemistryBar.CSS.POSITIVE_CHANGE;
        this.$_chemistryValue.addClass(s).html(t > this._value ? "+" + i : i), setTimeout(function() {
            utils.JS.isValid(this.$_chemistryValue) && (this.$_chemistryValue.removeClass(s), this.setChemistry(t))
        }.bind(this), components.ChemistryBar.ANIMATION_DURATION)
    }
}, NamespaceManager.Register("components"), components.RatingStars = function() {
    this._generate(), this._value = 0, this.$_ratingValue.html("0"), this.$_coloredStars.css("width", "0%")
}, components.RatingStars.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("ratingStars");
        var i = document.createElement("div");
        i.classList.add("greyStars"), i.classList.add("chemistryRatingBars"), this.__coloredStars = document.createElement("div"), this.$_coloredStars = $(this.__coloredStars), this.__coloredStars.classList.add("coloredStars"), i.appendChild(this.__coloredStars), t.appendChild(i), this.__ratingValue = document.createElement("span"), this.$_ratingValue = $(this.__ratingValue), this.__ratingValue.classList.add("ratingValue"), t.appendChild(this.__ratingValue), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.RatingStars.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__coloredStars = null, this.$_coloredStars = null, this.__ratingValue = null, this.$_ratingValue = null
}, components.RatingStars.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.RatingStars.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.RatingStars.POSITIVE_CHANGE = "greenTextColor", components.RatingStars.NEGATIVE_CHANGE = "redTextColor", components.RatingStars.ANIMATION_DURATION = 1350, components.RatingStars.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.RatingStars.prototype.setRating = function(t) {
    var i = 0;
    t > enums.TeamStarRanges.RATING_4_5 ? i = 100 : t > enums.TeamStarRanges.RATING_4_0 ? i = 90 : t > enums.TeamStarRanges.RATING_3_5 ? i = 80 : t > enums.TeamStarRanges.RATING_3_0 ? i = 70 : t > enums.TeamStarRanges.RATING_2_5 ? i = 60 : t > enums.TeamStarRanges.RATING_2_0 ? i = 50 : t > enums.TeamStarRanges.RATING_1_5 ? i = 40 : t > enums.TeamStarRanges.RATING_1_0 ? i = 30 : t > enums.TeamStarRanges.RATING_0_5 ? i = 20 : t > enums.TeamStarRanges.RATING_0_0 && (i = 10), this.$_coloredStars.css("width", i + "%"), this.$_ratingValue.html(t.toString()), this._value = t
}, components.RatingStars.prototype.updateRating = function(t) {
    if (t !== this._value) {
        var i = (t - this._value).toString(),
            s = this._value > t ? components.RatingStars.NEGATIVE_CHANGE : components.RatingStars.POSITIVE_CHANGE;
        this.$_ratingValue.addClass(s).html(t > this._value ? "+" + i : i), setTimeout(function() {
            utils.JS.isValid(this.$_ratingValue) && (this.$_ratingValue.removeClass(s), this.setRating(t))
        }.bind(this), components.RatingStars.ANIMATION_DURATION)
    }
}, NamespaceManager.Register("components"), components.SquadStats = function() {
    this._generate(), this.$_labelChemistry.html(gLocalization.lText("squads.chemistry")), this.$_labelRating.html(gLocalization.lText("squads.rating"))
}, components.SquadStats.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("squadSummaryStatsRow");
        var i = document.createElement("div");
        i.classList.add("rating"), this.__labelRating = document.createElement("span"), this.$_labelRating = $(this.__labelRating), this.__labelRating.classList.add("secondary"), this.__labelRating.classList.add("squadRatingLbl"), i.appendChild(this.__labelRating), this._ratingStars = new components.RatingStars, i.appendChild(this._ratingStars.getRootElement()), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("chemistry"), this.__labelChemistry = document.createElement("span"), this.$_labelChemistry = $(this.__labelChemistry), this.__labelChemistry.classList.add("secondary"), this.__labelChemistry.classList.add("squadChemistryLbl"), s.appendChild(this.__labelChemistry), this._chemistryBar = new components.ChemistryBar, s.appendChild(this._chemistryBar.getRootElement()), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SquadStats.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__labelRating = null, this.$_labelRating = null, this._ratingStars.destroy(), this._ratingStars = null, this.__labelChemistry = null, this.$_labelChemistry = null, this._chemistryBar.destroy(), this._chemistryBar = null
}, components.SquadStats.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SquadStats.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SquadStats.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.SquadStats.prototype.set = function(t, i) {
    this._chemistryBar.setChemistry(t), this._ratingStars.setRating(i)
}, components.SquadStats.prototype.setChemistry = function setChemistry(value, t) {
    t ? this._chemistryBar.updateChemistry(value) : this._chemistryBar.setChemistry(value)
}, components.SquadStats.prototype.setRating = function setRating(value, t) {
    t ? this._ratingStars.updateRating(value) : this._ratingStars.setRating(value)
}, components.SquadStats.prototype.update = function(t, i) {
    this._chemistryBar.updateChemistry(t), this._ratingStars.updateRating(i)
}, NamespaceManager.Register("views.squads"), views.squads.SummaryBanner = function SquadSummaryBannerView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.squads.SummaryBanner, FUIView), views.squads.SummaryBanner.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("SquadSummaryPanel");
        var i = document.createElement("div");
        i.classList.add("squadInfo"), this.__formationTitle = document.createElement("h1"), this.$_formationTitle = $(this.__formationTitle), this.__formationTitle.classList.add("secondary"), this.__formationTitle.classList.add("formation-title"), i.appendChild(this.__formationTitle), this.__formationValue = document.createElement("div"), this.$_formationValue = $(this.__formationValue), this.__formationValue.classList.add("formationValue"), i.appendChild(this.__formationValue), t.appendChild(i), this._squadStats = new components.SquadStats, t.appendChild(this._squadStats.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SummaryBanner.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__formationTitle = null, this.$_formationTitle = null, this.__formationValue = null, this.$_formationValue = null, this._squadStats.destroy(), this._squadStats = null
}, views.squads.SummaryBanner.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SummaryBanner.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SummaryBanner.prototype.init = function init() {
    this.superclass(), this.__formationTitle && (this.__formationTitle.textContent = gLocalization.lText("squads.formation"))
}, views.squads.SummaryBanner.prototype.setChemistryAndRating = function setChemistryAndRating(t, i, s) {
    this.setChemistry(t, s), this.setRating(i, s)
}, views.squads.SummaryBanner.prototype.setChemistry = function setChemistry(value, t) {
    this._squadStats.setChemistry(value, t)
}, views.squads.SummaryBanner.prototype.setRating = function setRating(value, t) {
    this._squadStats.setRating(value, t)
}, views.squads.SummaryBanner.prototype.setFormation = function setFormation(t) {
    this.__formationValue && (this.__formationValue.textContent = t)
}, views.squads.SummaryBanner.prototype.show = function show() {
    this.setDisplay(!0)
}, views.squads.SummaryBanner.prototype.hide = function hide() {
    this.setDisplay(!1)
}, NamespaceManager.Register("views.squads"), views.squads.SquadOverview = function SquadOverviewView() {
    FUITargetActionView.call(this);
    var t = new valueobjects.BooleanVO;
    Object.defineProperty(this, "renderManager", {
        get: t.get.bind(t),
        set: t.set.bind(t),
        enumerable: !0
    });
    var i = new valueobjects.BooleanVO;
    Object.defineProperty(this, "renderConcepts", {
        get: i.get.bind(i),
        set: i.set.bind(i),
        enumerable: !0
    }), Object.defineProperty(this, "renderChemistry", {
        get: function() {
            return !this._pitch || this._pitch.renderChemistry
        },
        set: function(t) {
            this._pitch && (this._pitch.renderChemistry = t)
        },
        enumerable: !0
    }), this._utilDragDrop = null, this._summaryPanel = null, this._leftTab = null, this._rightTab = null, this._leftDock = null, this._rightDock = null, this._leftTabClientRect = null, this._rightTabClientRect = null, this._leftDockClientRect = null, this._rightDockClientRect = null, this.renderManager = !0, this.renderConcepts = !0, this.renderChemistry = !0, this._animationDuration = 500, this._slotViews = [], this._hoverCallback = null, this._dropAreas = {
        FIELD: "field",
        LEFT_DOCK: "leftDock",
        RIGHT_DOCK: "rightDock"
    }, this._generate()
}, utils.JS.inherits(views.squads.SquadOverview, FUITargetActionView), views.squads.SquadOverview.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("SquadOverview"), this.__draggableArea = document.createElement("div"), this.$_draggableArea = $(this.__draggableArea), this.__draggableArea.classList.add("draggableArea"), this._pitch = new views.squads.Pitch, this.__draggableArea.appendChild(this._pitch.getRootElement()), t.appendChild(this.__draggableArea), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SquadOverview.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__draggableArea = null, this.$_draggableArea = null, this._pitch.destroy(), this._pitch = null
}, views.squads.SquadOverview.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SquadOverview.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SquadOverview.prototype.init = function init() {
    this.superclass(), this._pitch.init();
    var summary = this.getSummaryPanel();
    summary.init(), this.getRoot().prepend(summary.getRoot()), this._initTabViews(), this.setInteractionState(!0), this.allowLegacyPropagation = !0, $(window).on("resize", this._onWindowResize.bind(this))
}, views.squads.SquadOverview.prototype.dealloc = function dealloc() {
    this.superclass(), $(window).off("resize"), this._utilDragDrop && (this._utilDragDrop.clearListenersByScope(this), this._utilDragDrop = null), this._summaryPanel && (this._summaryPanel.dealloc(), this._summaryPanel = null), this._leftTab && this._leftTab.dealloc(), this._rightTab && this._rightTab.dealloc(), this._leftDock && this._leftDock.dealloc(), this._rightDock && this._rightDock.dealloc(), this._leftTab = null, this._rightTab = null, this._leftDock = null, this._rightDock = null, this._hoverCallback = null, this._slotViews = []
}, views.squads.SquadOverview.prototype.getSummaryPanel = function getSummaryPanel() {
    return this._summaryPanel || (this._summaryPanel = new views.squads.SummaryBanner), this._summaryPanel
}, views.squads.SquadOverview.prototype.setInteractionState = function setInteractionState(t) {
    this.superclass(t), this._pitch.setInteractionState(t)
}, views.squads.SquadOverview.prototype.setTheme = function setTheme(t) {
    this._pitch.setTheme(t)
}, views.squads.SquadOverview.prototype.setType = function setType(type) {
    this._pitch.setType(type)
}, views.squads.SquadOverview.prototype.setMode = function setMode(mode) {
    this._pitch.setMode(mode)
}, views.squads.SquadOverview.prototype.setChemistry = function setChemistry(value, t) {
    this._summaryPanel.setChemistry(value, t)
}, views.squads.SquadOverview.prototype.setRating = function setRating(value, t) {
    this._summaryPanel.setRating(value, t)
}, views.squads.SquadOverview.prototype.setFormation = function setFormation(t, links) {
    var i = this.isInteractionEnabled();
    this.setInteractionState(!1), this._summaryPanel && this._summaryPanel.setFormation(t.getDisplayName()), this._pitch.setFormation(t.getName(), links, function() {
        this.setInteractionState(i)
    }.bind(this))
}, views.squads.SquadOverview.prototype.setSquad = function setSquad(t) {
    this._summaryPanel && (this._summaryPanel.setChemistry(t.getChemistry()), this._summaryPanel.setRating(t.getRating()));
    var i = this.getSelectedSlot(),
        selectedIndex = i ? i.getIndex() : -1,
        s = this.renderManager ? t.getFieldPlayers().concat(t.getManager()) : t.getFieldPlayers();
    this._pitch.setSlots(s, this.renderConcepts, this.renderChemistry), this._leftDock && this._leftDock.setSlots(t.getSubPlayers(), this.renderConcepts), this._rightDock && this._rightDock.setSlots(t.getReservePlayers(), this.renderConcepts), this._slotViews = this._getDropSlotViews(), this._slotViews.forEach(function(t) {
        t.addTarget(this, this._eSlotTapped, enums.Event.TAP), t.addTarget(this, this._eSlotMouseEnter, enums.Event.MOUSEENTER), t.addTarget(this, this._eSlotMouseLeave, enums.Event.MOUSELEAVE)
    }, this), selectedIndex >= 0 && this.selectSlot(selectedIndex), this.setFormation(t.getFormation(), t.getChemistryLinks())
}, views.squads.SquadOverview.prototype.addSlotInteractionState = function setSlotInteractionState(index, state) {
    this._slotViews.forEach(function(t) {
        t.toggleClass(state, t.getIndex() === index)
    })
}, views.squads.SquadOverview.prototype.removeSlotInteractionState = function removeSlotInteractionState(index, state) {
    var view = utils.JS.find(this._slotViews, function(t) {
        return t.getIndex() === index
    });
    view && view.removeClass(state)
}, views.squads.SquadOverview.prototype.clearSlotInteractionState = function clearSlotInteractionState(state) {
    this._slotViews.forEach(function(t) {
        t.removeClass(state)
    })
}, views.squads.SquadOverview.prototype.selectSlot = function selectSlot(index) {
    this.addSlotInteractionState(index, enums.UISlotInteractionState.SELECTED)
}, views.squads.SquadOverview.prototype.getSelectedSlot = function getSelectedSlot() {
    return utils.JS.find(this._slotViews, function(t) {
        return t.hasClass(enums.UISlotInteractionState.SELECTED)
    })
}, views.squads.SquadOverview.prototype.updatePitchChemistry = function updatePitchChemistry(t, links) {
    this.renderChemistry && this._pitch.updateChemistry(t, links)
}, views.squads.SquadOverview.prototype.updateSlot = function updateSlot(t) {
    this._pitch.updateSlot(t, this.renderConcepts, this.renderChemistry), this._leftDock && this._leftDock.updateSlot(t, this.renderConcepts), this._rightDock && this._rightDock.updateSlot(t, this.renderConcepts)
}, views.squads.SquadOverview.prototype._setDockLocalization = function _setDockLocalization() {
    this._utilDragDrop && this._utilDragDrop.enabled && (this._leftDock && this._leftDock.setInstructions(gLocalization.lText("dock.label.dragSubsIntoPitchToSwap")), this._rightDock && this._rightDock.setInstructions(gLocalization.lText("dock.label.dragResIntoPitchToSwap")))
}, views.squads.SquadOverview.prototype._initTabViews = function _initTabViews() {
    this._leftDock = new views.squads.SlotDock, this._rightDock = new views.squads.SlotDock, this._leftTab = new views.buttons.SquadTabButton, this._rightTab = new views.buttons.SquadTabButton, this._leftTab.init(), this._rightTab.init(), this._leftDock.init(), this._rightDock.init(), this._leftTab.addTarget(this, this._onDockBtnPressed.bind(this, this._leftDock, this._leftTab, this._dropAreas.LEFT_DOCK, this._rightDock), enums.Event.TAP), this._rightTab.addTarget(this, this._onDockBtnPressed.bind(this, this._rightDock, this._rightTab, this._dropAreas.RIGHT_DOCK, this._leftDock), enums.Event.TAP), this._leftTab.setText(gLocalization.lText("extendedPlayerInfo.sub")), this._leftTab.assignLeft(), this._rightTab.setText(gLocalization.lText("extendedPlayerInfo.res")), this._rightTab.assignRight(), this._leftTab.setType(enums.UISquadTabTypes.DOCK_TAB), this._rightTab.setType(enums.UISquadTabTypes.DOCK_TAB), this._setDockLocalization(), this.addSubview(this._leftTab, this.$_draggableArea), this.addSubview(this._rightTab, this.$_draggableArea), this.addSubview(this._leftDock, this.$_draggableArea), this.addSubview(this._rightDock, this.$_draggableArea), this.layoutSubviews()
}, views.squads.SquadOverview.prototype.initDragDrop = function initDragDrop(t, i) {
    this._utilDragDrop || (this._utilDragDrop = new utils.DragDrop(this.$_draggableArea)), this._setupDropSlots(t, i), this._setupDropContainers(), this._utilDragDrop.clearListenersByScope(this), this._utilDragDrop.addListener(utils.DragDrop.DRAG.START, this, this._onDragStart), this._utilDragDrop.addListener(utils.DragDrop.DRAG.MOVE, this, this._onDragMove), this._utilDragDrop.addListener(utils.DragDrop.DRAG.DROPPABLE, this, this._onDragDroppable), this._utilDragDrop.addListener(utils.DragDrop.DRAG.END, this, this._onDragEnd), this._utilDragDrop.addListener(utils.DragDrop.DRAG.DROP, this, this._onDragDrop), this._utilDragDrop.enabled ? this._utilDragDrop.updateDropSlotCache() : (this._utilDragDrop.enable(), this._setDockLocalization())
}, views.squads.SquadOverview.prototype._updateDropContainer = function _updateDropContainer(t) {
    this._utilDragDrop && (this._utilDragDrop.setDroppablesContainer(t), this._utilDragDrop.updateCollisionData())
}, views.squads.SquadOverview.prototype._getDropSlotViews = function _getDropSlotViews() {
    var t = this._pitch.getSlotViews();
    return this._leftDock && (t = t.concat(this._leftDock.getSlotViews())), this._rightDock && (t = t.concat(this._rightDock.getSlotViews())), t
}, views.squads.SquadOverview.prototype._setupDropSlots = function _setupDropSlots(t, i) {
    this._getDropSlotViews().forEach(function(view) {
        var root = view.getItemView().getRoot(),
            index = view.getIndex(),
            s = t.indexOf(index) >= 0;
        this._utilDragDrop.setDraggable(root, s), this._utilDragDrop.setDroppable(root, i.indexOf(index) >= 0), this._utilDragDrop.setSwapAnimation(root, s && index < entities.Squad.FIELD_PLAYERS)
    }, this)
}, views.squads.SquadOverview.prototype._setupDropContainers = function _setupDropContainers() {
    this._utilDragDrop.addDropContainer(this._dropAreas.FIELD, this._pitch.getRoot(), !0), this._leftDock && this._utilDragDrop.addDropContainer(this._dropAreas.LEFT_DOCK, this._leftDock.getRoot()), this._rightDock && this._utilDragDrop.addDropContainer(this._dropAreas.RIGHT_DOCK, this._rightDock.getRoot())
}, views.squads.SquadOverview.prototype._updateDockLayers = function _updateDockLayers(t) {
    var i = t.closest(".slotDock").get(0),
        s = this._leftDock ? this._leftDock.getRoot() : null,
        o = this._rightDock ? this._rightDock.getRoot() : null;
    i && s && i === s.get(0) ? (s.css("z-index", 10), o && o.css("z-index", 9)) : i && o && i === o.get(0) && (s && s.css("z-index", 9), o.css("z-index", 10))
}, views.squads.SquadOverview.prototype._onWindowResize = function _onWindowResize(e) {
    this.closeDocks()
}, views.squads.SquadOverview.prototype._onDragStart = function _onDragStart(sender, item) {
    this._triggerActions(enums.UISquadPitchEvent.DRAG_START, {
        item: item.data("info")
    });
    var t = item.parent(),
        i = t.data("view");
    i.addClass("empty"), isPhone() || this.addSlotInteractionState(i.getIndex(), enums.UISlotInteractionState.SELECTED), this._updateDockLayers(t), requestAnimationFrame(function() {
        this._leftTabClientRect = this._leftTab ? this._leftTab.getBoundingClientRect() : null, this._rightTabClientRect = this._rightTab ? this._rightTab.getBoundingClientRect() : null, this._leftDockClientRect = this._leftDock ? this._leftDock.getBoundingClientRect() : null, this._rightDockClientRect = this._rightDock ? this._rightDock.getBoundingClientRect() : null
    }.bind(this))
}, views.squads.SquadOverview.prototype._onDragMove = function _onDragMove(sender, t) {
    function _isColliding(t, b) {
        return !!b && (t.clientY >= b.top && t.clientY <= b.bottom && t.clientX >= b.left && t.clientX <= b.right)
    }

    function _isDockAnimating() {
        return this._leftDock && this._leftDock.isAnimating || this._rightDock && this._rightDock.isAnimating
    }

    function _isDockVisible() {
        return this._leftDock && this._leftDock.isVisible || this._rightDock && this._rightDock.isVisible
    }

    function _calculateLeftDockBounds() {
        this._leftTabClientRect = this._leftTab ? this._leftTab.getBoundingClientRect() : null, this._leftDockClientRect = this._leftDock.getBoundingClientRect(), this._utilDragDrop.updateCollisionData()
    }

    function _calculateRightDockBounds() {
        this._rightTabClientRect = this._rightTab ? this._rightTab.getBoundingClientRect() : null, this._rightDockClientRect = this._rightDock.getBoundingClientRect(), this._utilDragDrop.updateCollisionData()
    }! function _canTriggerDockOpening() {
        return (this._leftDock || this._rightDock) && !_isDockAnimating.call(this) && !_isDockVisible.call(this)
    }.call(this) ? this._leftDockClientRect && this._leftDock.isVisible && !this._leftDock.isAnimating && t.clientY < this._leftDockClientRect.top ? this._closeLeftDock(_calculateLeftDockBounds.bind(this)) : this._rightDockClientRect && this._rightDock.isVisible && !this._rightDock.isAnimating && t.clientY < this._rightDockClientRect.top && this._closeRightDock(_calculateRightDockBounds.bind(this)) : this._leftDock && _isColliding.call(this, t, this._leftTabClientRect) ? this._openLeftDock(_calculateLeftDockBounds.bind(this)) : this._rightDock && _isColliding.call(this, t, this._rightTabClientRect) && this._openRightDock(_calculateRightDockBounds.bind(this))
}, views.squads.SquadOverview.prototype._onDragDroppable = function _onDragDroppable(sender, data) {
    var t = data.dragging.data("info"),
        i = data.target.data("info");
    utils.JS.isValid(this._hoverCallback) && utils.JS.isValid(t) && utils.JS.isValid(i) && this._hoverCallback(t, i)
}, views.squads.SquadOverview.prototype._onDragEnd = function _onDragEnd(sender, item) {
    var t = item.parent(),
        i = item.data("info");
    sender.moved ? (this.setInteractionState(!1), utils.JS.isValid(i) && this._triggerActions(enums.UISquadPitchEvent.DRAG_END, {
        item: i
    }), item.stop().animate({
        top: t.offset().top,
        left: t.offset().left
    }, {
        duration: this._animationDuration,
        queue: !1,
        complete: function() {
            this._onDragReset(item)
        }.bind(this)
    })) : this._onDragReset(item)
}, views.squads.SquadOverview.prototype._onDragDrop = function _onDragDrop(sender, data) {
    this.setInteractionState(!1), this.clearSlotInteractionState(enums.UISlotInteractionState.SELECTED), this._swapElements(data.dragging, data.target), this._utilDragDrop.updateDropSlotCache()
}, views.squads.SquadOverview.prototype._onDragReset = function _onDragReset(item) {
    item.parent().removeClass("empty"), this._utilDragDrop.resetDrag(), utils.JS.isValid(this._rightDock) && this._rightDock.isVisible ? this._updateDropContainer(this._dropAreas.RIGHT_DOCK) : utils.JS.isValid(this._leftDock) && this._leftDock.isVisible && this._updateDropContainer(this._dropAreas.LEFT_DOCK), this.setInteractionState(!0)
}, views.squads.SquadOverview.prototype._swapElements = function _swapElements(t, target) {
    var i = t.parent(),
        s = target.parent(),
        o = target.offset(),
        l = target.data("info");
    if (utils.JS.isValid(l)) {
        l.isValid() && target.addClass("dropTarget").css({
            left: o.left,
            top: o.top
        }), s.addClass("empty"), i.append(target), s.append(t), t.stop().animate({
            top: s.offset().top,
            left: s.offset().left
        }, {
            duration: this._animationDuration,
            queue: !1,
            complete: function() {
                this._onDragReset(t)
            }.bind(this)
        }), l.isValid() ? target.stop().animate({
            top: i.offset().top,
            left: i.offset().left
        }, {
            duration: this._animationDuration,
            queue: !1,
            complete: function() {
                target.removeClass("dropTarget").removeAttr("style"), i.removeClass("empty")
            }
        }) : i.removeClass("empty");
        var u = i.data("view"),
            h = s.data("view"),
            p = u.getItemView();
        u.setItemView(h.getItemView()), h.setItemView(p), this._triggerActions(enums.UISquadPitchEvent.ITEM_SWAP, {
            swapFrom: u.getIndex(),
            swapTo: h.getIndex()
        })
    } else utils.Debug.Assert(!1, "Variable targetData undefined.")
}, views.squads.SquadOverview.prototype.closeDocks = function closeDocks(t) {
    this._closeLeftDock(t), this._closeRightDock(t)
}, views.squads.SquadOverview.prototype._onDockBtnPressed = function _onDockBtnPressed(t, i, s, o) {
    utils.Debug.Assert(utils.JS.isValid(t), "variable 'dock' must be valid"), utils.Debug.Assert(utils.JS.isValid(i), "variable 'dockTab' must be valid"), utils.JS.isValid(o) && (o.isVisible || o.isAnimating) || (t.isVisible ? this._closeDock(t, i) : this._openDock(t, i, s))
}, views.squads.SquadOverview.prototype._closeDock = function _closeDock(t, i, s) {
    utils.Debug.Assert(utils.JS.isValid(t), "variable 'dock' must be valid"), utils.Debug.Assert(utils.JS.isValid(i), "variable 'dockTab' must be valid"), t.isVisible && !t.isAnimating && (i.getRoot().css("bottom", -5), i.setArrowDirection(enums.UIDirection.UP), this._updateDropContainer(this._dropAreas.FIELD), t.close(s))
}, views.squads.SquadOverview.prototype._openDock = function _openDock(t, i, s, o) {
    utils.Debug.Assert(utils.JS.isValid(t), "variable 'dock' must be valid"), utils.Debug.Assert(utils.JS.isValid(i), "variable 'dockTab' must be valid"), t.isVisible || t.isAnimating || (i.setArrowDirection(enums.UIDirection.DOWN), i.getRoot().css("bottom", t.getContentHeight() - 5), t.open(o), this._updateDropContainer(s))
}, views.squads.SquadOverview.prototype._closeRightDock = function _closeRightDock(t) {
    utils.JS.isValid(this._rightDock) && utils.JS.isValid(this._rightTab) && this._closeDock(this._rightDock, this._rightTab, t)
}, views.squads.SquadOverview.prototype._closeLeftDock = function _closeLeftDock(t) {
    utils.JS.isValid(this._leftDock) && utils.JS.isValid(this._leftTab) && this._closeDock(this._leftDock, this._leftTab, t)
}, views.squads.SquadOverview.prototype._openRightDock = function _openRightDock(t) {
    utils.JS.isValid(this._rightDock) && utils.JS.isValid(this._rightTab) && this._openDock(this._rightDock, this._rightTab, this._dropAreas.RIGHT_DOCK, t)
}, views.squads.SquadOverview.prototype._openLeftDock = function _openLeftDock(t) {
    utils.JS.isValid(this._leftDock) && utils.JS.isValid(this._leftTab) && this._openDock(this._leftDock, this._leftTab, this._dropAreas.LEFT_DOCK, t)
}, views.squads.SquadOverview.prototype.setHoverCallback = function setHoverCallback(t) {
    this._hoverCallback = t
}, views.squads.SquadOverview.prototype.setSwapCallback = function setHoverCallback(t) {
    this._swapCallback = t
}, views.squads.SquadOverview.prototype.getPitch = function getPitch() {
    return this._pitch
}, views.squads.SquadOverview.prototype.getRightTab = function getRightTab() {
    return this._rightTab
}, views.squads.SquadOverview.prototype.getLeftTab = function getLeftTab() {
    return this._leftTab
}, views.squads.SquadOverview.prototype.getRightDock = function getRightDock() {
    return this._rightDock
}, views.squads.SquadOverview.prototype.getLeftDock = function getLeftDock() {
    return this._leftDock
}, views.squads.SquadOverview.prototype._eSlotTapped = function _eSlotTapped(sender, event, data) {
    this.isInteractionEnabled() && this._triggerActions(enums.UISquadPitchEvent.SLOT_SELECT, {
        slot: sender,
        slotIndex: sender.getIndex()
    })
}, views.squads.SquadOverview.prototype._eSlotMouseEnter = function _eSlotMouseEnter(sender, event, data) {
    this.isInteractionEnabled() && this._triggerActions(enums.Event.MOUSEENTER, {
        slot: sender,
        slotIndex: sender.getIndex()
    })
}, views.squads.SquadOverview.prototype._eSlotMouseLeave = function _eSlotMouseLeave(sender, event, data) {
    this.isInteractionEnabled() && this._triggerActions(enums.Event.MOUSELEAVE, {
        slot: sender,
        slotIndex: sender.getIndex()
    })
}, NamespaceManager.Register("views.onboarding"), views.onboarding.StarterSquadOverview = function StarterSquadOverviewView() {
    FUIView.call(this), this._slotSelectHeight = 0, this._generate()
}, utils.JS.inherits(views.onboarding.StarterSquadOverview, FUIView), views.onboarding.StarterSquadOverview.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("OnboardingSquad"), this._squadOverview = new views.squads.SquadOverview, t.appendChild(this._squadOverview.getRootElement()), this.__slotSelectContainer = document.createElement("div"), this.$_slotSelectContainer = $(this.__slotSelectContainer), this.__slotSelectContainer.classList.add("button-container"), this._btnSlotSelect = new views.buttons.DefaultButton, this._btnSlotSelect.getRootElement().classList.add("call-to-action"), this.__slotSelectContainer.appendChild(this._btnSlotSelect.getRootElement()), t.appendChild(this.__slotSelectContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.StarterSquadOverview.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._squadOverview.destroy(), this._squadOverview = null, this.__slotSelectContainer = null, this.$_slotSelectContainer = null, this._btnSlotSelect.destroy(), this._btnSlotSelect = null
}, views.onboarding.StarterSquadOverview.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.StarterSquadOverview.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.StarterSquadOverview.prototype.init = function init() {
    this.superclass(), this._squadOverview.init(), this._btnSlotSelect.init(), this._squadOverview.renderManager = !1, this._btnSlotSelect.setInteractionState(!1), this._btnSlotSelect.setText(gLocalization.lText("common.dialog.continue"))
}, views.onboarding.StarterSquadOverview.prototype.didAddToSuperview = function didAddToSuperview() {
    this.superclass(), this._slotSelectHeight = this.__slotSelectContainer.offsetHeight
}, views.onboarding.StarterSquadOverview.prototype.getSquadOverview = function getSquadOverview() {
    return this._squadOverview
}, views.onboarding.StarterSquadOverview.prototype.getSlotSelectButton = function getSlotSelectButton() {
    return this._btnSlotSelect
}, views.onboarding.StarterSquadOverview.prototype.toggleSlotSelect = function toggleSlotSelect(t) {
    var i = this._squadOverview.getRootElement();
    t ? (this.__slotSelectContainer.style.display = "", i.style.bottom = this._slotSelectHeight) : (this.__slotSelectContainer.style.display = "none", i.style.bottom = 0)
}, NamespaceManager.Register("viewmodels"), viewmodels.OnboardingLoanPlayerSelection = function OnboardingLoanPlayerSelectionViewmodel() {
    FUTObject.call(this), this._items = [], this._positionList = [enums.PlayerPositionsAsInts.ST, enums.PlayerPositionsAsInts.LM, enums.PlayerPositionsAsInts.CM, enums.PlayerPositionsAsInts.RM, enums.PlayerPositionsAsInts.LB, enums.PlayerPositionsAsInts.CB, enums.PlayerPositionsAsInts.RB, enums.PlayerPositionsAsInts.GK]
}, utils.JS.inherits(viewmodels.OnboardingLoanPlayerSelection, FUTObject), viewmodels.OnboardingLoanPlayerSelection.prototype.setItems = function setItems(t) {
    this._items = t
}, viewmodels.OnboardingLoanPlayerSelection.prototype.getPositionFromSlot = function getPositionFromSlot(t) {
    var position = t.getGeneralPosition();
    if (position < 0) {
        var i = repositories.User.getCurrent().getSelectedPersona().id;
        position = this._positionList[(i + t.getIndex()) % this._positionList.length]
    }
    return position
}, viewmodels.OnboardingLoanPlayerSelection.prototype.getLoanerSample = function getLoanerSample(t, i) {
    return 0 === this._items.length ? [] : (t = t < 1 ? 1 : t, this._items.filter(function(item) {
        return item.preferredPosition === i
    }).sort(function(a, b) {
        return utils.JS.sortCompare(a.rating, b.rating, !0)
    }).slice(0, t))
}, NamespaceManager.Register("utils"), utils.FUTLocalization = {}, utils.FUTLocalization.getNationNameById = function(id) {
    return gLocalization.lText("search.nationName.nation" + id)
}, utils.FUTLocalization.getNationAbb3ById = function(id) {
    return gLocalization.lText("nationAbbrvByID_" + id)
}, utils.FUTLocalization.getNationAbb12ById = function(id) {
    return gLocalization.lText("search.nationAbbr12.nation" + id)
}, utils.FUTLocalization.getFormationByName = function(name) {
    return gLocalization.lText("global.formation." + name)
}, utils.FUTLocalization.getPlaystyleByID = function(id, t) {
    return (!t || utils.JS.isNumber(t) && t > enums.Year.ASSET) && (t = enums.Year.ASSET), gLocalization.lText("playstyles." + utils.TextUtils.getYearString(t) + ".playstyle" + id)
}, utils.FUTLocalization.getTeamAbb3ByID = function(id, t) {
    return (!t || utils.JS.isNumber(t) && t > enums.Year.ASSET) && (t = enums.Year.ASSET), gLocalization.lText("global.teamabbr3." + utils.TextUtils.getYearString(t) + ".team" + id)
}, utils.FUTLocalization.getTeamAbb10ByID = function(id, t) {
    return (!t || utils.JS.isNumber(t) && t > enums.Year.ASSET) && (t = enums.Year.ASSET), gLocalization.lText("global.teamabbr10." + utils.TextUtils.getYearString(t) + ".team" + id)
}, utils.FUTLocalization.getTeamAbb15ByID = function(id, t) {
    return (!t || utils.JS.isNumber(t) && t > enums.Year.ASSET) && (t = enums.Year.ASSET), t = utils.JS.isString(t) ? t : utils.TextUtils.getYearString(t), gLocalization.lText("global.teamabbr15." + t + ".team" + id)
}, utils.FUTLocalization.getLeagueAbbr5ByID = function(id, t) {
    return (!t || utils.JS.isNumber(t) && t > enums.Year.ASSET) && (t = enums.Year.ASSET), gLocalization.lText("global.leagueabbr5." + utils.TextUtils.getYearString(t) + ".league" + id)
}, utils.FUTLocalization.getLeagueNameByID = function(id, t) {
    (!t || utils.JS.isNumber(t) && t > enums.Year.ASSET) && (t = enums.Year.ASSET);
    var i = utils.JS.isString(t) ? t : utils.TextUtils.getYearString(t);
    return gLocalization.lText("global.leagueabbr15." + i + ".league" + id)
}, utils.FUTLocalization.getStaffAttribute = function(t, i) {
    var s = "",
        o = ["headcoach.pace", "headcoach.shooting", "headcoach.passing", "headcoach.dribbling", "headcoach.defending", "headcoach.heading"],
        l = ["gkcoach.diving", "gkcoach.handling", "gkcoach.kicking", "gkcoach.reflexes", "gkcoach.speed", "gkcoach.positioning"],
        u = ["physiocoach.head", "physiocoach.shoulder", "physiocoach.arm", "physiocoach.back", "physiocoach.hip", "physiocoach.leg", "physiocoach.foot"];
    switch (t) {
        case enums.ItemType.HEAD_COACH:
            s = gLocalization.lText(o[i]);
            break;
        case enums.ItemType.GK_COACH:
            s = gLocalization.lText(l[i]);
            break;
        case enums.ItemType.PHYSIO:
            s = gLocalization.lText(u[i]);
            break;
        case enums.ItemType.FITNESS_COACH:
            s = gLocalization.lText("fitnesscoach.fitness")
    }
    return s
}, utils.FUTLocalization.convertAttributeIdToHALString = function(index, t) {
    return (t ? ["Diving", "Handling", "Kicking", "Reflex", "Speed", "Position", "All"] : ["Pace", "Shooting", "Passing", "Dribbling", "Defend", "Heading", "All"])[index] || ""
}, utils.FUTLocalization.getStaffAttributeAbbr = function(t, i) {
    var s = "",
        o = ["cards.cardfront.paceAbbr", "cards.cardfront.shootingAbbr", "cards.cardfront.passingAbbr", "cards.cardfront.dribblingAbbr", "cards.cardfront.defendingAbbr", "cards.cardfront.headingAbbr"],
        l = ["cards.cardfront.divingAbbr", "cards.cardfront.handlingAbbr", "cards.cardfront.kickAbbr", "cards.cardfront.reflexAbbr", "cards.cardfront.speedAbbr", "cards.cardfront.positionAbbr"],
        u = ["physiocoach.head.abbr", "physiocoach.shoulder.abbr", "physiocoach.arm.abbr", "physiocoach.back.abbr", "physiocoach.hip.abbr", "physiocoach.leg.abbr", "physiocoach.foot.abbr"];
    switch (t) {
        case enums.ItemType.HEAD_COACH:
            s = gLocalization.lText(o[i]);
            break;
        case enums.ItemType.GK_COACH:
            s = gLocalization.lText(l[i]);
            break;
        case enums.ItemType.PHYSIO:
            s = gLocalization.lText(u[i]);
            break;
        case enums.ItemType.FITNESS_COACH:
            s = gLocalization.lText("fitnesscoach.fitness.abbr")
    }
    return s
}, utils.FUTLocalization.getLocalizedPositionStringByName = function getLocalizedPositionStringByName(name) {
    var position = repositories.Squad.getPositionByUniqueName(name);
    return position ? gLocalization.lText("extendedPlayerInfo.positions.position" + position.getId().toString()) : ""
}, utils.FUTLocalization.getLocalizedPositionStringById = function getLocalizedPositionStringById(id) {
    var position = repositories.Squad.getPosition(id);
    return position ? gLocalization.lText("extendedPlayerInfo.positions.position" + position.getId().toString()) : ""
}, utils.FUTLocalization.convertInjuryTypeToText = function(t) {
    switch (t) {
        case enums.PlayerInjury.NONE:
            return "";
        case enums.PlayerInjury.HEAD:
            return gLocalization.lText("card.desc.healing.2012.head");
        case enums.PlayerInjury.SHOULDER:
            return gLocalization.lText("card.desc.healing.2012.shoulder");
        case enums.PlayerInjury.ARM:
            return gLocalization.lText("card.desc.healing.2012.arm");
        case enums.PlayerInjury.BACK:
            return gLocalization.lText("card.desc.healing.2012.back");
        case enums.PlayerInjury.HIP:
            return gLocalization.lText("card.desc.healing.2012.hip");
        case enums.PlayerInjury.LEG:
            return gLocalization.lText("card.desc.healing.2012.leg");
        case enums.PlayerInjury.FOOT:
            return gLocalization.lText("card.desc.healing.2012.foot")
    }
    return utils.Debug.Assert(!1, "[FUT Localization - convertInjuryTypeToText] - invalid injuryType: " + t), ""
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.StarterSquadOverview = function StarterSquadOverviewViewController() {
    FUIViewController.call(this), this._squad = null, this._selectedIndex = -1, this._mobileInfoDisplayed = !1
}, utils.JS.inherits(controllers.onboarding.StarterSquadOverview, FUIViewController), controllers.onboarding.StarterSquadOverview.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this.getView().getSlotSelectButton().addTarget(this, this._eSlotSelected, enums.Event.TAP);
        var page = "Onboarding - Squad";
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: page
        })), TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, page)
    }
}, controllers.onboarding.StarterSquadOverview.prototype.initWithSquad = function initWithSquad(t) {
    this.initialized || (utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity."), this._squad = t, this._squad.onDataUpdated.observe(this, this._eSquadUpdated), this.init())
}, controllers.onboarding.StarterSquadOverview.prototype.dealloc = function dealloc() {
    this._squad && this._squad.onDataUpdated.unobserve(this), this.superclass(), this._squad = null
}, controllers.onboarding.StarterSquadOverview.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.StarterSquadOverview
}, controllers.onboarding.StarterSquadOverview.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("onboarding.complete.teamtitle")
}, controllers.onboarding.StarterSquadOverview.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), utils.Debug.Assert(this._squad instanceof entities.Squad, "View appearing on screen without a squad to display.");
    var t = this.getNavigationController();
    if (t && t.conforms(controllers.navigation.Onboarding) && (t.setNavigationStyle(enums.UINavigationBarStyle.DEFAULT), t.setToolbarVisibility(!1, !1), t.setCurrentStep(enums.UIOnboardingStep.LOANER)), this._squad) {
        var i = this.getView().getSquadOverview();
        i.setSquad(this._squad), i.addTarget(this, this._eItemTap, enums.UISquadPitchEvent.SLOT_SELECT), gHeader.setTitle(this._squad.getName())
    }
    isPhone() && !this._mobileInfoDisplayed && (this._mobileInfoDisplayed = !0, setTimeout(function() {
        utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ONBOARDING_INTRO)
    }, 1e3))
}, controllers.onboarding.StarterSquadOverview.prototype.setSlot = function setSlot(index) {
    if (this._selectedIndex = index, this._squad) {
        var view = this.getView(),
            t = view.getSlotSelectButton(),
            i = "";
        index < entities.Squad.FIELD_PLAYERS ? i = utils.FUTLocalization.getLocalizedPositionStringById(this._squad.getSlot(index).getGeneralPosition()) : index < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS ? i = gLocalization.lText("dock.label.substitutes") : index < entities.Squad.MANAGER_SLOT_INDEX && (i = gLocalization.lText("dock.label.reserves")), t.setText(gLocalization.lPrint("swap.withposition", [i])), t.setInteractionState(!0), view.getSquadOverview().addSlotInteractionState(index, enums.UISlotInteractionState.SELECTED)
    }
}, controllers.onboarding.StarterSquadOverview.prototype.nextSlot = function nextSlot() {
    this.setSlot(this._selectedIndex + 1)
}, controllers.onboarding.StarterSquadOverview.prototype.prevSlot = function prevSlot() {
    this.setSlot(this._selectedIndex - 1)
}, controllers.onboarding.StarterSquadOverview.prototype._loadLoanPlayers = function _loadLoanPlayers() {
    var view = this.getView(),
        t = this._squad.getSlot(this._selectedIndex);
    view.setInteractionState(!1), gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Onboarding.getLoanPlayers().observe(this, function _gotoLoanSelector(i, response) {
        if (i.unobserve(this), response.success) {
            var s = new controllers.onboarding.LoanSelector,
                o = new viewmodels.OnboardingLoanPlayerSelection;
            o.setItems(response.data.items), s.initWithItems(o.getLoanerSample(5, o.getPositionFromSlot(t)), t.getItem()), s.setSquadViewDelegate(view.getSquadOverview()), this._squad && s.setSquad(this._squad);
            var l = this.getNavigationController();
            l && (l.pushViewController(s), view.getSlotSelectButton().setInteractionState(!1))
        } else view.setInteractionState(!0);
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    })
}, controllers.onboarding.StarterSquadOverview.prototype._eSquadUpdated = function _eSquadUpdated(t, data) {
    var view = this.getView(),
        button = view.getSlotSelectButton();
    view.getSquadOverview().setSquad(this._squad), button.setText(gLocalization.lText("common.dialog.continue")), button.removeTarget(this, this._eSlotSelected, enums.Event.TAP), button.addTarget(this, this._eContinue, enums.Event.TAP), button.setInteractionState(!0)
}, controllers.onboarding.StarterSquadOverview.prototype._eItemTap = function _eItemTap(sender, event, data) {
    var parent = this.getParentViewController(),
        index = data && utils.JS.isNumber(data.slotIndex) ? data.slotIndex : 0;
    index >= entities.Squad.MANAGER_SLOT_INDEX - 2 || (this.setSlot(index), parent && parent.conforms(interfaces.SlotIterationDelegate) && parent.setSlot(this, index))
}, controllers.onboarding.StarterSquadOverview.prototype._eSlotSelected = function _eSlotSelected(sender, event, data) {
    this._loadLoanPlayers()
}, controllers.onboarding.StarterSquadOverview.prototype._eContinue = function _eContinue(sender, event, data) {
    var t = this.getNavigationController();
    if (t) {
        var i = new controllers.onboarding.KitSelect;
        i.init(), t.pushViewController(i, !0)
    }
}, NamespaceManager.Register("models"), models.ViewPreferencesModel = function(t) {
    utils.EventDispatcher.call(this), this._viewMode = t
}, utils.JS.inherits(models.ViewPreferencesModel, utils.EventDispatcher), models.ViewPreferencesModel.prototype.getViewMode = function() {
    return this._viewMode
}, models.ViewPreferencesModel.prototype.setViewMode = function(t) {
    return this._viewMode !== t && (this._viewMode = t, this.dispatch(models.ViewPreferencesModel.VIEW_MODE_CHANGED), !0)
}, models.ViewPreferencesModel.VIEW_MODE = {
    MAIN: ".mainView",
    BIO: ".bioView",
    STATS: ".statsView",
    STYLE: ".styleView",
    NAME: ".nameView",
    INFO: ".infoView",
    CLUB: ".clubView",
    DEBUG: ".debugView"
}, models.ViewPreferencesModel.VIEW_MODE_CHANGED = "models.ViewPreferencesModel.VIEW_MODE_CHANGED";
var gViewPreferencesModel = new models.ViewPreferencesModel(models.ViewPreferencesModel.VIEW_MODE.MAIN);
components.ItemFUTBase = function ItemFUTBaseView() {
    FUIView.call(this), this._renderConcept = !0, this._rendered = !1
}, utils.JS.inherits(components.ItemFUTBase, FUIView), components.ItemFUTBase.CLASS = {
    ACTIVE_CLUB_ITEM: "activeItem",
    CONTRACT_EXPIRED: "restricted-contract",
    INJURED: "restricted-injured",
    SUSPENDED: "restricted-suspended",
    DYNAMIC_PORTRAIT: "dynamic-portrait",
    CONCEPT: "concept",
    EMPTY: "empty",
    LOAN: "loan",
    CHEM_BONUS: "hasBonus",
    INVALID_STAT: "invalidStat",
    PLAYSTYLE: "playStyle",
    PLAYEROUT: "playerOut",
    AUCTION_WINNING: "winning",
    AUCTION_WON: "won",
    AUCTION_EXPIRED: "expired",
    AUCTION_OUTBID: "outbid"
}, components.ItemFUTBase.QUALITY = {
    BRONZE: "bronze",
    SILVER: "silver",
    GOLD: "gold"
}, components.ItemFUTBase.SHELL_TYPE_LOOKUP = [{
    key: enums.ItemRareType.NONE,
    value: "common"
}, {
    key: enums.ItemRareType.RARE,
    value: "rare"
}, {
    key: enums.ItemRareType.TOTW,
    value: "TOTW"
}, {
    key: enums.ItemRareType.PURPLE,
    value: "purple"
}, {
    key: enums.ItemRareType.TOTY,
    value: "TOTY"
}, {
    key: enums.ItemRareType.RB,
    value: "recordbreaker"
}, {
    key: enums.ItemRareType.GREEN,
    value: "green"
}, {
    key: enums.ItemRareType.ORANGE,
    value: "orange"
}, {
    key: enums.ItemRareType.PINK,
    value: "pink"
}, {
    key: enums.ItemRareType.TEAL,
    value: "teal"
}, {
    key: enums.ItemRareType.TOTS,
    value: "TOTS"
}, {
    key: enums.ItemRareType.LEGEND,
    value: "legend"
}, {
    key: enums.ItemRareType.UNICEF,
    value: "unicef"
}, {
    key: enums.ItemRareType.FUTTY,
    value: "futty"
}, {
    key: enums.ItemRareType.STORYMODE,
    value: "storymode"
}, {
    key: enums.ItemRareType.CHAMPION,
    value: "champion"
}, {
    key: enums.ItemRareType.CMOTM,
    value: "CMOTM"
}, {
    key: enums.ItemRareType.IMOTM,
    value: "IMOTM"
}, {
    key: enums.ItemRareType.OTW,
    value: "OTW"
}, {
    key: enums.ItemRareType.HALLOWEEN,
    value: "halloween"
}, {
    key: enums.ItemRareType.MOVEMBER,
    value: "movember"
}, {
    key: enums.ItemRareType.SBC,
    value: "SBC"
}, {
    key: enums.ItemRareType.SBCP,
    value: "SBCP"
}, {
    key: enums.ItemRareType.PROMOA,
    value: "PROMOA"
}, {
    key: enums.ItemRareType.PROMOB,
    value: "PROMOB"
}, {
    key: enums.ItemRareType.AWARD,
    value: "award"
}, {
    key: enums.ItemRareType.BDAY,
    value: "birthday"
}, {
    key: enums.ItemRareType.UNITED,
    value: "united"
}, {
    key: enums.ItemRareType.FUTMAS,
    value: "FUTMAS"
}, {
    key: enums.ItemRareType.RTRC,
    value: "rtrc"
}, {
    key: enums.ItemRareType.PTGS,
    value: "ptgs"
}, {
    key: enums.ItemRareType.FOF,
    value: "FOF"
}, {
    key: enums.ItemRareType.MARQUEE,
    value: "marquee"
}, {
    key: enums.ItemRareType.CHAMPIONSHIP,
    value: "championship"
}, {
    key: enums.ItemRareType.EUMOTM,
    value: "eumotm"
}, {
    key: enums.ItemRareType.TOTT,
    value: "TOTT"
}, {
    key: enums.ItemRareType.RRC,
    value: "RRC"
}, {
    key: enums.ItemRareType.RRR,
    value: "RRR"
}], components.ItemFUTBase.prototype.renderConcept = function renderConcept(t) {
    this._renderConcept = t
}, components.ItemFUTBase.onFlagImageLoad = function onFlagImageLoad(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.FLAG + ".png"))
}, components.ItemFUTBase.prototype.displayModeChanged = function displayModeChanged(sender) {
    utils.Debug.Assert(!1, "[components.ItemFUTBase] Abstract method displayModeChanged not implemented.")
}, components.ItemFUTBase.prototype.getDisplayMode = function getDisplayMode() {
    return gViewPreferencesModel.getViewMode()
}, components.ItemFUTBase.prototype.setDisplayMode = function setDisplayMode(mode) {
    gViewPreferencesModel.setViewMode(mode) || this.displayModeChanged()
}, components.ItemFUTBase.prototype.loopDisplayMode = function loopDisplayMode() {
    utils.Debug.Assert(!1, "[components.ItemFUTBase] Abstract method loopDisplayMode not implemented.")
}, components.ItemFUTBase.prototype.render = function render(item) {
    this._rendered && this._resetRender(), this._renderShell(item), this._render(item), this.renderAuctionState(item.getAuctionData()), this._rendered = !0, this.getRootElement().setAttribute("data-asset-year", item.resourceGameYear)
}, components.ItemFUTBase.prototype._resetRender = function _resetRender() {}, components.ItemFUTBase.prototype.canRender = function canRender(item) {
    return utils.Debug.Assert(!1, "[components.ItemFUTBase] Abstract method canRender not implemented."), !1
}, components.ItemFUTBase.prototype._render = function _render(item) {
    utils.Debug.Assert(!1, "[components.ItemFUTBase] Abstract method _render not implemented.")
}, components.ItemFUTBase.prototype._renderShell = function _renderShell(item) {
    if (this._rendered) {
        var t = [components.ItemFUTBase.QUALITY.BRONZE, components.ItemFUTBase.QUALITY.SILVER, components.ItemFUTBase.QUALITY.GOLD],
            i = components.ItemFUTBase.SHELL_TYPE_LOOKUP.map(function(type) {
                return type.value
            }),
            s = t.concat(i, components.ItemFUTBase.CLASS.CONCEPT, components.ItemFUTBase.CLASS.EMPTY).join(" ");
        this.removeClass(s)
    }
    item.isValid() ? this._renderConcept && item.concept ? this.addClass(components.ItemFUTBase.CLASS.CONCEPT) : (this.toggleClass(components.ItemFUTBase.CLASS.ACTIVE_CLUB_ITEM, item.isActiveClubItem()), this.addClass(this._getShellType(item)), this.addClass(this._getTier(item))) : this.addClass(components.ItemFUTBase.CLASS.EMPTY)
}, components.ItemFUTBase.prototype._getShellType = function _getShellType(item) {
    return utils.JS.find(components.ItemFUTBase.SHELL_TYPE_LOOKUP, function(type) {
        return type.key === item.rareflag
    }).value
}, components.ItemFUTBase.prototype._getTier = function _getTier(item) {
    var t = "";
    return item.hasQualityTiers() && (t = item.isBronzeRating() ? components.ItemFUTBase.QUALITY.BRONZE : item.isSilverRating() ? components.ItemFUTBase.QUALITY.SILVER : components.ItemFUTBase.QUALITY.GOLD), t
}, components.ItemFUTBase.prototype.renderAuctionState = function renderAuctionState(t) {
    if (this._rendered) {
        var i = [components.ItemFUTBase.CLASS.AUCTION_WON, components.ItemFUTBase.CLASS.AUCTION_WINNING, components.ItemFUTBase.CLASS.AUCTION_EXPIRED, components.ItemFUTBase.CLASS.AUCTION_OUTBID].join(" ");
        this.removeClass(i)
    }
    t.isValid() && (t.isWon() ? this.addClass(components.ItemFUTBase.CLASS.AUCTION_WON) : t.isHighestBid() || t.isBought() || t.isSold() ? this.addClass(components.ItemFUTBase.CLASS.AUCTION_WINNING) : t.isActiveTrade() && t.isOutbid() ? this.addClass(components.ItemFUTBase.CLASS.AUCTION_OUTBID) : (t.isClosedTrade() || t.isExpired()) && this.addClass(components.ItemFUTBase.CLASS.AUCTION_EXPIRED))
}, components.ItemFUTBase.prototype.renderChemistry = function renderChemistry(item, t, i) {}, components.ItemFUTBase.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), this.loopDisplayMode()
}, components.ItemPlayerBase = function ItemPlayerBaseView() {
    components.ItemFUTBase.call(this), this._renderedYear = enums.Year.ASSET
}, utils.JS.inherits(components.ItemPlayerBase, components.ItemFUTBase), components.ItemPlayerBase.onImageLoad = function onImageLoad(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.PLAYER + ".png"))
}, components.ItemPlayerBase.prototype._render = function _render(item) {
    if (item.isValid()) {
        var t = item.getStaticData();
        if (item.concept || (!item.isContractExpired() || item.getAuctionData().isSold() || item.isLoaned() ? item.isSuspended() ? this.addClass(components.ItemFUTBase.CLASS.SUSPENDED) : item.isInjured() && this.addClass(components.ItemFUTBase.CLASS.INJURED) : this.addClass(components.ItemFUTBase.CLASS.CONTRACT_EXPIRED)), item.hasTraining()) {
            var i;
            i = item.getBoostLevel() === enums.ItemRatingTier.GOLD ? components.ItemFUTBase.QUALITY.GOLD : item.getBoostLevel() === enums.ItemRatingTier.SILVER ? components.ItemFUTBase.QUALITY.SILVER : components.ItemFUTBase.QUALITY.BRONZE, this.$_trainingBoost.addClass(i)
        }
        this.toggleClass(components.ItemFUTBase.CLASS.LOAN, item.isLoaned()), !item.isLoaned() || item.isSuspended() || item.isInjured() || this.$_infoTab.text(item.contract.toString()), this.$_playerRating.html(item.rating.toString());
        var position = utils.FUTLocalization.getLocalizedPositionStringById(item.preferredPosition);
        this.$_playerPosition.html(position);
        var s = item.getMaskedResourceId(),
            o = item.getYear();
        entities.Item.isAlex(s) ? s = ALEX_HUNTER_PLACEHOLDER_ASSET_ID : entities.Item.isDanny(s) ? s = DANNY_WILLIAMS_PLACEHOLDER_ASSET_ID : utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.PLAYERS, s, o) && (s = enums.PlaceholderAssetId.PLAYER);
        var l = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PORTRAIT, o, s);
        if (t.dynamicPortrait) {
            var u = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_DYNAMIC_PORTRAIT, o, item.getDefId());
            this._mainImage.setResource(u, !0).observe(this, function onDynamicPortraitLoad(t, i, s, path) {
                t.unobserve(this), i ? this._mainImage.addClass(components.ItemFUTBase.CLASS.DYNAMIC_PORTRAIT) : this._mainImage.setResource(l, !0).observe(this._mainImage, components.ItemPlayerBase.onImageLoad)
            })
        } else this._mainImage.setResource(l, !0).observe(this._mainImage, components.ItemPlayerBase.onImageLoad);
        this.setYear(item.getYear()), this.setFlag(item);
        var h = "";
        this._useDarkCrest(item) ? (h = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, o, item.teamId), utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.CREST, item.teamId.toString(), o, enums.PlaceholderAssetKey.CREST_DARK) && (h = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, o, enums.PlaceholderAssetId.TEAM))) : (h = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, o, item.teamId), utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.CREST, item.teamId.toString(), o, enums.PlaceholderAssetKey.CREST_LIGHT) && (h = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, o, enums.PlaceholderAssetId.TEAM))), this._badgeImage.setResource(h, !0).observe(this._badgeImage, components.ItemBadgeBase.onImageLoad)
    }
}, components.ItemPlayerBase.prototype.canRender = function canRender(item) {
    return item.isPlayer() && !item.isCustomBrick() && this._renderedYear === item.getYear()
}, components.ItemPlayerBase.prototype.setFlag = function setFlag(item) {
    var t = item.getYear(),
        i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, t, item.nationId);
    this._flagImage.setResource(i, !0).observe(this._flagImage, components.ItemFUTBase.onFlagImageLoad)
}, components.ItemPlayerBase.prototype.setYear = function setYear(t) {
    this._renderedYear = t
}, components.ItemPlayerBase.prototype._useDarkCrest = function _useDarkCrest(item) {
    return item.rareflag === enums.ItemRareType.TOTY || item.rareflag === enums.ItemRareType.TOTS || item.rareflag === enums.ItemRareType.PURPLE
}, components.ItemPlayerBase.prototype._resetRender = function _resetRender() {
    DOMKit.removeClass(this.__trainingBoost, [components.ItemFUTBase.QUALITY.GOLD, components.ItemFUTBase.QUALITY.SILVER, components.ItemFUTBase.QUALITY.BRONZE].join(" ")), this.removeClass([components.ItemFUTBase.CLASS.CONTRACT_EXPIRED, components.ItemFUTBase.CLASS.SUSPENDED, components.ItemFUTBase.CLASS.INJURED].join(" ")), this.removeClass(components.ItemFUTBase.CLASS.LOAN), this.__infoTab.textContent = "", this._mainImage.removeClass(components.ItemFUTBase.CLASS.DYNAMIC_PORTRAIT)
}, components.ItemPlayerLarge = function ItemPlayerLargeView() {
    components.ItemPlayerBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemPlayerLarge, components.ItemPlayerBase), components.ItemPlayerLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("player"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var s = document.createElement("div");
        s.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), s.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), s.appendChild(this.__playerPosition), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__playerName = document.createElement("div"), this.$_playerName = $(this.__playerName), this.__playerName.classList.add("name"), t.appendChild(this.__playerName);
        var o = document.createElement("div");
        o.classList.add("mainView");
        var l = document.createElement("div");
        l.classList.add("statCellRow");
        var u = document.createElement("div");
        u.classList.add("statCell");
        var h = document.createElement("span");
        h.classList.add("Pace"), h.classList.add("statValue"), u.appendChild(h), this.__attribute0 = document.createElement("span"), this.$_attribute0 = $(this.__attribute0), this.__attribute0.classList.add("Pace"), this.__attribute0.classList.add("statLabel"), u.appendChild(this.__attribute0), l.appendChild(u);
        var p = document.createElement("div");
        p.classList.add("statCell");
        var m = document.createElement("span");
        m.classList.add("Dribbling"), m.classList.add("statValue"), p.appendChild(m), this.__attribute3 = document.createElement("span"), this.$_attribute3 = $(this.__attribute3), this.__attribute3.classList.add("Dribbling"), this.__attribute3.classList.add("statLabel"), p.appendChild(this.__attribute3), l.appendChild(p), o.appendChild(l);
        var _ = document.createElement("div");
        _.classList.add("statCellRow");
        var g = document.createElement("div");
        g.classList.add("statCell");
        var S = document.createElement("span");
        S.classList.add("Shooting"), S.classList.add("statValue"), g.appendChild(S), this.__attribute1 = document.createElement("span"), this.$_attribute1 = $(this.__attribute1), this.__attribute1.classList.add("Shooting"), this.__attribute1.classList.add("statLabel"), g.appendChild(this.__attribute1), _.appendChild(g);
        var v = document.createElement("div");
        v.classList.add("statCell");
        var T = document.createElement("span");
        T.classList.add("Defending"), T.classList.add("statValue"), v.appendChild(T), this.__attribute4 = document.createElement("span"), this.$_attribute4 = $(this.__attribute4), this.__attribute4.classList.add("Defending"), this.__attribute4.classList.add("statLabel"), v.appendChild(this.__attribute4), _.appendChild(v), o.appendChild(_);
        var C = document.createElement("div");
        C.classList.add("statCellRow");
        var I = document.createElement("div");
        I.classList.add("statCell");
        var L = document.createElement("span");
        L.classList.add("Passing"), L.classList.add("statValue"), I.appendChild(L), this.__attribute2 = document.createElement("span"), this.$_attribute2 = $(this.__attribute2), this.__attribute2.classList.add("Passing"), this.__attribute2.classList.add("statLabel"), I.appendChild(this.__attribute2), C.appendChild(I);
        var A = document.createElement("div");
        A.classList.add("statCell");
        var R = document.createElement("span");
        R.classList.add("Header"), R.classList.add("statValue"), A.appendChild(R), this.__attribute5 = document.createElement("span"), this.$_attribute5 = $(this.__attribute5), this.__attribute5.classList.add("Header"), this.__attribute5.classList.add("statLabel"), A.appendChild(this.__attribute5), C.appendChild(A), o.appendChild(C), this.__mainViewPlayStyle = document.createElement("div"), this.$_mainViewPlayStyle = $(this.__mainViewPlayStyle), this.__mainViewPlayStyle.classList.add("playStyle"), this.__mainViewPlayStyleText = document.createElement("span"), this.$_mainViewPlayStyleText = $(this.__mainViewPlayStyleText), this.__mainViewPlayStyle.appendChild(this.__mainViewPlayStyleText), o.appendChild(this.__mainViewPlayStyle), t.appendChild(o);
        var D = document.createElement("div");
        D.classList.add("statsView"), this.__statsRowContract = document.createElement("div"), this.$_statsRowContract = $(this.__statsRowContract), this.__statsRowContract.classList.add("statsRow"), this.__playerContractLabel = document.createElement("span"), this.$_playerContractLabel = $(this.__playerContractLabel), this.__playerContractLabel.classList.add("Contract"), this.__playerContractLabel.classList.add("statLabel"), this.__statsRowContract.appendChild(this.__playerContractLabel), this.__playerContract = document.createElement("span"), this.$_playerContract = $(this.__playerContract), this.__playerContract.classList.add("Contract"), this.__playerContract.classList.add("statValue"), this.__statsRowContract.appendChild(this.__playerContract), D.appendChild(this.__statsRowContract), this.__statsRowFitness = document.createElement("div"), this.$_statsRowFitness = $(this.__statsRowFitness), this.__statsRowFitness.classList.add("statsRow"), this.__playerFitnessLabel = document.createElement("span"), this.$_playerFitnessLabel = $(this.__playerFitnessLabel), this.__playerFitnessLabel.classList.add("Fitness"), this.__playerFitnessLabel.classList.add("statLabel"), this.__statsRowFitness.appendChild(this.__playerFitnessLabel), this.__playerFitness = document.createElement("span"), this.$_playerFitness = $(this.__playerFitness), this.__playerFitness.classList.add("Fitness"), this.__playerFitness.classList.add("statValue"), this.__statsRowFitness.appendChild(this.__playerFitness), D.appendChild(this.__statsRowFitness), this.__statsViewPlayStyle = document.createElement("div"), this.$_statsViewPlayStyle = $(this.__statsViewPlayStyle), this.__statsViewPlayStyle.classList.add("playStyle"), this.__statsViewPlayStyleText = document.createElement("span"), this.$_statsViewPlayStyleText = $(this.__statsViewPlayStyleText), this.__statsViewPlayStyle.appendChild(this.__statsViewPlayStyleText), D.appendChild(this.__statsViewPlayStyle), t.appendChild(D);
        var P = document.createElement("div");
        P.classList.add("styleView");
        var N = document.createElement("div");
        N.classList.add("statCellRow");
        var O = document.createElement("div");
        O.classList.add("statCell"), this.__chevronSet1 = document.createElement("div"), this.$_chevronSet1 = $(this.__chevronSet1), this.__chevronSet1.classList.add("chevrons");
        var B = document.createElement("div");
        B.classList.add("chevron1"), this.__chevronSet1.appendChild(B);
        var U = document.createElement("div");
        U.classList.add("chevron2"), this.__chevronSet1.appendChild(U);
        var M = document.createElement("div");
        M.classList.add("chevron3"), this.__chevronSet1.appendChild(M), O.appendChild(this.__chevronSet1);
        var F = document.createElement("span");
        F.classList.add("Pace"), F.classList.add("statLabel"), O.appendChild(F), N.appendChild(O);
        var q = document.createElement("div");
        q.classList.add("statCell"), this.__chevronSet4 = document.createElement("div"), this.$_chevronSet4 = $(this.__chevronSet4), this.__chevronSet4.classList.add("chevrons");
        var k = document.createElement("div");
        k.classList.add("chevron1"), this.__chevronSet4.appendChild(k);
        var V = document.createElement("div");
        V.classList.add("chevron2"), this.__chevronSet4.appendChild(V);
        var G = document.createElement("div");
        G.classList.add("chevron3"), this.__chevronSet4.appendChild(G), q.appendChild(this.__chevronSet4);
        var H = document.createElement("span");
        H.classList.add("Dribbling"), H.classList.add("statLabel"), q.appendChild(H), N.appendChild(q), P.appendChild(N);
        var j = document.createElement("div");
        j.classList.add("statCellRow");
        var Y = document.createElement("div");
        Y.classList.add("statCell"), this.__chevronSet2 = document.createElement("div"), this.$_chevronSet2 = $(this.__chevronSet2), this.__chevronSet2.classList.add("chevrons");
        var K = document.createElement("div");
        K.classList.add("chevron1"), this.__chevronSet2.appendChild(K);
        var W = document.createElement("div");
        W.classList.add("chevron2"), this.__chevronSet2.appendChild(W);
        var J = document.createElement("div");
        J.classList.add("chevron3"), this.__chevronSet2.appendChild(J), Y.appendChild(this.__chevronSet2);
        var X = document.createElement("span");
        X.classList.add("Shooting"), X.classList.add("statLabel"), Y.appendChild(X), j.appendChild(Y);
        var Z = document.createElement("div");
        Z.classList.add("statCell"), this.__chevronSet5 = document.createElement("div"), this.$_chevronSet5 = $(this.__chevronSet5), this.__chevronSet5.classList.add("chevrons");
        var ee = document.createElement("div");
        ee.classList.add("chevron1"), this.__chevronSet5.appendChild(ee);
        var te = document.createElement("div");
        te.classList.add("chevron2"), this.__chevronSet5.appendChild(te);
        var ie = document.createElement("div");
        ie.classList.add("chevron3"), this.__chevronSet5.appendChild(ie), Z.appendChild(this.__chevronSet5);
        var se = document.createElement("span");
        se.classList.add("Defending"), se.classList.add("statLabel"), Z.appendChild(se), j.appendChild(Z), P.appendChild(j);
        var ne = document.createElement("div");
        ne.classList.add("statCellRow");
        var oe = document.createElement("div");
        oe.classList.add("statCell"), this.__chevronSet3 = document.createElement("div"), this.$_chevronSet3 = $(this.__chevronSet3), this.__chevronSet3.classList.add("chevrons");
        var ae = document.createElement("div");
        ae.classList.add("chevron1"), this.__chevronSet3.appendChild(ae);
        var re = document.createElement("div");
        re.classList.add("chevron2"), this.__chevronSet3.appendChild(re);
        var le = document.createElement("div");
        le.classList.add("chevron3"), this.__chevronSet3.appendChild(le), oe.appendChild(this.__chevronSet3);
        var ce = document.createElement("span");
        ce.classList.add("Passing"), ce.classList.add("statLabel"), oe.appendChild(ce), ne.appendChild(oe);
        var ue = document.createElement("div");
        ue.classList.add("statCell"), this.__chevronSet6 = document.createElement("div"), this.$_chevronSet6 = $(this.__chevronSet6), this.__chevronSet6.classList.add("chevrons");
        var de = document.createElement("div");
        de.classList.add("chevron1"), this.__chevronSet6.appendChild(de);
        var he = document.createElement("div");
        he.classList.add("chevron2"), this.__chevronSet6.appendChild(he);
        var pe = document.createElement("div");
        pe.classList.add("chevron3"), this.__chevronSet6.appendChild(pe), ue.appendChild(this.__chevronSet6);
        var me = document.createElement("span");
        me.classList.add("Header"), me.classList.add("statLabel"), ue.appendChild(me), ne.appendChild(ue), P.appendChild(ne), this.__styleViewPlayStyle = document.createElement("div"), this.$_styleViewPlayStyle = $(this.__styleViewPlayStyle), this.__styleViewPlayStyle.classList.add("playStyle"), this.__styleViewPlayStyleText = document.createElement("span"), this.$_styleViewPlayStyleText = $(this.__styleViewPlayStyleText), this.__styleViewPlayStyle.appendChild(this.__styleViewPlayStyleText), P.appendChild(this.__styleViewPlayStyle), t.appendChild(P), this.__bioViewDiv = document.createElement("div"), this.$_bioViewDiv = $(this.__bioViewDiv), this.__bioViewDiv.classList.add("bioView");
        var _e = document.createElement("div");
        _e.classList.add("bonuses"), this.__playerLoyalty = document.createElement("div"), this.$_playerLoyalty = $(this.__playerLoyalty), this.__playerLoyalty.classList.add("bonus"), this.__playerLoyalty.classList.add("loyalty"), _e.appendChild(this.__playerLoyalty), this.__playerManagerBonus = document.createElement("div"), this.$_playerManagerBonus = $(this.__playerManagerBonus), this.__playerManagerBonus.classList.add("bonus"), this.__playerManagerBonus.classList.add("manager"), _e.appendChild(this.__playerManagerBonus), this.__bioViewDiv.appendChild(_e), this.__bioLeague = document.createElement("div"), this.$_bioLeague = $(this.__bioLeague), this.__bioLeague.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioLeague), this.__bioClub = document.createElement("div"), this.$_bioClub = $(this.__bioClub), this.__bioClub.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioClub), this.__bioNation = document.createElement("div"), this.$_bioNation = $(this.__bioNation), this.__bioNation.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioNation), t.appendChild(this.__bioViewDiv);
        var ge = document.createElement("div");
        ge.classList.add("debugView"), this.__playerDebug = document.createElement("div"), this.$_playerDebug = $(this.__playerDebug), this.__playerDebug.classList.add("infoRow"), ge.appendChild(this.__playerDebug), t.appendChild(ge), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemPlayerLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__playerName = null, this.$_playerName = null, this.__attribute0 = null, this.$_attribute0 = null, this.__attribute3 = null, this.$_attribute3 = null, this.__attribute1 = null, this.$_attribute1 = null, this.__attribute4 = null, this.$_attribute4 = null, this.__attribute2 = null, this.$_attribute2 = null, this.__attribute5 = null, this.$_attribute5 = null, this.__mainViewPlayStyle = null, this.$_mainViewPlayStyle = null, this.__mainViewPlayStyleText = null, this.$_mainViewPlayStyleText = null, this.__statsRowContract = null, this.$_statsRowContract = null, this.__playerContractLabel = null, this.$_playerContractLabel = null, this.__playerContract = null, this.$_playerContract = null, this.__statsRowFitness = null, this.$_statsRowFitness = null, this.__playerFitnessLabel = null, this.$_playerFitnessLabel = null, this.__playerFitness = null, this.$_playerFitness = null, this.__statsViewPlayStyle = null, this.$_statsViewPlayStyle = null, this.__statsViewPlayStyleText = null, this.$_statsViewPlayStyleText = null, this.__chevronSet1 = null, this.$_chevronSet1 = null, this.__chevronSet4 = null, this.$_chevronSet4 = null, this.__chevronSet2 = null, this.$_chevronSet2 = null, this.__chevronSet5 = null, this.$_chevronSet5 = null, this.__chevronSet3 = null, this.$_chevronSet3 = null, this.__chevronSet6 = null, this.$_chevronSet6 = null, this.__styleViewPlayStyle = null, this.$_styleViewPlayStyle = null, this.__styleViewPlayStyleText = null, this.$_styleViewPlayStyleText = null, this.__bioViewDiv = null, this.$_bioViewDiv = null, this.__playerLoyalty = null, this.$_playerLoyalty = null, this.__playerManagerBonus = null, this.$_playerManagerBonus = null, this.__bioLeague = null, this.$_bioLeague = null, this.__bioClub = null, this.$_bioClub = null, this.__bioNation = null, this.$_bioNation = null, this.__playerDebug = null, this.$_playerDebug = null
}, components.ItemPlayerLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemPlayerLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemPlayerLarge.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0), gViewPreferencesModel.addListener(models.ViewPreferencesModel.VIEW_MODE_CHANGED, this, this.displayModeChanged)
}, components.ItemPlayerLarge.prototype.dealloc = function dealloc() {
    gViewPreferencesModel.clearListenersByScope(this), this.superclass()
}, components.ItemPlayerLarge.prototype.displayModeChanged = function displayModeChanged(sender) {
    var root = this.getRoot(),
        t = $(this.getDisplayMode(), root);
    t.length && ($(models.ViewPreferencesModel.VIEW_MODE.STATS, root).hide(), $(models.ViewPreferencesModel.VIEW_MODE.BIO, root).hide(), $(models.ViewPreferencesModel.VIEW_MODE.MAIN, root).hide(), $(models.ViewPreferencesModel.VIEW_MODE.STYLE, root).hide(), t.show())
}, components.ItemPlayerLarge.prototype.loopDisplayMode = function loopDisplayMode() {
    var mode = "";
    switch (this.getDisplayMode()) {
        case models.ViewPreferencesModel.VIEW_MODE.MAIN:
            mode = models.ViewPreferencesModel.VIEW_MODE.BIO;
            break;
        case models.ViewPreferencesModel.VIEW_MODE.BIO:
            mode = models.ViewPreferencesModel.VIEW_MODE.STATS;
            break;
        case models.ViewPreferencesModel.VIEW_MODE.STATS:
            mode = models.ViewPreferencesModel.VIEW_MODE.STYLE;
            break;
        case models.ViewPreferencesModel.VIEW_MODE.STYLE:
            mode = models.ViewPreferencesModel.VIEW_MODE.MAIN;
            break;
        default:
            mode = models.ViewPreferencesModel.VIEW_MODE.MAIN
    }
    gViewPreferencesModel.setViewMode(mode)
}, components.ItemPlayerLarge.prototype.renderChemistry = function renderChemistry(item, t, i) {
    var s = repositories.PlayStyle.getPlayStyleBonusById(item.playStyle, item.isGK()).slice(0, 6),
        o = Math.max(t - 4, 0);
    [2, 3, 4, 5, 0, 1].forEach(function _applyChevronChemistry(t) {
        var i = s[t],
            l = this["__chevronSet" + (t + 1)],
            u = [!1, !1, !1];
        if (l) {
            if (i > 0 && o > 0)
                for (var h = 0; h < i && o > 0;) u[h] = !0, o--, h++;
            var p = l.children;
            DOMKit.toggleClass(p.item(0), "chemBoost", u[2]), DOMKit.toggleClass(p.item(1), "chemBoost", u[1]), DOMKit.toggleClass(p.item(2), "chemBoost", u[0])
        }
    }, this), DOMKit.toggleClass(this.__playerManagerBonus, components.ItemFUTBase.CLASS.CHEM_BONUS, i > 0)
}, components.ItemPlayerLarge.prototype._render = function _render(item) {
    function setMatchOut(t, i) {
        var s = i > 1 ? gLocalization.lPrint("item.status.outnummatches", [i]) : gLocalization.lText("item.status.outonematch");
        t.html(s).removeClass(components.ItemFUTBase.CLASS.PLAYSTYLE).addClass(components.ItemFUTBase.CLASS.PLAYEROUT)
    }
    var t = item.getStaticData(),
        root = this.getRoot(),
        i = item.getYear();
    if (this.superclass(item), this.__playerName.textContent = t.name, item.isGK() ? ($(".statValue.Pace", root).html(item.getAttribute(enums.GKStats.DIVING, !1).toString()), $(".statValue.Header", root).html(item.getAttribute(enums.GKStats.POSITION, !1).toString()), $(".statValue.Dribbling", root).html(item.getAttribute(enums.GKStats.REFLEX, !1).toString()), $(".statValue.Shooting", root).html(item.getAttribute(enums.GKStats.HANDLING, !1).toString()), $(".statValue.Defending", root).html(item.getAttribute(enums.GKStats.SPEED, !1).toString()), $(".statValue.Passing", root).html(item.getAttribute(enums.GKStats.KICKING, !1).toString()), $(".statLabel.Pace", root).html(gLocalization.lText("cards.cardfront.divingAbbr")), $(".statLabel.Header", root).html(gLocalization.lText("cards.cardfront.positionAbbr")), $(".statLabel.Dribbling", root).html(gLocalization.lText("cards.cardfront.reflexAbbr")), $(".statLabel.Shooting", root).html(gLocalization.lText("cards.cardfront.handlingAbbr")), $(".statLabel.Defending", root).html(gLocalization.lText("cards.cardfront.speedAbbr")), $(".statLabel.Passing", root).html(gLocalization.lText("cards.cardfront.kickAbbr"))) : ($(".statValue.Pace", root).html(item.getAttribute(enums.PlayerStats.PACE, !1).toString()), $(".statValue.Header", root).html(item.getAttribute(enums.PlayerStats.HEADING, !1).toString()), $(".statValue.Dribbling", root).html(item.getAttribute(enums.PlayerStats.DRIBBLING, !1).toString()), $(".statValue.Shooting", root).html(item.getAttribute(enums.PlayerStats.SHOOTING, !1).toString()), $(".statValue.Defending", root).html(item.getAttribute(enums.PlayerStats.DEFEND, !1).toString()), $(".statValue.Passing", root).html(item.getAttribute(enums.PlayerStats.PASSING, !1).toString()), $(".statLabel.Pace", root).html(gLocalization.lText("cards.cardfront.paceAbbr")), $(".statLabel.Header", root).html(gLocalization.lText("cards.cardfront.headingAbbr")), $(".statLabel.Dribbling", root).html(gLocalization.lText("cards.cardfront.dribblingAbbr")), $(".statLabel.Shooting", root).html(gLocalization.lText("cards.cardfront.shootingAbbr")), $(".statLabel.Defending", root).html(gLocalization.lText("cards.cardfront.defendingAbbr")), $(".statLabel.Passing", root).html(gLocalization.lText("cards.cardfront.passingAbbr"))), item.hasTraining()) {
        var s;
        s = item.getBoostLevel() === enums.ItemRatingTier.GOLD ? components.ItemFUTBase.QUALITY.GOLD : item.getBoostLevel() === enums.ItemRatingTier.SILVER ? components.ItemFUTBase.QUALITY.SILVER : components.ItemFUTBase.QUALITY.BRONZE;
        var o;
        for (o = 0; o < 6; ++o) utils.JS.isValid(this["$_attribute" + o]) && item.isAttributeBoosted(o) && this["$_attribute" + o].addClass(s)
    }
    this.$_bioNation.html(utils.FUTLocalization.getNationNameById(item.nationId)), this.$_bioClub.html(utils.FUTLocalization.getTeamAbb15ByID(item.teamId, i)), this.$_bioLeague.html(utils.FUTLocalization.getLeagueNameByID(item.leagueId, i)), this.$_playerManagerBonus.html(gLocalization.lText("card.bonus.manager")), this.$_playerLoyalty.html(gLocalization.lText("card.bonus.loyalty"));
    var l = item.loyaltyBonus > 0 && !item.getAuctionData().isValid();
    if (this.$_playerLoyalty.toggleClass(components.ItemFUTBase.CLASS.CHEM_BONUS, l), DOMKit.removeClass(this.__statsRowContract, components.ItemFUTBase.CLASS.INVALID_STAT), DOMKit.toggleClass(this.__statsRowFitness, components.ItemFUTBase.CLASS.INVALID_STAT, item.isInjured()), item.isContractExpired() ? (DOMKit.addClass(this.__statsRowContract, components.ItemFUTBase.CLASS.INVALID_STAT), this.__playerContractLabel.textContent = gLocalization.lText("item.status.nocontracts")) : item.isSuspended() ? (DOMKit.addClass(this.__statsRowContract, components.ItemFUTBase.CLASS.INVALID_STAT), this.__playerContractLabel.textContent = gLocalization.lText("item.status.suspended"), setMatchOut(this.$_statsViewPlayStyleText, item.suspensionGames)) : item.isInjured() ? (DOMKit.addClass(this.__statsRowContract, components.ItemFUTBase.CLASS.INVALID_STAT), this.__playerContractLabel.textContent = gLocalization.lText("item.status.injured"), this.__playerFitnessLabel.textContent = utils.FUTLocalization.convertInjuryTypeToText(item.injuryType), setMatchOut(this.$_statsViewPlayStyleText, item.injuryGames)) : (this.__playerContractLabel.textContent = gLocalization.lText("cards.cardfrontlarge.contracts"), this.__playerFitnessLabel.textContent = gLocalization.lText("cards.cardfrontlarge.fitness"), this.__playerContract.textContent = item.contract.toString(), this.__playerFitness.textContent = item.fitness.toString(), DOMKit.removeClass(this.__statsViewPlayStyleText, components.ItemFUTBase.CLASS.PLAYEROUT)), item.getYear() >= enums.Year.YEAR_2014) {
        var u = item.playStyle,
            h = u > 0 ? gLocalization.lText("playstyles.2018.playstyle" + u) : gLocalization.lText("playstyles.invalid.playstyle0");
        if (this.$_styleViewPlayStyle.addClass("icon" + u), this.$_mainViewPlayStyle.addClass("icon" + u), this.$_styleViewPlayStyleText.text(h), this.$_mainViewPlayStyleText.text(h), item.isInjured() || item.isSuspended() || (this.$_statsViewPlayStyle.addClass("icon" + u), this.$_statsViewPlayStyleText.html(h)), item.isValid()) {
            var p = repositories.PlayStyle.getPlayStyleBonusById(u, item.isGK());
            this._applyChevrons(p)
        }
    }
    var currentView = gViewPreferencesModel.getViewMode();
    currentView !== models.ViewPreferencesModel.VIEW_MODE.MAIN && currentView !== models.ViewPreferencesModel.VIEW_MODE.BIO && currentView !== models.ViewPreferencesModel.VIEW_MODE.STATS && currentView !== models.ViewPreferencesModel.VIEW_MODE.STYLE && (currentView = models.ViewPreferencesModel.VIEW_MODE.MAIN), this.setDisplayMode(currentView)
}, components.ItemPlayerLarge.prototype._resetRender = function _resetRender() {
    function clearPlayStyleIcons(index, t) {
        return (t.match(/(^|\s)icon\S+/g) || []).join(" ")
    }
    var root = this.getRoot();
    this.superclass();
    var t = [components.ItemFUTBase.QUALITY.GOLD, components.ItemFUTBase.QUALITY.SILVER, components.ItemFUTBase.QUALITY.BRONZE].join(" ");
    $(".statLabel", root).removeClass(t), this.$_styleViewPlayStyle.removeClass(clearPlayStyleIcons), this.$_mainViewPlayStyle.removeClass(clearPlayStyleIcons), this.$_statsViewPlayStyle.removeClass(clearPlayStyleIcons)
}, components.ItemPlayerLarge.prototype._applyChevrons = function _applyChevrons(t) {
    utils.Debug.Assert(6 === t.length, "[components.ItemPlayerLarge] Expected 6 entries in chevronList array."), t.slice(0, 6).forEach(function applyChevrons(t, i) {
        var parent = this["__chevronSet" + (i + 1)];
        DOMKit.HTMLCollectionToArray(parent.children).reverse().forEach(function(i, s) {
            DOMKit.toggleClass(i, "invisible", s + 1 > t)
        })
    }, this)
}, components.ItemGenLarge = function ItemGenLargeView() {
    components.ItemPlayerBase.call(this)
}, utils.JS.inherits(components.ItemGenLarge, components.ItemPlayerBase), components.ItemGenLarge.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!1)
}, components.ItemGenLarge.prototype.displayModeChanged = function displayModeChanged(sender) {
    var root = this.getRoot(),
        t = $(models.ViewPreferencesModel.VIEW_MODE.MAIN, root);
    t.length && ($(models.ViewPreferencesModel.VIEW_MODE.STATS, root).hide(), $(models.ViewPreferencesModel.VIEW_MODE.BIO, root).hide(), $(models.ViewPreferencesModel.VIEW_MODE.MAIN, root).hide(), $(models.ViewPreferencesModel.VIEW_MODE.STYLE, root).hide(), t.show())
}, components.ItemGenLarge.prototype.setDisplayMode = function setDisplayMode(mode) {
    gViewPreferencesModel.setViewMode(mode), this.displayModeChanged()
}, components.ItemGenLarge.prototype._render = function _render(item) {
    var t = item.getStaticData(),
        root = this.getRoot();
    item.getYear();
    this.superclass(item), this.__playerName.textContent = t.name, item.isGK() ? ($(".statValue.Pace", root).html(item.getAttribute(enums.GKStats.DIVING, !1).toString()), $(".statValue.Header", root).html(item.getAttribute(enums.GKStats.POSITION, !1).toString()), $(".statValue.Dribbling", root).html(item.getAttribute(enums.GKStats.REFLEX, !1).toString()), $(".statValue.Shooting", root).html(item.getAttribute(enums.GKStats.HANDLING, !1).toString()), $(".statValue.Defending", root).html(item.getAttribute(enums.GKStats.SPEED, !1).toString()), $(".statValue.Passing", root).html(item.getAttribute(enums.GKStats.KICKING, !1).toString()), $(".statLabel.Pace", root).html(gLocalization.lText("cards.cardfront.divingAbbr")), $(".statLabel.Header", root).html(gLocalization.lText("cards.cardfront.positionAbbr")), $(".statLabel.Dribbling", root).html(gLocalization.lText("cards.cardfront.reflexAbbr")), $(".statLabel.Shooting", root).html(gLocalization.lText("cards.cardfront.handlingAbbr")), $(".statLabel.Defending", root).html(gLocalization.lText("cards.cardfront.speedAbbr")), $(".statLabel.Passing", root).html(gLocalization.lText("cards.cardfront.kickAbbr"))) : ($(".statValue.Pace", root).html(item.getAttribute(enums.PlayerStats.PACE, !1).toString()), $(".statValue.Header", root).html(item.getAttribute(enums.PlayerStats.HEADING, !1).toString()), $(".statValue.Dribbling", root).html(item.getAttribute(enums.PlayerStats.DRIBBLING, !1).toString()), $(".statValue.Shooting", root).html(item.getAttribute(enums.PlayerStats.SHOOTING, !1).toString()), $(".statValue.Defending", root).html(item.getAttribute(enums.PlayerStats.DEFEND, !1).toString()), $(".statValue.Passing", root).html(item.getAttribute(enums.PlayerStats.PASSING, !1).toString()), $(".statLabel.Pace", root).html(gLocalization.lText("cards.cardfront.paceAbbr")), $(".statLabel.Header", root).html(gLocalization.lText("cards.cardfront.headingAbbr")), $(".statLabel.Dribbling", root).html(gLocalization.lText("cards.cardfront.dribblingAbbr")), $(".statLabel.Shooting", root).html(gLocalization.lText("cards.cardfront.shootingAbbr")), $(".statLabel.Defending", root).html(gLocalization.lText("cards.cardfront.defendingAbbr")), $(".statLabel.Passing", root).html(gLocalization.lText("cards.cardfront.passingAbbr")));
    var currentView = models.ViewPreferencesModel.VIEW_MODE.MAIN;
    this.setFlag(item), this.setDisplayMode(currentView)
}, components.ItemGen1Large = function ItemGen1LargeView() {
    components.ItemGenLarge.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen1Large, components.ItemGenLarge), components.ItemGen1Large.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("player"), t.classList.add("item"), this.__flagBackground = document.createElement("div"), this.$_flagBackground = $(this.__flagBackground), this.__flagBackground.classList.add("flagbackground"), t.appendChild(this.__flagBackground);
        var i = document.createElement("div");
        i.classList.add("shell"), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("statusOverlay"), t.appendChild(s), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var o = document.createElement("div");
        o.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), o.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), o.appendChild(this.__playerPosition), t.appendChild(o), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), t.appendChild(this._badgeImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__playerName = document.createElement("div"), this.$_playerName = $(this.__playerName), this.__playerName.classList.add("name"), t.appendChild(this.__playerName);
        var l = document.createElement("div");
        l.classList.add("mainView");
        var u = document.createElement("div");
        u.classList.add("statCellRow");
        var h = document.createElement("div");
        h.classList.add("statCell");
        var p = document.createElement("span");
        p.classList.add("Pace"), p.classList.add("statValue"), h.appendChild(p), this.__attribute0 = document.createElement("span"), this.$_attribute0 = $(this.__attribute0), this.__attribute0.classList.add("Pace"), this.__attribute0.classList.add("statLabel"), h.appendChild(this.__attribute0), u.appendChild(h);
        var m = document.createElement("div");
        m.classList.add("statCell");
        var _ = document.createElement("span");
        _.classList.add("Dribbling"), _.classList.add("statValue"), m.appendChild(_), this.__attribute3 = document.createElement("span"), this.$_attribute3 = $(this.__attribute3), this.__attribute3.classList.add("Dribbling"), this.__attribute3.classList.add("statLabel"), m.appendChild(this.__attribute3), u.appendChild(m), l.appendChild(u);
        var g = document.createElement("div");
        g.classList.add("statCellRow");
        var S = document.createElement("div");
        S.classList.add("statCell");
        var v = document.createElement("span");
        v.classList.add("Shooting"), v.classList.add("statValue"), S.appendChild(v), this.__attribute1 = document.createElement("span"), this.$_attribute1 = $(this.__attribute1), this.__attribute1.classList.add("Shooting"), this.__attribute1.classList.add("statLabel"), S.appendChild(this.__attribute1), g.appendChild(S);
        var T = document.createElement("div");
        T.classList.add("statCell");
        var C = document.createElement("span");
        C.classList.add("Defending"), C.classList.add("statValue"), T.appendChild(C), this.__attribute4 = document.createElement("span"), this.$_attribute4 = $(this.__attribute4), this.__attribute4.classList.add("Defending"), this.__attribute4.classList.add("statLabel"), T.appendChild(this.__attribute4), g.appendChild(T), l.appendChild(g);
        var I = document.createElement("div");
        I.classList.add("statCellRow");
        var L = document.createElement("div");
        L.classList.add("statCell");
        var A = document.createElement("span");
        A.classList.add("Passing"), A.classList.add("statValue"), L.appendChild(A), this.__attribute2 = document.createElement("span"), this.$_attribute2 = $(this.__attribute2), this.__attribute2.classList.add("Passing"), this.__attribute2.classList.add("statLabel"), L.appendChild(this.__attribute2), I.appendChild(L);
        var R = document.createElement("div");
        R.classList.add("statCell");
        var D = document.createElement("span");
        D.classList.add("Header"), D.classList.add("statValue"), R.appendChild(D), this.__attribute5 = document.createElement("span"), this.$_attribute5 = $(this.__attribute5), this.__attribute5.classList.add("Header"), this.__attribute5.classList.add("statLabel"), R.appendChild(this.__attribute5), I.appendChild(R), l.appendChild(I), t.appendChild(l);
        var P = document.createElement("div");
        P.classList.add("statsView"), this.__statsRowContract = document.createElement("div"), this.$_statsRowContract = $(this.__statsRowContract), this.__statsRowContract.classList.add("statsRow"), this.__playerContractLabel = document.createElement("span"), this.$_playerContractLabel = $(this.__playerContractLabel), this.__playerContractLabel.classList.add("Contract"), this.__playerContractLabel.classList.add("statLabel"), this.__statsRowContract.appendChild(this.__playerContractLabel), this.__playerContract = document.createElement("span"), this.$_playerContract = $(this.__playerContract), this.__playerContract.classList.add("Contract"), this.__playerContract.classList.add("statValue"), this.__statsRowContract.appendChild(this.__playerContract), P.appendChild(this.__statsRowContract), this.__statsRowFitness = document.createElement("div"), this.$_statsRowFitness = $(this.__statsRowFitness), this.__statsRowFitness.classList.add("statsRow"), this.__playerFitnessLabel = document.createElement("span"), this.$_playerFitnessLabel = $(this.__playerFitnessLabel), this.__playerFitnessLabel.classList.add("Fitness"), this.__playerFitnessLabel.classList.add("statLabel"), this.__statsRowFitness.appendChild(this.__playerFitnessLabel), this.__playerFitness = document.createElement("span"), this.$_playerFitness = $(this.__playerFitness), this.__playerFitness.classList.add("Fitness"), this.__playerFitness.classList.add("statValue"), this.__statsRowFitness.appendChild(this.__playerFitness), P.appendChild(this.__statsRowFitness), t.appendChild(P);
        var N = document.createElement("div");
        N.classList.add("styleView");
        var O = document.createElement("div");
        O.classList.add("statCellRow");
        var B = document.createElement("div");
        B.classList.add("statCell"), this.__chevronSet1 = document.createElement("div"), this.$_chevronSet1 = $(this.__chevronSet1), this.__chevronSet1.classList.add("chevrons");
        var U = document.createElement("div");
        U.classList.add("chevron1"), this.__chevronSet1.appendChild(U);
        var M = document.createElement("div");
        M.classList.add("chevron2"), this.__chevronSet1.appendChild(M);
        var F = document.createElement("div");
        F.classList.add("chevron3"), this.__chevronSet1.appendChild(F), B.appendChild(this.__chevronSet1);
        var q = document.createElement("span");
        q.classList.add("Pace"), q.classList.add("statLabel"), B.appendChild(q), O.appendChild(B);
        var k = document.createElement("div");
        k.classList.add("statCell"), this.__chevronSet4 = document.createElement("div"), this.$_chevronSet4 = $(this.__chevronSet4), this.__chevronSet4.classList.add("chevrons");
        var V = document.createElement("div");
        V.classList.add("chevron1"), this.__chevronSet4.appendChild(V);
        var G = document.createElement("div");
        G.classList.add("chevron2"), this.__chevronSet4.appendChild(G);
        var H = document.createElement("div");
        H.classList.add("chevron3"), this.__chevronSet4.appendChild(H), k.appendChild(this.__chevronSet4);
        var j = document.createElement("span");
        j.classList.add("Dribbling"), j.classList.add("statLabel"), k.appendChild(j), O.appendChild(k), N.appendChild(O);
        var Y = document.createElement("div");
        Y.classList.add("statCellRow");
        var K = document.createElement("div");
        K.classList.add("statCell"), this.__chevronSet2 = document.createElement("div"), this.$_chevronSet2 = $(this.__chevronSet2), this.__chevronSet2.classList.add("chevrons");
        var W = document.createElement("div");
        W.classList.add("chevron1"), this.__chevronSet2.appendChild(W);
        var J = document.createElement("div");
        J.classList.add("chevron2"), this.__chevronSet2.appendChild(J);
        var X = document.createElement("div");
        X.classList.add("chevron3"), this.__chevronSet2.appendChild(X), K.appendChild(this.__chevronSet2);
        var Z = document.createElement("span");
        Z.classList.add("Shooting"), Z.classList.add("statLabel"), K.appendChild(Z), Y.appendChild(K);
        var ee = document.createElement("div");
        ee.classList.add("statCell"), this.__chevronSet5 = document.createElement("div"), this.$_chevronSet5 = $(this.__chevronSet5), this.__chevronSet5.classList.add("chevrons");
        var te = document.createElement("div");
        te.classList.add("chevron1"), this.__chevronSet5.appendChild(te);
        var ie = document.createElement("div");
        ie.classList.add("chevron2"), this.__chevronSet5.appendChild(ie);
        var se = document.createElement("div");
        se.classList.add("chevron3"), this.__chevronSet5.appendChild(se), ee.appendChild(this.__chevronSet5);
        var ne = document.createElement("span");
        ne.classList.add("Defending"), ne.classList.add("statLabel"), ee.appendChild(ne), Y.appendChild(ee), N.appendChild(Y);
        var oe = document.createElement("div");
        oe.classList.add("statCellRow");
        var ae = document.createElement("div");
        ae.classList.add("statCell"), this.__chevronSet3 = document.createElement("div"), this.$_chevronSet3 = $(this.__chevronSet3), this.__chevronSet3.classList.add("chevrons");
        var re = document.createElement("div");
        re.classList.add("chevron1"), this.__chevronSet3.appendChild(re);
        var le = document.createElement("div");
        le.classList.add("chevron2"), this.__chevronSet3.appendChild(le);
        var ce = document.createElement("div");
        ce.classList.add("chevron3"), this.__chevronSet3.appendChild(ce), ae.appendChild(this.__chevronSet3);
        var ue = document.createElement("span");
        ue.classList.add("Passing"), ue.classList.add("statLabel"), ae.appendChild(ue), oe.appendChild(ae);
        var de = document.createElement("div");
        de.classList.add("statCell"), this.__chevronSet6 = document.createElement("div"), this.$_chevronSet6 = $(this.__chevronSet6), this.__chevronSet6.classList.add("chevrons");
        var he = document.createElement("div");
        he.classList.add("chevron1"), this.__chevronSet6.appendChild(he);
        var pe = document.createElement("div");
        pe.classList.add("chevron2"), this.__chevronSet6.appendChild(pe);
        var me = document.createElement("div");
        me.classList.add("chevron3"), this.__chevronSet6.appendChild(me), de.appendChild(this.__chevronSet6);
        var _e = document.createElement("span");
        _e.classList.add("Header"), _e.classList.add("statLabel"), de.appendChild(_e), oe.appendChild(de), N.appendChild(oe), t.appendChild(N), this.__bioViewDiv = document.createElement("div"), this.$_bioViewDiv = $(this.__bioViewDiv), this.__bioViewDiv.classList.add("bioView");
        var ge = document.createElement("div");
        ge.classList.add("bonuses"), this.__playerLoyalty = document.createElement("div"), this.$_playerLoyalty = $(this.__playerLoyalty), this.__playerLoyalty.classList.add("bonus"), this.__playerLoyalty.classList.add("loyalty"), ge.appendChild(this.__playerLoyalty), this.__playerManagerBonus = document.createElement("div"), this.$_playerManagerBonus = $(this.__playerManagerBonus), this.__playerManagerBonus.classList.add("bonus"), this.__playerManagerBonus.classList.add("manager"), ge.appendChild(this.__playerManagerBonus), this.__bioViewDiv.appendChild(ge), this.__bioLeague = document.createElement("div"), this.$_bioLeague = $(this.__bioLeague), this.__bioLeague.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioLeague), this.__bioClub = document.createElement("div"), this.$_bioClub = $(this.__bioClub), this.__bioClub.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioClub), this.__bioNation = document.createElement("div"), this.$_bioNation = $(this.__bioNation), this.__bioNation.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioNation), t.appendChild(this.__bioViewDiv);
        var Se = document.createElement("div");
        Se.classList.add("debugView"), this.__playerDebug = document.createElement("div"), this.$_playerDebug = $(this.__playerDebug), this.__playerDebug.classList.add("infoRow"), Se.appendChild(this.__playerDebug), t.appendChild(Se), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen1Large.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__flagBackground = null, this.$_flagBackground = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._mainImage.destroy(), this._mainImage = null, this.__playerName = null, this.$_playerName = null, this.__attribute0 = null, this.$_attribute0 = null, this.__attribute3 = null, this.$_attribute3 = null, this.__attribute1 = null, this.$_attribute1 = null, this.__attribute4 = null, this.$_attribute4 = null, this.__attribute2 = null, this.$_attribute2 = null, this.__attribute5 = null, this.$_attribute5 = null, this.__statsRowContract = null, this.$_statsRowContract = null, this.__playerContractLabel = null, this.$_playerContractLabel = null, this.__playerContract = null, this.$_playerContract = null, this.__statsRowFitness = null, this.$_statsRowFitness = null, this.__playerFitnessLabel = null, this.$_playerFitnessLabel = null, this.__playerFitness = null, this.$_playerFitness = null, this.__chevronSet1 = null, this.$_chevronSet1 = null, this.__chevronSet4 = null, this.$_chevronSet4 = null, this.__chevronSet2 = null, this.$_chevronSet2 = null, this.__chevronSet5 = null, this.$_chevronSet5 = null, this.__chevronSet3 = null, this.$_chevronSet3 = null, this.__chevronSet6 = null, this.$_chevronSet6 = null, this.__bioViewDiv = null, this.$_bioViewDiv = null, this.__playerLoyalty = null, this.$_playerLoyalty = null, this.__playerManagerBonus = null, this.$_playerManagerBonus = null, this.__bioLeague = null, this.$_bioLeague = null, this.__bioClub = null, this.$_bioClub = null, this.__bioNation = null, this.$_bioNation = null, this.__playerDebug = null, this.$_playerDebug = null
}, components.ItemGen1Large.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen1Large.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemGen1Large.prototype.setFlag = function setFlag(item) {
    var t = item.getYear(),
        i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, t, item.nationId);
    this.__flagBackground.style.backgroundImage = "url(" + gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + i + ")"
}, components.ItemGen2Large = function ItemGen2LargeView() {
    components.ItemGenLarge.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen2Large, components.ItemGenLarge), components.ItemGen2Large.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("player"), t.classList.add("item"), this.__flagBackground = document.createElement("div"), this.$_flagBackground = $(this.__flagBackground), this.__flagBackground.classList.add("flagbackground"), t.appendChild(this.__flagBackground);
        var i = document.createElement("div");
        i.classList.add("shell"), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("statusOverlay"), t.appendChild(s), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var o = document.createElement("div");
        o.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), o.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), o.appendChild(this.__playerPosition), t.appendChild(o), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), t.appendChild(this._badgeImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__playerName = document.createElement("div"), this.$_playerName = $(this.__playerName), this.__playerName.classList.add("name"), t.appendChild(this.__playerName);
        var l = document.createElement("div");
        l.classList.add("mainView");
        var u = document.createElement("div");
        u.classList.add("statCellRow");
        var h = document.createElement("div");
        h.classList.add("statCell");
        var p = document.createElement("span");
        p.classList.add("Pace"), p.classList.add("statValue"), h.appendChild(p), this.__attribute0 = document.createElement("span"), this.$_attribute0 = $(this.__attribute0), this.__attribute0.classList.add("Pace"), this.__attribute0.classList.add("statLabel"), h.appendChild(this.__attribute0), u.appendChild(h);
        var m = document.createElement("div");
        m.classList.add("statCell");
        var _ = document.createElement("span");
        _.classList.add("Dribbling"), _.classList.add("statValue"), m.appendChild(_), this.__attribute3 = document.createElement("span"), this.$_attribute3 = $(this.__attribute3), this.__attribute3.classList.add("Dribbling"), this.__attribute3.classList.add("statLabel"), m.appendChild(this.__attribute3), u.appendChild(m), l.appendChild(u);
        var g = document.createElement("div");
        g.classList.add("statCellRow");
        var S = document.createElement("div");
        S.classList.add("statCell");
        var v = document.createElement("span");
        v.classList.add("Shooting"), v.classList.add("statValue"), S.appendChild(v), this.__attribute1 = document.createElement("span"), this.$_attribute1 = $(this.__attribute1), this.__attribute1.classList.add("Shooting"), this.__attribute1.classList.add("statLabel"), S.appendChild(this.__attribute1), g.appendChild(S);
        var T = document.createElement("div");
        T.classList.add("statCell");
        var C = document.createElement("span");
        C.classList.add("Defending"), C.classList.add("statValue"), T.appendChild(C), this.__attribute4 = document.createElement("span"), this.$_attribute4 = $(this.__attribute4), this.__attribute4.classList.add("Defending"), this.__attribute4.classList.add("statLabel"), T.appendChild(this.__attribute4), g.appendChild(T), l.appendChild(g);
        var I = document.createElement("div");
        I.classList.add("statCellRow");
        var L = document.createElement("div");
        L.classList.add("statCell");
        var A = document.createElement("span");
        A.classList.add("Passing"), A.classList.add("statValue"), L.appendChild(A), this.__attribute2 = document.createElement("span"), this.$_attribute2 = $(this.__attribute2), this.__attribute2.classList.add("Passing"), this.__attribute2.classList.add("statLabel"), L.appendChild(this.__attribute2), I.appendChild(L);
        var R = document.createElement("div");
        R.classList.add("statCell");
        var D = document.createElement("span");
        D.classList.add("Header"), D.classList.add("statValue"), R.appendChild(D), this.__attribute5 = document.createElement("span"), this.$_attribute5 = $(this.__attribute5), this.__attribute5.classList.add("Header"), this.__attribute5.classList.add("statLabel"), R.appendChild(this.__attribute5), I.appendChild(R), l.appendChild(I), t.appendChild(l);
        var P = document.createElement("div");
        P.classList.add("statsView"), this.__statsRowContract = document.createElement("div"), this.$_statsRowContract = $(this.__statsRowContract), this.__statsRowContract.classList.add("statsRow"), this.__playerContractLabel = document.createElement("span"), this.$_playerContractLabel = $(this.__playerContractLabel), this.__playerContractLabel.classList.add("Contract"), this.__playerContractLabel.classList.add("statLabel"), this.__statsRowContract.appendChild(this.__playerContractLabel), this.__playerContract = document.createElement("span"), this.$_playerContract = $(this.__playerContract), this.__playerContract.classList.add("Contract"), this.__playerContract.classList.add("statValue"), this.__statsRowContract.appendChild(this.__playerContract), P.appendChild(this.__statsRowContract), this.__statsRowFitness = document.createElement("div"), this.$_statsRowFitness = $(this.__statsRowFitness), this.__statsRowFitness.classList.add("statsRow"), this.__playerFitnessLabel = document.createElement("span"), this.$_playerFitnessLabel = $(this.__playerFitnessLabel), this.__playerFitnessLabel.classList.add("Fitness"), this.__playerFitnessLabel.classList.add("statLabel"), this.__statsRowFitness.appendChild(this.__playerFitnessLabel), this.__playerFitness = document.createElement("span"), this.$_playerFitness = $(this.__playerFitness), this.__playerFitness.classList.add("Fitness"), this.__playerFitness.classList.add("statValue"), this.__statsRowFitness.appendChild(this.__playerFitness), P.appendChild(this.__statsRowFitness), t.appendChild(P);
        var N = document.createElement("div");
        N.classList.add("styleView");
        var O = document.createElement("div");
        O.classList.add("statCellRow");
        var B = document.createElement("div");
        B.classList.add("statCell"), this.__chevronSet1 = document.createElement("div"), this.$_chevronSet1 = $(this.__chevronSet1), this.__chevronSet1.classList.add("chevrons");
        var U = document.createElement("div");
        U.classList.add("chevron1"), this.__chevronSet1.appendChild(U);
        var M = document.createElement("div");
        M.classList.add("chevron2"), this.__chevronSet1.appendChild(M);
        var F = document.createElement("div");
        F.classList.add("chevron3"), this.__chevronSet1.appendChild(F), B.appendChild(this.__chevronSet1);
        var q = document.createElement("span");
        q.classList.add("Pace"), q.classList.add("statLabel"), B.appendChild(q), O.appendChild(B);
        var k = document.createElement("div");
        k.classList.add("statCell"), this.__chevronSet4 = document.createElement("div"), this.$_chevronSet4 = $(this.__chevronSet4), this.__chevronSet4.classList.add("chevrons");
        var V = document.createElement("div");
        V.classList.add("chevron1"), this.__chevronSet4.appendChild(V);
        var G = document.createElement("div");
        G.classList.add("chevron2"), this.__chevronSet4.appendChild(G);
        var H = document.createElement("div");
        H.classList.add("chevron3"), this.__chevronSet4.appendChild(H), k.appendChild(this.__chevronSet4);
        var j = document.createElement("span");
        j.classList.add("Dribbling"), j.classList.add("statLabel"), k.appendChild(j), O.appendChild(k), N.appendChild(O);
        var Y = document.createElement("div");
        Y.classList.add("statCellRow");
        var K = document.createElement("div");
        K.classList.add("statCell"), this.__chevronSet2 = document.createElement("div"), this.$_chevronSet2 = $(this.__chevronSet2), this.__chevronSet2.classList.add("chevrons");
        var W = document.createElement("div");
        W.classList.add("chevron1"), this.__chevronSet2.appendChild(W);
        var J = document.createElement("div");
        J.classList.add("chevron2"), this.__chevronSet2.appendChild(J);
        var X = document.createElement("div");
        X.classList.add("chevron3"), this.__chevronSet2.appendChild(X), K.appendChild(this.__chevronSet2);
        var Z = document.createElement("span");
        Z.classList.add("Shooting"), Z.classList.add("statLabel"), K.appendChild(Z), Y.appendChild(K);
        var ee = document.createElement("div");
        ee.classList.add("statCell"), this.__chevronSet5 = document.createElement("div"), this.$_chevronSet5 = $(this.__chevronSet5), this.__chevronSet5.classList.add("chevrons");
        var te = document.createElement("div");
        te.classList.add("chevron1"), this.__chevronSet5.appendChild(te);
        var ie = document.createElement("div");
        ie.classList.add("chevron2"), this.__chevronSet5.appendChild(ie);
        var se = document.createElement("div");
        se.classList.add("chevron3"), this.__chevronSet5.appendChild(se), ee.appendChild(this.__chevronSet5);
        var ne = document.createElement("span");
        ne.classList.add("Defending"), ne.classList.add("statLabel"), ee.appendChild(ne), Y.appendChild(ee), N.appendChild(Y);
        var oe = document.createElement("div");
        oe.classList.add("statCellRow");
        var ae = document.createElement("div");
        ae.classList.add("statCell"), this.__chevronSet3 = document.createElement("div"), this.$_chevronSet3 = $(this.__chevronSet3), this.__chevronSet3.classList.add("chevrons");
        var re = document.createElement("div");
        re.classList.add("chevron1"), this.__chevronSet3.appendChild(re);
        var le = document.createElement("div");
        le.classList.add("chevron2"), this.__chevronSet3.appendChild(le);
        var ce = document.createElement("div");
        ce.classList.add("chevron3"), this.__chevronSet3.appendChild(ce), ae.appendChild(this.__chevronSet3);
        var ue = document.createElement("span");
        ue.classList.add("Passing"), ue.classList.add("statLabel"), ae.appendChild(ue), oe.appendChild(ae);
        var de = document.createElement("div");
        de.classList.add("statCell"), this.__chevronSet6 = document.createElement("div"), this.$_chevronSet6 = $(this.__chevronSet6), this.__chevronSet6.classList.add("chevrons");
        var he = document.createElement("div");
        he.classList.add("chevron1"), this.__chevronSet6.appendChild(he);
        var pe = document.createElement("div");
        pe.classList.add("chevron2"), this.__chevronSet6.appendChild(pe);
        var me = document.createElement("div");
        me.classList.add("chevron3"), this.__chevronSet6.appendChild(me), de.appendChild(this.__chevronSet6);
        var _e = document.createElement("span");
        _e.classList.add("Header"), _e.classList.add("statLabel"), de.appendChild(_e), oe.appendChild(de), N.appendChild(oe), t.appendChild(N), this.__bioViewDiv = document.createElement("div"), this.$_bioViewDiv = $(this.__bioViewDiv), this.__bioViewDiv.classList.add("bioView");
        var ge = document.createElement("div");
        ge.classList.add("bonuses"), this.__playerLoyalty = document.createElement("div"), this.$_playerLoyalty = $(this.__playerLoyalty), this.__playerLoyalty.classList.add("bonus"), this.__playerLoyalty.classList.add("loyalty"), ge.appendChild(this.__playerLoyalty), this.__playerManagerBonus = document.createElement("div"), this.$_playerManagerBonus = $(this.__playerManagerBonus), this.__playerManagerBonus.classList.add("bonus"), this.__playerManagerBonus.classList.add("manager"), ge.appendChild(this.__playerManagerBonus), this.__bioViewDiv.appendChild(ge), this.__bioLeague = document.createElement("div"), this.$_bioLeague = $(this.__bioLeague), this.__bioLeague.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioLeague), this.__bioClub = document.createElement("div"), this.$_bioClub = $(this.__bioClub), this.__bioClub.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioClub), this.__bioNation = document.createElement("div"), this.$_bioNation = $(this.__bioNation), this.__bioNation.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioNation), t.appendChild(this.__bioViewDiv);
        var Se = document.createElement("div");
        Se.classList.add("debugView"), this.__playerDebug = document.createElement("div"), this.$_playerDebug = $(this.__playerDebug), this.__playerDebug.classList.add("infoRow"), Se.appendChild(this.__playerDebug), t.appendChild(Se), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen2Large.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__flagBackground = null, this.$_flagBackground = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._mainImage.destroy(), this._mainImage = null, this.__playerName = null, this.$_playerName = null, this.__attribute0 = null, this.$_attribute0 = null, this.__attribute3 = null, this.$_attribute3 = null, this.__attribute1 = null, this.$_attribute1 = null, this.__attribute4 = null, this.$_attribute4 = null, this.__attribute2 = null, this.$_attribute2 = null, this.__attribute5 = null, this.$_attribute5 = null, this.__statsRowContract = null, this.$_statsRowContract = null, this.__playerContractLabel = null, this.$_playerContractLabel = null, this.__playerContract = null, this.$_playerContract = null, this.__statsRowFitness = null, this.$_statsRowFitness = null, this.__playerFitnessLabel = null, this.$_playerFitnessLabel = null, this.__playerFitness = null, this.$_playerFitness = null, this.__chevronSet1 = null, this.$_chevronSet1 = null, this.__chevronSet4 = null, this.$_chevronSet4 = null, this.__chevronSet2 = null, this.$_chevronSet2 = null, this.__chevronSet5 = null, this.$_chevronSet5 = null, this.__chevronSet3 = null, this.$_chevronSet3 = null, this.__chevronSet6 = null, this.$_chevronSet6 = null, this.__bioViewDiv = null, this.$_bioViewDiv = null, this.__playerLoyalty = null, this.$_playerLoyalty = null, this.__playerManagerBonus = null, this.$_playerManagerBonus = null, this.__bioLeague = null, this.$_bioLeague = null, this.__bioClub = null, this.$_bioClub = null, this.__bioNation = null, this.$_bioNation = null, this.__playerDebug = null, this.$_playerDebug = null
}, components.ItemGen2Large.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen2Large.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemGen2Large.prototype.setFlag = function setFlag(item) {
    var t = item.getYear(),
        i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, t, item.nationId);
    this.__flagBackground.style.backgroundImage = "url(" + gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + i + ")"
}, components.ItemGen3Large = function ItemGen3LargeView() {
    components.ItemGenLarge.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen3Large, components.ItemGenLarge), components.ItemGen3Large.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("player"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var s = document.createElement("div");
        s.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), s.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), s.appendChild(this.__playerPosition), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__playerName = document.createElement("div"), this.$_playerName = $(this.__playerName), this.__playerName.classList.add("name"), t.appendChild(this.__playerName);
        var o = document.createElement("div");
        o.classList.add("mainView");
        var l = document.createElement("div");
        l.classList.add("statCellRow");
        var u = document.createElement("div");
        u.classList.add("statCell");
        var h = document.createElement("span");
        h.classList.add("Pace"), h.classList.add("statValue"), u.appendChild(h), this.__attribute0 = document.createElement("span"), this.$_attribute0 = $(this.__attribute0), this.__attribute0.classList.add("Pace"), this.__attribute0.classList.add("statLabel"), u.appendChild(this.__attribute0), l.appendChild(u);
        var p = document.createElement("div");
        p.classList.add("statCell");
        var m = document.createElement("span");
        m.classList.add("Dribbling"), m.classList.add("statValue"), p.appendChild(m), this.__attribute3 = document.createElement("span"), this.$_attribute3 = $(this.__attribute3), this.__attribute3.classList.add("Dribbling"), this.__attribute3.classList.add("statLabel"), p.appendChild(this.__attribute3), l.appendChild(p), o.appendChild(l);
        var _ = document.createElement("div");
        _.classList.add("statCellRow");
        var g = document.createElement("div");
        g.classList.add("statCell");
        var S = document.createElement("span");
        S.classList.add("Shooting"), S.classList.add("statValue"), g.appendChild(S), this.__attribute1 = document.createElement("span"), this.$_attribute1 = $(this.__attribute1), this.__attribute1.classList.add("Shooting"), this.__attribute1.classList.add("statLabel"), g.appendChild(this.__attribute1), _.appendChild(g);
        var v = document.createElement("div");
        v.classList.add("statCell");
        var T = document.createElement("span");
        T.classList.add("Defending"), T.classList.add("statValue"), v.appendChild(T), this.__attribute4 = document.createElement("span"), this.$_attribute4 = $(this.__attribute4), this.__attribute4.classList.add("Defending"), this.__attribute4.classList.add("statLabel"), v.appendChild(this.__attribute4), _.appendChild(v), o.appendChild(_);
        var C = document.createElement("div");
        C.classList.add("statCellRow");
        var I = document.createElement("div");
        I.classList.add("statCell");
        var L = document.createElement("span");
        L.classList.add("Passing"), L.classList.add("statValue"), I.appendChild(L), this.__attribute2 = document.createElement("span"), this.$_attribute2 = $(this.__attribute2), this.__attribute2.classList.add("Passing"), this.__attribute2.classList.add("statLabel"), I.appendChild(this.__attribute2), C.appendChild(I);
        var A = document.createElement("div");
        A.classList.add("statCell");
        var R = document.createElement("span");
        R.classList.add("Header"), R.classList.add("statValue"), A.appendChild(R), this.__attribute5 = document.createElement("span"), this.$_attribute5 = $(this.__attribute5), this.__attribute5.classList.add("Header"), this.__attribute5.classList.add("statLabel"), A.appendChild(this.__attribute5), C.appendChild(A), o.appendChild(C), t.appendChild(o);
        var D = document.createElement("div");
        D.classList.add("statsView"), this.__statsRowContract = document.createElement("div"), this.$_statsRowContract = $(this.__statsRowContract), this.__statsRowContract.classList.add("statsRow"), this.__playerContractLabel = document.createElement("span"), this.$_playerContractLabel = $(this.__playerContractLabel), this.__playerContractLabel.classList.add("Contract"), this.__playerContractLabel.classList.add("statLabel"), this.__statsRowContract.appendChild(this.__playerContractLabel), this.__playerContract = document.createElement("span"), this.$_playerContract = $(this.__playerContract), this.__playerContract.classList.add("Contract"), this.__playerContract.classList.add("statValue"), this.__statsRowContract.appendChild(this.__playerContract), D.appendChild(this.__statsRowContract), this.__statsRowFitness = document.createElement("div"), this.$_statsRowFitness = $(this.__statsRowFitness), this.__statsRowFitness.classList.add("statsRow"), this.__playerFitnessLabel = document.createElement("span"), this.$_playerFitnessLabel = $(this.__playerFitnessLabel), this.__playerFitnessLabel.classList.add("Fitness"), this.__playerFitnessLabel.classList.add("statLabel"), this.__statsRowFitness.appendChild(this.__playerFitnessLabel), this.__playerFitness = document.createElement("span"), this.$_playerFitness = $(this.__playerFitness), this.__playerFitness.classList.add("Fitness"), this.__playerFitness.classList.add("statValue"), this.__statsRowFitness.appendChild(this.__playerFitness), D.appendChild(this.__statsRowFitness), t.appendChild(D);
        var P = document.createElement("div");
        P.classList.add("styleView");
        var N = document.createElement("div");
        N.classList.add("statCellRow");
        var O = document.createElement("div");
        O.classList.add("statCell"), this.__chevronSet1 = document.createElement("div"), this.$_chevronSet1 = $(this.__chevronSet1), this.__chevronSet1.classList.add("chevrons");
        var B = document.createElement("div");
        B.classList.add("chevron1"), this.__chevronSet1.appendChild(B);
        var U = document.createElement("div");
        U.classList.add("chevron2"), this.__chevronSet1.appendChild(U);
        var M = document.createElement("div");
        M.classList.add("chevron3"), this.__chevronSet1.appendChild(M), O.appendChild(this.__chevronSet1);
        var F = document.createElement("span");
        F.classList.add("Pace"), F.classList.add("statLabel"), O.appendChild(F), N.appendChild(O);
        var q = document.createElement("div");
        q.classList.add("statCell"), this.__chevronSet4 = document.createElement("div"), this.$_chevronSet4 = $(this.__chevronSet4), this.__chevronSet4.classList.add("chevrons");
        var k = document.createElement("div");
        k.classList.add("chevron1"), this.__chevronSet4.appendChild(k);
        var V = document.createElement("div");
        V.classList.add("chevron2"), this.__chevronSet4.appendChild(V);
        var G = document.createElement("div");
        G.classList.add("chevron3"), this.__chevronSet4.appendChild(G), q.appendChild(this.__chevronSet4);
        var H = document.createElement("span");
        H.classList.add("Dribbling"), H.classList.add("statLabel"), q.appendChild(H), N.appendChild(q), P.appendChild(N);
        var j = document.createElement("div");
        j.classList.add("statCellRow");
        var Y = document.createElement("div");
        Y.classList.add("statCell"), this.__chevronSet2 = document.createElement("div"), this.$_chevronSet2 = $(this.__chevronSet2), this.__chevronSet2.classList.add("chevrons");
        var K = document.createElement("div");
        K.classList.add("chevron1"), this.__chevronSet2.appendChild(K);
        var W = document.createElement("div");
        W.classList.add("chevron2"), this.__chevronSet2.appendChild(W);
        var J = document.createElement("div");
        J.classList.add("chevron3"), this.__chevronSet2.appendChild(J), Y.appendChild(this.__chevronSet2);
        var X = document.createElement("span");
        X.classList.add("Shooting"), X.classList.add("statLabel"), Y.appendChild(X), j.appendChild(Y);
        var Z = document.createElement("div");
        Z.classList.add("statCell"), this.__chevronSet5 = document.createElement("div"), this.$_chevronSet5 = $(this.__chevronSet5), this.__chevronSet5.classList.add("chevrons");
        var ee = document.createElement("div");
        ee.classList.add("chevron1"), this.__chevronSet5.appendChild(ee);
        var te = document.createElement("div");
        te.classList.add("chevron2"), this.__chevronSet5.appendChild(te);
        var ie = document.createElement("div");
        ie.classList.add("chevron3"), this.__chevronSet5.appendChild(ie), Z.appendChild(this.__chevronSet5);
        var se = document.createElement("span");
        se.classList.add("Defending"), se.classList.add("statLabel"), Z.appendChild(se), j.appendChild(Z), P.appendChild(j);
        var ne = document.createElement("div");
        ne.classList.add("statCellRow");
        var oe = document.createElement("div");
        oe.classList.add("statCell"), this.__chevronSet3 = document.createElement("div"), this.$_chevronSet3 = $(this.__chevronSet3), this.__chevronSet3.classList.add("chevrons");
        var ae = document.createElement("div");
        ae.classList.add("chevron1"), this.__chevronSet3.appendChild(ae);
        var re = document.createElement("div");
        re.classList.add("chevron2"), this.__chevronSet3.appendChild(re);
        var le = document.createElement("div");
        le.classList.add("chevron3"), this.__chevronSet3.appendChild(le), oe.appendChild(this.__chevronSet3);
        var ce = document.createElement("span");
        ce.classList.add("Passing"), ce.classList.add("statLabel"), oe.appendChild(ce), ne.appendChild(oe);
        var ue = document.createElement("div");
        ue.classList.add("statCell"), this.__chevronSet6 = document.createElement("div"), this.$_chevronSet6 = $(this.__chevronSet6), this.__chevronSet6.classList.add("chevrons");
        var de = document.createElement("div");
        de.classList.add("chevron1"), this.__chevronSet6.appendChild(de);
        var he = document.createElement("div");
        he.classList.add("chevron2"), this.__chevronSet6.appendChild(he);
        var pe = document.createElement("div");
        pe.classList.add("chevron3"), this.__chevronSet6.appendChild(pe), ue.appendChild(this.__chevronSet6);
        var me = document.createElement("span");
        me.classList.add("Header"), me.classList.add("statLabel"), ue.appendChild(me), ne.appendChild(ue), P.appendChild(ne), t.appendChild(P), this.__bioViewDiv = document.createElement("div"), this.$_bioViewDiv = $(this.__bioViewDiv), this.__bioViewDiv.classList.add("bioView");
        var _e = document.createElement("div");
        _e.classList.add("bonuses"), this.__playerLoyalty = document.createElement("div"), this.$_playerLoyalty = $(this.__playerLoyalty), this.__playerLoyalty.classList.add("bonus"), this.__playerLoyalty.classList.add("loyalty"), _e.appendChild(this.__playerLoyalty), this.__playerManagerBonus = document.createElement("div"), this.$_playerManagerBonus = $(this.__playerManagerBonus), this.__playerManagerBonus.classList.add("bonus"), this.__playerManagerBonus.classList.add("manager"), _e.appendChild(this.__playerManagerBonus), this.__bioViewDiv.appendChild(_e), this.__bioLeague = document.createElement("div"), this.$_bioLeague = $(this.__bioLeague), this.__bioLeague.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioLeague), this.__bioClub = document.createElement("div"), this.$_bioClub = $(this.__bioClub), this.__bioClub.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioClub), this.__bioNation = document.createElement("div"), this.$_bioNation = $(this.__bioNation), this.__bioNation.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioNation), t.appendChild(this.__bioViewDiv);
        var ge = document.createElement("div");
        ge.classList.add("debugView"), this.__playerDebug = document.createElement("div"), this.$_playerDebug = $(this.__playerDebug), this.__playerDebug.classList.add("infoRow"), ge.appendChild(this.__playerDebug), t.appendChild(ge), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen3Large.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__playerName = null, this.$_playerName = null, this.__attribute0 = null, this.$_attribute0 = null, this.__attribute3 = null, this.$_attribute3 = null, this.__attribute1 = null, this.$_attribute1 = null, this.__attribute4 = null, this.$_attribute4 = null, this.__attribute2 = null, this.$_attribute2 = null, this.__attribute5 = null, this.$_attribute5 = null, this.__statsRowContract = null, this.$_statsRowContract = null, this.__playerContractLabel = null, this.$_playerContractLabel = null, this.__playerContract = null, this.$_playerContract = null, this.__statsRowFitness = null, this.$_statsRowFitness = null, this.__playerFitnessLabel = null, this.$_playerFitnessLabel = null, this.__playerFitness = null, this.$_playerFitness = null, this.__chevronSet1 = null, this.$_chevronSet1 = null, this.__chevronSet4 = null, this.$_chevronSet4 = null, this.__chevronSet2 = null, this.$_chevronSet2 = null, this.__chevronSet5 = null, this.$_chevronSet5 = null, this.__chevronSet3 = null, this.$_chevronSet3 = null, this.__chevronSet6 = null, this.$_chevronSet6 = null, this.__bioViewDiv = null, this.$_bioViewDiv = null, this.__playerLoyalty = null, this.$_playerLoyalty = null, this.__playerManagerBonus = null, this.$_playerManagerBonus = null, this.__bioLeague = null, this.$_bioLeague = null, this.__bioClub = null, this.$_bioClub = null, this.__bioNation = null, this.$_bioNation = null, this.__playerDebug = null, this.$_playerDebug = null
}, components.ItemGen3Large.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen3Large.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemGen4Large = function ItemGen4LargeView() {
    components.ItemGenLarge.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen4Large, components.ItemGenLarge), components.ItemGen4Large.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("player"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var s = document.createElement("div");
        s.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), s.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), s.appendChild(this.__playerPosition), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__playerName = document.createElement("div"), this.$_playerName = $(this.__playerName), this.__playerName.classList.add("name"), t.appendChild(this.__playerName);
        var o = document.createElement("div");
        o.classList.add("mainView");
        var l = document.createElement("div");
        l.classList.add("statCellRow");
        var u = document.createElement("div");
        u.classList.add("statCell");
        var h = document.createElement("span");
        h.classList.add("Pace"), h.classList.add("statValue"), u.appendChild(h), this.__attribute0 = document.createElement("span"), this.$_attribute0 = $(this.__attribute0), this.__attribute0.classList.add("Pace"), this.__attribute0.classList.add("statLabel"), u.appendChild(this.__attribute0), l.appendChild(u);
        var p = document.createElement("div");
        p.classList.add("statCell");
        var m = document.createElement("span");
        m.classList.add("Dribbling"), m.classList.add("statValue"), p.appendChild(m), this.__attribute3 = document.createElement("span"), this.$_attribute3 = $(this.__attribute3), this.__attribute3.classList.add("Dribbling"), this.__attribute3.classList.add("statLabel"), p.appendChild(this.__attribute3), l.appendChild(p), o.appendChild(l);
        var _ = document.createElement("div");
        _.classList.add("statCellRow");
        var g = document.createElement("div");
        g.classList.add("statCell");
        var S = document.createElement("span");
        S.classList.add("Shooting"), S.classList.add("statValue"), g.appendChild(S), this.__attribute1 = document.createElement("span"), this.$_attribute1 = $(this.__attribute1), this.__attribute1.classList.add("Shooting"), this.__attribute1.classList.add("statLabel"), g.appendChild(this.__attribute1), _.appendChild(g);
        var v = document.createElement("div");
        v.classList.add("statCell");
        var T = document.createElement("span");
        T.classList.add("Defending"), T.classList.add("statValue"), v.appendChild(T), this.__attribute4 = document.createElement("span"), this.$_attribute4 = $(this.__attribute4), this.__attribute4.classList.add("Defending"), this.__attribute4.classList.add("statLabel"), v.appendChild(this.__attribute4), _.appendChild(v), o.appendChild(_);
        var C = document.createElement("div");
        C.classList.add("statCellRow");
        var I = document.createElement("div");
        I.classList.add("statCell");
        var L = document.createElement("span");
        L.classList.add("Passing"), L.classList.add("statValue"), I.appendChild(L), this.__attribute2 = document.createElement("span"), this.$_attribute2 = $(this.__attribute2), this.__attribute2.classList.add("Passing"), this.__attribute2.classList.add("statLabel"), I.appendChild(this.__attribute2), C.appendChild(I);
        var A = document.createElement("div");
        A.classList.add("statCell");
        var R = document.createElement("span");
        R.classList.add("Header"), R.classList.add("statValue"), A.appendChild(R), this.__attribute5 = document.createElement("span"), this.$_attribute5 = $(this.__attribute5), this.__attribute5.classList.add("Header"), this.__attribute5.classList.add("statLabel"), A.appendChild(this.__attribute5), C.appendChild(A), o.appendChild(C), t.appendChild(o);
        var D = document.createElement("div");
        D.classList.add("statsView"), this.__statsRowContract = document.createElement("div"), this.$_statsRowContract = $(this.__statsRowContract), this.__statsRowContract.classList.add("statsRow"), this.__playerContractLabel = document.createElement("span"), this.$_playerContractLabel = $(this.__playerContractLabel), this.__playerContractLabel.classList.add("Contract"), this.__playerContractLabel.classList.add("statLabel"), this.__statsRowContract.appendChild(this.__playerContractLabel), this.__playerContract = document.createElement("span"), this.$_playerContract = $(this.__playerContract), this.__playerContract.classList.add("Contract"), this.__playerContract.classList.add("statValue"), this.__statsRowContract.appendChild(this.__playerContract), D.appendChild(this.__statsRowContract), this.__statsRowFitness = document.createElement("div"), this.$_statsRowFitness = $(this.__statsRowFitness), this.__statsRowFitness.classList.add("statsRow"), this.__playerFitnessLabel = document.createElement("span"), this.$_playerFitnessLabel = $(this.__playerFitnessLabel), this.__playerFitnessLabel.classList.add("Fitness"), this.__playerFitnessLabel.classList.add("statLabel"), this.__statsRowFitness.appendChild(this.__playerFitnessLabel), this.__playerFitness = document.createElement("span"), this.$_playerFitness = $(this.__playerFitness), this.__playerFitness.classList.add("Fitness"), this.__playerFitness.classList.add("statValue"), this.__statsRowFitness.appendChild(this.__playerFitness), D.appendChild(this.__statsRowFitness), t.appendChild(D);
        var P = document.createElement("div");
        P.classList.add("styleView");
        var N = document.createElement("div");
        N.classList.add("statCellRow");
        var O = document.createElement("div");
        O.classList.add("statCell"), this.__chevronSet1 = document.createElement("div"), this.$_chevronSet1 = $(this.__chevronSet1), this.__chevronSet1.classList.add("chevrons");
        var B = document.createElement("div");
        B.classList.add("chevron1"), this.__chevronSet1.appendChild(B);
        var U = document.createElement("div");
        U.classList.add("chevron2"), this.__chevronSet1.appendChild(U);
        var M = document.createElement("div");
        M.classList.add("chevron3"), this.__chevronSet1.appendChild(M), O.appendChild(this.__chevronSet1);
        var F = document.createElement("span");
        F.classList.add("Pace"), F.classList.add("statLabel"), O.appendChild(F), N.appendChild(O);
        var q = document.createElement("div");
        q.classList.add("statCell"), this.__chevronSet4 = document.createElement("div"), this.$_chevronSet4 = $(this.__chevronSet4), this.__chevronSet4.classList.add("chevrons");
        var k = document.createElement("div");
        k.classList.add("chevron1"), this.__chevronSet4.appendChild(k);
        var V = document.createElement("div");
        V.classList.add("chevron2"), this.__chevronSet4.appendChild(V);
        var G = document.createElement("div");
        G.classList.add("chevron3"), this.__chevronSet4.appendChild(G), q.appendChild(this.__chevronSet4);
        var H = document.createElement("span");
        H.classList.add("Dribbling"), H.classList.add("statLabel"), q.appendChild(H), N.appendChild(q), P.appendChild(N);
        var j = document.createElement("div");
        j.classList.add("statCellRow");
        var Y = document.createElement("div");
        Y.classList.add("statCell"), this.__chevronSet2 = document.createElement("div"), this.$_chevronSet2 = $(this.__chevronSet2), this.__chevronSet2.classList.add("chevrons");
        var K = document.createElement("div");
        K.classList.add("chevron1"), this.__chevronSet2.appendChild(K);
        var W = document.createElement("div");
        W.classList.add("chevron2"), this.__chevronSet2.appendChild(W);
        var J = document.createElement("div");
        J.classList.add("chevron3"), this.__chevronSet2.appendChild(J), Y.appendChild(this.__chevronSet2);
        var X = document.createElement("span");
        X.classList.add("Shooting"), X.classList.add("statLabel"), Y.appendChild(X), j.appendChild(Y);
        var Z = document.createElement("div");
        Z.classList.add("statCell"), this.__chevronSet5 = document.createElement("div"), this.$_chevronSet5 = $(this.__chevronSet5), this.__chevronSet5.classList.add("chevrons");
        var ee = document.createElement("div");
        ee.classList.add("chevron1"), this.__chevronSet5.appendChild(ee);
        var te = document.createElement("div");
        te.classList.add("chevron2"), this.__chevronSet5.appendChild(te);
        var ie = document.createElement("div");
        ie.classList.add("chevron3"), this.__chevronSet5.appendChild(ie), Z.appendChild(this.__chevronSet5);
        var se = document.createElement("span");
        se.classList.add("Defending"), se.classList.add("statLabel"), Z.appendChild(se), j.appendChild(Z), P.appendChild(j);
        var ne = document.createElement("div");
        ne.classList.add("statCellRow");
        var oe = document.createElement("div");
        oe.classList.add("statCell"), this.__chevronSet3 = document.createElement("div"), this.$_chevronSet3 = $(this.__chevronSet3), this.__chevronSet3.classList.add("chevrons");
        var ae = document.createElement("div");
        ae.classList.add("chevron1"), this.__chevronSet3.appendChild(ae);
        var re = document.createElement("div");
        re.classList.add("chevron2"), this.__chevronSet3.appendChild(re);
        var le = document.createElement("div");
        le.classList.add("chevron3"), this.__chevronSet3.appendChild(le), oe.appendChild(this.__chevronSet3);
        var ce = document.createElement("span");
        ce.classList.add("Passing"), ce.classList.add("statLabel"), oe.appendChild(ce), ne.appendChild(oe);
        var ue = document.createElement("div");
        ue.classList.add("statCell"), this.__chevronSet6 = document.createElement("div"), this.$_chevronSet6 = $(this.__chevronSet6), this.__chevronSet6.classList.add("chevrons");
        var de = document.createElement("div");
        de.classList.add("chevron1"), this.__chevronSet6.appendChild(de);
        var he = document.createElement("div");
        he.classList.add("chevron2"), this.__chevronSet6.appendChild(he);
        var pe = document.createElement("div");
        pe.classList.add("chevron3"), this.__chevronSet6.appendChild(pe), ue.appendChild(this.__chevronSet6);
        var me = document.createElement("span");
        me.classList.add("Header"), me.classList.add("statLabel"), ue.appendChild(me), ne.appendChild(ue), P.appendChild(ne), t.appendChild(P), this.__bioViewDiv = document.createElement("div"), this.$_bioViewDiv = $(this.__bioViewDiv), this.__bioViewDiv.classList.add("bioView");
        var _e = document.createElement("div");
        _e.classList.add("bonuses"), this.__playerLoyalty = document.createElement("div"), this.$_playerLoyalty = $(this.__playerLoyalty), this.__playerLoyalty.classList.add("bonus"), this.__playerLoyalty.classList.add("loyalty"), _e.appendChild(this.__playerLoyalty), this.__playerManagerBonus = document.createElement("div"), this.$_playerManagerBonus = $(this.__playerManagerBonus), this.__playerManagerBonus.classList.add("bonus"), this.__playerManagerBonus.classList.add("manager"), _e.appendChild(this.__playerManagerBonus), this.__bioViewDiv.appendChild(_e), this.__bioLeague = document.createElement("div"), this.$_bioLeague = $(this.__bioLeague), this.__bioLeague.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioLeague), this.__bioClub = document.createElement("div"), this.$_bioClub = $(this.__bioClub), this.__bioClub.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioClub), this.__bioNation = document.createElement("div"), this.$_bioNation = $(this.__bioNation), this.__bioNation.classList.add("bioRow"), this.__bioViewDiv.appendChild(this.__bioNation), t.appendChild(this.__bioViewDiv);
        var ge = document.createElement("div");
        ge.classList.add("debugView"), this.__playerDebug = document.createElement("div"), this.$_playerDebug = $(this.__playerDebug), this.__playerDebug.classList.add("infoRow"), ge.appendChild(this.__playerDebug), t.appendChild(ge), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen4Large.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__playerName = null, this.$_playerName = null, this.__attribute0 = null, this.$_attribute0 = null, this.__attribute3 = null, this.$_attribute3 = null, this.__attribute1 = null, this.$_attribute1 = null, this.__attribute4 = null, this.$_attribute4 = null, this.__attribute2 = null, this.$_attribute2 = null, this.__attribute5 = null, this.$_attribute5 = null, this.__statsRowContract = null, this.$_statsRowContract = null, this.__playerContractLabel = null, this.$_playerContractLabel = null, this.__playerContract = null, this.$_playerContract = null, this.__statsRowFitness = null, this.$_statsRowFitness = null, this.__playerFitnessLabel = null, this.$_playerFitnessLabel = null, this.__playerFitness = null, this.$_playerFitness = null, this.__chevronSet1 = null, this.$_chevronSet1 = null, this.__chevronSet4 = null, this.$_chevronSet4 = null, this.__chevronSet2 = null, this.$_chevronSet2 = null, this.__chevronSet5 = null, this.$_chevronSet5 = null, this.__chevronSet3 = null, this.$_chevronSet3 = null, this.__chevronSet6 = null, this.$_chevronSet6 = null, this.__bioViewDiv = null, this.$_bioViewDiv = null, this.__playerLoyalty = null, this.$_playerLoyalty = null, this.__playerManagerBonus = null, this.$_playerManagerBonus = null, this.__bioLeague = null, this.$_bioLeague = null, this.__bioClub = null, this.$_bioClub = null, this.__bioNation = null, this.$_bioNation = null, this.__playerDebug = null, this.$_playerDebug = null
}, components.ItemGen4Large.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen4Large.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemManagerBase = function ItemManagerBaseView() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemManagerBase, components.ItemFUTBase), components.ItemManagerBase.onImageLoad = function onImageLoad(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.STAFF + ".png"))
}, components.ItemManagerBase.prototype._render = function _render(item) {
    if (this.__position.textContent = "", item.isValid()) {
        item.getStaticData();
        var t = item.getYear();
        item.concept || !item.isContractExpired() || item.getAuctionData().isSold() || this.addClass(components.ItemFUTBase.CLASS.CONTRACT_EXPIRED);
        var i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PORTRAIT, t, item.getMaskedResourceId());
        utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.STAFF, item.getMaskedResourceId().toString(), t) && (i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PORTRAIT, t, enums.PlaceholderAssetId.STAFF)), this._mainImage.setResource(i, !0).observe(this._mainImage, components.ItemManagerBase.onImageLoad);
        var s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, t, item.nationId);
        this._flagImage.setResource(s, !0).observe(this._flagImage, components.ItemFUTBase.onFlagImageLoad), this.__position.textContent = gLocalization.lText("cards.cardfrontlarge.manager")
    }
}, components.ItemManagerBase.prototype.canRender = function canRender(item) {
    return item.isManager()
}, components.ItemManagerBase.prototype._resetRender = function _resetRender() {
    this.removeClass(components.ItemFUTBase.CLASS.CONTRACT_EXPIRED)
}, components.ItemManagerLarge = function ItemManagerLargeView() {
    components.ItemManagerBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemManagerLarge, components.ItemManagerBase), components.ItemManagerLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("manager"), t.classList.add("staff"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__position = document.createElement("div"), this.$_position = $(this.__position), this.__position.classList.add("position"), t.appendChild(this.__position), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), t.appendChild(this._flagImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("manager"), this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var s = document.createElement("div");
        s.classList.add("mainView"), this.__managerLeague = document.createElement("div"), this.$_managerLeague = $(this.__managerLeague), this.__managerLeague.classList.add("infoRow"), s.appendChild(this.__managerLeague), this.__managerContract = document.createElement("div"), this.$_managerContract = $(this.__managerContract), this.__managerContract.classList.add("infoRow"), s.appendChild(this.__managerContract), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("bioView"), this.__managerNegotiation = document.createElement("div"), this.$_managerNegotiation = $(this.__managerNegotiation), this.__managerNegotiation.classList.add("infoRow"), o.appendChild(this.__managerNegotiation), t.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("debugView"), this.__managerDebug = document.createElement("div"), this.$_managerDebug = $(this.__managerDebug), this.__managerDebug.classList.add("infoRow"), l.appendChild(this.__managerDebug), t.appendChild(l);
        var u = document.createElement("div");
        u.classList.add("manager"), u.classList.add("iconStaff"), t.appendChild(u), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemManagerLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__position = null, this.$_position = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__managerLeague = null, this.$_managerLeague = null, this.__managerContract = null, this.$_managerContract = null, this.__managerNegotiation = null, this.$_managerNegotiation = null, this.__managerDebug = null, this.$_managerDebug = null
}, components.ItemManagerLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemManagerLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemManagerLarge.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0), gViewPreferencesModel.addListener(models.ViewPreferencesModel.VIEW_MODE_CHANGED, this, this.displayModeChanged)
}, components.ItemManagerLarge.prototype.dealloc = function dealloc() {
    gViewPreferencesModel.clearListenersByScope(this), this.superclass()
}, components.ItemManagerLarge.prototype.displayModeChanged = function displayModeChanged(sender) {
    var root = this.getRoot(),
        t = $(this.getDisplayMode(), root);
    t.length && ($(models.ViewPreferencesModel.VIEW_MODE.BIO, root).hide(), $(models.ViewPreferencesModel.VIEW_MODE.MAIN, root).hide(), t.show())
}, components.ItemManagerLarge.prototype.loopDisplayMode = function loopDisplayMode() {
    var mode = "";
    switch (this.getDisplayMode()) {
        case models.ViewPreferencesModel.VIEW_MODE.MAIN:
            mode = models.ViewPreferencesModel.VIEW_MODE.BIO;
            break;
        case models.ViewPreferencesModel.VIEW_MODE.BIO:
            mode = models.ViewPreferencesModel.VIEW_MODE.MAIN;
            break;
        default:
            mode = models.ViewPreferencesModel.VIEW_MODE.MAIN
    }
    gViewPreferencesModel.setViewMode(mode)
}, components.ItemManagerLarge.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__itemName.textContent = t.name, this.__managerLeague.textContent = utils.FUTLocalization.getLeagueNameByID(item.leagueId, item.getYear()), this.__managerContract.textContent = gLocalization.lPrint("cards.cardfrontlarge.contracts.manager", [item.contract]), this.__managerNegotiation.textContent = gLocalization.lText("card.title.contract") + " +" + t.amount + "%";
    var currentView = gViewPreferencesModel.getViewMode();
    currentView !== models.ViewPreferencesModel.VIEW_MODE.MAIN && currentView !== models.ViewPreferencesModel.VIEW_MODE.BIO && (currentView = models.ViewPreferencesModel.VIEW_MODE.MAIN), this.setDisplayMode(currentView)
}, components.ItemStaffBase = function ItemStaffBaseView() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemStaffBase, components.ItemFUTBase), components.ItemStaffBase.ICON = {
    HEAD_COACH: "headCoach",
    GK_COACH: "gkCoach",
    FITNESS_COACH: "fitnessCoach",
    PHYSIO_COACH: "physioCoach"
}, components.ItemStaffBase.onImageLoad = function onImageLoad(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.STAFF + ".png"))
}, components.ItemStaffBase.prototype._render = function _render(item) {
    this.getRoot();
    var t = "",
        i = item.getYear();
    switch (item.type) {
        case enums.ItemType.HEAD_COACH:
            t = components.ItemStaffBase.ICON.HEAD_COACH;
            break;
        case enums.ItemType.GK_COACH:
            t = components.ItemStaffBase.ICON.GK_COACH;
            break;
        case enums.ItemType.FITNESS_COACH:
            t = components.ItemStaffBase.ICON.FITNESS_COACH;
            break;
        case enums.ItemType.PHYSIO:
            t = components.ItemStaffBase.ICON.PHYSIO_COACH;
            break;
        default:
            utils.Debug.Assert(!1, "[components.ItemStaffBase] Reached default case when selecting the icon in _render() method.")
    }
    DOMKit.addClass(this.__itemIcon, t);
    var s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PORTRAIT, i, item.getMaskedResourceId());
    utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.STAFF, item.getMaskedResourceId().toString(), i) && (s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PORTRAIT, i, enums.PlaceholderAssetId.STAFF)), this._mainImage.setResource(s, !0).observe(this._mainImage, components.ItemStaffBase.onImageLoad)
}, components.ItemStaffBase.prototype.canRender = function canRender(item) {
    return item.isCoach()
}, components.ItemStaffBase.prototype._resetRender = function _resetRender() {
    var t = [components.ItemStaffBase.ICON.HEAD_COACH, components.ItemStaffBase.ICON.GK_COACH, components.ItemStaffBase.ICON.FITNESS_COACH, components.ItemStaffBase.ICON.PHYSIO_COACH].join(" ");
    DOMKit.removeClass(this.__itemIcon, t)
}, components.ItemStaffLarge = function ItemStaffLargeView() {
    components.ItemStaffBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemStaffLarge, components.ItemStaffBase), components.ItemStaffLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("staff"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("staff"), this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var s = document.createElement("div");
        s.classList.add("infoView"), this.__line1 = document.createElement("div"), this.$_line1 = $(this.__line1), this.__line1.classList.add("infoRow"), s.appendChild(this.__line1), this.__line2 = document.createElement("div"), this.$_line2 = $(this.__line2), this.__line2.classList.add("infoRow"), s.appendChild(this.__line2), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("debugView"), this.__staffDebug = document.createElement("div"), this.$_staffDebug = $(this.__staffDebug), this.__staffDebug.classList.add("infoRow"), o.appendChild(this.__staffDebug), t.appendChild(o), this.__itemIcon = document.createElement("div"), this.$_itemIcon = $(this.__itemIcon), this.__itemIcon.classList.add("iconStaff"), t.appendChild(this.__itemIcon), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemStaffLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__line1 = null, this.$_line1 = null, this.__line2 = null, this.$_line2 = null, this.__staffDebug = null, this.$_staffDebug = null, this.__itemIcon = null, this.$_itemIcon = null
}, components.ItemStaffLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemStaffLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemStaffLarge.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__itemName.textContent = t.name, this.__line1.textContent = "+" + gLocalization.lNum(t.amount) + "%", this.__line2.textContent = utils.FUTLocalization.getStaffAttribute(item.type, t.trainedAttribute);
    var currentView = gViewPreferencesModel.getViewMode();
    currentView !== models.ViewPreferencesModel.VIEW_MODE.INFO && currentView !== models.ViewPreferencesModel.VIEW_MODE.DEBUG && (currentView = models.ViewPreferencesModel.VIEW_MODE.INFO), this.setDisplayMode(currentView)
}, components.ItemConsumableBase = function ItemConsumableBaseView() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemConsumableBase, components.ItemFUTBase), components.ItemConsumableBase.ICON = {
    FITNESS: "fitness",
    GK_TRAINING: "gkTraining",
    HEALING: "healing",
    MANAGER_CONTRACT: "managerContract",
    MANAGER_LEAGUE: "managerLeague",
    PLAYER_CONTRACT: "playerContract",
    PLAYER_TRAINING: "playerTraining",
    POSITIONING: "positioning"
}, components.ItemConsumableBase.CLASS = {
    CONTRACT_STATS: "contractStats",
    BRONZE_BOOST: "bronzeBoost",
    SILVER_BOOST: "silverBoost",
    GOLD_BOOST: "goldBoost"
}, components.ItemConsumableBase.prototype.getImageUrl = function getImageUrl(t, i, s) {
    return utils.AssetLocator.getImage(t, i, s)
}, components.ItemConsumableBase.prototype._render = function _render(item) {
    this._renderConsumableStack(item);
    var t = item.getStaticData(),
        i = this.getImageUrl(t.assetType, item.getYear(), t.assetId);
    this._mainImage.setResource(i), this._setConsumableIcon(item)
}, components.ItemConsumableBase.prototype.canRender = function canRender(item) {
    return item.isConsumable() && !item.isStyleModifier()
}, components.ItemConsumableBase.prototype._resetRender = function _resetRender() {
    var t = [components.ItemConsumableBase.ICON.FITNESS, components.ItemConsumableBase.ICON.GK_TRAINING, components.ItemConsumableBase.ICON.HEALING, components.ItemConsumableBase.ICON.MANAGER_CONTRACT, components.ItemConsumableBase.ICON.MANAGER_LEAGUE, components.ItemConsumableBase.ICON.PLAYER_CONTRACT, components.ItemConsumableBase.ICON.PLAYER_TRAINING, components.ItemConsumableBase.ICON.POSITIONING].join(" ");
    DOMKit.removeClass(this.__itemIcon, t)
}, components.ItemConsumableBase.prototype._renderConsumableStack = function _renderConsumableStack(item) {
    var t = item.stackCount > 1;
    this.__stackCount.textContent = t ? item.stackCount.toString() : "", this.$_stackCount.toggle(t)
}, components.ItemConsumableBase.prototype._setConsumableIcon = function _setConsumableIcon(item) {
    var t = "";
    switch (item.type) {
        case enums.ItemType.CONTRACT:
            t = item.isPlayerContract() ? components.ItemConsumableBase.ICON.PLAYER_CONTRACT : components.ItemConsumableBase.ICON.MANAGER_CONTRACT;
            break;
        case enums.ItemType.TRAINING:
            item.isGKTraining() ? t = components.ItemConsumableBase.ICON.GK_TRAINING : item.isPlayerTraining() ? t = components.ItemConsumableBase.ICON.PLAYER_TRAINING : item.isPlayerPositionModifier() ? t = components.ItemConsumableBase.ICON.POSITIONING : item.isManagerLeagueModifier() && (t = components.ItemConsumableBase.ICON.MANAGER_LEAGUE);
            break;
        case enums.ItemType.HEALTH:
            t = item.isFitness() ? components.ItemConsumableBase.ICON.FITNESS : components.ItemConsumableBase.ICON.HEALING;
            break;
        default:
            utils.Debug.Assert(!1, "[components.ItemConsumableBase] Hit default case for method _setConsumableIcon().")
    }
    DOMKit.addClass(this.__itemIcon, t)
}, components.ItemConsumableLarge = function ItemConsumableLargeView() {
    components.ItemConsumableBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemConsumableLarge, components.ItemConsumableBase), components.ItemConsumableLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("consumable"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__stackCount = document.createElement("div"), this.$_stackCount = $(this.__stackCount), this.__stackCount.classList.add("infoTab"), t.appendChild(this.__stackCount), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var s = document.createElement("div");
        s.classList.add("infoView"), this.__line1 = document.createElement("div"), this.$_line1 = $(this.__line1), this.__line1.classList.add("infoRow"), s.appendChild(this.__line1), this.__line2 = document.createElement("div"), this.$_line2 = $(this.__line2), this.__line2.classList.add("infoRow"), s.appendChild(this.__line2), t.appendChild(s), this.__itemIcon = document.createElement("div"), this.$_itemIcon = $(this.__itemIcon), this.__itemIcon.classList.add("iconConsumable"), t.appendChild(this.__itemIcon);
        var o = document.createElement("div");
        o.classList.add("debugView"), this.__consumableDebug = document.createElement("div"), this.$_consumableDebug = $(this.__consumableDebug), this.__consumableDebug.classList.add("infoRow"), o.appendChild(this.__consumableDebug), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemConsumableLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__stackCount = null, this.$_stackCount = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__line1 = null, this.$_line1 = null, this.__line2 = null, this.$_line2 = null, this.__itemIcon = null, this.$_itemIcon = null, this.__consumableDebug = null, this.$_consumableDebug = null
}, components.ItemConsumableLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemConsumableLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemConsumableLarge.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__itemName.textContent = t.name;
    var i = "",
        s = "",
        o = "";
    if (item.isContract()) {
        var l = $(document.createElement("span")).html("+" + t.bronzeBoost).addClass(components.ItemConsumableBase.CLASS.BRONZE_BOOST),
            u = $(document.createElement("span")).html("+" + t.silverBoost).addClass(components.ItemConsumableBase.CLASS.SILVER_BOOST),
            h = $(document.createElement("span")).html("+" + t.goldBoost).addClass(components.ItemConsumableBase.CLASS.GOLD_BOOST);
        this.__itemName.textContent = gLocalization.lText("card.title.contract"), this.$_line1.empty().append([l, u, h]).addClass(components.ItemConsumableBase.CLASS.CONTRACT_STATS), this.__line2.textContent = gLocalization.lText("card.desc.contract.matches")
    } else if (item.isTraining()) {
        var p = utils.FUTLocalization.convertAttributeIdToHALString(t.trainedAttribute, item.isGKTraining());
        item.isGKTraining() ? (i = gLocalization.lText("trainingtype.goalkeeperTraining"), s = "+" + gLocalization.lNum(t.amount), o = gLocalization.lText("card.desc.training.gkattrib." + p)) : item.isPlayerTraining() ? (i = gLocalization.lText("trainingtype.playerTraining"), s = "+" + gLocalization.lNum(t.amount), o = gLocalization.lText("card.desc.training.attrib." + p)) : item.isPlayerPositionModifier() ? (i = gLocalization.lText("trainingtype.modifier"), s = gLocalization.lText("card.desc.training.pos." + t.trainPosFrom + "_" + t.trainPosTo)) : item.isManagerLeagueModifier() && (i = gLocalization.lText("card.title.leaguechange"), s = utils.FUTLocalization.getLeagueNameByID(item.leagueId)), this.__itemName.textContent = i, this.__line1.textContent = s, this.__line2.textContent = o
    } else if (item.isHealth()) {
        if (i = gLocalization.lText("card.title.healing"), s = "+" + gLocalization.lNum(t.amount), item.isPlayerFitness()) i = gLocalization.lText("card.desc.contract.player"), o = gLocalization.lText("card.title.fitness");
        else if (item.isTeamFitness()) i = gLocalization.lText("card.desc.healing.squad"), o = gLocalization.lText("card.title.fitness");
        else switch (item.subtype) {
            case enums.ItemSubType.HEALING_HEAD:
                o = gLocalization.lText("card.desc.healing.2012.head");
                break;
            case enums.ItemSubType.HEALING_SHOULDER:
                o = gLocalization.lText("card.desc.healing.2012.shoulder");
                break;
            case enums.ItemSubType.HEALING_ARM:
                o = gLocalization.lText("card.desc.healing.2012.arm");
                break;
            case enums.ItemSubType.HEALING_BACK:
                o = gLocalization.lText("card.desc.healing.2012.back");
                break;
            case enums.ItemSubType.HEALING_HIP:
                o = gLocalization.lText("card.desc.healing.2012.hip");
                break;
            case enums.ItemSubType.HEALING_LEG:
                o = gLocalization.lText("card.desc.healing.2012.leg");
                break;
            case enums.ItemSubType.HEALING_FOOT:
                o = gLocalization.lText("card.desc.healing.2012.foot");
                break;
            case enums.ItemSubType.HEALING_ALL:
                o = gLocalization.lText("card.desc.healing.all.injuries")
        }
        this.__itemName.textContent = i, this.__line1.textContent = s, this.__line2.textContent = o
    }
}, components.ItemConsumableLarge.prototype._resetRender = function _resetRender() {
    this.superclass(), DOMKit.removeClass(this.__line1, components.ItemConsumableBase.CLASS.CONTRACT_STATS)
}, components.ItemChemistryStyleBase = function ItemChemistryStyleBaseView() {
    components.ItemConsumableBase.call(this)
}, utils.JS.inherits(components.ItemChemistryStyleBase, components.ItemConsumableBase), components.ItemChemistryStyleBase.prototype._render = function _render(t) {
    this._renderConsumableStack(t)
}, components.ItemChemistryStyleBase.prototype.canRender = function canRender(item) {
    return item.isStyleModifier()
}, components.ItemChemistryStyleBase.prototype._resetRender = function _resetRender() {}, components.ItemChemistryStyleLarge = function ItemChemistryStyleLargeView() {
    components.ItemChemistryStyleBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemChemistryStyleLarge, components.ItemChemistryStyleBase), components.ItemChemistryStyleLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("chemistryStyle"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__stackCount = document.createElement("div"), this.$_stackCount = $(this.__stackCount), this.__stackCount.classList.add("infoTab"), t.appendChild(this.__stackCount), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName), this.__itemTypeName = document.createElement("div"), this.$_itemTypeName = $(this.__itemTypeName), this.__itemTypeName.classList.add("itemTypeName"), t.appendChild(this.__itemTypeName);
        var s = document.createElement("div");
        s.classList.add("styleView");
        var o = document.createElement("div");
        o.classList.add("statCellRow");
        var l = document.createElement("div");
        l.classList.add("statCell"), this.__chevronSet1 = document.createElement("div"), this.$_chevronSet1 = $(this.__chevronSet1), this.__chevronSet1.classList.add("chevrons");
        var u = document.createElement("div");
        u.classList.add("chevron1"), this.__chevronSet1.appendChild(u);
        var h = document.createElement("div");
        h.classList.add("chevron2"), this.__chevronSet1.appendChild(h);
        var p = document.createElement("div");
        p.classList.add("chevron3"), this.__chevronSet1.appendChild(p), l.appendChild(this.__chevronSet1);
        var m = document.createElement("span");
        m.classList.add("Pace"), m.classList.add("statLabel"), l.appendChild(m), o.appendChild(l);
        var _ = document.createElement("div");
        _.classList.add("statCell"), this.__chevronSet4 = document.createElement("div"), this.$_chevronSet4 = $(this.__chevronSet4), this.__chevronSet4.classList.add("chevrons");
        var g = document.createElement("div");
        g.classList.add("chevron1"), this.__chevronSet4.appendChild(g);
        var S = document.createElement("div");
        S.classList.add("chevron2"), this.__chevronSet4.appendChild(S);
        var v = document.createElement("div");
        v.classList.add("chevron3"), this.__chevronSet4.appendChild(v), _.appendChild(this.__chevronSet4);
        var T = document.createElement("span");
        T.classList.add("Dribbling"), T.classList.add("statLabel"), _.appendChild(T), o.appendChild(_), s.appendChild(o);
        var C = document.createElement("div");
        C.classList.add("statCellRow");
        var I = document.createElement("div");
        I.classList.add("statCell"), this.__chevronSet2 = document.createElement("div"), this.$_chevronSet2 = $(this.__chevronSet2), this.__chevronSet2.classList.add("chevrons");
        var L = document.createElement("div");
        L.classList.add("chevron1"), this.__chevronSet2.appendChild(L);
        var A = document.createElement("div");
        A.classList.add("chevron2"), this.__chevronSet2.appendChild(A);
        var R = document.createElement("div");
        R.classList.add("chevron3"), this.__chevronSet2.appendChild(R), I.appendChild(this.__chevronSet2);
        var D = document.createElement("span");
        D.classList.add("Shooting"), D.classList.add("statLabel"), I.appendChild(D), C.appendChild(I);
        var P = document.createElement("div");
        P.classList.add("statCell"), this.__chevronSet5 = document.createElement("div"), this.$_chevronSet5 = $(this.__chevronSet5), this.__chevronSet5.classList.add("chevrons");
        var N = document.createElement("div");
        N.classList.add("chevron1"), this.__chevronSet5.appendChild(N);
        var O = document.createElement("div");
        O.classList.add("chevron2"), this.__chevronSet5.appendChild(O);
        var B = document.createElement("div");
        B.classList.add("chevron3"), this.__chevronSet5.appendChild(B), P.appendChild(this.__chevronSet5);
        var U = document.createElement("span");
        U.classList.add("Defending"), U.classList.add("statLabel"), P.appendChild(U), C.appendChild(P), s.appendChild(C);
        var M = document.createElement("div");
        M.classList.add("statCellRow");
        var F = document.createElement("div");
        F.classList.add("statCell"), this.__chevronSet3 = document.createElement("div"), this.$_chevronSet3 = $(this.__chevronSet3), this.__chevronSet3.classList.add("chevrons");
        var q = document.createElement("div");
        q.classList.add("chevron1"), this.__chevronSet3.appendChild(q);
        var k = document.createElement("div");
        k.classList.add("chevron2"), this.__chevronSet3.appendChild(k);
        var V = document.createElement("div");
        V.classList.add("chevron3"), this.__chevronSet3.appendChild(V), F.appendChild(this.__chevronSet3);
        var G = document.createElement("span");
        G.classList.add("Passing"), G.classList.add("statLabel"), F.appendChild(G), M.appendChild(F);
        var H = document.createElement("div");
        H.classList.add("statCell"), this.__chevronSet6 = document.createElement("div"), this.$_chevronSet6 = $(this.__chevronSet6), this.__chevronSet6.classList.add("chevrons");
        var j = document.createElement("div");
        j.classList.add("chevron1"), this.__chevronSet6.appendChild(j);
        var Y = document.createElement("div");
        Y.classList.add("chevron2"), this.__chevronSet6.appendChild(Y);
        var K = document.createElement("div");
        K.classList.add("chevron3"), this.__chevronSet6.appendChild(K), H.appendChild(this.__chevronSet6);
        var W = document.createElement("span");
        W.classList.add("Header"), W.classList.add("statLabel"), H.appendChild(W), M.appendChild(H), s.appendChild(M), t.appendChild(s);
        var J = document.createElement("div");
        J.classList.add("debugView"), this.__chemistryStyleDebug = document.createElement("div"), this.$_chemistryStyleDebug = $(this.__chemistryStyleDebug), this.__chemistryStyleDebug.classList.add("infoRow"), J.appendChild(this.__chemistryStyleDebug), t.appendChild(J), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemChemistryStyleLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__stackCount = null, this.$_stackCount = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__itemTypeName = null, this.$_itemTypeName = null, this.__chevronSet1 = null, this.$_chevronSet1 = null, this.__chevronSet4 = null, this.$_chevronSet4 = null, this.__chevronSet2 = null, this.$_chevronSet2 = null, this.__chevronSet5 = null, this.$_chevronSet5 = null, this.__chevronSet3 = null, this.$_chevronSet3 = null, this.__chevronSet6 = null, this.$_chevronSet6 = null, this.__chemistryStyleDebug = null, this.$_chemistryStyleDebug = null
}, components.ItemChemistryStyleLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemChemistryStyleLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemChemistryStyleLarge.prototype._render = function _render(item) {
    this.superclass(item);
    var t = item.getStaticData(),
        root = this.getRoot(),
        i = utils.AssetLocator.getImage(t.assetType, item.getYear(), item.subtype);
    this._mainImage.setResource(i);
    var s = item.subtype,
        o = s > 0 ? gLocalization.lText("playstyles.2018.playstyle" + s) : gLocalization.lText("playstyles.invalid.playstyle0");
    this.__itemName.textContent = o, this.__itemTypeName.textContent = gLocalization.lText("consumablecategory.title.playstyle"), item.isGKStyleModifier() ? ($(".statLabel.Pace", root).html(gLocalization.lText("cards.cardfront.divingAbbr")), $(".statLabel.Header", root).html(gLocalization.lText("cards.cardfront.positionAbbr")), $(".statLabel.Dribbling", root).html(gLocalization.lText("cards.cardfront.reflexAbbr")), $(".statLabel.Shooting", root).html(gLocalization.lText("cards.cardfront.handlingAbbr")), $(".statLabel.Defending", root).html(gLocalization.lText("cards.cardfront.speedAbbr")), $(".statLabel.Passing", root).html(gLocalization.lText("cards.cardfront.kickAbbr"))) : ($(".statLabel.Pace", root).html(gLocalization.lText("cards.cardfront.paceAbbr")), $(".statLabel.Header", root).html(gLocalization.lText("cards.cardfront.headingAbbr")), $(".statLabel.Dribbling", root).html(gLocalization.lText("cards.cardfront.dribblingAbbr")), $(".statLabel.Shooting", root).html(gLocalization.lText("cards.cardfront.shootingAbbr")), $(".statLabel.Defending", root).html(gLocalization.lText("cards.cardfront.defendingAbbr")), $(".statLabel.Passing", root).html(gLocalization.lText("cards.cardfront.passingAbbr")));
    var l = repositories.PlayStyle.getPlayStyleBonusById(s, item.isGKStyleModifier());
    this._applyChevrons(l)
}, components.ItemChemistryStyleLarge.prototype._applyChevrons = function _applyChevrons(t) {
    t.slice(0, 6).forEach(function applyChevrons(t, i) {
        DOMKit.HTMLCollectionToArray(this["__chevronSet" + (i + 1)].children).reverse().forEach(function(i, s) {
            DOMKit.toggleClass(i, "chemBoost", s + 1 <= t)
        })
    }, this)
}, components.ItemBadgeBase = function() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemBadgeBase, components.ItemFUTBase), components.ItemBadgeBase.onImageLoad = function(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.TEAM + ".png"))
}, components.ItemBadgeBase.prototype._render = function(item) {
    item.getStaticData();
    var t = item.getYear(),
        i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, t, item.teamId);
    utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.CREST, item.teamId, t, enums.PlaceholderAssetKey.CREST_LIGHT) && (i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, t, enums.PlaceholderAssetId.TEAM)), this._mainImage.setResource(i, !0).observe(this._mainImage, components.ItemBadgeBase.onImageLoad);
    var s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, t, item.nationId);
    this._flagImage.setResource(s, !0).observe(this._flagImage, components.ItemFUTBase.onFlagImageLoad)
}, components.ItemBadgeBase.prototype.canRender = function(item) {
    return item.isBadge()
}, components.ItemBadgeLarge = function ItemBadgeLargeView() {
    components.ItemBadgeBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemBadgeLarge, components.ItemBadgeBase), components.ItemBadgeLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("badge"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), t.appendChild(this._flagImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var s = document.createElement("div");
        s.classList.add("clubView"), this.__clubName = document.createElement("div"), this.$_clubName = $(this.__clubName), this.__clubName.classList.add("clubLine"), s.appendChild(this.__clubName), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("badge"), o.classList.add("iconClub"), t.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("debugView"), this.__badgeDebug = document.createElement("div"), this.$_badgeDebug = $(this.__badgeDebug), this.__badgeDebug.classList.add("infoRow"), l.appendChild(this.__badgeDebug), t.appendChild(l), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemBadgeLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__clubName = null, this.$_clubName = null, this.__badgeDebug = null, this.$_badgeDebug = null
}, components.ItemBadgeLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemBadgeLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemBadgeLarge.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__itemName.textContent = t.name, this.__clubName.textContent = utils.FUTLocalization.getTeamAbb15ByID(item.teamId, item.getYear())
}, components.ItemKitBase = function ItemKitBaseView() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemKitBase, components.ItemFUTBase), components.ItemKitBase.onImageLoad = function onImageLoad(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/j(\d+)_\d+_\d+\.png/, "j$1_" + enums.PlaceholderAssetId.TEAM + "_" + enums.PlaceholderAssetId.KIT + ".png"))
}, components.ItemKitBase.prototype._render = function _render(item) {
    var t = item.getStaticData(),
        i = item.getYear(),
        s = t.assetType,
        o = utils.AssetLocator.getImage(s, i, item.teamId, t.assetYear);
    utils.AssetLocator.hasPlaceholderKit(o, i) && (o = utils.AssetLocator.getImage(s, i, enums.PlaceholderAssetId.TEAM, enums.PlaceholderAssetId.KIT)), this._mainImage.setResource(o, !0).observe(this._mainImage, components.ItemKitBase.onImageLoad);
    var l = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, i, item.nationId);
    this._flagImage.setResource(l, !0).observe(this._flagImage, components.ItemFUTBase.onFlagImageLoad);
    var u = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, i, item.teamId);
    utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.CREST, item.teamId.toString(), i, enums.PlaceholderAssetKey.CREST_LIGHT) && (u = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT, i, enums.PlaceholderAssetId.TEAM)), this._badgeImage.setResource(u, !0).observe(this._badgeImage, components.ItemBadgeBase.onImageLoad)
}, components.ItemKitBase.prototype.canRender = function canRender(item) {
    return item.isKit()
}, components.ItemKitLarge = function ItemKitLargeView() {
    components.ItemKitBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemKitLarge, components.ItemKitBase), components.ItemKitLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("kit"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("kitOverview"), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var o = document.createElement("div");
        o.classList.add("clubView"), this.__clubName = document.createElement("div"), this.$_clubName = $(this.__clubName), this.__clubName.classList.add("clubRow"), o.appendChild(this.__clubName), this.__kitText = document.createElement("div"), this.$_kitText = $(this.__kitText), this.__kitText.classList.add("clubRow"), o.appendChild(this.__kitText), t.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("kit"), l.classList.add("iconClub"), t.appendChild(l);
        var u = document.createElement("div");
        u.classList.add("debugView"), this.__kitDebug = document.createElement("div"), this.$_kitDebug = $(this.__kitDebug), this.__kitDebug.classList.add("infoRow"), u.appendChild(this.__kitDebug), t.appendChild(u), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemKitLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__clubName = null, this.$_clubName = null, this.__kitText = null, this.$_kitText = null, this.__kitDebug = null, this.$_kitDebug = null
}, components.ItemKitLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemKitLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemKitLarge.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__itemName.textContent = t.name, this.__clubName.textContent = utils.FUTLocalization.getTeamAbb15ByID(item.teamId, item.getYear()), this.__kitText.textContent = t.description
}, components.ItemBallBase = function() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemBallBase, components.ItemFUTBase), components.ItemBallBase.onImageLoad = function(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.BALL + ".png"))
}, components.ItemBallBase.prototype._render = function(item) {
    var t = item.getStaticData(),
        i = item.getYear(),
        s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BALL, i, t.assetId);
    utils.AssetLocator.hasPlaceholder(enums.PlaceholderAssetKey.BALLS, t.assetId, i) && (s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BALL, i, enums.PlaceholderAssetId.BALL)), this._mainImage.setResource(s, !0).observe(this._mainImage, components.ItemBallBase.onImageLoad)
}, components.ItemBallBase.prototype.canRender = function(item) {
    return item.isBall()
}, components.ItemBallLarge = function ItemBallLargeView() {
    components.ItemBallBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemBallLarge, components.ItemBallBase), components.ItemBallLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("ball"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var s = document.createElement("div");
        s.classList.add("clubView"), this.__ballManufacturer = document.createElement("div"), this.$_ballManufacturer = $(this.__ballManufacturer), this.__ballManufacturer.classList.add("clubRow"), s.appendChild(this.__ballManufacturer), this.__ballName = document.createElement("div"), this.$_ballName = $(this.__ballName), this.__ballName.classList.add("clubRow"), s.appendChild(this.__ballName), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("ball"), o.classList.add("iconClub"), t.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("debugView"), this.__ballDebug = document.createElement("div"), this.$_ballDebug = $(this.__ballDebug), this.__ballDebug.classList.add("infoRow"), l.appendChild(this.__ballDebug), t.appendChild(l), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemBallLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__ballManufacturer = null, this.$_ballManufacturer = null, this.__ballName = null, this.$_ballName = null, this.__ballDebug = null, this.$_ballDebug = null
}, components.ItemBallLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemBallLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemBallLarge.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__itemName.textContent = t.name, this.__ballName.textContent = gLocalization.lText(t.description), this.__ballManufacturer.textContent = gLocalization.lText(t.manufacturer)
}, components.ItemStadiumBase = function ItemStadiumBaseView() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemStadiumBase, components.ItemFUTBase), components.ItemStadiumBase.onImageLoad = function onImageLoad(t, i, s, path) {
    t.unobserve(this), i || s.replaceAndShowResource(path.replace(/\d+\.png/, enums.PlaceholderAssetId.STADIUM + ".png"))
}, components.ItemStadiumBase.prototype._render = function _render(item) {
    var t = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_STADIUM_FULL, item.getYear(), item.getStaticData().assetId);
    this._mainImage.setResource(t, !0).observe(this._mainImage, components.ItemStadiumBase.onImageLoad)
}, components.ItemStadiumBase.prototype.canRender = function canRender(item) {
    return item.isStadium()
}, components.ItemStadiumLarge = function ItemStadiumLargeView() {
    components.ItemStadiumBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemStadiumLarge, components.ItemStadiumBase), components.ItemStadiumLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("stadium"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var s = document.createElement("div");
        s.classList.add("clubView"), this.__stadiumName = document.createElement("div"), this.$_stadiumName = $(this.__stadiumName), this.__stadiumName.classList.add("clubLine"), s.appendChild(this.__stadiumName), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("stadium"), o.classList.add("iconClub"), t.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("debugView"), this.__stadiumDebug = document.createElement("div"), this.$_stadiumDebug = $(this.__stadiumDebug), this.__stadiumDebug.classList.add("infoRow"), l.appendChild(this.__stadiumDebug), t.appendChild(l), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemStadiumLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__stadiumName = null, this.$_stadiumName = null, this.__stadiumDebug = null, this.$_stadiumDebug = null
}, components.ItemStadiumLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemStadiumLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemStadiumLarge.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__itemName.textContent = t.name, this.__stadiumName.textContent = t.description
}, components.ItemMiscBase = function ItemMiscBaseView() {
    components.ItemFUTBase.call(this)
}, utils.JS.inherits(components.ItemMiscBase, components.ItemFUTBase), components.ItemMiscBase.ICON = {
    COINS: "freeCoins",
    DRAFT_TOKEN: "draftToken",
    FREE_PACK: "freePack"
}, components.ItemMiscBase.prototype.getImageUrl = function getImageUrl(t, i, s) {
    return utils.AssetLocator.getImage(t, i, s)
}, components.ItemMiscBase.prototype._render = function _render(item) {
    var t = item.getStaticData(),
        i = "";
    item.isFreeCoins() ? i = components.ItemMiscBase.ICON.COINS : item.isDraftToken() ? i = components.ItemMiscBase.ICON.DRAFT_TOKEN : item.isFreePack() && (i = components.ItemMiscBase.ICON.FREE_PACK), DOMKit.addClass(this.__itemIcon, i), this._mainImage.setResource(this.getImageUrl(t.assetType, item.getYear(), t.assetId))
}, components.ItemMiscBase.prototype.canRender = function canRender(item) {
    return item.isMiscItem()
}, components.ItemMiscBase.prototype._resetRender = function _resetRender() {
    var t = [components.ItemMiscBase.ICON.COINS, components.ItemMiscBase.ICON.DRAFT_TOKEN, components.ItemMiscBase.ICON.FREE_PACK].join(" ");
    DOMKit.removeClass(this.__itemIcon, t)
}, components.ItemMiscLarge = function ItemMiscLargeView() {
    components.ItemMiscBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemMiscLarge, components.ItemMiscBase), components.ItemMiscLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("large"), t.classList.add("consumable"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemName = document.createElement("div"), this.$_itemName = $(this.__itemName), this.__itemName.classList.add("name"), t.appendChild(this.__itemName);
        var s = document.createElement("div");
        s.classList.add("infoView"), this.__itemDesc = document.createElement("div"), this.$_itemDesc = $(this.__itemDesc), this.__itemDesc.classList.add("line"), s.appendChild(this.__itemDesc), t.appendChild(s), this.__itemIcon = document.createElement("div"), this.$_itemIcon = $(this.__itemIcon), this.__itemIcon.classList.add("iconConsumable"), t.appendChild(this.__itemIcon);
        var o = document.createElement("div");
        o.classList.add("debugView"), this.__miscDebug = document.createElement("div"), this.$_miscDebug = $(this.__miscDebug), this.__miscDebug.classList.add("infoRow"), o.appendChild(this.__miscDebug), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemMiscLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null, this.__itemName = null, this.$_itemName = null, this.__itemDesc = null, this.$_itemDesc = null, this.__itemIcon = null, this.$_itemIcon = null, this.__miscDebug = null, this.$_miscDebug = null
}, components.ItemMiscLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemMiscLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemMiscLarge.prototype._render = function _render(item) {
    var t = item.getStaticData(),
        i = "";
    if (this.superclass(item), item.isFreeCoins()) i = gLocalization.lPrint("card.desc.misc.coins", [t.amount]);
    else if (item.isDraftToken()) i = gLocalization.lText("card.desc.misc.drafttoken");
    else if (item.isFreePack())
        if (t.hasLoanPackDescription()) i = gLocalization.lText("card.desc.FreeLoanPackDesc");
        else switch (t.assetId) {
            case utils.AssetLocator.ASSET_ID_BRONZE_PACK:
                i = gLocalization.lText("card.desc.freebronze");
                break;
            case utils.AssetLocator.ASSET_ID_SILVER_PACK:
                i = gLocalization.lText("card.desc.freesilver");
                break;
            case utils.AssetLocator.ASSET_ID_GOLD_PACK:
                i = gLocalization.lText("card.desc.freegold")
        }
    this.__itemName.textContent = t.name, this.__itemDesc.textContent = i
}, components.ItemPlayerSmall = function ItemPlayerSmallView() {
    components.ItemPlayerBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemPlayerSmall, components.ItemPlayerBase), components.ItemPlayerSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("player"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var s = document.createElement("div");
        s.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), s.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), s.appendChild(this.__playerPosition), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__playStyle = document.createElement("div"), this.$_playStyle = $(this.__playStyle), this.__playStyle.classList.add("playStyle"), t.appendChild(this.__playStyle), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemPlayerSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__playStyle = null, this.$_playStyle = null
}, components.ItemPlayerSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemPlayerSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemPlayerSmall.prototype._render = function _render(item) {
    if (this.getRoot().data("info", item), item.isValid()) {
        item.getStaticData();
        this.superclass(item);
        var t = item.playStyle,
            i = t > 0 ? gLocalization.lText("playstyles.2018.playstyleAbbr" + t) : gLocalization.lText("playstyles.invalid.playstyle0");
        this.__playStyle.textContent = i, DOMKit.addClass(this.__playStyle, "icon" + t)
    }
}, components.ItemPlayerSmall.prototype._useDarkCrest = function _useDarkCrest(item) {
    return item.rareflag === enums.ItemRareType.TOTY || item.rareflag === enums.ItemRareType.TOTW || item.rareflag === enums.ItemRareType.TOTS || item.rareflag === enums.ItemRareType.PURPLE
}, components.ItemPlayerSmall.prototype._resetRender = function _resetRender() {
    this.superclass(), this.$_playStyle.removeClass(function clearPlayStyleIcons(index, t) {
        return (t.match(/(^|\s)icon\S+/g) || []).join(" ")
    })
}, components.ItemGen1Small = function ItemGen1SmallView() {
    components.ItemFUTBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen1Small, components.ItemPlayerBase), components.ItemGen1Small.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("player"), t.classList.add("item"), this.__flagBackground = document.createElement("div"), this.$_flagBackground = $(this.__flagBackground), this.__flagBackground.classList.add("flagbackground"), t.appendChild(this.__flagBackground);
        var i = document.createElement("div");
        i.classList.add("shell"), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("statusOverlay"), t.appendChild(s), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var o = document.createElement("div");
        o.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), o.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), o.appendChild(this.__playerPosition), t.appendChild(o), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), t.appendChild(this._badgeImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen1Small.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__flagBackground = null, this.$_flagBackground = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._mainImage.destroy(), this._mainImage = null
}, components.ItemGen1Small.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen1Small.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemGen1Small.prototype._render = function _render(item) {
    if (this.getRoot().data("info", item), item.isValid()) {
        item.getStaticData();
        this.superclass(item), this.setFlag(item)
    }
}, components.ItemGen1Small.prototype.setFlag = function setFlag(item) {
    var t = item.getYear(),
        i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, t, item.nationId);
    this.__flagBackground.style.backgroundImage = "url(" + gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + i + ")"
}, components.ItemGen2Small = function ItemGen2SmallView() {
    components.ItemPlayerBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen2Small, components.ItemPlayerBase), components.ItemGen2Small.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("player"), t.classList.add("item"), this.__flagBackground = document.createElement("div"), this.$_flagBackground = $(this.__flagBackground), this.__flagBackground.classList.add("flagbackground"), t.appendChild(this.__flagBackground);
        var i = document.createElement("div");
        i.classList.add("shell"), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("statusOverlay"), t.appendChild(s), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var o = document.createElement("div");
        o.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), o.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), o.appendChild(this.__playerPosition), t.appendChild(o), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), t.appendChild(this._badgeImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen2Small.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__flagBackground = null, this.$_flagBackground = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._mainImage.destroy(), this._mainImage = null
}, components.ItemGen2Small.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen2Small.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemGen2Small.prototype._render = function _render(item) {
    if (this.getRoot().data("info", item), item.isValid()) {
        item.getStaticData();
        this.superclass(item), this.setFlag(item)
    }
}, components.ItemGen2Small.prototype.setFlag = function setFlag(item) {
    var t = item.getYear(),
        i = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, t, item.nationId);
    this.__flagBackground.style.backgroundImage = "url(" + gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_RESOURCE_ROOT) + i + ")"
}, components.ItemGen3Small = function ItemGen3SmallView() {
    components.ItemPlayerBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen3Small, components.ItemPlayerBase), components.ItemGen3Small.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("player"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var s = document.createElement("div");
        s.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), s.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), s.appendChild(this.__playerPosition), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen3Small.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null
}, components.ItemGen3Small.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen3Small.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemGen3Small.prototype._render = function _render(item) {
    if (this.getRoot().data("info", item), item.isValid()) {
        item.getStaticData();
        this.superclass(item)
    }
}, components.ItemGen4Small = function ItemGen4SmallView() {
    components.ItemPlayerBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemGen4Small, components.ItemPlayerBase), components.ItemGen4Small.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("player"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("div"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__trainingBoost = document.createElement("div"), this.$_trainingBoost = $(this.__trainingBoost), this.__trainingBoost.classList.add("trainingBoost"), t.appendChild(this.__trainingBoost);
        var s = document.createElement("div");
        s.classList.add("playerOverview"), this.__playerRating = document.createElement("div"), this.$_playerRating = $(this.__playerRating), this.__playerRating.classList.add("rating"), s.appendChild(this.__playerRating), this.__playerPosition = document.createElement("div"), this.$_playerPosition = $(this.__playerPosition), this.__playerPosition.classList.add("position"), s.appendChild(this.__playerPosition), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemGen4Small.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__trainingBoost = null, this.$_trainingBoost = null, this.__playerRating = null, this.$_playerRating = null, this.__playerPosition = null, this.$_playerPosition = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null
}, components.ItemGen4Small.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemGen4Small.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemGen4Small.prototype._render = function _render(item) {
    if (this.getRoot().data("info", item), item.isValid()) {
        item.getStaticData();
        this.superclass(item)
    }
}, components.ItemManagerSmall = function ItemManagerSmallView() {
    components.ItemManagerBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemManagerSmall, components.ItemManagerBase), components.ItemManagerSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("manager"), t.classList.add("staff"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__infoTab = document.createElement("span"), this.$_infoTab = $(this.__infoTab), this.__infoTab.classList.add("infoTab"), t.appendChild(this.__infoTab), this.__position = document.createElement("div"), this.$_position = $(this.__position), this.__position.classList.add("position"), t.appendChild(this.__position), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), t.appendChild(this._flagImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("manager"), this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__desc = document.createElement("div"), this.$_desc = $(this.__desc), this.__desc.classList.add("itemDesc"), t.appendChild(this.__desc);
        var s = document.createElement("div");
        s.classList.add("manager"), s.classList.add("iconStaff"), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemManagerSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoTab = null, this.$_infoTab = null, this.__position = null, this.$_position = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__desc = null, this.$_desc = null
}, components.ItemManagerSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemManagerSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemManagerSmall.prototype.displayModeChanged = function displayModeChanged(sender) {}, components.ItemManagerSmall.prototype.loopDisplayMode = function loopDisplayMode() {
    var mode = "";
    switch (this.getDisplayMode()) {
        case models.ViewPreferencesModel.VIEW_MODE.NAME:
            mode = models.ViewPreferencesModel.VIEW_MODE.MAIN;
            break;
        case models.ViewPreferencesModel.VIEW_MODE.MAIN:
            mode = models.ViewPreferencesModel.VIEW_MODE.BIO;
            break;
        case models.ViewPreferencesModel.VIEW_MODE.BIO:
            mode = models.ViewPreferencesModel.VIEW_MODE.STATS;
            break;
        case models.ViewPreferencesModel.VIEW_MODE.STATS:
            mode = models.ViewPreferencesModel.VIEW_MODE.NAME;
            break;
        default:
            mode = models.ViewPreferencesModel.VIEW_MODE.NAME
    }
    gViewPreferencesModel.setViewMode(mode)
}, components.ItemManagerSmall.prototype._render = function _render(item) {
    this.superclass(item), this.__desc.textContent = utils.FUTLocalization.getLeagueAbbr5ByID(item.leagueId, item.getYear())
}, components.ItemStaffSmall = function ItemStaffSmallView() {
    components.ItemStaffBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemStaffSmall, components.ItemStaffBase), components.ItemStaffSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("staff"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__desc = document.createElement("div"), this.$_desc = $(this.__desc), this.__desc.classList.add("itemDesc"), t.appendChild(this.__desc), this.__itemIcon = document.createElement("div"), this.$_itemIcon = $(this.__itemIcon), this.__itemIcon.classList.add("iconStaff"), t.appendChild(this.__itemIcon), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemStaffSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null, this.__desc = null, this.$_desc = null, this.__itemIcon = null, this.$_itemIcon = null
}, components.ItemStaffSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemStaffSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemStaffSmall.prototype._render = function _render(item) {
    var t = item.getStaticData();
    this.superclass(item), this.__desc.textContent = utils.FUTLocalization.getStaffAttributeAbbr(item.type, t.trainedAttribute) + " +" + gLocalization.lNum(t.amount) + "%"
}, components.ItemConsumableSmall = function ItemConsumableSmallView() {
    components.ItemConsumableBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemConsumableSmall, components.ItemConsumableBase), components.ItemConsumableSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("consumable"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__stackCount = document.createElement("div"), this.$_stackCount = $(this.__stackCount), this.__stackCount.classList.add("infoTab"), t.appendChild(this.__stackCount), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__desc = document.createElement("div"), this.$_desc = $(this.__desc), this.__desc.classList.add("itemDesc"), t.appendChild(this.__desc), this.__itemIcon = document.createElement("div"), this.$_itemIcon = $(this.__itemIcon), this.__itemIcon.classList.add("iconConsumable"), t.appendChild(this.__itemIcon), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemConsumableSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__stackCount = null, this.$_stackCount = null, this._mainImage.destroy(), this._mainImage = null, this.__desc = null, this.$_desc = null, this.__itemIcon = null, this.$_itemIcon = null
}, components.ItemConsumableSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemConsumableSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemConsumableSmall.prototype.getImageUrl = function getImageUrl(t, i, s) {
    return utils.AssetLocator.getSmallImage(t, i, s)
}, components.ItemConsumableSmall.prototype._render = function _render(item) {
    var t = item.getStaticData();
    if (this.superclass(item), item.isContract()) {
        var i = $(document.createElement("span")).html("+" + t.bronzeBoost).addClass(components.ItemConsumableBase.CLASS.BRONZE_BOOST),
            s = $(document.createElement("span")).html("+" + t.silverBoost).addClass(components.ItemConsumableBase.CLASS.SILVER_BOOST),
            o = $(document.createElement("span")).html("+" + t.goldBoost).addClass(components.ItemConsumableBase.CLASS.GOLD_BOOST);
        this.$_desc.empty().append([i, s, o]).addClass(components.ItemConsumableBase.CLASS.CONTRACT_STATS)
    }
}, components.ItemChemistryStyleSmall = function ItemChemistryStyleSmallView() {
    components.ItemChemistryStyleBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemChemistryStyleSmall, components.ItemChemistryStyleBase), components.ItemChemistryStyleSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("chemistryStyle"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this.__stackCount = document.createElement("div"), this.$_stackCount = $(this.__stackCount), this.__stackCount.classList.add("infoTab"), t.appendChild(this.__stackCount), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__desc = document.createElement("div"), this.$_desc = $(this.__desc), this.__desc.classList.add("itemDesc"), t.appendChild(this.__desc), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemChemistryStyleSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__stackCount = null, this.$_stackCount = null, this._mainImage.destroy(), this._mainImage = null, this.__desc = null, this.$_desc = null
}, components.ItemChemistryStyleSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemChemistryStyleSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemChemistryStyleSmall.prototype._render = function _render(item) {
    this.superclass(item);
    var t = item.getStaticData(),
        i = utils.AssetLocator.getImage(t.assetType, item.getYear(), item.subtype);
    this._mainImage.setResource(i)
}, components.ItemBadgeSmall = function ItemBadgeSmallView() {
    components.ItemBadgeBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemBadgeSmall, components.ItemBadgeBase), components.ItemBadgeSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("badge"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), t.appendChild(this._flagImage.getRootElement()), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement());
        var s = document.createElement("div");
        s.classList.add("badge"), s.classList.add("iconClub"), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemBadgeSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null
}, components.ItemBadgeSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemBadgeSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemKitSmall = function ItemKitSmallView() {
    components.ItemKitBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemKitSmall, components.ItemKitBase), components.ItemKitSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("kit"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("kitOverview"), this._badgeImage = new components.ImageLoader, this._badgeImage.getRootElement().classList.add("badge"), s.appendChild(this._badgeImage.getRootElement()), this._flagImage = new components.ImageLoader, this._flagImage.getRootElement().classList.add("flag"), s.appendChild(this._flagImage.getRootElement()), t.appendChild(s), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__desc = document.createElement("div"), this.$_desc = $(this.__desc), this.__desc.classList.add("itemDesc"), t.appendChild(this.__desc);
        var o = document.createElement("div");
        o.classList.add("kit"), o.classList.add("iconClub"), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemKitSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._badgeImage.destroy(), this._badgeImage = null, this._flagImage.destroy(), this._flagImage = null, this._mainImage.destroy(), this._mainImage = null, this.__desc = null, this.$_desc = null
}, components.ItemKitSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemKitSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemKitSmall.prototype._render = function _render(item) {
    this.superclass(item), this.__desc.textContent = item.getStaticData().description
}, components.ItemBallSmall = function ItemBallSmallView() {
    components.ItemBallBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemBallSmall, components.ItemBallBase), components.ItemBallSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("ball"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement());
        var s = document.createElement("div");
        s.classList.add("ball"), s.classList.add("iconClub"), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemBallSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null
}, components.ItemBallSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemBallSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemStadiumSmall = function ItemStadiumSmallView() {
    components.ItemStadiumBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemStadiumSmall, components.ItemStadiumBase), components.ItemStadiumSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("stadium"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement());
        var s = document.createElement("div");
        s.classList.add("stadium"), s.classList.add("iconClub"), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemStadiumSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null
}, components.ItemStadiumSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemStadiumSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemMiscSmall = function ItemMiscSmallView() {
    components.ItemMiscBase.call(this), this._generate()
}, utils.JS.inherits(components.ItemMiscSmall, components.ItemMiscBase), components.ItemMiscSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("small"), t.classList.add("consumable"), t.classList.add("item");
        var i = document.createElement("span");
        i.classList.add("statusOverlay"), t.appendChild(i), this._mainImage = new components.ImageLoader, this._mainImage.getRootElement().classList.add("photo"), t.appendChild(this._mainImage.getRootElement()), this.__itemIcon = document.createElement("div"), this.$_itemIcon = $(this.__itemIcon), this.__itemIcon.classList.add("iconConsumable"), t.appendChild(this.__itemIcon), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ItemMiscSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._mainImage.destroy(), this._mainImage = null, this.__itemIcon = null, this.$_itemIcon = null
}, components.ItemMiscSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ItemMiscSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ItemMiscSmall.prototype.getImageUrl = function getImageUrl(t, i, s) {
    return utils.AssetLocator.getSmallImage(t, i, s)
}, NamespaceManager.Register("transferobjects"), transferobjects.SBCEligibility = function(t) {
    this.kvPairs = new FUTHashTable({}), this.count = -1, this.scope = -1, this.isCombinedRequirement = !1, Object.defineProperty(this, "isCombinedRequirement", {
        get: function() {
            return this.kvPairs.length > 1
        },
        enumerable: !0
    }), t.forEach(function(data) {
        switch (data.eligibilityKey) {
            case enums.SBC.ELG_KEY.FUT_ELGRULE_SCOPE:
                this.scope = data.eligibilityValue;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_COUNT:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_COUNT_COMBINED:
                this.count = data.eligibilityValue;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_STAR_RATING:
                this.kvPairs.set(data.eligibilityKey, [data.eligibilityValue / 2]);
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_CHEMISTRY:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_RATING:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_NATION_COUNT:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_LEAGUE_COUNT:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_CLUB_COUNT:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEGEND_COUNT:
                var t = data.eligibilityValue;
                this.kvPairs.set(data.eligibilityKey, Array.isArray(t) ? t : [t]);
                break;
            default:
                utils.Debug.Assert(!1, "Reached default case: " + data.eligibilityKey)
        }
    }, this), Object.defineProperty(this, "kvPairs", {
        writable: !1,
        enumerable: !0
    }), Object.defineProperty(this, "count", {
        writable: !1,
        enumerable: !0
    }), Object.defineProperty(this, "scope", {
        writable: !1,
        enumerable: !0
    })
}, transferobjects.SBCEligibility.prototype.getValue = function getValue(key) {
    return this.kvPairs.has(key) ? this.kvPairs.get(key) : [-1]
}, transferobjects.SBCEligibility.prototype.getFirstKey = function getFirstKey() {
    return this.kvPairs.length > 0 ? parseInt(this.kvPairs.keys()[0], 10) : (utils.Debug.Assert(!1, "transferobjects.SBCEligibility::getFirstKey. Requirement is empty or invalid."), -1)
}, transferobjects.SBCEligibility.prototype.getFirstValue = function getFirstValue(key) {
    return this.kvPairs.has(key) ? this.kvPairs.get(key)[0] : -1
}, transferobjects.SBCEligibility.prototype.buildString = function buildString() {
    function createStringFromValues(t, i) {
        if (value.length > 1) {
            var s = "";
            return value.forEach(function(o, l) {
                s += utils.JS.isValid(i) ? t.call(this, i + o) : t.call(this, o), s += l < value.length - 1 ? " " + gLocalization.lText("label.general.or").toUpperCase() + " " : ""
            }, this), s
        }
        var o = value[0];
        return utils.JS.isValid(i) ? t.call(this, i + o) : t.call(this, o)
    }
    var text = "",
        substring = "sbc.requirements.",
        t = "scope" + this.scope,
        key = this.getFirstKey(),
        value = this.getValue(key),
        count = this.count,
        i = 1 === count ? substring + "player." + t : substring + "players." + t;
    if (this.isCombinedRequirement) {
        var s = [];
        this.kvPairs.keys().forEach(function(t) {
            switch (t = parseInt(t, 10), value = this.getValue(t), t) {
                case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
                    s.push(createStringFromValues.call(this, utils.FUTLocalization.getNationNameById));
                    break;
                case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
                    s.push(createStringFromValues.call(this, utils.FUTLocalization.getLeagueNameByID));
                    break;
                case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
                    s.push(createStringFromValues.call(this, utils.FUTLocalization.getTeamAbb15ByID));
                    break;
                default:
                    utils.Debug.Assert(!1, "[transferobjects.SBCEligibility::buildString] | Reached invalid combined case: " + t)
            }
        }, this), text = gLocalization.lPrint(i + ".val", [count]) + " " + s.join(" + ")
    } else switch (key) {
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_STAR_RATING:
            text = gLocalization.lPrint(substring + "team.rating." + t, value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_RATING:
            text = gLocalization.lPrint(substring + "team.rating1to100." + t, value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_CHEMISTRY:
            text = gLocalization.lPrint(substring + "team.chemistry." + t, value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
            text = gLocalization.lText(substring + t);
            var o = value[0];
            o === enums.SBC.ELG_QUALITY_TYPES.BRONZE ? text += " " + gLocalization.lText("packtype.bronzePlayers") : o === enums.SBC.ELG_QUALITY_TYPES.SILVER ? text += " " + gLocalization.lText("packtype.silverPlayers") : text += " " + gLocalization.lText("packtype.goldPlayers");
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
            text = gLocalization.lPrint(substring + "rare." + t, [count]) + " " + createStringFromValues.call(gLocalization, gLocalization.lText, "search.cardLevels.cardLevel");
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_NATION_COUNT:
            text = gLocalization.lPrint(i, [value, gLocalization.lText(substring + "subType.nation")]);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_LEAGUE_COUNT:
            text = gLocalization.lPrint(i, [value, gLocalization.lText(substring + "subType.league")]);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_CLUB_COUNT:
            text = gLocalization.lPrint(i, [value, gLocalization.lText(substring + "subType.club")]);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
            text = gLocalization.lPrint(substring + "nations." + t, [value]);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
            text = gLocalization.lPrint(substring + "leagues." + t, [value]);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
            text = gLocalization.lPrint(substring + "clubs." + t, [value]);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
            text = gLocalization.lPrint(i + ".val", [count]) + " " + createStringFromValues.call(this, utils.FUTLocalization.getNationNameById);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
            text = gLocalization.lPrint(i + ".val", [count]) + " " + createStringFromValues.call(this, utils.FUTLocalization.getLeagueNameByID);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
            text = gLocalization.lPrint(i + ".val", [count]) + " " + createStringFromValues.call(this, utils.FUTLocalization.getTeamAbb15ByID);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEGEND_COUNT:
            i = 1 === value ? substring + "legend." + t : substring + "legends." + t, text = gLocalization.lPrint(i, [value]);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
            text = gLocalization.lPrint(substring + "rare." + t, [count]) + " " + createStringFromValues.call(gLocalization, gLocalization.lText, "item.raretype");
            break;
        default:
            utils.Debug.Assert(!1, "[transferobjects.SBCEligibility::buildString] | Reached default case: " + key)
    }
    return text
}, NamespaceManager.Register("transferobjects"), transferobjects.SBCPlayerRequirement = function(data) {
    this.index = data.index, Object.defineProperty(this, "index", {
        writable: !1
    });
    var t;
    Object.defineProperty(this, "playerType", {
        get: function() {
            return t
        },
        set: function(i) {
            var key;
            for (key in enums.SBC.PLAYER_TYPE)
                if (enums.SBC.PLAYER_TYPE.hasOwnProperty(key) && enums.SBC.PLAYER_TYPE[key] === i) return void(t = i);
            utils.Debug.Assert(!1, "Invalid playerType assignment to transferobjects.SBCPlayerRequirement")
        }
    }), this.playerType = data.playerType, this.elgReq = data.elgReq ? factories.SBC.createRequirements(data.elgReq) : [], Object.defineProperty(this, "elgReq", {
        writable: !1
    })
}, transferobjects.SBCPlayerRequirement.prototype.isRegularBrickType = function isRegularBrickType() {
    return this.playerType === enums.SBC.PLAYER_TYPE.BRICK
}, transferobjects.SBCPlayerRequirement.prototype.isCustomBrickType = function isCustomBrickType() {
    return this.playerType === enums.SBC.PLAYER_TYPE.CUSTOM_BRICK
}, components.CustomBrickItemBase = function() {
    components.ItemFUTBase.call(this), this._imgLoaders = []
}, utils.JS.inherits(components.CustomBrickItemBase, components.ItemFUTBase), components.CustomBrickItemBase.prototype._render = function _render(item) {
    this._renderCustomRequirement(enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID, item.leagueId), this._renderCustomRequirement(enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID, item.teamId), this._renderCustomRequirement(enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID, item.nationId)
}, components.CustomBrickItemBase.prototype._resetRender = function _resetRender() {
    this._imgLoaders.forEach(function(t) {
        t.dealloc()
    }, this), this._imgLoaders = []
}, components.CustomBrickItemBase.prototype._renderShell = function _renderShell(item) {}, components.CustomBrickItemBase.prototype._renderCustomRequirement = function _checkForCustomRequirement(key, value) {
    var t = this._generateImageLoader(key, value);
    this._imgLoaders.push(t), this.getRootElement().appendChild(t.getRootElement())
}, components.CustomBrickItemBase.prototype._generateImageLoader = function _generateImageLoader(key, value) {
    var t = new components.ImageLoader;
    switch (key) {
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
            t.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, enums.Year.ASSET, value));
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
            t.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_LEAGUE_DARK, enums.Year.ASSET, value));
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
            t.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_BADGE_DARK, enums.Year.ASSET, value));
            break;
        default:
            utils.Debug.Assert(!1, "[views.squads.Slot] | Reached default case: " + key)
    }
    return t
}, components.CustomBrickItemBase.prototype.canRender = function canRender(item) {
    return item.isCustomBrick()
}, components.CustomBrickItemSmall = function() {
    components.CustomBrickItemBase.call(this), this._generate()
}, utils.JS.inherits(components.CustomBrickItemSmall, components.CustomBrickItemBase), components.CustomBrickItemSmall.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("custom-brick"), t.classList.add("small"), t.classList.add("item");
        var i = document.createElement("div");
        i.classList.add("lock"), t.appendChild(i), this.__league = document.createElement("span"), this.$_league = $(this.__league), t.appendChild(this.__league), this.__team = document.createElement("span"), this.$_team = $(this.__team), t.appendChild(this.__team), this.__nation = document.createElement("span"), this.$_nation = $(this.__nation), t.appendChild(this.__nation), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.CustomBrickItemSmall.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__league = null, this.$_league = null, this.__team = null, this.$_team = null, this.__nation = null, this.$_nation = null
}, components.CustomBrickItemSmall.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.CustomBrickItemSmall.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.CustomBrickItemSmall.prototype._render = function _render(t) {
    components.CustomBrickItemSmall.superClass_._render.apply(this, arguments), 0 === t.nationId ? this.__nation.textContent = gLocalization.lText("roles.defaultRole") : this.__nation.textContent = utils.FUTLocalization.getNationAbb3ById(t.nationId), 0 === t.leagueId ? this.__league.textContent = gLocalization.lText("roles.defaultRole") : this.__league.textContent = utils.FUTLocalization.getLeagueAbbr5ByID(t.leagueId, t.getYear()), 0 === t.teamId ? this.__team.textContent = gLocalization.lText("roles.defaultRole") : this.__team.textContent = utils.FUTLocalization.getTeamAbb3ByID(t.teamId, t.getYear())
}, components.CustomBrickItemLarge = function() {
    components.CustomBrickItemBase.call(this), this._generate()
}, utils.JS.inherits(components.CustomBrickItemLarge, components.CustomBrickItemBase), components.CustomBrickItemLarge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("custom-brick"), t.classList.add("large"), t.classList.add("item"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.CustomBrickItemLarge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.CustomBrickItemLarge.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.CustomBrickItemLarge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("factories"), factories.ItemView = function() {
    function ItemViewFactory() {}
    return ItemViewFactory.prototype.createLargeItem = function(item) {
        switch (utils.Debug.Assert(item instanceof entities.Item, "Expected an item entity"), item.type) {
            case enums.ItemType.PLAYER:
                return item.getYear() < enums.Year.ASSET ? this._createGenerationsLargeItem(item) : item.isCustomBrick() ? new components.CustomBrickItemLarge : new components.ItemPlayerLarge;
            case enums.ItemType.MANAGER:
                return new components.ItemManagerLarge;
            case enums.ItemType.BADGE:
                return new components.ItemBadgeLarge;
            case enums.ItemType.KIT:
                return new components.ItemKitLarge;
            case enums.ItemType.BALL:
                return new components.ItemBallLarge;
            case enums.ItemType.STADIUM:
                return new components.ItemStadiumLarge;
            case enums.ItemType.TRAINING:
                return item.isStyleModifier() ? new components.ItemChemistryStyleLarge : new components.ItemConsumableLarge;
            case enums.ItemType.HEALTH:
            case enums.ItemType.CONTRACT:
                return new components.ItemConsumableLarge;
            case enums.ItemType.MISC:
                return new components.ItemMiscLarge;
            case enums.ItemType.HEAD_COACH:
            case enums.ItemType.GK_COACH:
            case enums.ItemType.FITNESS_COACH:
            case enums.ItemType.PHYSIO:
                return new components.ItemStaffLarge
        }
        return new components.ItemPlayerLarge
    }, ItemViewFactory.prototype.createSmallItem = function(item) {
        switch (utils.Debug.Assert(item instanceof entities.Item, "Expected an item entity"), item.type) {
            case enums.ItemType.PLAYER:
                return item.getYear() < enums.Year.ASSET ? this._createGenerationsSmallItem(item) : item.isCustomBrick() ? new components.CustomBrickItemSmall : new components.ItemPlayerSmall;
            case enums.ItemType.MANAGER:
                return new components.ItemManagerSmall;
            case enums.ItemType.BADGE:
                return new components.ItemBadgeSmall;
            case enums.ItemType.KIT:
                return new components.ItemKitSmall;
            case enums.ItemType.BALL:
                return new components.ItemBallSmall;
            case enums.ItemType.STADIUM:
                return new components.ItemStadiumSmall;
            case enums.ItemType.TRAINING:
                return item.isStyleModifier() ? new components.ItemChemistryStyleSmall : new components.ItemConsumableSmall;
            case enums.ItemType.HEALTH:
            case enums.ItemType.CONTRACT:
                return new components.ItemConsumableSmall;
            case enums.ItemType.MISC:
                return new components.ItemMiscSmall;
            case enums.ItemType.HEAD_COACH:
            case enums.ItemType.GK_COACH:
            case enums.ItemType.FITNESS_COACH:
            case enums.ItemType.PHYSIO:
                return new components.ItemStaffSmall
        }
        return new components.ItemPlayerSmall
    }, ItemViewFactory.prototype._createGenerationsLargeItem = function(item) {
        switch (utils.Debug.Assert(item instanceof entities.Item, "Expected an item entity"), item.resourceGameYear) {
            case 2010:
                return new components.ItemGen1Large;
            case 2011:
            case 2012:
                return new components.ItemGen2Large;
            case 2013:
                return new components.ItemGen3Large;
            case 2014:
            case 2015:
            case 2016:
            case 2017:
                return new components.ItemGen4Large
        }
        return new components.ItemPlayerLarge
    }, ItemViewFactory.prototype._createGenerationsSmallItem = function(item) {
        switch (utils.Debug.Assert(item instanceof entities.Item, "Expected an item entity"), item.resourceGameYear) {
            case 2010:
                return new components.ItemGen1Small;
            case 2011:
            case 2012:
                return new components.ItemGen2Small;
            case 2013:
                return new components.ItemGen3Small;
            case 2014:
            case 2015:
            case 2016:
            case 2017:
                return new components.ItemGen4Small
        }
        return new components.ItemPlayerSmall
    }, new ItemViewFactory
}(), NamespaceManager.Register("views.lists"), views.lists.ItemSelectionRow = function ItemSelectionListRowView() {
    FUITargetActionView.call(this), this._itemView = null, this._statsView = null, this._generate()
}, utils.JS.inherits(views.lists.ItemSelectionRow, FUITargetActionView), views.lists.ItemSelectionRow.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("li");
        t.classList.add("selectionRow"), t.classList.add("listFUTItem"), this.__selectIcon = document.createElement("div"), this.$_selectIcon = $(this.__selectIcon), this.__selectIcon.classList.add("selectIcon"), t.appendChild(this.__selectIcon), this.__entityContainer = document.createElement("div"), this.$_entityContainer = $(this.__entityContainer), this.__entityContainer.classList.add("entityContainer"), this.__name = document.createElement("div"), this.$_name = $(this.__name), this.__name.classList.add("name"), this.__entityContainer.appendChild(this.__name), t.appendChild(this.__entityContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.lists.ItemSelectionRow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__selectIcon = null, this.$_selectIcon = null, this.__entityContainer = null, this.$_entityContainer = null, this.__name = null, this.$_name = null
}, views.lists.ItemSelectionRow.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.lists.ItemSelectionRow.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.lists.ItemSelectionRow.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, views.lists.ItemSelectionRow.prototype.dealloc = function dealloc() {
    this._itemView && (this._itemView.destroy(), this._itemView = null), this._statsView && (this._statsView.destroy(), this._statsView = null), this.superclass()
}, views.lists.ItemSelectionRow.prototype.select = function select() {
    this.addClass(enums.UIListRowState.SELECTED)
}, views.lists.ItemSelectionRow.prototype.deselect = function deselect() {
    this.removeClass(enums.UIListRowState.SELECTED)
}, views.lists.ItemSelectionRow.prototype.toggleSelection = function toggleSelection(t) {
    t ? this.select() : this.deselect()
}, views.lists.ItemSelectionRow.prototype.setData = function setData(data) {
    utils.Debug.Assert(data.item instanceof entities.Item, "Expected property 'item' to be an instance of entities.Item"), this._renderName(data.item), this._renderItem(data.item), this._renderStats(data.item, data.comparison || null)
}, views.lists.ItemSelectionRow.prototype._renderName = function _renderName(item) {
    this.__name.textContent = item.getStaticData().name
}, views.lists.ItemSelectionRow.prototype._renderItem = function _renderItem(item) {
    this._itemView ? this._itemView.canRender(item) || (this._itemView.destroy(), this._itemView = factories.ItemView.createSmallItem(item), this.__entityContainer.insertBefore(this._itemView.getRootElement(), this.__entityContainer.firstChild)) : (this._itemView = factories.ItemView.createSmallItem(item), this.__entityContainer.insertBefore(this._itemView.getRootElement(), this.__entityContainer.firstChild)), this._itemView.render(item)
}, views.lists.ItemSelectionRow.prototype._renderStats = function _renderStats(item, t) {
    this._statsView || (this._statsView = new components.ListDataPlayerStats, this.__entityContainer.appendChild(this._statsView.getRootElement())), t && (utils.Debug.Assert(t instanceof entities.Item, "Expected property 'comparison' to be an instance of entities.Item"), this._statsView.setComparisonData(t)), this._statsView.render(item)
}, views.lists.ItemSelectionRow.prototype._tapDetected = function _tapDetected(e) {
    this._triggerActions(enums.Event.TAP)
}, NamespaceManager.Register("views.onboarding"), views.onboarding.LoanSelector = function LoanSelectorOnboardingView() {
    FUITargetActionView.call(this), this._rows = [], this._pinnedRow = null, Object.defineProperty(this, "_pinnedRow", {
        writable: !0,
        enumerable: !1
    }), this._generate()
}, utils.JS.inherits(views.onboarding.LoanSelector, FUITargetActionView), views.onboarding.LoanSelector.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("OnboardingLoanSelector"), this.__pinnedDiv = document.createElement("div"), this.$_pinnedDiv = $(this.__pinnedDiv), this.__pinnedDiv.classList.add("pinnedDiv"), t.appendChild(this.__pinnedDiv), this.__itemList = document.createElement("div"), this.$_itemList = $(this.__itemList), this.__itemList.classList.add("nativeScrolling"), t.appendChild(this.__itemList);
        var i = document.createElement("div");
        i.classList.add("button-container"), this._btnSelect = new views.buttons.DefaultButton, this._btnSelect.getRootElement().classList.add("call-to-action"), i.appendChild(this._btnSelect.getRootElement()), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.LoanSelector.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__pinnedDiv = null, this.$_pinnedDiv = null, this.__itemList = null, this.$_itemList = null, this._btnSelect.destroy(), this._btnSelect = null
}, views.onboarding.LoanSelector.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.LoanSelector.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.LoanSelector.prototype.init = function init() {
    this.superclass(), this._btnSelect.init(), this._btnSelect.setInteractionState(!1), this._btnSelect.setText(gLocalization.lText("common.dialog.continue"))
}, views.onboarding.LoanSelector.prototype.dealloc = function dealloc() {
    this.superclass(), this._pinnedRow && (this._pinnedRow.destroy(), this._pinnedRow = null), this._clearRows()
}, views.onboarding.LoanSelector.prototype._clearRows = function _clearRows() {
    this._rows.length > 0 && (this._rows.forEach(function(t) {
        t.dealloc()
    }), this._rows = [])
}, views.onboarding.LoanSelector.prototype.getContinueButton = function getContinueButton() {
    return this._btnSelect
}, views.onboarding.LoanSelector.prototype.setItems = function setItems(t, i) {
    this._clearRows(), this._pinnedRow && this._pinnedRow.destroy(), this._rows = t.map(function(item) {
        return this._generateItemSelectionRow(item, i || null)
    }, this), i && (this._pinnedRow = this._generateComparisonItemView(i)), this.layoutSubviews()
}, views.onboarding.LoanSelector.prototype._generateItemSelectionRow = function _generateItemSelectionRow(item, t) {
    var i = new views.lists.ItemSelectionRow;
    return i.setData({
        item: item,
        comparison: t
    }), i.addTarget(this, this._eRowSelected, enums.Event.TAP), i.init(), this.addSubview(i, this.$_itemList), i
}, views.onboarding.LoanSelector.prototype._generateComparisonItemView = function _generateComparisonItemView(item) {
    var t = new components.ListRowItem;
    t.setData(item), t.render(), this.__pinnedDiv.appendChild(t.getRootElement());
    var height = this.__pinnedDiv.clientHeight;
    return this.__itemList.style.top = height + "px", t
}, views.onboarding.LoanSelector.prototype._eRowSelected = function _eRowSelected(sender, event, data) {
    this._rows.forEach(function(t) {
        t.toggleSelection(sender === t)
    }), this._triggerActions(enums.Event.TAP, {
        row: sender,
        rowIndex: this._rows.indexOf(sender)
    })
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.LoanSelector = function LoanSelectorOnboardingViewController() {
    FUIViewController.call(this), this._items = [], this._comparison = null, this._selectedItem = null, this._squad = null, this._squadViewDelegate = null
}, utils.JS.inherits(controllers.onboarding.LoanSelector, FUIViewController), controllers.onboarding.LoanSelector.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.addTarget(this, this._eRowSelected, enums.Event.TAP), view.getContinueButton().addTarget(this, this._eContinueButtonTapped, enums.Event.TAP);
        var page = "Onboarding - Loan Player";
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: page
        })), TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, page)
    }
}, controllers.onboarding.LoanSelector.prototype.initWithItems = function initWithItems(t, i) {
    this.initialized || (this._items = t, this._comparison = i || null, this.init())
}, controllers.onboarding.LoanSelector.prototype.dealloc = function dealloc() {
    this.superclass(), this._items = [], this._comparison = null, this._selectedItem = null, this._squad = null, this._squadViewDelegate = null
}, controllers.onboarding.LoanSelector.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.LoanSelector
}, controllers.onboarding.LoanSelector.prototype.viewWillAppear = function viewWillAppear() {
    if (this.superclass(), isPhone()) {
        var t = this.getNavigationController();
        t && t.showSettings(!1)
    }
}, controllers.onboarding.LoanSelector.prototype.viewWillDisappear = function viewWillDisappear() {
    if (this.superclass(), isPhone()) {
        var t = this.getNavigationController();
        t && t.showSettings(!0)
    }
}, controllers.onboarding.LoanSelector.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().setItems(this._items, this._comparison)
}, controllers.onboarding.LoanSelector.prototype.setSquad = function setSquad(t) {
    this._squad = t
}, controllers.onboarding.LoanSelector.prototype.setSquadViewDelegate = function setSquadViewDelegate(t) {
    t.conforms(interfaces.SquadViewDelegate) && (this._squadViewDelegate = t)
}, controllers.onboarding.LoanSelector.prototype._grantLoan = function _grantLoan() {
    function _onLoanMoveComplete(i, response) {
        if (i.unobserve(this), response.success) {
            var s = this._squad.getSlot(this._comparison);
            s && (this._squad.addItemToSlot(s.getIndex(), t), this._squad.addItemToSlot(entities.Squad.MANAGER_SLOT_INDEX - 1, this._comparison), this._squad.save())
        } else TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + response.status + ") Failed to move loaner to club");
        this._squadViewDelegate && this._squadViewDelegate.setInteractionState(!1);
        var o = this.getNavigationController();
        o && o.popViewController(), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING);
        var l = {
            moment: PinManager.MILESTONE_EVT_MOMENT,
            mode: PinManager.MILESTONE_EVT_MODE,
            type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
            mstid: enums.PIN.MILESTONE_EVT_ID.LOANEXPLORE
        };
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, l))
    }
    if (utils.Debug.Assert(utils.JS.isValid(this._selectedItem), "Expected a loan player item to have been selected."), utils.Debug.Assert(utils.JS.isValid(this._squad), "Expected a squad entity reference."), utils.Debug.Assert(utils.JS.isValid(this._comparison), "Expected a valid item to swap with the new loan player."), this._selectedItem && this._squad && this._comparison) {
        var t = null;
        gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Onboarding.grantLoanPlayer(this._selectedItem).observe(this, function _onGrantLoanComplete(i, response) {
            if (i.unobserve(this), response.success) {
                var s = {
                    moment: PinManager.MILESTONE_EVT_MOMENT,
                    mode: PinManager.MILESTONE_EVT_MODE,
                    type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                    mstid: enums.PIN.MILESTONE_EVT_ID.LOANSELECT
                };
                gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, s)), t = response.data.item, services.Item.move(t, enums.FUTItemPile.CLUB).observe(this, _onLoanMoveComplete);
                var o = this.getRootNavigationController();
                o && o.conforms(controllers.navigation.Onboarding) && o.getOnboardingState().setLoanerDefId(t.getDefId())
            } else TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + response.status + ") Failed to grant loaner"), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
        })
    }
}, controllers.onboarding.LoanSelector.prototype._eRowSelected = function _eRowSelected(sender, event, data) {
    this._selectedItem = this._items[data.rowIndex] || null, this.getView().getContinueButton().setInteractionState(!!this._selectedItem)
}, controllers.onboarding.LoanSelector.prototype._eContinueButtonTapped = function _eContinueButtonTapped(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.BUTTON_PRESS, "Loaner Selected"), this._grantLoan()
}, NamespaceManager.Register("views.onboarding"), views.onboarding.OnboardingSummary = function OnboardingSummaryView() {
    FUIView.call(this), this._loanerView = null, this._generate()
}, utils.JS.inherits(views.onboarding.OnboardingSummary, FUIView), views.onboarding.OnboardingSummary.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("onboarding-summary");
        var i = document.createElement("div");
        i.classList.add("centered-container"), this.__summary = document.createElement("div"), this.$_summary = $(this.__summary), this.__summary.classList.add("summary-details");
        var s = document.createElement("div");
        s.classList.add("nation"), s.classList.add("summary-detail");
        var o = document.createElement("div");
        o.classList.add("asset-container"), this._nationImg = new components.ImageLoader, o.appendChild(this._nationImg.getRootElement()), s.appendChild(o), this.__nationTitle = document.createElement("h1"), this.$_nationTitle = $(this.__nationTitle), s.appendChild(this.__nationTitle), this.__nationValue = document.createElement("span"), this.$_nationValue = $(this.__nationValue), s.appendChild(this.__nationValue), this.__summary.appendChild(s);
        var l = document.createElement("div");
        l.classList.add("loan"), l.classList.add("summary-detail"), this.__loanerContainer = document.createElement("div"), this.$_loanerContainer = $(this.__loanerContainer), this.__loanerContainer.classList.add("asset-container"), l.appendChild(this.__loanerContainer), this.__loanTitle = document.createElement("h1"), this.$_loanTitle = $(this.__loanTitle), l.appendChild(this.__loanTitle), this.__loanValue = document.createElement("span"), this.$_loanValue = $(this.__loanValue), l.appendChild(this.__loanValue), this.__summary.appendChild(l);
        var u = document.createElement("div");
        u.classList.add("kits"), u.classList.add("summary-detail");
        var h = document.createElement("div");
        h.classList.add("asset-container"), this._kitHomeImg = new components.ImageLoader, h.appendChild(this._kitHomeImg.getRootElement()), this._kitAwayImg = new components.ImageLoader, h.appendChild(this._kitAwayImg.getRootElement()), u.appendChild(h), this.__kitsTitle = document.createElement("h1"), this.$_kitsTitle = $(this.__kitsTitle), u.appendChild(this.__kitsTitle), this.__kitsValue = document.createElement("span"), this.$_kitsValue = $(this.__kitsValue), u.appendChild(this.__kitsValue), this.__summary.appendChild(u);
        var p = document.createElement("div");
        p.classList.add("badge"), p.classList.add("summary-detail");
        var m = document.createElement("div");
        m.classList.add("asset-container"), this._badgeImg = new components.ImageLoader, m.appendChild(this._badgeImg.getRootElement()), p.appendChild(m), this.__badgeTitle = document.createElement("h1"), this.$_badgeTitle = $(this.__badgeTitle), p.appendChild(this.__badgeTitle), this.__badgeValue = document.createElement("span"), this.$_badgeValue = $(this.__badgeValue), p.appendChild(this.__badgeValue), this.__summary.appendChild(p), i.appendChild(this.__summary);
        var _ = document.createElement("div");
        _.classList.add("step-info"), this.__choiceInfo = document.createElement("div"), this.$_choiceInfo = $(this.__choiceInfo), this.__choiceInfo.classList.add("choice-info"), this.__title = document.createElement("h1"), this.$_title = $(this.__title), this.__title.classList.add("mobile-hide"), this.__choiceInfo.appendChild(this.__title), this.__info = document.createElement("p"), this.$_info = $(this.__info), this.__choiceInfo.appendChild(this.__info), _.appendChild(this.__choiceInfo);
        var g = document.createElement("div");
        g.classList.add("continue-btn-container"), this._btnContinue = new views.buttons.DefaultButton, this._btnContinue.getRootElement().classList.add("call-to-action"), g.appendChild(this._btnContinue.getRootElement()), _.appendChild(g), i.appendChild(_), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.OnboardingSummary.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__summary = null, this.$_summary = null, this._nationImg.destroy(), this._nationImg = null, this.__nationTitle = null, this.$_nationTitle = null, this.__nationValue = null, this.$_nationValue = null, this.__loanerContainer = null, this.$_loanerContainer = null, this.__loanTitle = null, this.$_loanTitle = null, this.__loanValue = null, this.$_loanValue = null, this._kitHomeImg.destroy(), this._kitHomeImg = null, this._kitAwayImg.destroy(), this._kitAwayImg = null, this.__kitsTitle = null, this.$_kitsTitle = null, this.__kitsValue = null, this.$_kitsValue = null, this._badgeImg.destroy(), this._badgeImg = null, this.__badgeTitle = null, this.$_badgeTitle = null, this.__badgeValue = null, this.$_badgeValue = null, this.__choiceInfo = null, this.$_choiceInfo = null, this.__title = null, this.$_title = null, this.__info = null, this.$_info = null, this._btnContinue.destroy(), this._btnContinue = null
}, views.onboarding.OnboardingSummary.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.OnboardingSummary.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.OnboardingSummary.prototype.init = function init() {
    this.superclass(), this._btnContinue.init(), this._btnContinue.setText(gLocalization.lText("onboarding.complete.start")), this.__title.textContent = gLocalization.lText("onboarding.complete.title"), this.__info.textContent = gLocalization.lText("onboarding.complete.body"), this.__nationTitle.textContent = gLocalization.lText("onboarding.complete.teamtitle"), this.__loanTitle.textContent = gLocalization.lText("onboarding.complete.loantitle"), this.__kitsTitle.textContent = gLocalization.lText("onboarding.complete.kitstitle"), this.__badgeTitle.textContent = gLocalization.lText("onboarding.complete.badgetitle")
}, views.onboarding.OnboardingSummary.prototype.dealloc = function dealloc() {
    this._loanerView && (this._loanerView.destroy(), this._loanerView = null), this.superclass()
}, views.onboarding.OnboardingSummary.prototype.setNation = function setNation(id) {
    var t = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FLAG, enums.Year.ASSET, id);
    this._nationImg.setResource(t), this.__nationValue.textContent = utils.FUTLocalization.getNationNameById(id)
}, views.onboarding.OnboardingSummary.prototype.setLoaner = function setLoaner(item) {
    this._loanerView && this._loanerView.destroy(), this._loanerView = factories.ItemView.createSmallItem(item), this._loanerView.init(), this._loanerView.render(item), this.__loanerContainer.appendChild(this._loanerView.getRootElement()), this.__loanValue.textContent = item.getStaticData().name
}, views.onboarding.OnboardingSummary.prototype.setKits = function setKits(t, i) {
    var s = utils.AssetLocator.getImage(t.getStaticData().assetType, enums.Year.ASSET, t.teamId),
        o = utils.AssetLocator.getImage(i.getStaticData().assetType, enums.Year.ASSET, i.teamId);
    this._kitHomeImg.setResource(s), this._kitAwayImg.setResource(o), this.__kitsValue.textContent = utils.FUTLocalization.getTeamAbb15ByID(t.teamId) + ", " + utils.FUTLocalization.getTeamAbb15ByID(i.teamId)
}, views.onboarding.OnboardingSummary.prototype.setBadge = function setBadge(t) {
    var i = isPhone() ? utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT : utils.AssetLocator.IMAGE_TYPE_BADGE_DARK,
        s = utils.AssetLocator.getImage(i, enums.Year.ASSET, t.teamId);
    this._badgeImg.setResource(s), this.__badgeValue.textContent = utils.FUTLocalization.getTeamAbb15ByID(t.teamId)
}, views.onboarding.OnboardingSummary.prototype.getContinueButton = function getContinueButton() {
    return this._btnContinue
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.OnboardingSummary = function OnboardingSummaryViewController() {
    FUIViewController.call(this)
}, utils.JS.inherits(controllers.onboarding.OnboardingSummary, FUIViewController), controllers.onboarding.OnboardingSummary.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this.getView().getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP);
        var t = {
            moment: PinManager.MILESTONE_EVT_MOMENT,
            mode: PinManager.MILESTONE_EVT_MODE,
            type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
            mstid: enums.PIN.MILESTONE_EVT_ID.SUMMARY
        };
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, t)), TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, "Onboarding - Summary")
    }
}, controllers.onboarding.OnboardingSummary.prototype.initWithViewmodel = function initWithViewmodel(t) {
    this.initialized || (utils.Debug.Assert(t instanceof viewmodels.OnboardingState, "Expected an OnboardingState viewmodel."), this._viewmodel = t, this.init())
}, controllers.onboarding.OnboardingSummary.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSummary
}, controllers.onboarding.OnboardingSummary.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var t = this.getNavigationController();
    t && t.conforms(controllers.navigation.Onboarding) && t.setCurrentStep(enums.UIOnboardingStep.SUMMARY), this._loadItems()
}, controllers.onboarding.OnboardingSummary.prototype._loadItems = function _loadItems() {
    var view = this.getView(),
        t = this.getNavigationController();
    if (t && t.conforms(controllers.navigation.Onboarding)) {
        var state = t.getOnboardingState(),
            i = [],
            s = 0;
        view.setNation(utils.FUTData.mapOnboardingCountryIdToNationId(state.getCountryId())), state.hasLoaner() && (s = state.getLoanerDefId()), state.hasHomeKit() && i.push(state.getHomeKitId()), state.hasAwayKit() && i.push(state.getAwayKitId()), state.hasBadge() && i.push(state.getBadgeId()), utils.Debug.Assert(i.length > 0, "Expected valid items."), gClickShield.showShield(components.ClickShield.SHIELD.LOADING), repositories.Item.getItemsById(i).observe(this, function _onGetClubItemsComplete(t, data) {
            if (t.unobserve(this), data.success) {
                var i = null,
                    s = null;
                data.items.forEach(function(item) {
                    item.isActiveHomeKit() ? i = item : item.isActiveAwayKit() ? s = item : item.isBadge() ? view.setBadge(item) : utils.Debug.Assert(!1, "Expected a valid onboarding selection item.")
                }, this), i && s && view.setKits(i, s)
            }
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
        }), s > 0 && (gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Item.getItemDataByDefId(s).observe(this, function _onGetLoanerComplete(t, response) {
            if (t.unobserve(this), response.success) {
                var item = response.data.item;
                item.concept = !1, item.contract = 7, view.setLoaner(item)
            }
            gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
        }))
    }
}, controllers.onboarding.OnboardingSummary.prototype._eContinue = function _eContinue(sender, event, data) {
    gAuthenticationModel.login(!0)
}, NamespaceManager.Register("views.onboarding"), views.onboarding.CustomSelectionTile = function() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(views.onboarding.CustomSelectionTile, FUIButton), views.onboarding.CustomSelectionTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("CustomSelectionTile");
        var i = document.createElement("div");
        i.classList.add("content-container"), this._imgLoader = new components.ImageLoader, i.appendChild(this._imgLoader.getRootElement()), this.__title = document.createElement("h1"), this.$_title = $(this.__title), i.appendChild(this.__title), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.CustomSelectionTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._imgLoader.destroy(), this._imgLoader = null, this.__title = null, this.$_title = null
}, views.onboarding.CustomSelectionTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.CustomSelectionTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.CustomSelectionTile.prototype.init = function() {
    this.setInteractionState(!0)
}, views.onboarding.CustomSelectionTile.prototype.dealloc = function dealloc() {
    this.superclass()
}, views.onboarding.CustomSelectionTile.prototype.setText = function setText(text) {
    this.__title.textContent = text
}, views.onboarding.CustomSelectionTile.prototype.getImageSource = function getImageSource() {
    return this._imgLoader.getRootElement().getAttribute("src")
}, views.onboarding.CustomSelectionTile.prototype.setImagePath = function setImagePath(path, t) {
    function getPlaceholderAssetId() {
        switch (t) {
            case utils.AssetLocator.IMAGE_TYPE_FLAG:
                return enums.PlaceholderAssetId.FLAG;
            case utils.AssetLocator.IMAGE_TYPE_KIT_HOME:
            case utils.AssetLocator.IMAGE_TYPE_KIT_AWAY:
                return enums.PlaceholderAssetId.KIT;
            case utils.AssetLocator.IMAGE_TYPE_BALL:
                return enums.PlaceholderAssetId.BALL;
            case utils.AssetLocator.IMAGE_TYPE_BADGE_DARK:
            case utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT:
                return enums.PlaceholderAssetId.TEAM;
            default:
                return 0
        }
    }
    this._imgLoader.setResource(path, !0).observe(this, function onResourceLoaded(i, s, o, path) {
        i.unobserve(this), s || this._imgLoader.setResource(utils.AssetLocator.getImage(t, enums.Year.ASSET, getPlaceholderAssetId()))
    })
}, views.onboarding.CustomSelectionTile.prototype.toggleTallState = function toggleTallState(t) {
    this.toggleClass("tall", t)
}, views.onboarding.CustomSelectionTile.prototype.setSelected = function setSelected(value) {
    this.toggleClass(enums.UIState.SELECTED, value)
}, NamespaceManager.Register("views.onboarding"), views.onboarding.OnboardingSelect = function OnboardingSelect() {
    FUIView.call(this), this._selectionTiles = [], this._currentTile = null, this._ids = [], this._type = enums.UIOnboardingSelectionType.BADGE, this._generate()
}, utils.JS.inherits(views.onboarding.OnboardingSelect, FUIView), views.onboarding.OnboardingSelect.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("onboarding-select");
        var i = document.createElement("div");
        i.classList.add("centered-container"), this.__selectGrid = document.createElement("div"), this.$_selectGrid = $(this.__selectGrid), this.__selectGrid.classList.add("select-grid"), i.appendChild(this.__selectGrid);
        var s = document.createElement("div");
        s.classList.add("step-info"), this.__choiceInfo = document.createElement("div"), this.$_choiceInfo = $(this.__choiceInfo), this.__choiceInfo.classList.add("choice-info"), this.__title = document.createElement("h1"), this.$_title = $(this.__title), this.__title.classList.add("mobile-hide"), this.__choiceInfo.appendChild(this.__title), this.__info = document.createElement("p"), this.$_info = $(this.__info), this.__choiceInfo.appendChild(this.__info);
        var o = document.createElement("div");
        o.classList.add("selectedImages"), this._selectedImage = new components.ImageLoader, this._selectedImage.getRootElement().classList.add("selectedImage"), o.appendChild(this._selectedImage.getRootElement()), this._otherSelectedImage = new components.ImageLoader, this._otherSelectedImage.getRootElement().classList.add("otherSelectedImage"), o.appendChild(this._otherSelectedImage.getRootElement()), this.__choiceInfo.appendChild(o), s.appendChild(this.__choiceInfo);
        var l = document.createElement("div");
        l.classList.add("continue-btn-container"), this._continueBtn = new views.buttons.DefaultButton, this._continueBtn.getRootElement().classList.add("call-to-action"), l.appendChild(this._continueBtn.getRootElement()), s.appendChild(l), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.OnboardingSelect.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__selectGrid = null, this.$_selectGrid = null, this.__choiceInfo = null, this.$_choiceInfo = null, this.__title = null, this.$_title = null, this.__info = null, this.$_info = null, this._selectedImage.destroy(), this._selectedImage = null, this._otherSelectedImage.destroy(), this._otherSelectedImage = null, this._continueBtn.destroy(), this._continueBtn = null
}, views.onboarding.OnboardingSelect.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.OnboardingSelect.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.OnboardingSelect.prototype.init = function init() {
    this.superclass(), this._continueBtn.init(), this._continueBtn.setInteractionState(!1), this._continueBtn.setText(gLocalization.lText("common.dialog.continue"))
}, views.onboarding.OnboardingSelect.prototype.dealloc = function dealloc() {
    this.superclass(), this._clearTiles(), this._ids = []
}, views.onboarding.OnboardingSelect.prototype._clearTiles = function _clearTiles() {
    this._selectionTiles.forEach(function(t) {
        t.dealloc()
    }), this._selectionTiles = [], this._currentTile = null
}, views.onboarding.OnboardingSelect.prototype.setTitle = function setTitle(title) {
    this.__title.textContent = title
}, views.onboarding.OnboardingSelect.prototype.setDescription = function setDescription(t) {
    this.__info.textContent = t
}, views.onboarding.OnboardingSelect.prototype.setType = function setType(type) {
    this._type = type, this.removeClass(enums.UIOnboardingSelectionType.BADGE), this.removeClass(enums.UIOnboardingSelectionType.HOME_KIT), this.removeClass(enums.UIOnboardingSelectionType.AWAY_KIT), this.removeClass(enums.UIOnboardingSelectionType.NATION), this.addClass(this._type)
}, views.onboarding.OnboardingSelect.prototype._generateTile = function _generateTile(data) {
    var t = utils.AssetLocator.getImage(data.assetType, enums.Year.ASSET, data.id),
        i = this._type !== enums.UIOnboardingSelectionType.NATION,
        s = new views.onboarding.CustomSelectionTile;
    s.init(), s.toggleTallState(i), s.setText(data.name), s.setImagePath(t, data.assetType), s.addTarget(this, this._eTileSelected, enums.Event.TAP), this.addSubview(s, this.$_selectGrid), this._selectionTiles.push(s)
}, views.onboarding.OnboardingSelect.prototype.setData = function setData(t) {
    this._clearTiles(), this._ids = [], t.forEach(function(t) {
        this._ids.push(t.id), this._generateTile(t)
    }, this), this.layoutSubviews()
}, views.onboarding.OnboardingSelect.prototype.selectTile = function selectTile(index) {
    var t = this._selectionTiles[index];
    this._currentTile && this._currentTile.setSelected(!1), this._currentTile = t || null, this._currentTile && this._currentTile.setSelected(!0)
}, views.onboarding.OnboardingSelect.prototype.getContinueButton = function getContinueButton() {
    return this._continueBtn
}, views.onboarding.OnboardingSelect.prototype.getSelectedId = function getSelectedId() {
    return this._selectionTiles.length > 0 ? this._ids[this._selectionTiles.indexOf(this._currentTile)] : -1
}, views.onboarding.OnboardingSelect.prototype.getSelectedIndex = function getSelectedIndex() {
    return this._selectionTiles.indexOf(this._currentTile)
}, views.onboarding.OnboardingSelect.prototype.setFirstImageLocalPath = function setFirstImageLocalPath(path) {
    this._selectedImage.setLocalResource(path)
}, views.onboarding.OnboardingSelect.prototype.setSecondImageLocalPath = function setSecondImageLocalPath(path) {
    this._otherSelectedImage.setLocalResource(path)
}, views.onboarding.OnboardingSelect.prototype._setBackground = function _setBackground(id) {
    this._ids.forEach(function(t) {
        this.removeClass("ui-selected-" + t)
    }, this), this.addClass("ui-selected-" + id)
}, views.onboarding.OnboardingSelect.prototype._eTileSelected = function _eTileSelected(sender, event, data) {
    if (sender !== this._currentTile) {
        var t = this._selectionTiles.indexOf(sender);
        this.selectTile(t), this._type === enums.UIOnboardingSelectionType.NATION && this._setBackground(this._ids[t]);
        var src = sender.getImageSource();
        this._type === enums.UIOnboardingSelectionType.AWAY_KIT ? this._otherSelectedImage.setLocalResource(src) : this._selectedImage.setLocalResource(src), this._continueBtn.setInteractionState(!0)
    }
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.BadgeSelect = function BadgeSelectOnboardingViewController() {
    FUIViewController.call(this), this._badges = []
}, utils.JS.inherits(controllers.onboarding.BadgeSelect, FUIViewController), controllers.onboarding.BadgeSelect.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.setType(enums.UIOnboardingSelectionType.BADGE), view.setTitle(gLocalization.lText("onboarding.badge.title")), view.setDescription(gLocalization.lText("onboarding.badge.body")), view.setFirstImageLocalPath("images/onboarding/badge.png"), view.getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP);
        var page = "Onboarding - Badge";
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: page
        })), TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, page)
    }
}, controllers.onboarding.BadgeSelect.prototype.dealloc = function dealloc() {
    this.superclass(), this._badges = []
}, controllers.onboarding.BadgeSelect.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSelect
}, controllers.onboarding.BadgeSelect.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("onboarding.badge.title")
}, controllers.onboarding.BadgeSelect.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._badges.length > 0 ? this.getView().setData(this._mapBadgesToData(this._badges)) : this._getBadges();
    var t = this.getNavigationController();
    t && t.conforms(controllers.navigation.Onboarding) && (isPhone() || t.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), t.setCurrentStep(enums.UIOnboardingStep.BADGE))
}, controllers.onboarding.BadgeSelect.prototype._mapBadgesToData = function _mapBadgesToData(t) {
    return t.map(function(b) {
        return {
            id: b.teamId,
            name: utils.FUTLocalization.getTeamAbb15ByID(b.teamId),
            assetType: utils.AssetLocator.IMAGE_TYPE_BADGE_LIGHT
        }
    })
}, controllers.onboarding.BadgeSelect.prototype._getBadges = function _getBadges() {
    services.Onboarding.getBadges().observe(this, function _onGetBadgesComplete(t, i) {
        if (t.unobserve(this), i.success) this._badges = i.data.badges, this.getView().setData(this._mapBadgesToData(this._badges));
        else {
            var s = new valueobjects.NetworkErrorVO(enums.NetworkError.SERVER_ERROR, enums.NetworkErrorLevel.CRITICAL, "popup.error.cannotcontinueTitle", "popup.error.cannotcontinue");
            NetworkErrorManager.handle(s, !1), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + i.status + ") Failed to retrieve badges")
        }
    })
}, controllers.onboarding.BadgeSelect.prototype._selectBadge = function _selectBadge() {
    var t = this._badges[this.getView().getSelectedIndex()];
    utils.Debug.Assert(utils.JS.isValid(t), "Expected badge reference to point to item entity."), t && (gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Onboarding.selectBadge(t).observe(this, function _onSelectBadgeComplete(t, response) {
        if (t.unobserve(this), response.success) {
            var i = {
                moment: PinManager.MILESTONE_EVT_MOMENT,
                mode: PinManager.MILESTONE_EVT_MODE,
                type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                mstid: enums.PIN.MILESTONE_EVT_ID.BADGE
            };
            gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, i));
            var s = this.getNavigationController();
            if (s) {
                s.conforms(controllers.navigation.Onboarding) && s.getOnboardingState().setBadgeId(response.data.badgeId);
                var o = new controllers.onboarding.OnboardingSummary;
                o.init(), s.pushViewController(o, !0)
            }
        } else services.Notification.queue([gLocalization.lText("onboarding.error.badgeselectfailure"), enums.UINotificationType.NEGATIVE]), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + response.status + ") Failed to select badge");
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }))
}, controllers.onboarding.BadgeSelect.prototype._eContinue = function _eContinue(sender, event, data) {
    this._selectBadge()
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.KitSelect = function KitSelectOnboardingViewController() {
    FUIViewController.call(this), this._homeKits = [], this._awayKits = [], this._selectedHomeKit = null, this._selectedAwayKit = null
}, utils.JS.inherits(controllers.onboarding.KitSelect, FUIViewController), controllers.onboarding.KitSelect.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.setType(enums.UIOnboardingSelectionType.HOME_KIT), view.setTitle(gLocalization.lText("onboarding.kits.titlehome")), view.setDescription(gLocalization.lText("onboarding.kits.bodyhome")), view.setFirstImageLocalPath("images/onboarding/kit.png"), view.setSecondImageLocalPath("images/onboarding/kit.png"), view.getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP);
        var page = "Onboarding - Kits";
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: page
        })), TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, page)
    }
}, controllers.onboarding.KitSelect.prototype.dealloc = function dealloc() {
    this.superclass(), this._homeKits = [], this._awayKits = [], this._selectedAwayKit = null, this._selectedHomeKit = null
}, controllers.onboarding.KitSelect.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSelect
}, controllers.onboarding.KitSelect.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("onboarding.kits.titlehome")
}, controllers.onboarding.KitSelect.prototype.viewDidAppear = function viewDidAppear() {
    if (this.superclass(), this._homeKits.length > 0 && this._awayKits.length > 0) {
        var t = this._selectedHomeKit ? this._awayKits : this._homeKits;
        this.getView().setData(this._mapKitsToData(t))
    } else this._getKits();
    var i = this.getNavigationController();
    i && i.conforms(controllers.navigation.Onboarding) && (isPhone() || (i.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), i.setToolbarVisibility(!0)), i.setCurrentStep(enums.UIOnboardingStep.KITS))
}, controllers.onboarding.KitSelect.prototype._mapKitsToData = function _mapKitsToData(t) {
    return t.map(function(t) {
        return {
            id: t.teamId,
            name: utils.FUTLocalization.getTeamAbb15ByID(t.teamId),
            assetType: t.getStaticData().assetType
        }
    })
}, controllers.onboarding.KitSelect.prototype._getKits = function _getKits() {
    services.Onboarding.getKits().observe(this, function _onGetKitsComplete(t, i) {
        if (t.unobserve(this), i.success) this._homeKits = i.data.homeKits, this._awayKits = i.data.awayKits, this.getView().setData(this._mapKitsToData(this._homeKits));
        else {
            var s = new valueobjects.NetworkErrorVO(enums.NetworkError.SERVER_ERROR, enums.NetworkErrorLevel.CRITICAL, "popup.error.cannotcontinueTitle", "popup.error.cannotcontinue");
            NetworkErrorManager.handle(s, !1), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + i.status + ") Failed to retrieve kits")
        }
    })
}, controllers.onboarding.KitSelect.prototype._selectHomeKit = function _selectHomeKit() {
    var view = this.getView();
    this._selectedHomeKit = this._homeKits[view.getSelectedIndex()];
    var t = {
        moment: PinManager.MILESTONE_EVT_MOMENT,
        mode: PinManager.MILESTONE_EVT_MODE,
        type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
        mstid: enums.PIN.MILESTONE_EVT_ID.HOMEKIT
    };
    gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, t)), view.setType(enums.UIOnboardingSelectionType.AWAY_KIT), view.setData(this._mapKitsToData(this._awayKits)), view.setTitle(gLocalization.lText("onboarding.kits.titleaway")), view.setDescription(gLocalization.lText("onboarding.kits.bodyaway"));
    var i = this.getNavigationController();
    i && i.setNavigationTitle(gLocalization.lText("onboarding.kits.titleaway"))
}, controllers.onboarding.KitSelect.prototype._selectAwayKit = function _selectAwayKit() {
    this._selectedAwayKit = this._awayKits[this.getView().getSelectedIndex()], utils.Debug.Assert(utils.JS.isValid(this._selectedHomeKit) && utils.JS.isValid(this._selectedAwayKit), "Expected both home and away kit references to point to item entities."), this._selectedHomeKit && this._selectedAwayKit && (gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Onboarding.selectKits(this._selectedHomeKit, this._selectedAwayKit).observe(this, function _onSelectKitsComplete(t, response) {
        if (t.unobserve(this), response.success) {
            var i = {
                moment: PinManager.MILESTONE_EVT_MOMENT,
                mode: PinManager.MILESTONE_EVT_MODE,
                type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                mstid: enums.PIN.MILESTONE_EVT_ID.AWAYKIT
            };
            gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, i));
            var s = this.getNavigationController();
            if (s) {
                if (s.conforms(controllers.navigation.Onboarding)) {
                    var state = s.getOnboardingState();
                    state.setHomeKitId(response.data.homeKitId), state.setAwayKitId(response.data.awayKitId)
                }
                var o = new controllers.onboarding.BadgeSelect;
                o.init(), s.pushViewController(o, !0)
            }
        } else services.Notification.queue([gLocalization.lText("onboarding.error.kitselectfailure"), enums.UINotificationType.NEGATIVE]), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + response.status + ") Failed to select kits");
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }))
}, controllers.onboarding.KitSelect.prototype._eContinue = function _eContinue(sender, event, data) {
    this._selectedHomeKit ? this._selectAwayKit() : this._selectHomeKit()
}, NamespaceManager.Register("transferobjects"), transferobjects.SlickProperties = function SlickPropertiesDTO(t, i, s, o, l, u, h) {
    var p = new valueobjects.BooleanVO;
    Object.defineProperty(this, "dots", {
        get: p.get.bind(p),
        set: p.set.bind(p)
    });
    var m = new valueobjects.BooleanVO;
    Object.defineProperty(this, "arrows", {
        get: m.get.bind(m),
        set: m.set.bind(m)
    });
    var _ = new valueobjects.BooleanVO;
    Object.defineProperty(this, "infinite", {
        get: _.get.bind(_),
        set: _.set.bind(_)
    });
    var g = new valueobjects.NumberVO;
    Object.defineProperty(this, "initialSlide", {
        get: g.get.bind(g),
        set: g.set.bind(g)
    });
    var speed = new valueobjects.NumberVO;
    Object.defineProperty(this, "speed", {
        get: speed.get.bind(speed),
        set: speed.set.bind(speed)
    });
    var autoplay = new valueobjects.BooleanVO;
    Object.defineProperty(this, "autoplay", {
        get: autoplay.get.bind(autoplay),
        set: autoplay.set.bind(autoplay)
    });
    var S = new valueobjects.NumberVO;
    Object.defineProperty(this, "autoplaySpeed", {
        get: S.get.bind(S),
        set: S.set.bind(S)
    }), this.dots = t, this.arrows = i, this.infinite = s, this.initialSlide = o || 0, this.speed = l || 300, this.autoplay = u || !1, this.autoplaySpeed = h || 3e3
}, NamespaceManager.Register("views"), views.SlickContainer = function SlickContainer() {
    FUIView.call(this), this.properties = null, Object.defineProperty(this, "properties", {
        writable: !0
    }), this._slideChangeTimeout = void 0, Object.defineProperty(this, "_selectionTimeout", {
        writable: !0,
        enumerable: !1
    }), this._generate()
}, utils.JS.inherits(views.SlickContainer, FUIView), views.SlickContainer.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.SlickContainer.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.SlickContainer.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.SlickContainer.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.SlickContainer.prototype.dealloc = function dealloc() {
    this._slideChangeTimeout = clearTimeout(this._slideChangeTimeout), this.unslick(), this.superclass()
}, views.SlickContainer.prototype.slick = function slick(t) {
    this.isSlicked() ? utils.Debug.Assert(!1, "views.SlickContainer::slick. Slick container is already initialized.") : (utils.JS.isValid(t) && (this.properties = t), utils.JS.isValid(this.properties) && this.properties instanceof transferobjects.SlickProperties ? this.getRoot().slick({
        dots: this.properties.dots,
        arrows: this.properties.arrows,
        infinite: this.properties.infinite,
        initialSlide: this.properties.initialSlide,
        speed: this.properties.speed,
        autoplay: this.properties.autoplay,
        autoplaySpeed: this.properties.autoplaySpeed
    }) : utils.Debug.Assert(!1, "views.SlickContainer: Can't slick without defining container's properties first."))
}, views.SlickContainer.prototype.unslick = function unslick() {
    this.isSlicked() && this.getRoot().slick("unslick")
}, views.SlickContainer.prototype.isSlicked = function isSlicked() {
    return this.getRootElement().classList.contains("slick-initialized")
}, views.SlickContainer.prototype.toggleSwiping = function toggleSwiping(t) {
    utils.Debug.Assert(this.isSlicked(), "Must have slicked first before trying to enable/disable swiping."), this.getRoot().slick("slickSetOption", {
        swipe: t,
        touchMove: t,
        draggable: t,
        arrows: t
    }, !0)
}, views.SlickContainer.prototype.canSwipe = function canSwipe() {
    return !!this.isSlicked() && this.getRoot().slick("getSlick").options.swipe
}, views.SlickContainer.prototype.attachArrows = function attachArrows(t, i) {
    utils.Debug.Assert(this.isSlicked(), "Must have slicked first before setting new arrows."), this.getRoot().slick("slickSetOption", {
        prevArrow: t,
        nextArrow: i,
        arrows: !0
    }, !0)
}, views.SlickContainer.prototype.appendElem = function appendElem(t, i) {
    var s = $("<div></div>");
    utils.JS.isEmpty(i) || s.addClass(i), Array.isArray(t) || (t = [t]), t.forEach(function(e) {
        s.append(e)
    }), this.getRoot().append(s)
}, views.SlickContainer.prototype.insert = function insert(t, index) {
    this.isSlicked() && utils.JS.isNumber(index) && this.getRoot().slick("slickAdd", $("<div></div>").append(t), index)
}, views.SlickContainer.prototype.unshift = function unshift(t) {
    this.isSlicked() && this.getRoot().slick("slickAdd", $("<div></div>").append(t), !0)
}, views.SlickContainer.prototype.push = function push(t) {
    this.isSlicked() && this.getRoot().slick("slickAdd", $("<div></div>").append(t), !1)
}, views.SlickContainer.prototype.remove = function remove(index) {
    this.isSlicked() && utils.JS.isNumber(index) && this.getRoot().slick("slickRemove", index)
}, views.SlickContainer.prototype.pop = function pop() {
    this.isSlicked() && this.getRoot().slick("slickRemove", !1)
}, views.SlickContainer.prototype.shift = function shift() {
    this.isSlicked() && this.getRoot().slick("slickRemove", !0)
}, views.SlickContainer.prototype.clear = function clear() {
    if (this.isSlicked())
        for (var t = this.getRoot().slick("getSlick").slideCount; t-- > 0;) this.pop()
}, views.SlickContainer.prototype.goTo = function goTo(index) {
    this.isSlicked() && this.getCurrentSlide() !== index && this.getRoot().slick("slickGoTo", index, !0)
}, views.SlickContainer.prototype.goToPrev = function goToPrev() {
    this.isSlicked() && this.getRoot().slick("slickPrev")
}, views.SlickContainer.prototype.goToNext = function goToNext() {
    this.isSlicked() && this.getRoot().slick("slickNext")
}, views.SlickContainer.prototype.getCurrentSlide = function getCurrentSlide() {
    return this.isSlicked() ? this.getRoot().slick("slickCurrentSlide") : -1
}, views.SlickContainer.prototype.onSwipe = function onSwipe(t, i) {
    this.getRoot().on("swipe", function(event, s, direction) {
        "right" === direction ? t() : "left" === direction && i()
    })
}, views.SlickContainer.prototype.afterChange = function afterChange(t) {
    this.getRoot().on("afterChange", function(event, i, s) {
        t(s)
    })
}, views.SlickContainer.prototype.dynamicSlideChange = function dynamicSlideChange(t, i, s) {
    NavManager.getCurrentScreen().setInteractionsEnabled(!1);
    var root = this.getRoot(),
        o = this.getCurrentSlide();
    s === o && (root.slick("checkNavigable", o + 1) === o + 1 ? this.goToNext() : root.slick("checkNavigable", o - 1) === o - 1 && this.goToPrev()), this._slideChangeTimeout = setTimeout(function() {
        root.slick("slickSetOption", "speed", 0), utils.JS.isNumber(s) && s > -1 && this.remove(s), utils.JS.isValid(t) && (root.slick("slickAdd", $("<div></div>").append(t), i), i && this.goTo(o + 1)), root.slick("slickSetOption", "speed", this.properties.speed), NavManager.getCurrentScreen().setInteractionsEnabled(!0)
    }.bind(this), this.properties.speed)
}, NamespaceManager.Register("views.items"), views.items.ItemDetails = function ItemDetailsView() {
    FUITargetActionView.call(this), this._generate(), this._items = new FUTIterator([])
}, utils.JS.inherits(views.items.ItemDetails, FUITargetActionView), views.items.ItemDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("DetailView");
        var i = document.createElement("div");
        i.classList.add("detail-carousel"), this.__btnPrev = document.createElement("a"), this.$_btnPrev = $(this.__btnPrev), this.__btnPrev.classList.add("tapLeft"), i.appendChild(this.__btnPrev), this._slickCarousel = new views.SlickContainer, i.appendChild(this._slickCarousel.getRootElement()), this.__btnNext = document.createElement("a"), this.$_btnNext = $(this.__btnNext), this.__btnNext.classList.add("tapRight"), i.appendChild(this.__btnNext), t.appendChild(i), this.__positionContainer = document.createElement("div"), this.$_positionContainer = $(this.__positionContainer), this.__positionContainer.classList.add("position-container"), this.__positionLabel = document.createElement("span"), this.$_positionLabel = $(this.__positionLabel), this.__positionContainer.appendChild(this.__positionLabel), this.__position = document.createElement("strong"), this.$_position = $(this.__position), this.__positionContainer.appendChild(this.__position), t.appendChild(this.__positionContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.ItemDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__btnPrev = null, this.$_btnPrev = null, this._slickCarousel.destroy(), this._slickCarousel = null, this.__btnNext = null, this.$_btnNext = null, this.__positionContainer = null, this.$_positionContainer = null, this.__positionLabel = null, this.$_positionLabel = null, this.__position = null, this.$_position = null
}, views.items.ItemDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.ItemDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.ItemDetails.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0), this._slickCarousel.onSwipe(this._triggerActions.bind(this, enums.UIItemNavigationEvent.PREV), this._triggerActions.bind(this, enums.UIItemNavigationEvent.NEXT)), this.__positionLabel.textContent = gLocalization.lText("card.desc.training.gkattribabbr.Position") + ": ", DOMKit.toggleDisplayStyle(this.__positionContainer, !1)
}, views.items.ItemDetails.prototype.dealloc = function dealloc() {
    this.superclass(), this._items.values().forEach(function(item) {
        item.dealloc(), item = null
    }, this), this._items = null
}, views.items.ItemDetails.prototype.appendPanel = function appendPanel(t) {
    this.removeSubviews(), this.addSubview(t), this.getRootElement().appendChild(t.getRootElement())
}, views.items.ItemDetails.prototype.setupCarousel = function setupCarousel() {
    this._slickCarousel.isSlicked() || this._slickCarousel.slick()
}, views.items.ItemDetails.prototype.teardownCarousel = function teardownCarousel() {
    this._items.resetCollection([]), this._slickCarousel.clear(), this._slickCarousel.unslick()
}, views.items.ItemDetails.prototype.toggleCarouselSwiping = function toggleCarouselSwiping(t) {
    this._slickCarousel.toggleSwiping(t), this.$_btnPrev.toggle(t), this.$_btnNext.toggle(t)
}, views.items.ItemDetails.prototype._setPrevNextState = function _setPrevNextState(t, i) {
    this.toggleClass("has-prev", t), this.toggleClass("has-next", i), this._slickCarousel.canSwipe() ? (this.$_btnPrev.toggle(t), this.$_btnNext.toggle(i)) : (this.$_btnPrev.hide(), this.$_btnNext.hide())
}, views.items.ItemDetails.prototype.render = function render(t, i, next) {
    0 === this._items.length ? this._populateIterator(t, i, next) : this._updateIterator(t, i, next), this._setPrevNextState(utils.JS.isValid(i), utils.JS.isValid(next))
}, views.items.ItemDetails.prototype.setSlotChemistry = function setSlotChemistry(t, i, next) {
    var s = this._items.current(),
        o = this._items.get(this._items.getIndex() - 1),
        l = this._items.get(this._items.getIndex() + 1);
    s && t.isValid() && s.renderChemistry(t.getItem(), t.getChemistry(), t.getManagerBonus()), o && i.isValid() && o.renderChemistry(i.getItem(), i.getChemistry(), i.getManagerBonus()), l && next.isValid() && l.renderChemistry(next.getItem(), next.getChemistry(), next.getManagerBonus())
}, views.items.ItemDetails.prototype.setSlotName = function setSlotName(t) {
    var i = !utils.JS.isEmpty(t);
    DOMKit.toggleDisplayStyle(this.__positionContainer, i), this.__position.textContent = i ? t : ""
}, views.items.ItemDetails.prototype.showPrev = function showPrev(item) {
    var t = this._items.length - 1,
        i = this._items.get(t),
        s = null,
        o = -1;
    3 === this._items.length && i && (o = t, i.destroy(), this._items.remove(t)), item ? (s = this._generateItemView(item), this._items.add(s, 0)) : this._items.previous(), this._setPrevNextState(utils.JS.isValid(item), !0), this._performSlickSlide(s, !1, o)
}, views.items.ItemDetails.prototype.showNext = function showNext(item) {
    var t = this._items.get(0),
        i = null,
        s = -1;
    3 === this._items.length && t && (s = 0, t.destroy(), this._items.remove(0)), item && (i = this._generateItemView(item), this._items.add(i, this._items.length)), this._setPrevNextState(!0, utils.JS.isValid(item)), this._items.setIndex(1), this._performSlickSlide(i, !0, s)
}, views.items.ItemDetails.prototype.removeCurrent = function removeCurrent(t, i, next) {
    var direction = !(this._items.endOfList && i),
        remove = this._items.getIndex();
    this._setPrevNextState(utils.JS.isValid(i), utils.JS.isValid(next)), this._items.remove(remove);
    var s;
    direction && next ? (s = this._generateItemView(next), this._items.add(s, this._items.length)) : direction || (s = this._generateItemView(i), this._items.add(s, 0), this._items.setIndex(1)), this._performSlickSlide(s, direction, remove)
}, views.items.ItemDetails.prototype._generateItemView = function _generateItemView(item) {
    var view = factories.ItemView.createLargeItem(item);
    return view.allowLegacyPropagation = !0, view.init(), view.render(item), view
}, views.items.ItemDetails.prototype._populateIterator = function _populateIterator(t, i, next) {
    var s = [];
    i && s.push(this._generateItemView(i)), s.push(this._generateItemView(t)), next && s.push(this._generateItemView(next)), this._items.resetCollection(s), i && this._items.next(), this._slickCarousel.isSlicked() || (this._slickCarousel.properties = new transferobjects.SlickProperties(!1, !1, !1, this._items.getIndex(), 500), this._items.values().forEach(function(t) {
        this._slickCarousel.appendElem(t.getRoot())
    }, this), this.setupCarousel())
}, views.items.ItemDetails.prototype._updateIterator = function _updateIterator(t, i, next) {
    utils.Debug.Assert(this._slickCarousel.isSlicked(), "views.items.ItemDetails::_updateIterator shouldn't be called if carousel hasn't been slicked yet.");
    var index = this._items.getIndex(),
        s = index - 1,
        o = index + 1,
        l = this._items.get(s),
        u = this._items.get(o);
    if (l ? i ? this._renderItem(s, i) || (l = this._items.get(s), this._slickCarousel.shift(), this._slickCarousel.unshift(l.getRoot())) : (this._slickCarousel.shift(), this._items.shift().dealloc(), this._items.setIndex(0)) : i && (l = this._generateItemView(i), this._slickCarousel.unshift(l.getRoot()), this._items.add(l, 0), this._items.setIndex(1)), index = this._items.getIndex(), !this._renderItem(index, t)) {
        var h = this._items.current();
        index > 0 ? (this._slickCarousel.remove(index), this._slickCarousel.insert(h.getRoot(), index - 1)) : (this._slickCarousel.shift(), this._slickCarousel.unshift(h.getRoot()))
    }
    u ? next ? (o = index + 1, this._renderItem(o, next) || (u = this._items.get(o), this._slickCarousel.pop(), this._slickCarousel.push(u.getRoot()))) : (this._slickCarousel.pop(), this._items.pop().dealloc()) : next && (u = this._generateItemView(next), this._items.add(u), this._slickCarousel.push(u.getRoot())), this._slickCarousel.getCurrentSlide() !== index && this._slickCarousel.goTo(index)
}, views.items.ItemDetails.prototype._renderItem = function _renderItem(index, item) {
    var view = this._items.get(index),
        t = view.canRender(item);
    return t ? view.render(item) : (view.dealloc(), this._items.set(this._generateItemView(item), index)), t
}, views.items.ItemDetails.prototype._performSlickSlide = function _performSlickSlide(view, forward, t) {
    this._slickCarousel.dynamicSlideChange(view ? view.getRoot() : null, !forward, t)
}, views.items.ItemDetails.prototype._tapDetected = function _tapDetected(e) {
    e.target === this.__btnPrev ? (this._slickCarousel.goToPrev(), this._triggerActions(enums.UIItemNavigationEvent.PREV)) : e.target === this.__btnNext && (this._slickCarousel.goToNext(), this._triggerActions(enums.UIItemNavigationEvent.NEXT))
}, NamespaceManager.Register("views.onboarding"), views.onboarding.SlotSelectPanel = function OnboardingSlotSelectPanelView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.onboarding.SlotSelectPanel, FUIView), views.onboarding.SlotSelectPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("OnboardingSlotSelectPanel"), this._btnSlotSelect = new views.buttons.DefaultButton, this._btnSlotSelect.getRootElement().classList.add("call-to-action"), t.appendChild(this._btnSlotSelect.getRootElement()), this.__description = document.createElement("div"), this.$_description = $(this.__description), this.__description.classList.add("slotSelectDescription"), this.__descTitle = document.createElement("h1"), this.$_descTitle = $(this.__descTitle), this.__description.appendChild(this.__descTitle), this.__descBody1 = document.createElement("p"), this.$_descBody1 = $(this.__descBody1), this.__description.appendChild(this.__descBody1), this.__descBody2 = document.createElement("p"), this.$_descBody2 = $(this.__descBody2), this.__description.appendChild(this.__descBody2), t.appendChild(this.__description), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.SlotSelectPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._btnSlotSelect.destroy(), this._btnSlotSelect = null, this.__description = null, this.$_description = null, this.__descTitle = null, this.$_descTitle = null, this.__descBody1 = null, this.$_descBody1 = null, this.__descBody2 = null, this.$_descBody2 = null
}, views.onboarding.SlotSelectPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.SlotSelectPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.SlotSelectPanel.prototype.init = function init() {
    this.superclass(), this._btnSlotSelect.init(), this._btnSlotSelect.setInteractionState(!1), this._btnSlotSelect.setText(gLocalization.lText("common.dialog.continue"))
}, views.onboarding.SlotSelectPanel.prototype.getSlotSelectButton = function getSlotSelectButton() {
    return this._btnSlotSelect
}, views.onboarding.SlotSelectPanel.prototype.setSlotSelectButtonState = function setSlotSelectButtonState(text, enabled) {
    this._btnSlotSelect.setText(text), this._btnSlotSelect.setInteractionState(enabled)
}, views.onboarding.SlotSelectPanel.prototype.renderSwapDescription = function renderSwapDescription() {
    this.__descTitle.textContent = gLocalization.lText("onboarding.swapdescription.title"), this.__descBody1.textContent = gLocalization.lText("onboarding.swapdescription.body1"), this.__descBody2.textContent = gLocalization.lText("onboarding.swapdescription.body2"), DOMKit.toggleDisplayStyle(this.__descBody2, !0), DOMKit.toggleClass(this.__root, "swap-description", !0)
}, views.onboarding.SlotSelectPanel.prototype.renderLoanDescription = function renderLoanDescription() {
    this.__descTitle.textContent = gLocalization.lText("onboarding.loandescription.title"), this.__descBody1.textContent = gLocalization.lText("onboarding.loandescription.body"), DOMKit.toggleDisplayStyle(this.__descBody2, !1), DOMKit.toggleClass(this.__root, "swap-description", !1)
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.StarterSquadSlotSelection = function StarterSquadSlotSelectionViewController() {
    FUIViewController.call(this), this._squad = null, this._panelView = null, this._itemIterator = null, this._squadViewDelegate = null, this._slotIterationDelegate = null, this._slotSelected = !1
}, utils.JS.inherits(controllers.onboarding.StarterSquadSlotSelection, FUIViewController), controllers.onboarding.StarterSquadSlotSelection.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._panelView = new views.onboarding.SlotSelectPanel, this._panelView.init(), this._panelView.getSlotSelectButton().addTarget(this, this._eSlotSelected, enums.Event.TAP), this._panelView.renderSwapDescription();
        var view = this.getView();
        view.appendPanel(this._panelView), this._itemIterator && (view.addTarget(this, this._ePrevItem, enums.UIItemNavigationEvent.PREV), view.addTarget(this, this._eNextItem, enums.UIItemNavigationEvent.NEXT))
    }
}, controllers.onboarding.StarterSquadSlotSelection.prototype.initWithSquad = function initWithSquad(t, i) {
    if (!this.initialized) {
        utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity"), utils.Debug.Assert(utils.JS.isNumber(i), "Initialization expected a numeric slot index"), this._squad = t;
        var s = t.getPlayers();
        this._itemIterator = new FUTIterator(s.slice(0, s.length - 2)), this._squad.onDataUpdated.observe(this, this._eSquadUpdated), this.init()
    }
}, controllers.onboarding.StarterSquadSlotSelection.prototype.dealloc = function dealloc() {
    this.superclass(), this._panelView && this._panelView.dealloc(), this._squad && this._squad.onDataUpdated.unobserve(this), this._panelView = null, this._squad = null, this._itemIterator = null, this._squadViewDelegate = null, this._slotIterationDelegate = null
}, controllers.onboarding.StarterSquadSlotSelection.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ItemDetails
}, controllers.onboarding.StarterSquadSlotSelection.prototype._getViewIteratorItems = function _getViewIteratorItems() {
    var index = this._itemIterator.getIndex(),
        t = this._itemIterator.get(index - 1),
        i = this._itemIterator.current(),
        next = this._itemIterator.get(index + 1);
    return {
        current: i.getItem(),
        prev: t ? t.getItem() : null,
        next: next ? next.getItem() : null
    }
}, controllers.onboarding.StarterSquadSlotSelection.prototype._getSlotName = function _getSlotName(t) {
    var i = t.getIndex();
    return i >= 0 && i < entities.Squad.FIELD_PLAYERS ? utils.FUTLocalization.getLocalizedPositionStringById(t.getGeneralPosition()) : i >= 0 && i < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS ? gLocalization.lText("dock.label.substitutes") : i >= 0 && i < entities.Squad.MANAGER_SLOT_INDEX ? gLocalization.lText("dock.label.reserves") : enums.Localization.BLANK_STR
}, controllers.onboarding.StarterSquadSlotSelection.prototype._renderView = function _renderView() {
    if (this._slotSelected) {
        var t = this._getViewIteratorItems();
        this.getView().render(t.current, t.prev, t.next, this._getSlotName(this._itemIterator.current()))
    } else {
        var i = this._squad.getSlot(-1);
        this.getView().render(i.getItem(), null, null, this._getSlotName(i))
    }
}, controllers.onboarding.StarterSquadSlotSelection.prototype.setSlot = function setSlot(index) {
    utils.Debug.Assert(this._itemIterator instanceof FUTIterator, "Attempted to update iterator index when iterator doesn't exist."), this._itemIterator && (this._slotSelected = !0, this._itemIterator.current().getIndex() !== index && this._itemIterator.setIndex(this._itemIterator.indexOf(function(t) {
        return t.getIndex() === index
    })), this._renderView(), this._panelView.setSlotSelectButtonState(gLocalization.lPrint("swap.withposition", [this._getSlotName(this._itemIterator.current())]), !0))
}, controllers.onboarding.StarterSquadSlotSelection.prototype.setSquadViewDelegate = function setSquadViewDelegate(t) {
    t.conforms(interfaces.SquadViewDelegate) && (this._squadViewDelegate = t)
}, controllers.onboarding.StarterSquadSlotSelection.prototype.setSlotIterationDelegate = function setSlotIterationDelegate(t) {
    t.conforms(interfaces.SlotIterationDelegate) && (this._slotIterationDelegate = t)
}, controllers.onboarding.StarterSquadSlotSelection.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getNavigationController().setNavigationVisibility(!1, !1), this._renderView()
}, controllers.onboarding.StarterSquadSlotSelection.prototype._loadLoanPlayers = function _loadLoanPlayers() {
    var view = this.getView(),
        t = this._panelView,
        i = this._itemIterator.current();
    view.setInteractionState(!1), t.setInteractionState(!1), gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Onboarding.getLoanPlayers().observe(this, function _gotoLoanSelector(s, response) {
        if (s.unobserve(this), response.success) {
            var o = new controllers.onboarding.LoanSelector,
                l = new viewmodels.OnboardingLoanPlayerSelection;
            l.setItems(response.data.items), o.initWithItems(l.getLoanerSample(5, l.getPositionFromSlot(i)), i.getItem()), this._squad && o.setSquad(this._squad), this._squadViewDelegate && o.setSquadViewDelegate(this._squadViewDelegate), this.getNavigationController().pushViewController(o)
        } else view.setInteractionState(!0), t.setInteractionState(!0), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + response.status + ") Failed to retrieve loaner list");
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    })
}, controllers.onboarding.StarterSquadSlotSelection.prototype._ePrevItem = function _ePrevItem(sender, event, data) {
    if (!this._itemIterator.startOfList) {
        var t = this._itemIterator.previous(),
            i = this._itemIterator.get(this._itemIterator.getIndex() - 1),
            s = this._getSlotName(t);
        this.getView().showPrev(i ? i.getItem() : null, s), this._panelView.setSlotSelectButtonState(gLocalization.lPrint("swap.withposition", [s]), !0), this._slotIterationDelegate && this._slotIterationDelegate.prevSlot(this)
    }
}, controllers.onboarding.StarterSquadSlotSelection.prototype._eNextItem = function _eNextItem(sender, event, data) {
    if (!this._itemIterator.endOfList) {
        var t = this._itemIterator.next(),
            next = this._itemIterator.get(this._itemIterator.getIndex() + 1),
            i = this._getSlotName(t);
        this.getView().showNext(next ? next.getItem() : null, i), this._panelView.setSlotSelectButtonState(gLocalization.lPrint("swap.withposition", [i]), !0), this._slotIterationDelegate && this._slotIterationDelegate.nextSlot(this)
    }
}, controllers.onboarding.StarterSquadSlotSelection.prototype._eSlotSelected = function _eSlotSelected(sender, event, data) {
    this._loadLoanPlayers()
}, controllers.onboarding.StarterSquadSlotSelection.prototype._eContinue = function _eContinue(sender, event, data) {
    var t = this.getRootNavigationController();
    if (t) {
        var i = new controllers.onboarding.KitSelect;
        i.init(), t.pushViewController(i, !0)
    }
}, controllers.onboarding.StarterSquadSlotSelection.prototype._eSquadUpdated = function _eSquadUpdated(t, data) {
    this.getView().toggleCarouselSwiping(!1);
    var i = this._panelView.getSlotSelectButton();
    i.removeTarget(this, this._eSlotSelected, enums.Event.TAP), i.addTarget(this, this._eContinue, enums.Event.TAP), this._panelView.setSlotSelectButtonState(gLocalization.lText("common.dialog.continue"), !0), this._panelView.renderLoanDescription()
}, NamespaceManager.Register("controllers.navigation"), controllers.navigation.LoanPlayerSelection = function LoanPlayerSelectionNavigationController(t, toolbar) {
    FUINavigationController.call(this, t, toolbar), this._squad = null, this._squadViewDelegate = null
}, utils.JS.inherits(controllers.navigation.LoanPlayerSelection, FUINavigationController), controllers.navigation.LoanPlayerSelection.prototype.initWithSquad = function initWithSquad(t, i) {
    utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity."), utils.Debug.Assert(utils.JS.isNumber(i), "Initialization expected a number for current squad slot."), this._squad = t;
    var s = this._getRootControllerInstance();
    s.initWithSquad(this._squad, i), this.initWithRootController(s)
}, controllers.navigation.LoanPlayerSelection.prototype.dealloc = function dealloc() {
    this.superclass(), this._squad = null, this._squadViewDelegate = null
}, controllers.navigation.LoanPlayerSelection.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new controllers.onboarding.StarterSquadSlotSelection
}, controllers.navigation.LoanPlayerSelection.prototype.didMove = function didMove(t) {
    this.superclass();
    var root = this.getRootController(),
        parent = this.getParentViewController();
    root && parent && parent.conforms(interfaces.SlotIterationDelegate) && root.setSlotIterationDelegate(parent)
}, controllers.navigation.LoanPlayerSelection.prototype.setSlot = function setSlot(index) {
    this.popToRootViewController(), this.getRootController().setSlot(index)
}, controllers.navigation.LoanPlayerSelection.prototype.setSquadViewDelegate = function setSquadViewDelegate(t) {
    t.conforms(interfaces.SquadViewDelegate) && (this._squadViewDelegate = t, this.getRootController().setSquadViewDelegate(t))
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.StarterSquadLandscape = function StarterSquadLandscapeViewController() {
    FUISplitViewController.call(this), this._overviewController = null, this._panelController = null, this._squad = null
}, utils.JS.inherits(controllers.onboarding.StarterSquadLandscape, FUISplitViewController), controllers.onboarding.StarterSquadLandscape.prototype.init = function init() {
    this.initialized || (this.superclass(), this._overviewController = this._generateSquadOverview(), this.addChildViewController(this._overviewController), this._panelController = this._generateLoanSelectNavController(), this.addChildViewController(this._panelController), this._panelController.setSquadViewDelegate(this._overviewController.getView().getSquadOverview()))
}, controllers.onboarding.StarterSquadLandscape.prototype.initWithSquad = function initWithSquad(t) {
    this.initialized || (utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected to receive a squad entity."), this._squad = t, this.init())
}, controllers.onboarding.StarterSquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._overviewController && this._overviewController.dealloc(), this._panelController && this._panelController.dealloc(), this._overviewController = null, this._panelController = null, this._squad = null
}, controllers.onboarding.StarterSquadLandscape.prototype._generateSquadOverview = function _generateSquadOverview() {
    var t = new controllers.onboarding.StarterSquadOverview;
    return this._squad ? t.initWithSquad(this._squad) : t.init(), t
}, controllers.onboarding.StarterSquadLandscape.prototype._generateLoanSelectNavController = function _generateLoanSelectNavController() {
    var t = new controllers.navigation.LoanPlayerSelection;
    return this._squad ? t.initWithSquad(this._squad, 0) : (utils.Debug.Assert(!1, "Expected to instantiate navigation controller with a squad"), t.init()), t
}, controllers.onboarding.StarterSquadLandscape.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("onboarding.complete.teamtitle")
}, controllers.onboarding.StarterSquadLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._setLeftController(this._overviewController), this._setRightController(this._panelController), this._overviewController.getView().toggleSlotSelect(!1)
}, controllers.onboarding.StarterSquadLandscape.prototype.setSlot = function setSlot(sender, index) {
    sender !== this._panelController && this._panelController.setSlot(index), sender !== this._overviewController && this._overviewController.setSlot(index)
}, controllers.onboarding.StarterSquadLandscape.prototype.nextSlot = function nextSlot(sender) {
    sender !== this._overviewController && this._overviewController.nextSlot()
}, controllers.onboarding.StarterSquadLandscape.prototype.prevSlot = function prevSlot(sender) {
    sender !== this._overviewController && this._overviewController.prevSlot()
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.CountrySelect = function CountrySelectOnboardingViewController() {
    FUIViewController.call(this), this._countries = []
}, utils.JS.inherits(controllers.onboarding.CountrySelect, FUIViewController), controllers.onboarding.CountrySelect.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.setType(enums.UIOnboardingSelectionType.NATION), view.setTitle(gLocalization.lText("onboarding.nation.title")), view.setDescription(gLocalization.lText("onboarding.nation.body")), view.setFirstImageLocalPath("images/onboarding/nation_flag.png"), view.getContinueButton().addTarget(this, this._eContinue, enums.Event.TAP);
        var page = "Onboarding - Country";
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: page
        })), TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, page)
    }
}, controllers.onboarding.CountrySelect.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.OnboardingSelect
}, controllers.onboarding.CountrySelect.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("onboarding.nation.title")
}, controllers.onboarding.CountrySelect.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._countries.length > 0 ? this.getView().setData(this._mapCountryObjects(this._countries)) : this._getCountries();
    var t = this.getNavigationController();
    t && t.conforms(controllers.navigation.Onboarding) && (isPhone() || t.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), t.setCurrentStep(enums.UIOnboardingStep.NATION))
}, controllers.onboarding.CountrySelect.prototype._getCountries = function _getCountries() {
    services.Onboarding.getCountries().observe(this, function _onGetCountriesComplete(t, i) {
        t.unobserve(this), i.success ? (this._countries = i.data.countries, this.getView().setData(this._mapCountryObjects(this._countries))) : TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + i.status + ") Country Select load failure")
    })
}, controllers.onboarding.CountrySelect.prototype._generateCountryDataObject = function _generateCountryDataObject(t) {
    return {
        id: t,
        name: utils.FUTLocalization.getNationNameById(t),
        assetType: utils.AssetLocator.IMAGE_TYPE_FLAG
    }
}, controllers.onboarding.CountrySelect.prototype._mapCountryObjects = function _mapCountryObjects(t) {
    return t.map(function(t) {
        return this._generateCountryDataObject(t)
    }, this)
}, controllers.onboarding.CountrySelect.prototype._selectCountry = function _selectCountry() {
    function _onGetSquadComplete(t, i) {
        if (t.unobserve(this), i) {
            var s = {
                moment: PinManager.MILESTONE_EVT_MOMENT,
                mode: PinManager.MILESTONE_EVT_MODE,
                type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                mstid: enums.PIN.MILESTONE_EVT_ID.EXPLORESQUAD
            };
            gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, s));
            var o;
            isPhone() ? (o = new controllers.onboarding.StarterSquadOverview).initWithSquad(i) : (o = new controllers.onboarding.StarterSquadLandscape).initWithSquad(i);
            var l = this.getNavigationController();
            l && (l.conforms(controllers.navigation.Onboarding) && l.getOnboardingState().setCountryId(utils.FUTData.mapNationIdToOnboardingCountryId(id)), l.pushViewController(o, !0))
        } else view.setInteractionState(!0), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "Failed to load starter squad");
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }

    function _onCreateClubComplete(t, response) {
        t.unobserve(this), response.success ? repositories.Squad.getSquadById(0).observe(this, _onGetSquadComplete) : (view.setInteractionState(!0), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING), services.Notification.queue([gLocalization.lText("onboarding.error.clubcreation"), enums.UINotificationType.NEGATIVE]), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + response.status + ") Failed to create club"))
    }
    var view = this.getView(),
        id = view.getSelectedId(),
        t = utils.JS.isNumber(id) && id > 0;
    utils.Debug.Assert(t, "Invalid country ID"), t && (view.setInteractionState(!1), gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Onboarding.selectCountry(id).observe(this, function _onCountrySelectComplete(t, response) {
        if (t.unobserve(this), response.success) {
            var i = {
                moment: PinManager.MILESTONE_EVT_MOMENT,
                mode: PinManager.MILESTONE_EVT_MODE,
                type: enums.PIN.MILESTONE_EVT_TYPE.ONBOARDING,
                mstid: enums.PIN.MILESTONE_EVT_ID.COUNTRY
            };
            gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MILESTONE, i)), services.Onboarding.createClub().observe(this, _onCreateClubComplete)
        } else view.setInteractionState(!0), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING), services.Notification.queue([gLocalization.lText("onboarding.error.clubcreation"), enums.UINotificationType.NEGATIVE]), TelemetryManager.trackEvent(TelemetryManager.Sections.ONBOARDING, TelemetryManager.Categories.ERROR, "(" + response.status + ") Failed to save country selection")
    }))
}, controllers.onboarding.CountrySelect.prototype._eContinue = function _eContinue(target, event, data) {
    this._selectCountry()
}, NamespaceManager.Register("controllers.onboarding"), controllers.onboarding.WelcomeBack = function() {
    FUIViewController.call(this), this._personaController = null
}, utils.JS.inherits(controllers.onboarding.WelcomeBack, FUIViewController), controllers.onboarding.WelcomeBack.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), this.getView().getSubmitButton().addTarget(this, this._eSubmitTap, enums.Event.TAP);
        var page = "Onboarding - Welcome Screen";
        gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: page
        })), TelemetryManager.trackPage(TelemetryManager.Sections.ONBOARDING, page)
    }
}, controllers.onboarding.WelcomeBack.prototype.dealloc = function dealloc() {
    this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.onboarding.WelcomeBack.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var t = repositories.User.getCurrent().getSelectedPersona(),
        i = this.getNavigationController(),
        view = this.getView();
    this._personaController && (view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews(), this._personaController.viewDidAppear()), i && !isPhone() && i.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), i && t.isGen3 && i.setNavigationVisibility(!1), view.setTitle(gLocalization.lPrint("mobilestart.text.welcomeBack", [t.name])), view.setDescription(gLocalization.lText(t.isGen3 ? "mobilestart.text.gettingStartedGen3" : "mobilestart.text.gettingStarted"))
}, controllers.onboarding.WelcomeBack.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.onboarding.WelcomeBack
}, controllers.onboarding.WelcomeBack.prototype._createClub = function _createClub() {
    function _onCreateClubComplete(t, response) {
        t.unobserve(this), response.success ? gAuthenticationModel.login(!0) : view.setInteractionState(!0), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    }
    var view = this.getView();
    view.setInteractionState(!1), gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Onboarding.selectDefaultPack().observe(this, function _onSelectDefaultPackComplete(t, response) {
        t.unobserve(this), response.success ? services.Onboarding.createClub().observe(this, _onCreateClubComplete) : (view.setInteractionState(!0), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING))
    })
}, controllers.onboarding.WelcomeBack.prototype._eSubmitTap = function _eSubmitTap(sender, event) {
    if (repositories.User.getCurrent().getSelectedPersona().isGen3) this._createClub();
    else {
        var t = new controllers.onboarding.CountrySelect;
        t.init(), this.getNavigationController().pushViewController(t, !0)
    }
}, NamespaceManager.Register("views"), views.StepLink = function StepLinkView() {
    FUIView.call(this), this._state = enums.UICompletionState.INCOMPLETE, this._generate()
}, utils.JS.inherits(views.StepLink, FUIView), views.StepLink.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("stepLink");
        var i = document.createElement("div");
        i.classList.add("linkLine"), t.appendChild(i), this.__value = document.createElement("span"), this.$_value = $(this.__value), this.__value.classList.add("linkValue"), t.appendChild(this.__value), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.StepLink.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__value = null, this.$_value = null
}, views.StepLink.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.StepLink.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.StepLink.prototype.setValue = function setValue(t) {
    this.__value.textContent = t
}, views.StepLink.prototype.setState = function setState(state) {
    if (this._state !== state) {
        if (state === enums.UICompletionState.INCOMPLETE) this.removeClass("inProgress complete");
        else if (state === enums.UICompletionState.IN_PROGRESS) this.addClass("inProgress"), this.removeClass("complete");
        else {
            if (state !== enums.UICompletionState.COMPLETE) return void utils.Debug.Assert(!1, "Encountered an unknown completion state");
            this.addClass("complete"), this.removeClass("inProgress")
        }
        this._state = state
    }
}, NamespaceManager.Register("views"), views.StepChain = function StepChainView() {
    FUIView.call(this), this._steps = [], this._generate()
}, utils.JS.inherits(views.StepChain, FUIView), views.StepChain.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("stepChain"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.StepChain.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.StepChain.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.StepChain.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.StepChain.prototype.dealloc = function dealloc() {
    this._removeSteps(), this.superclass()
}, views.StepChain.prototype._removeSteps = function _removeSteps() {
    this._steps.forEach(function _deallocStep(step) {
        step.dealloc()
    }, this), this._steps = []
}, views.StepChain.prototype._generateStep = function _generateStep(t) {
    var step = new views.StepLink;
    step.setValue(t), this._steps.push(step), this.addSubview(step)
}, views.StepChain.prototype.setCurrentStep = function setCurrentStep(index) {
    this._steps.forEach(function _setStepState(step, t) {
        var i = t + 1;
        i < index ? step.setState(enums.UICompletionState.COMPLETE) : i === index ? step.setState(enums.UICompletionState.IN_PROGRESS) : step.setState(enums.UICompletionState.INCOMPLETE)
    }, this)
}, views.StepChain.prototype.setNumSteps = function setNumSteps(t) {
    this._removeSteps();
    for (var i = 0; i++ < t;) this._generateStep(i.toString());
    this.layoutSubviews()
}, views.StepChain.prototype.setDarkStyle = function setDarkStyle(t) {
    this.toggleClass("dark", t)
}, NamespaceManager.Register("views.onboarding"), views.onboarding.OnboardingNavbar = function FUINavigationBar() {
    views.NavigationBar.call(this), this._generate()
}, utils.JS.inherits(views.onboarding.OnboardingNavbar, views.NavigationBar), views.onboarding.OnboardingNavbar.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("NavigationBar"), t.classList.add("OnboardingNavbar"), this.__title = document.createElement("h1"), this.$_title = $(this.__title), this.__title.classList.add("title"), t.appendChild(this.__title);
        var i = document.createElement("div");
        i.classList.add("stepsContainer"), this._steps = new views.StepChain, i.appendChild(this._steps.getRootElement()), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.OnboardingNavbar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this._steps.destroy(), this._steps = null
}, views.onboarding.OnboardingNavbar.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.OnboardingNavbar.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.OnboardingNavbar.prototype.init = function init() {
    this.superclass(), isPhone() || this._steps.setDarkStyle(!0)
}, views.onboarding.OnboardingNavbar.prototype.setHeader = function setHeader(text) {
    this.superclass(text), this.toggleClass("empty-title", utils.JS.isEmpty(text))
}, views.onboarding.OnboardingNavbar.prototype.setCurrentStep = function setCurrentStep(index) {
    this._steps.setCurrentStep(index)
}, views.onboarding.OnboardingNavbar.prototype.createSteps = function createSteps(t) {
    this._steps.setNumSteps(t)
}, views.onboarding.OnboardingToolbar = function OnboardingToolbar() {
    views.Toolbar.call(this), this._generate()
}, utils.JS.inherits(views.onboarding.OnboardingToolbar, views.Toolbar), views.onboarding.OnboardingToolbar.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("nav");
        t.classList.add("FUIToolbar"), t.classList.add("OnboardingToolbar"), this._settingsBtn = new views.buttons.ToolbarButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.onboarding.OnboardingToolbar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.onboarding.OnboardingToolbar.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.onboarding.OnboardingToolbar.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.onboarding.OnboardingToolbar.prototype.init = function init() {
    this.superclass(), this._settingsBtn.init(), this._settingsBtn.setText(gLocalization.lText("button.settings"))
}, views.onboarding.OnboardingToolbar.prototype.getSettingsButton = function getSettingsButton() {
    return this._settingsBtn
}, NamespaceManager.Register("controllers.navigation"), controllers.navigation.Onboarding = function OnboardingNavigationController() {
    FUINavigationController.call(this, new views.onboarding.OnboardingNavbar, new views.onboarding.OnboardingToolbar), this._viewmodel = null, this._squad = null, this._switchBackWithSettings = !1
}, utils.JS.inherits(controllers.navigation.Onboarding, FUINavigationController), controllers.navigation.Onboarding.prototype.init = function init() {
    if (!this.initialized) {
        var t = this.getRootController();
        this._viewmodel || (this._viewmodel = new viewmodels.OnboardingState), this._squad && t.conforms(controllers.onboarding.StarterSquadOverview) ? t.initWithSquad(this._squad) : this._squad && t.conforms(controllers.onboarding.StarterSquadLandscape) ? t.initWithSquad(this._squad) : t.conforms(controllers.onboarding.OnboardingSummary) && t.initWithViewmodel(this._viewmodel), this.superclass(), this._navigationBar.setPrimaryButton(this.getPrimaryNavigationItem()), this.showSettings(!0), this.setNavigationVisibility(!0), this.setToolbarVisibility(!0), this._toolbar.getSettingsButton().addTarget(this, this._eSettingsSelected, enums.Event.TAP), this._navigationBar.createSteps(4)
    }
}, controllers.navigation.Onboarding.prototype.initWithViewmodel = function initWithViewmodel(t) {
    this.initialized || (utils.Debug.Assert(t instanceof viewmodels.OnboardingState, "Expected a viewmodels.OnboardingState instance"), this._viewmodel = t, this.init())
}, controllers.navigation.Onboarding.prototype.dealloc = function dealloc() {
    this.superclass(), this._viewmodel = null
}, controllers.navigation.Onboarding.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return this._viewmodel ? this._viewmodel.hasLoaner() ? this._viewmodel.hasHomeKit() && this._viewmodel.hasAwayKit() ? this._viewmodel.hasBadge() ? new controllers.onboarding.OnboardingSummary : new controllers.onboarding.BadgeSelect : new controllers.onboarding.KitSelect : isPhone() ? new controllers.onboarding.StarterSquadOverview : new controllers.onboarding.StarterSquadLandscape : new controllers.onboarding.WelcomeBack
}, controllers.navigation.Onboarding.prototype.setSquad = function setSquad(t) {
    this._squad = t
}, controllers.navigation.Onboarding.prototype.setCurrentStep = function setCurrentStep(index) {
    this._navigationBar.setCurrentStep(index)
}, controllers.navigation.Onboarding.prototype.showSettings = function showSettings(t) {
    this._switchBackWithSettings = !!t, this.getPrimaryNavigationItem().toggleClass("settings-btn", this._switchBackWithSettings)
}, controllers.navigation.Onboarding.prototype.getOnboardingState = function getOnboardingState() {
    return this._viewmodel
}, controllers.navigation.Onboarding.prototype._eSettingsSelected = function _eSettingsSelected(sender, t) {
    NavManager.requestChildScreen(Screens.getView("APP_SETTINGS"), {
        showHeader: !0
    })
}, controllers.navigation.Onboarding.prototype._eBackButtonTapped = function _eBackButtonTapped(sender, event, data) {
    this._switchBackWithSettings ? NavManager.requestChildScreen(Screens.getView("APP_SETTINGS"), {
        showHeader: !0
    }) : this.superclass()
}, pages.controllers.MobileStartIntroController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.navigation.Onboarding, this._cache = null
}, utils.JS.inherits(pages.controllers.MobileStartIntroController, pages.controllers.ScreenControllerBase), pages.controllers.MobileStartIntroController.prototype.init = function init() {}, pages.controllers.MobileStartIntroController.prototype.destroy = function destroy() {
    pages.controllers.MobileStartIntroController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.MobileStartIntroController.prototype.onScreenInitialized = function onScreenIniitalized(data, t) {
    if (this._cache = t || data || null, this._cache && this._cache.state) {
        if (!this._cache.state.hasLoaner()) return void repositories.Squad.getSquadById(0).observe(this, function _onGetSquadComplete(t, i) {
            t.unobserve(this), utils.Debug.Assert(utils.JS.isValid(i), "Failed to load starter squad"), i && this._controller.setSquad(i), this._controller.initWithViewmodel(data.state), this._showCompositeController()
        });
        this._controller.initWithViewmodel(this._cache.state)
    } else this._controller.init();
    this._showCompositeController()
}, pages.controllers.MobileStartIntroController.prototype.getDataCache = function getDataCache() {
    return this._cache
}, pages.controllers.MobileStartIntroController.prototype._showCompositeController = function _showCompositeController() {
    this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, NamespaceManager.Register("views.popups"), views.popups.ChampionsRewards = function ChampionsRewardsView() {
    FUITargetActionView.call(this), this._generate()
}, utils.JS.inherits(views.popups.ChampionsRewards, FUITargetActionView), views.popups.ChampionsRewards.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "ChampionsRewards");
        var i = document.createElement("header"),
            s = document.createElement("strong");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), s.appendChild(this.__title), i.appendChild(s), t.appendChild(i);
        var o = document.createElement("div");
        o.classList.add("content-container"), this.__description = document.createElement("div"), this.$_description = $(this.__description), this.__description.classList.add("description"), o.appendChild(this.__description);
        var l = document.createElement("section");
        l.classList.add("rewards-container"), this._rewardsCarousel = new components.RewardsCarousel, l.appendChild(this._rewardsCarousel.getRootElement()), o.appendChild(l), t.appendChild(o);
        var u = document.createElement("footer");
        this._actionBtn = new views.buttons.DefaultButton, this._actionBtn.getRootElement().classList.add("call-to-action"), u.appendChild(this._actionBtn.getRootElement()), t.appendChild(u), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.ChampionsRewards.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__description = null, this.$_description = null, this._rewardsCarousel.destroy(), this._rewardsCarousel = null, this._actionBtn.destroy(), this._actionBtn = null
}, views.popups.ChampionsRewards.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.ChampionsRewards.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.ChampionsRewards.prototype.init = function init() {
    this.superclass(), this._actionBtn.init(), this._actionBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP)
}, views.popups.ChampionsRewards.prototype.setTitle = function setTitle(title) {
    this.__title.textContent = title
}, views.popups.ChampionsRewards.prototype.setDescription = function setDescription(t) {
    this.__description.textContent = t
}, views.popups.ChampionsRewards.prototype.setButtonText = function setButtonText(text) {
    this._actionBtn.setText(text)
}, views.popups.ChampionsRewards.prototype.setupRewardsCarousel = function setupRewardsCarousel(t) {
    t.length > 0 && this._rewardsCarousel.setup(t)
}, views.popups.ChampionsRewards.prototype.slickRewardsCarousel = function slickRewardsCarousel() {
    this._rewardsCarousel.slick()
}, views.popups.ChampionsRewards.prototype.resetRewardsCarousel = function resetRewardsCarousel() {
    this._rewardsCarousel.reset()
}, views.popups.ChampionsRewards.prototype._eBtnTapped = function _eBtnTapped(sender, event, data) {
    this._triggerActions(enums.Event.TAP)
}, controllers.views.popups.ChampionsRewards = function ChampionsRewardsController(t) {
    controllers.views.popups.BasePopup.call(this), this.hasCoinsReward = !1, this.hasItemReward = !1, this.hasPackReward = !1, this._rewards = t, Object.defineProperty(this, "_rewards", {
        writable: !1
    })
}, utils.JS.inherits(controllers.views.popups.ChampionsRewards, controllers.views.popups.BasePopup), controllers.views.popups.ChampionsRewards.prototype.init = function init() {
    var view = this.getView();
    view.setTitle(gLocalization.lText("champions.rewards.title")), view.setDescription(gLocalization.lText("champions.rewards.description")), view.setButtonText(gLocalization.lText("champions.rewards.claim")), view.setupRewardsCarousel(this._rewards), view.slickRewardsCarousel(), this._checkRewards(this._rewards), this.getView().addTarget(this, this._eBtnTapped, enums.Event.TAP), this.superclass()
}, controllers.views.popups.ChampionsRewards.prototype.dealloc = function dealloc() {
    this._rewards = [], this.superclass()
}, controllers.views.popups.ChampionsRewards.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.ChampionsRewards
}, controllers.views.popups.ChampionsRewards.prototype._checkRewards = function _checkRewards(t) {
    t.forEach(function(r) {
        this.hasCoinsReward = this.hasCoinsReward || r.isCoin, this.hasItemReward = this.hasItemReward || r.isItem, this.hasPackReward = this.hasPackReward || r.isPack
    }, this)
}, controllers.views.popups.ChampionsRewards.prototype._eBtnTapped = function _eBtnTapped(sender, event, data) {
    this.closePopup(), this.hasItemReward && (services.Notification.queue([gLocalization.lText("notification.item.added"), enums.UINotificationType.POSITIVE]), repositories.Item.setDirty(enums.FUTItemPile.PURCHASED), getDefaultDispatcher().notify(enums.AppNotification.UNASSIGNED_ITEM_ADDED, this)), this.hasPackReward && (services.Notification.queue([gLocalization.lText("notification.pack.added"), enums.UINotificationType.POSITIVE]), repositories.User.getCurrent().incrementNumUnopenedPacks()), this.hasCoinsReward && (services.Notification.queue([gLocalization.lText("notification.coins.added"), enums.UINotificationType.POSITIVE]), gUserModel.updateCredits(!0))
}, NamespaceManager.Register("views.popups"), views.popups.LoyaltyRewards = function LoyaltyRewardsPopupView() {
    FUITargetActionView.call(this), this._generate()
}, utils.JS.inherits(views.popups.LoyaltyRewards, FUITargetActionView), views.popups.LoyaltyRewards.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("popupLoyaltyRewards");
        var i = document.createElement("header");
        this.__popupTitle = document.createElement("h1"), this.$_popupTitle = $(this.__popupTitle), this.__popupTitle.classList.add("popupTitle"), i.appendChild(this.__popupTitle), t.appendChild(i), this.__textInfo = document.createElement("p"), this.$_textInfo = $(this.__textInfo), this.__textInfo.classList.add("text-info"), t.appendChild(this.__textInfo);
        var s = document.createElement("div");
        s.classList.add("bodySection"), this._rewardImage = new components.ImageLoader, this._rewardImage.getRootElement().classList.add("rewardImage"), s.appendChild(this._rewardImage.getRootElement()), this.__rewardList = document.createElement("ul"), this.$_rewardList = $(this.__rewardList), this.__rewardList.classList.add("rewardList"), s.appendChild(this.__rewardList), t.appendChild(s), this._btnAccept = new views.buttons.DefaultButton, this._btnAccept.getRootElement().classList.add("call-to-action"), t.appendChild(this._btnAccept.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.LoyaltyRewards.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__popupTitle = null, this.$_popupTitle = null, this.__textInfo = null, this.$_textInfo = null, this._rewardImage.destroy(), this._rewardImage = null, this.__rewardList = null, this.$_rewardList = null, this._btnAccept.destroy(), this._btnAccept = null
}, views.popups.LoyaltyRewards.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.LoyaltyRewards.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.LoyaltyRewards.prototype.init = function init() {
    this.superclass(), this.__popupTitle.textContent = gLocalization.lText("mobilestart.title.loyaltyRewards").toUpperCase(), this.__textInfo.textContent = gLocalization.lText("mobilestart.text.rewardInfo"), this._btnAccept.init(), this._btnAccept.setText(gLocalization.lText("common.dialog.accept"))
}, views.popups.LoyaltyRewards.prototype.setRewards = function setRewards(t) {
    for (; this.__rewardList.firstChild;) this.__rewardList.removeChild(this.__rewardList.firstChild);
    t.forEach(this._generateRewardRow, this), this._rewardImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_MOBILESTART_LOYALTYREWARD, enums.Year.ASSET, 1))
}, views.popups.LoyaltyRewards.prototype.getAcceptButton = function getAcceptButton() {
    return this._btnAccept
}, views.popups.LoyaltyRewards.prototype._generateRewardRow = function _generateRewardRow(t) {
    var i = document.createElement("li");
    i.textContent = "x" + t.quantity.toString() + " " + this._generateRewardString(t), this.__rewardList.appendChild(i)
}, views.popups.LoyaltyRewards.prototype._generateRewardString = function _generateRewardString(t) {
    var i = "";
    switch (t.type) {
        case enums.LoyaltyRewardType.PACKS:
            i = gLocalization.lText("FUT_STORE_PACK_" + t.value.toString() + "_NAME_MOBILE");
            break;
        case enums.LoyaltyRewardType.COINS:
            i = t.value + " " + gLocalization.lText("card.title.coins");
            break;
        case enums.LoyaltyRewardType.ITEMS:
            var item = t.itemData;
            if (utils.JS.isValid(item)) {
                var s = item.getStaticData();
                if (item.isKit()) {
                    var o = utils.FUTLocalization.getTeamAbb15ByID(item.teamId, item.getYear());
                    switch (s.assetType) {
                        case utils.AssetLocator.IMAGE_TYPE_KIT_HOME:
                            i = gLocalization.lPrint("onboarding.reward.homekit", [o]);
                            break;
                        case utils.AssetLocator.IMAGE_TYPE_KIT_AWAY:
                            i = gLocalization.lPrint("onboarding.reward.awaykit", [o]);
                            break;
                        case utils.AssetLocator.IMAGE_TYPE_KIT_THIRD:
                            i = gLocalization.lPrint("onboarding.reward.thirdkit", [o]);
                            break;
                        default:
                            i = s.description
                    }
                } else i = s.name
            } else i = gLocalization.lText("dock.label.items");
            break;
        case enums.LoyaltyRewardType.DRAFT_TOKENS:
            i = gLocalization.lText("draft.label.tokens");
            break;
        default:
            utils.Debug.Assert(!1, "Unsupported reward type: " + t.type)
    }
    return i.toUpperCase()
}, NamespaceManager.Register("controllers.views.popups"), controllers.views.popups.LoyaltyRewards = function LoyaltyRewardsPopupViewController() {
    controllers.views.popups.BasePopup.call(this), this._rewards = [], Object.defineProperty(this, "_rewards", {
        writable: !0,
        enumerable: !1
    })
}, utils.JS.inherits(controllers.views.popups.LoyaltyRewards, controllers.views.popups.BasePopup), controllers.views.popups.LoyaltyRewards.prototype.init = function init() {
    this.initialized || (this.superclass(), this.getView().getAcceptButton().addTarget(this, this._onAccept, enums.Event.TAP), gTelemetryManager.trackPage(TelemetryManager.Sections.MISC, "Loyalty Rewards Popup"))
}, controllers.views.popups.LoyaltyRewards.prototype.initWithRewards = function initWithRewards(t) {
    this.initialized || (this._rewards = t, this.init())
}, controllers.views.popups.LoyaltyRewards.prototype.dealloc = function dealloc() {
    this.superclass(), this._rewards = []
}, controllers.views.popups.LoyaltyRewards.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.LoyaltyRewards
}, controllers.views.popups.LoyaltyRewards.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().setRewards(this._rewards)
}, controllers.views.popups.LoyaltyRewards.prototype._onAccept = function _onAccept(sender, event, data) {
    this.onExit.notify()
}, communication.StaffStatsDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.useClickShield(!0), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "club/stats/staff", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.StaffStatsDelegate, communication.BaseFUTDelegate), communication.StaffStatsDelegate.prototype.execute = function() {
    gStaffStatsModel.isDirty() ? this.send() : this.dispatch(communication.BaseDelegate.SUCCESS)
}, communication.StaffStatsDelegate.prototype.onSuccess = function(t) {
    var i = [0, 0, 0, 0, 0, 0],
        s = [0, 0, 0, 0, 0, 0],
        o = [0, 0, 0, 0, 0, 0, 0, 0, 0],
        l = 0;
    t.bonus.forEach(function(t) {
        var u = PLAYER_ATTRIB_LOOKUP.indexOf(t.type),
            h = GK_ATTRIB_LOOKUP.indexOf(t.type),
            p = HEALTH_ATTRIB_LOOKUP.indexOf(t.type); - 1 !== u ? i[u] = parseFloat(t.value) / 100 : -1 !== h ? s[h] = parseFloat(t.value) / 100 : -1 !== p ? o[p] = parseFloat(t.value) / 100 : "contract" === t.type && (l = parseFloat(t.value) / 100)
    }, this), gStaffStatsModel.setPlayerAttribBoosts(i), gStaffStatsModel.setGKAttribBoosts(s), gStaffStatsModel.setHealthAttribBoosts(o), gStaffStatsModel.setContractBoost(l), gStaffStatsModel.setDirtyFlag(!1), this.dispatch(communication.BaseDelegate.SUCCESS)
}, NamespaceManager.Register("views.tiles"), views.tiles.BaseTile = function BaseTileView() {
    FUITargetActionView.call(this), this._title = "", this._content = "", this._highlightTimeout = 0
}, utils.JS.inherits(views.tiles.BaseTile, FUITargetActionView), views.tiles.BaseTile.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, views.tiles.BaseTile.prototype.dealloc = function dealloc() {
    clearTimeout(this._highlightTimeout), this.superclass()
}, views.tiles.BaseTile.prototype.setInteractionState = function setInteractionState(t) {
    var i = this._interactionState;
    this.superclass(t), this._interactionState !== i && (this.toggleClass(enums.UIState.DISABLED, !this._interactionState), this._interactionState || this.removeClass(enums.UIState.ACTIVE))
}, views.tiles.BaseTile.prototype.show = function show() {
    this.setDisplay(!0)
}, views.tiles.BaseTile.prototype.hide = function hide() {
    this.setDisplay(!1)
}, views.tiles.BaseTile.prototype.enable = function enable() {
    this.setInteractionState(!0)
}, views.tiles.BaseTile.prototype.disable = function disable() {
    this.setInteractionState(!1)
}, views.tiles.BaseTile.prototype.setEnabled = function setEnabled(enabled) {
    this.setInteractionState(enabled)
}, views.tiles.BaseTile.prototype.getTitle = function getTitle() {
    return this._title
}, views.tiles.BaseTile.prototype.getContent = function getContent() {
    return this._content
}, views.tiles.BaseTile.prototype.setTitle = function setTitle(title) {
    this._title = title
}, views.tiles.BaseTile.prototype.setContent = function setContent(content) {
    this._content = content
}, views.tiles.BaseTile.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass([enums.UIState.ACTIVE, enums.UIButtonState.HOVER].join(" "))
}, views.tiles.BaseTile.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIButtonState.HOVER)
}, views.tiles.BaseTile.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), this.addClass(enums.UIState.ACTIVE)
}, views.tiles.BaseTile.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.tiles.BaseTile.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.tiles.BaseTile.prototype._touchCancelled = function _touchCancelled(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.tiles.BaseTile.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), this.hasClass(enums.UIState.ACTIVE) ? this.removeClass(enums.UIState.ACTIVE) : (this.addClass(enums.UIState.ACTIVE), this._highlightTimeout = setTimeout(function() {
        this.removeClass(enums.UIState.ACTIVE)
    }.bind(this), 100)), this._triggerActions(enums.Event.TAP)
}, components.ActiveSquadTile = function ActiveSquadTileView() {
    views.tiles.BaseTile.call(this), this._generate()
}, utils.JS.inherits(components.ActiveSquadTile, views.tiles.BaseTile), components.ActiveSquadTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("squad-tile"), t.classList.add("tile");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("pitchImage"), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("tileContent");
        var l = document.createElement("div");
        l.classList.add("info-container"), this.__squadName = document.createElement("div"), this.$_squadName = $(this.__squadName), this.__squadName.classList.add("squad-name"), l.appendChild(this.__squadName), this.__formation = document.createElement("div"), this.$_formation = $(this.__formation), this.__formation.classList.add("formation"), l.appendChild(this.__formation), o.appendChild(l), this._squadStats = new components.SquadStats, o.appendChild(this._squadStats.getRootElement()), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ActiveSquadTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__squadName = null, this.$_squadName = null, this.__formation = null, this.$_formation = null, this._squadStats.destroy(), this._squadStats = null
}, components.ActiveSquadTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ActiveSquadTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ActiveSquadTile.prototype.init = function init() {
    this.superclass(), this.setTitle(gLocalization.lText("navbar.label.activesquad"))
}, components.ActiveSquadTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, components.ActiveSquadTile.prototype.setData = function setData(t) {
    this.__squadName.textContent = t.getName(), this._squadStats.set(t.getChemistry(), t.getRating()), this.__formation.textContent = t.getFormation().getDisplayName();
    var i = t.isDream();
    this.toggleClass("dreamSquad", i), this.toggleClass("mySquad", !i)
}, NamespaceManager.Register("components"), components.FETMessageTile = function FETMessageTileView() {
    views.tiles.BaseTile.call(this), this._data = [], this._loadedImages = 0, this._generate()
}, utils.JS.inherits(components.FETMessageTile, views.tiles.BaseTile), components.FETMessageTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "FetTile"), t.classList.add("tile"), this.__header = document.createElement("header"), this.$_header = $(this.__header), this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), this.__header.appendChild(this.__tileTitle), t.appendChild(this.__header), this._slickCarousel = new views.SlickContainer, this._slickCarousel.getRootElement().classList.add("carousel"), t.appendChild(this._slickCarousel.getRootElement());
        var i = document.createElement("div");
        i.classList.add("FETContent"), this.__content = document.createElement("p"), this.$_content = $(this.__content), i.appendChild(this.__content), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("alt"), s.classList.add("loadingSpinner"), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.FETMessageTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__header = null, this.$_header = null, this.__tileTitle = null, this.$_tileTitle = null, this._slickCarousel.destroy(), this._slickCarousel = null, this.__content = null, this.$_content = null
}, components.FETMessageTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.FETMessageTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.FETMessageTile.prototype.init = function init() {
    this.superclass(), this.showLoadingState()
}, components.FETMessageTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, components.FETMessageTile.prototype._createFETMessage = function _createFETMessage(title, text, t, i) {
    var s;
    return i ? (s = $(document.createElement("img"))).attr("src", t) : ((s = new components.ImageLoader).setExternalResource(t, !0).observe(this, this._imageLoad), s = s.getRoot()), s.addClass("FETImage"), s
}, components.FETMessageTile.prototype._imageLoad = function _imageLoad(t, i, s, path) {
    t.unobserve(this), i || s.setLocalResource("images/tileFETDefault.png"), ++this._loadedImages >= this._data.length && (this.removeClass("loading-images"), this._slickCarousel.slick(new transferobjects.SlickProperties(!0, !1, !0, 0, 300, !0, 4e3)))
}, components.FETMessageTile.prototype.useDefaultState = function useDefaultState() {
    this._slickCarousel.appendElem(this._createFETMessage(gLocalization.lText("tile.fet.title"), gLocalization.lText("tile.fet.message"), "images/tileFETDefault.png", !0)), this.__tileTitle.textContent = gLocalization.lText("tile.fet.title"), this.__content.textContent = gLocalization.lText("tile.fet.message"), this.setInteractionState(!1), this.hideLoadingState()
}, components.FETMessageTile.prototype.setData = function setData(data, t) {
    this._data = data, this._loadedImages = 0, this._data.length > 0 ? (this.addClass("loading-images"), this._data.forEach(function(i) {
        this._slickCarousel.appendElem(this._createFETMessage(i.title, i.text, i.imageSrc, t))
    }, this), this.setInteractionState(!utils.JS.isEmpty(this._data[0].customData)), this._slickCarousel.afterChange(function fadeOut(t) {
        this.setInteractionState(!utils.JS.isEmpty(this._data[t].customData)), this.$_header.addClass("fade-out").delay(500).queue(function(next) {
            this.$_tileTitle.text(this._data[t].title), this.$_header.removeClass("fade-out"), next()
        }.bind(this)), this.$_content.addClass("fade-out").delay(500).queue(function(next) {
            this.__content.innerHTML = this._data[t].text.split("\\n").join("<br />"), this.$_content.removeClass("fade-out"), next()
        }.bind(this))
    }.bind(this)), this.setTitle(this._data[0].title), this.__content.innerHTML = this._data[0].text.split("\\n").join("<br />"), this.hideLoadingState()) : this.useDefaultState()
}, components.FETMessageTile.prototype.getData = function getData() {
    return this._data
}, components.FETMessageTile.prototype.showLoadingState = function showLoadingState() {
    this.addClass("loading")
}, components.FETMessageTile.prototype.hideLoadingState = function hideLoadingState() {
    this.removeClass("loading")
}, components.FETMessageTile.prototype._handleLink = function _handleLink() {
    var t = this._data[this._slickCarousel.getCurrentSlide()];
    services.URL.process(t.customData) && (gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.MESSAGE, {
        type: enums.PIN.MESSAGE_EVT_TYPE.FET,
        status: PinManager.MESSAGE_EVT_STATUS,
        destination_id: t.customData,
        msg_id: t.id
    })), gTelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - FET Tile"))
}, components.FETMessageTile.prototype._touchStarted = function _touchStarted(e) {
    this._isTouchTargetValid(e.target) && this.superclass(e)
}, components.FETMessageTile.prototype._tapDetected = function _tapDetected(e) {
    this._isTouchTargetValid(e.target) && (this.superclass(e), this._handleLink())
}, components.FETMessageTile.prototype._isTouchTargetValid = function _isTouchTargetValid(t) {
    for (; t !== this.__root;) {
        if (DOMKit.hasClass(t, "slick-dots")) return !1;
        t = t.parentNode
    }
    return !0
}, NamespaceManager.Register("components"), components.FUTWelcomeTile = function FUTWelcomeTileView() {
    views.tiles.BaseTile.call(this), this._generate()
}, utils.JS.inherits(components.FUTWelcomeTile, views.tiles.BaseTile), components.FUTWelcomeTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "totw"), t.classList.add("welcome-tile"), t.classList.add("tile");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("image"), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("TotwContent"), this.__content = document.createElement("p"), this.$_content = $(this.__content), o.appendChild(this.__content), t.appendChild(o), this.__tileDisabled = document.createElement("div"), this.$_tileDisabled = $(this.__tileDisabled), this.__tileDisabled.classList.add("tileDimmed"), this.__tileDisabled.classList.add("tileDisabled"), this._tileDisabledMessage = new components.TextField, this._tileDisabledMessage.getRootElement().classList.add("tileDisabledMessage"), this.__tileDisabled.appendChild(this._tileDisabledMessage.getRootElement()), t.appendChild(this.__tileDisabled), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.FUTWelcomeTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__content = null, this.$_content = null, this.__tileDisabled = null, this.$_tileDisabled = null, this._tileDisabledMessage.destroy(), this._tileDisabledMessage = null
}, components.FUTWelcomeTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.FUTWelcomeTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.FUTWelcomeTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title, this.__content.textContent = gLocalization.lText("totwTile.description")
}, components.FUTWelcomeTile.prototype.setDimmed = function setDimmed(t) {
    t ? this.$_tileDisabled.show() : this.$_tileDisabled.hide()
}, components.FUTWelcomeTile.prototype.setTileDisabledMessage = function setTileDisabledMessage(message) {
    this._tileDisabledMessage.setText(message)
}, components.ObjectivesHubTile = function ObjectivesHubTileView() {
    views.tiles.BaseTile.call(this), this._generate()
}, utils.JS.inherits(components.ObjectivesHubTile, views.tiles.BaseTile), components.ObjectivesHubTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "ObjectivesHubTile"), t.classList.add("objectives-tile"), t.classList.add("tile");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), this.__unclaimedRewards = document.createElement("span"), this.$_unclaimedRewards = $(this.__unclaimedRewards), this.__unclaimedRewards.classList.add("unclaimed-rewards"), i.appendChild(this.__unclaimedRewards), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("image"), t.appendChild(s), this.__description = document.createElement("p"), this.$_description = $(this.__description), this.__description.classList.add("description"), t.appendChild(this.__description), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ObjectivesHubTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__unclaimedRewards = null, this.$_unclaimedRewards = null, this.__description = null, this.$_description = null
}, components.ObjectivesHubTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ObjectivesHubTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ObjectivesHubTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, components.ObjectivesHubTile.prototype.setDescription = function setDescription(t) {
    var text;
    gSettingsModel.isObjectivesEnabled() ? text = t > 1 ? gLocalization.lPrint("dynamicObjective.tile.unclaimedDescription", [t]) : 1 === t ? gLocalization.lText("dynamicObjective.tile.unclaimedDescription.singular") : gLocalization.lText("dynamicObjective.tile.description") : (this.setInteractionState(!1), text = gLocalization.lText("dynamicObjective.tile.disabled")), this.toggleClass("has-unclaimed-rewards", t > 0), this.__unclaimedRewards.textContent = t.toString(), this.__description.textContent = text
}, NamespaceManager.Register("components"), components.SBCHubTile = function SBCHubTileView() {
    views.tiles.BaseTile.call(this), this._generate()
}, utils.JS.inherits(components.SBCHubTile, views.tiles.BaseTile), components.SBCHubTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "SBCHubTile"), t.classList.add("sbc-tile"), t.classList.add("tile");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("image"), t.appendChild(s), this.__description = document.createElement("p"), this.$_description = $(this.__description), this.__description.classList.add("description"), t.appendChild(this.__description), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCHubTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__description = null, this.$_description = null
}, components.SBCHubTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCHubTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCHubTile.prototype.init = function init() {
    this.superclass(), gSettingsModel.isSBCEnabled() ? this.__description.textContent = gLocalization.lText("sbc.tile.description") : (this.setInteractionState(!1), this.__description.textContent = gLocalization.lText("sbc.notification.disabled"))
}, components.SBCHubTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, components.Tile = function TileView() {
    views.tiles.BaseTile.call(this), this._dynamicContentItems = [], this._intervalId = null, this._intervalLength = 0, this._isLoading = !1, this._generate()
}, utils.JS.inherits(components.Tile, views.tiles.BaseTile), components.Tile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("tile");
        var i = document.createElement("div");
        i.classList.add("loadingSpinner"), t.appendChild(i);
        var s = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), s.appendChild(this.__tileTitle), t.appendChild(s), this.__tileContent = document.createElement("div"), this.$_tileContent = $(this.__tileContent), this.__tileContent.classList.add("tileContent"), t.appendChild(this.__tileContent), this.__tileDisabled = document.createElement("div"), this.$_tileDisabled = $(this.__tileDisabled), this.__tileDisabled.classList.add("tileDisabled"), this._tileDisabledMessage = new components.TextField, this._tileDisabledMessage.getRootElement().classList.add("tileDisabledMessage"), this.__tileDisabled.appendChild(this._tileDisabledMessage.getRootElement()), t.appendChild(this.__tileDisabled), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.Tile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__tileContent = null, this.$_tileContent = null, this.__tileDisabled = null, this.$_tileDisabled = null, this._tileDisabledMessage.destroy(), this._tileDisabledMessage = null
}, components.Tile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.Tile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.Tile.prototype.dealloc = function dealloc() {
    this.clearDynamicContent(), this.superclass()
}, components.Tile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, components.Tile.prototype.showLoadingState = function showLoadingState() {
    this.isLoading = !0, this.setInteractionState(!1), this.stopUpdates(), this._dynamicContentItems.forEach(function(a) {
        a.elementRoot.hide()
    }), this.addClass("loading")
}, components.Tile.prototype.hideLoadingState = function hideLoadingState() {
    this.isLoading = !1, this.removeClass("loading"), this._dynamicContentItems.forEach(function(a) {
        a.elementRoot.show()
    }), this.setInteractionState(!0), this.startUpdates()
}, components.Tile.prototype.setUpdateInterval = function setUpdateInterval(interval) {
    this.stopUpdates(), this._intervalLength = interval, this.startUpdates()
}, components.Tile.prototype.stopUpdates = function stopUpdates() {
    utils.JS.isValid(this._intervalId) && (clearInterval(this._intervalId), this._intervalId = null)
}, components.Tile.prototype.startUpdates = function startUpdates() {
    this._intervalLength > 0 && (this._intervalId = setInterval(this.updateAllDynamicContent.bind(this), this._intervalLength))
}, components.Tile.prototype.updateAllDynamicContent = function updateAllDynamicContent() {
    this._dynamicContentItems.forEach(this.updateDynamicObject, this)
}, components.Tile.prototype.addDynamicContent = function addDynamicContent(t, i, s, o, parent) {
    var l = {
        elementRoot: t,
        customObject: i,
        cssClassName: s,
        updateCallback: o,
        parent: utils.JS.isValid(parent) ? parent : this.$_tileContent
    };
    this._dynamicContentItems.push(l), this.updateDynamicObject(l), t.appendTo(l.parent), t.addClass(s)
};
components.Tile.prototype.updateDynamicObject = function updateDynamicObject(t) {
    utils.JS.isFunction(t.updateCallback) && t.updateCallback(t.customObject)
}, components.Tile.prototype.destroyDynamicObject = function destroyDynamicObject(object) {
    utils.JS.isValid(object.customObject) && utils.JS.isFunction(object.customObject.destroy) && object.customObject.destroy()
}, components.Tile.prototype.clearDynamicContent = function clearDynamicContent() {
    this._dynamicContentItems.forEach(this.destroyDynamicObject, this), this._dynamicContentItems = []
}, components.Tile.prototype.setInteractionState = function setInteractionState(t) {
    this.superclass(t), this.isInteractionEnabled() ? this.$_tileDisabled.hide() : this.$_tileDisabled.show()
}, components.Tile.prototype.setTileDisabledMessage = function setTileDisabledMessage(message) {
    this._tileDisabledMessage.setText(message)
}, components.Tile.prototype.setDimmed = function setDimmed(t) {
    DOMKit.toggleClass(this.__tileDisabled, "tileDimmed", t)
}, NamespaceManager.Register("components"), components.UnassignedTile = function UnassignedTileView() {
    views.tiles.BaseTile.call(this), this._generate()
}, utils.JS.inherits(components.UnassignedTile, views.tiles.BaseTile), components.UnassignedTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "UnassignedTile"), t.classList.add("tile");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("img"), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("data-container"), this.__number = document.createElement("span"), this.$_number = $(this.__number), this.__number.classList.add("itemsNumber"), o.appendChild(this.__number), this.__label = document.createElement("span"), this.$_label = $(this.__label), this.__label.classList.add("itemsLabel"), o.appendChild(this.__label), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.UnassignedTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__number = null, this.$_number = null, this.__label = null, this.$_label = null
}, components.UnassignedTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.UnassignedTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.UnassignedTile.prototype.init = function init() {
    this.superclass(), this.setTitle(gLocalization.lText("navbar.label.newitems"))
}, components.UnassignedTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, components.UnassignedTile.prototype.setNumberOfItems = function setNumberOfItems(t) {
    this.__number.textContent = t.toString(), this.__label.innerHTML = gLocalization.lText(1 === t ? "unassigned.tile.itemRemaining" : "unassigned.tile.itemsRemaining")
}, NamespaceManager.Register("views.tiles"), views.tiles.FUTChampionsTile = function ChampionsTileView() {
    views.tiles.BaseTile.call(this), this._generate()
}, utils.JS.inherits(views.tiles.FUTChampionsTile, views.tiles.BaseTile), views.tiles.FUTChampionsTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "FUTChampionsTile"), t.classList.add("tile");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("img"), t.appendChild(s), this.__label = document.createElement("div"), this.$_label = $(this.__label), this.__label.classList.add("label"), t.appendChild(this.__label), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.tiles.FUTChampionsTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__label = null, this.$_label = null
}, views.tiles.FUTChampionsTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.tiles.FUTChampionsTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.tiles.FUTChampionsTile.prototype.init = function init() {
    this.superclass(), this.setTitle(gLocalization.lText("futchampions.tile.header")), this.__label.innerHTML = gLocalization.lText("futchampions.tile.content")
}, views.tiles.FUTChampionsTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, NamespaceManager.Register("views.home"), views.home.Hub = function HomeHubView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.home.Hub, FUIView), views.home.Hub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "LandingScreen"), t.classList.add("TileSection"), t.classList.add("layout-hub"), this._unassignedTile = new components.UnassignedTile, this._unassignedTile.getRootElement().classList.add("col-1-1"), t.appendChild(this._unassignedTile.getRootElement()), this._futChampionsTile = new views.tiles.FUTChampionsTile, this._futChampionsTile.getRootElement().classList.add("col-1-1"), t.appendChild(this._futChampionsTile.getRootElement()), this._objectivesTile = new components.ObjectivesHubTile, this._objectivesTile.getRootElement().classList.add("col-mobile-1-2"), this._objectivesTile.getRootElement().classList.add("col-1-2"), t.appendChild(this._objectivesTile.getRootElement()), this._welcomeTile = new components.FUTWelcomeTile, this._welcomeTile.getRootElement().classList.add("col-mobile-1-2"), this._welcomeTile.getRootElement().classList.add("col-1-2"), t.appendChild(this._welcomeTile.getRootElement()), this._sbcTile = new components.SBCHubTile, this._sbcTile.getRootElement().classList.add("col-mobile-1-2"), this._sbcTile.getRootElement().classList.add("col-1-2"), t.appendChild(this._sbcTile.getRootElement()), this._fetTile = new components.FETMessageTile, this._fetTile.getRootElement().classList.add("col-2-3"), t.appendChild(this._fetTile.getRootElement()), this._transferListTile = new components.Tile, this._transferListTile.getRootElement().classList.add("col-mobile-1-2"), this._transferListTile.getRootElement().classList.add("col-1-3"), this._transferListTile.getRootElement().classList.add("alt"), this._transferListTile.getRootElement().classList.add("transferListTile"), t.appendChild(this._transferListTile.getRootElement()), this._itemDBTile = new components.Tile, this._itemDBTile.getRootElement().classList.add("col-mobile-1-2"), this._itemDBTile.getRootElement().classList.add("col-1-3"), this._itemDBTile.getRootElement().classList.add("itemDBTile"), t.appendChild(this._itemDBTile.getRootElement()), this._activeSquadTile = new components.ActiveSquadTile, this._activeSquadTile.getRootElement().classList.add("col-2-3"), t.appendChild(this._activeSquadTile.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.home.Hub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._unassignedTile.destroy(), this._unassignedTile = null, this._futChampionsTile.destroy(), this._futChampionsTile = null, this._objectivesTile.destroy(), this._objectivesTile = null, this._welcomeTile.destroy(), this._welcomeTile = null, this._sbcTile.destroy(), this._sbcTile = null, this._fetTile.destroy(), this._fetTile = null, this._transferListTile.destroy(), this._transferListTile = null, this._itemDBTile.destroy(), this._itemDBTile = null, this._activeSquadTile.destroy(), this._activeSquadTile = null
}, views.home.Hub.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.home.Hub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.home.Hub.prototype.init = function init() {
    this._activeSquadTile.init(), this._objectivesTile.init(), this._objectivesTile.setTitle(gLocalization.lText("navbar.label.objectivehub")), this._fetTile.init(), this._sbcTile.init(), this._sbcTile.setTitle(gLocalization.lText("navbar.label.sbcHub")), this._transferListTile.showLoadingState(), this._transferListTile.setTitle(gLocalization.lText("navbar.label.tradepile")), this._unassignedTile.init(), this._unassignedTile.hide(), this._futChampionsTile.init(), this._futChampionsTile.hide(), this._welcomeTile.init(), this._welcomeTile.setTitle(gLocalization.lText("navbar.label.welcomeTile")), this._itemDBTile.init(), this._itemDBTile.setTitle(gLocalization.lText("gamehub.link.title.database"))
}, views.home.Hub.prototype.renderActiveSquadTile = function renderActiveSquadTile(t) {
    this._activeSquadTile.setData(t)
}, views.home.Hub.prototype.renderFETTile = function renderFETTile(t) {
    t.length > 0 ? this._fetTile.setData(t) : this._fetTile.useDefaultState()
}, views.home.Hub.prototype.renderObjectivesTile = function renderObjectivesTile(t) {
    this._objectivesTile.setDescription(t)
}, views.home.Hub.prototype.renderUnassignedTile = function renderUnassignedTile(t) {
    this._unassignedTile.setNumberOfItems(t), this._unassignedTile.show()
}, views.home.Hub.prototype.getActiveSquadTile = function getActiveSquadTile() {
    return this._activeSquadTile
}, views.home.Hub.prototype.getObjectivesTile = function getObjectivesTile() {
    return this._objectivesTile
}, views.home.Hub.prototype.getChampionsTile = function getChampionsTile() {
    return this._futChampionsTile
}, views.home.Hub.prototype.getFUTWelcomeTile = function getFUTWelcomeTile() {
    return this._welcomeTile
}, views.home.Hub.prototype.getSBCTile = function getSBCTile() {
    return this._sbcTile
}, views.home.Hub.prototype.getTransferListTile = function getTransferListTile() {
    return this._transferListTile
}, views.home.Hub.prototype.getUnassignedTile = function getUnassignedTile() {
    return this._unassignedTile
}, views.home.Hub.prototype.getItemDBTile = function getItemDBTile() {
    return this._itemDBTile
}, NamespaceManager.Register("controllers.home"), controllers.home.Hub = function HomeHubController() {
    FUIViewController.call(this)
}, utils.JS.inherits(controllers.home.Hub, FUIViewController), controllers.home.Hub.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), TelemetryManager.trackPage(TelemetryManager.Sections.HOME, "Home"), getDefaultDispatcher().addObserver(enums.AppNotification.UNASSIGNED_ITEM_ADDED, this, this._nUnassignedItemAdded);
        var t = repositories.User.getCurrent().getSelectedPersona().isGen3,
            view = this.getView(),
            i = view.getChampionsTile(),
            s = view.getObjectivesTile(),
            o = view.getFUTWelcomeTile();
        view.getActiveSquadTile().addTarget(this, this._eActiveSquadTileSelected, enums.Event.TAP), view.getSBCTile().addTarget(this, this._eSBCTileSelected, enums.Event.TAP), view.getTransferListTile().addTarget(this, this._eTransferListTileSelected, enums.Event.TAP), view.getUnassignedTile().addTarget(this, this._eUnassignedTileSelected, enums.Event.TAP), view.getItemDBTile().addTarget(this, this._eItemDBTileSelected, enums.Event.TAP), t ? (i.hide(), s.hide(), o.addTarget(this, this._eTOTWTileSelected, enums.Event.TAP), gTOTWHistoryModel.hasValidTOTW() || (o.disable(), o.setDimmed(!0), o.setTileDisabledMessage(gLocalization.lText("tile.disabled.totw").toUpperCase()))) : (o.hide(), i.addTarget(this, this._eChampionsTileSelected, enums.Event.TAP), s.addTarget(this, this._eObjectivesTileSelected, enums.Event.TAP)), hasConnection() && (gPopupClickShield.displayLiveMessages(), repositories.Item.getTransferItems().observe(this, this._onTransferListRequested), repositories.Item.getUnassignedItems().observe(this, this._onUnassignedItemsRequested), repositories.Message.getFETMessages(3).observe(this, this._onFETMessagesRequested), repositories.Squad.getSquadById(repositories.Squad.getActiveSquadId()).observe(this, this._onActiveSquadRequested), t || (services.Champions.getUnclaimedEvents().observe(this, this._onChampionsRewardsRequested), services.Objectives.getObjectives().observe(this, this._onObjectivesRequested)), gStaffStatsModel.isDirty() && (new communication.StaffStatsDelegate).send())
    }
}, controllers.home.Hub.prototype.dealloc = function dealloc() {
    getDefaultDispatcher().removeObserver(enums.AppNotification.UNASSIGNED_ITEM_ADDED, this), this.superclass()
}, controllers.home.Hub.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.home.Hub
}, controllers.home.Hub.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._displayLoyaltyRewards()
}, controllers.home.Hub.prototype._displayLoyaltyRewards = function _displayLoyaltyRewards() {
    var t = repositories.User.getCurrent().getSelectedPersona(),
        i = t.getLoyaltyRewards();
    if (i.length > 0) {
        var s = new controllers.views.popups.LoyaltyRewards;
        s.initWithRewards(i), gPopupClickShield.setActivePopup(s), t.setLoyaltyRewards([])
    }
}, controllers.home.Hub.prototype._onTransferListRequested = function _onTransferListRequested(t, data) {
    t.unobserve(this);
    var i = this.getView().getTransferListTile();
    if (utils.JS.isValid(i)) {
        if (data.success) {
            var s = new viewmodels.TransferSectionList(data.items),
                all = new components.TextField;
            if (i.addDynamicContent(all.getRoot(), all, "all", function(available) {
                    var t = 1 === s.length ? gLocalization.lText("dock.label.item") : gLocalization.lText("dock.label.items");
                    available.setText('<span class="count">' + s.length + '</span><span class="description">' + t + "</span>")
                }), gSettingsModel.isTradingEnabled()) {
                var active = new components.TextField;
                i.addDynamicContent(active.getRoot(), active, "active", function(active) {
                    active.setText("<span class='label'>" + gLocalization.lText("dock.label.selling") + "</span><span class='value'>" + s.getActiveItems().length + "</span>")
                });
                var o = new components.TextField;
                i.addDynamicContent(o.getRoot(), o, "sold", function(t) {
                    t.setText("<span class='label'>" + gLocalization.lText("tradepile.dock.categories.sold") + "</span> <span class='value'>" + s.getSoldItems().length + "</span>")
                })
            }
        } else(new components.TextField).setText(gLocalization.lText("tradepile.unavailable"));
        i.hideLoadingState(), i.init()
    }
}, controllers.home.Hub.prototype._onUnassignedItemsRequested = function _onUnassignedItemsRequested(t, i) {
    t.unobserve(this);
    var s = i.items.length;
    s > 0 && this.getView().renderUnassignedTile(s)
}, controllers.home.Hub.prototype._onFETMessagesRequested = function _onFETMessagesRequested(t, i, data, errorCode) {
    t.unobserve(this);
    var s = i ? data.fetItems : [];
    this.getView().renderFETTile(s)
}, controllers.home.Hub.prototype._onActiveSquadRequested = function _onActiveSquadRequested(t, i) {
    t.unobserve(this), i && this.getView().renderActiveSquadTile(i)
}, controllers.home.Hub.prototype._onObjectivesRequested = function _onObjectivesRequested(t, i, s, o, l) {
    t.unobserve(this);
    var u = utils.JS.isValid(i.data) ? i.data.objectives : [],
        h = 0;
    u.length > 0 && (h = u.reduce(function(t, i) {
        return i.isUnclaimed() && t++, t
    }, 0)), i.data.autoClaimedRewards && gPopupClickShield.setActivePopup(new controllers.objectives.ObjectiveRewards), this.getView().renderObjectivesTile(h)
}, controllers.home.Hub.prototype._onChampionsRewardsRequested = function _onChampionsRewardsRequested(t, i) {
    t.unobserve(this), i.data.unclaimedEvents.length > 0 && this.getView().getChampionsTile().show()
}, controllers.home.Hub.prototype._eActiveSquadTileSelected = function _eActiveSquadTileSelected(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - Active Squad Tile"), NavManager.requestChildScreen(Screens.getView("SQUAD_OVERVIEW"))
}, controllers.home.Hub.prototype._eTransferListTileSelected = function _eTransferListTileSelected(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - Transfer List Tile"), NavManager.requestChildScreen(Screens.getView("TRADE_PILE"))
}, controllers.home.Hub.prototype._eUnassignedTileSelected = function _eUnassignedTileSelected(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - Unassigned Tile"), NavManager.requestChildScreen(Screens.getView("UNASSIGNED_ITEMS"))
}, controllers.home.Hub.prototype._eChampionsTileSelected = function _eChampionsTileSelected(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - Champions Tile"), services.Champions.claimRewards().observe(this, function(t, i) {
        t.unobserve(this);
        var s = i.data.awards;
        i.success && s.length > 0 && (gPopupClickShield.setActivePopup(new controllers.views.popups.ChampionsRewards(s)), i.data.allClaimed && this.getView().getChampionsTile().hide())
    })
}, controllers.home.Hub.prototype._eTOTWTileSelected = function _eTOTWTileSelected(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - Team of the Week Tile"), NavManager.requestChildScreen(Screens.getView("TOTW_PREVIEW_SQUAD"))
}, controllers.home.Hub.prototype._eObjectivesTileSelected = function _eObjectivesTileSelected(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - Dynamic Objectives Tile"), NavManager.requestChildScreen(Screens.getView("OBJECTIVES"))
}, controllers.home.Hub.prototype._eSBCTileSelected = function _eSBCTileSelected(sender, event, data) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.HOME, TelemetryManager.Categories.BUTTON_PRESS, "Home - SBC Tile"), isPhone() ? NavManager.requestChildScreen(Screens.getView("SBC_HUB")) : NavManager.requestRootScreen(Screens.getView("SBC_HUB"))
}, controllers.home.Hub.prototype._eItemDBTileSelected = function _eItemDBTileSelected(sender, event, data) {
    services.URL.process(gLocalization.lText(enums.BaseURLHALString.ITEM_DATABASE))
}, controllers.home.Hub.prototype._nUnassignedItemAdded = function _nUnassignedItemAdded(t, sender, data) {
    repositories.Item.getUnassignedItems().observe(this, this._onUnassignedItemsRequested)
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.HOME, function(t) {
    NavManager.requestRootScreen(Screens.getView("HOME"))
}), Screens.Register("HOME", "LandingScreen", Screens.APP_SECTION.HOME, "Hub - Home"), pages.LandingScreen = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.SETTINGS_BUTTON | components.Header.CURRENCY | components.Header.FIFA_POINTS, gLocalization.lText("navbar.label.home"), components.Header.LANDING_CLASS), this._generate()
}, utils.JS.inherits(pages.LandingScreen, pages.ScreenBase), pages.LandingScreen.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.LandingScreen.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.LandingScreen.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.LandingScreen.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.LandingScreenController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.home.Hub
}, utils.JS.inherits(pages.controllers.LandingScreenController, pages.controllers.ScreenControllerBase), pages.controllers.LandingScreenController.prototype.init = function init() {
    pages.controllers.LandingScreenController.superClass_.init.call(this), this._controller.init()
}, pages.controllers.LandingScreenController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.LandingScreenController.superClass_.destroy.call(this)
}, pages.controllers.LandingScreenController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.LandingScreenController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.LandingScreenController.prototype.onScreenStarted = function() {
    pages.controllers.LandingScreenController.superClass_.onScreenStarted.call(this), hasConnection() || utils.PopupManager.showNoInternetConnectionPopup()
}, Screens.Register("APP_SETTINGS", "AppSettings", Screens.APP_SECTION.SETTINGS, "Settings"), pages.AppSettings = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.BACK_BUTTON : components.Header.EMPTY, gLocalization.lText("button.settings")), gTelemetryManager.trackPage(TelemetryManager.Sections.HOME, "Settings"), this._generate()
}, utils.JS.inherits(pages.AppSettings, pages.ScreenBase), pages.AppSettings.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.AppSettings.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.AppSettings.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.AppSettings.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views"), views.AppSettings = function() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.AppSettings, FUIView), views.AppSettings.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-settings"), i.classList.add("l-settings"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content"), o.appendChild(l), s.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("boot-primary-content");
        var h = document.createElement("div");
        h.classList.add("layout-article"), h.classList.add("boot-content"), this._debugButton = new views.buttons.DefaultButton, this._debugButton.getRootElement().classList.add("btn-debug"), h.appendChild(this._debugButton.getRootElement());
        var p = document.createElement("ul");
        this._languageSelectBtn = new views.buttons.ListButton, p.appendChild(this._languageSelectBtn.getRootElement()), this._rateThisAppButton = new views.buttons.ListButton, p.appendChild(this._rateThisAppButton.getRootElement()), this._logoutButton = new views.buttons.ListButton, p.appendChild(this._logoutButton.getRootElement()), h.appendChild(p);
        var m = document.createElement("ul");
        this._aboutButton = new views.buttons.ListButton, this._aboutButton.getRootElement().classList.add("more"), m.appendChild(this._aboutButton.getRootElement()), this._licenseAgreementButton = new views.buttons.ListButton, this._licenseAgreementButton.getRootElement().classList.add("more"), m.appendChild(this._licenseAgreementButton.getRootElement()), this._privacyPolicyButton = new views.buttons.ListButton, this._privacyPolicyButton.getRootElement().classList.add("more"), m.appendChild(this._privacyPolicyButton.getRootElement()), this._usageSharingButton = new views.buttons.ListButton, this._usageSharingButton.getRootElement().classList.add("more"), m.appendChild(this._usageSharingButton.getRootElement()), h.appendChild(m), u.appendChild(h), s.appendChild(u), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.AppSettings.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this._debugButton.destroy(), this._debugButton = null, this._languageSelectBtn.destroy(), this._languageSelectBtn = null, this._rateThisAppButton.destroy(), this._rateThisAppButton = null, this._logoutButton.destroy(), this._logoutButton = null, this._aboutButton.destroy(), this._aboutButton = null, this._licenseAgreementButton.destroy(), this._licenseAgreementButton = null, this._privacyPolicyButton.destroy(), this._privacyPolicyButton = null, this._usageSharingButton.destroy(), this._usageSharingButton = null
}, views.AppSettings.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.AppSettings.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.AppSettings.prototype.init = function init() {
    this._languageSelectBtn.init(), this._aboutButton.init(), this._licenseAgreementButton.init(), this._privacyPolicyButton.init(), this._logoutButton.init(), this._languageSelectBtn.setText(gLocalization.lText("navbar.label.selectLanguage")), this._rateThisAppButton.setText(gLocalization.lText("navbar.label.ratethisapp")), this._logoutButton.setText(gLocalization.lText("more.signout")), this._aboutButton.setText(gLocalization.lText("more.about")), this._licenseAgreementButton.setText(gLocalization.lText("more.license")), this._privacyPolicyButton.setText(gLocalization.lText("more.privacy")), this._usageSharingButton.setText(gLocalization.lText("")), this._debugButton.setText(gLocalization.lText("DEBUG")), this.setUsageSharingLabel(gUserSettingsModel.getUsageSharingEnabled() ? "more.usagesharing.disable" : "more.usagesharing.enable"), isChrome() ? (this._usageSharingButton.getRoot().hide(), this._debugButton.setText("DEBUG (Quick access: Shift+F9)")) : this._usageSharingButton.init(), this._rateThisAppButton.getRoot().hide(), this._debugButton.getRoot().hide()
}, views.AppSettings.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, views.AppSettings.prototype.setUsageSharingLabel = function setUsageSharingLabel(t) {
    this._usageSharingButton.setText(gLocalization.lText(t))
}, views.AppSettings.prototype.getDebugButton = function getDebugButton() {
    return this._debugButton
}, views.AppSettings.prototype.getLanguageSelectButton = function getLanguageSelectButton() {
    return this._languageSelectBtn
}, views.AppSettings.prototype.getRateAppButton = function getRateAppButton() {
    return this._rateThisAppButton
}, views.AppSettings.prototype.getLogoutButton = function getLogoutButton() {
    return this._logoutButton
}, views.AppSettings.prototype.getAboutButton = function getAboutButton() {
    return this._aboutButton
}, views.AppSettings.prototype.getLicenseAgreementButton = function getLicenseAgreementButton() {
    return this._licenseAgreementButton
}, views.AppSettings.prototype.getPrivacyPolicyButton = function getPrivacyPolicyButton() {
    return this._privacyPolicyButton
}, views.AppSettings.prototype.getUsageSharingButton = function getUsageSharingButton() {
    return this._usageSharingButton
}, controllers.AppSettings = function AppSettingsViewController() {
    FUIViewController.call(this), this._personaController = null, this._canOpenExternalLinks = !1, this._canOpenExternalLinks = !0
}, utils.JS.inherits(controllers.AppSettings, FUIViewController), controllers.AppSettings.prototype.init = function init() {
    this.superclass();
    var view = this.getView(),
        t = repositories.User.getCurrent();
    gAuthenticationModel.getFUTState() !== enums.FUTAuthState.NO_DATA && t && (this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView())), view.getLanguageSelectButton().addTarget(this, this._eLanguageSelect, enums.Event.TAP), view.getRateAppButton().addTarget(this, this._eRateApp, enums.Event.TAP), view.getLogoutButton().addTarget(this, this._eLogout, enums.Event.TAP), view.getAboutButton().addTarget(this, this._eAbout, enums.Event.TAP), view.getLicenseAgreementButton().addTarget(this, this._eLicense, enums.Event.TAP), view.getPrivacyPolicyButton().addTarget(this, this._ePrivacy, enums.Event.TAP), view.getUsageSharingButton().addTarget(this, this._eUsage, enums.Event.TAP), view.getDebugButton().addTarget(this, this._eDebug, enums.Event.TAP)
}, controllers.AppSettings.prototype.dealloc = function dealloc() {
    this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.AppSettings.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.AppSettings
}, controllers.AppSettings.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear(), this.getView().layoutSubviews()
}, controllers.AppSettings.prototype.showHeader = function showHeader() {
    gHeader.setViewState(components.Header.BACK_BUTTON)
}, controllers.AppSettings.prototype._eLanguageSelect = function _eLanguageSelect(sender, e) {
    gLocalization.setLocale(""), repositories.Message.reset(), repositories.SBC.reset(), services.Objectives.reset(), NavManager.requestChildScreen(Screens.getView("LANGUAGE_SELECT"))
}, controllers.AppSettings.prototype._eRateApp = function _eRateApp(sender, e) {
    this._canOpenExternalLinks && (hasConnection() ? window.plugins.utilities.showStoreAppPage(function _onRateSuccess() {}.bind(this), function _onRateFail() {
        services.Notification.queue([gLocalization.lText("popup.error.rateapp.Unavailable"), enums.UINotificationType.NEGATIVE])
    }.bind(this)) : utils.PopupManager.showNoInternetConnectionPopup())
}, controllers.AppSettings.prototype._eAbout = function _eAbout(sender, e) {
    NavManager.requestChildScreen(Screens.getView("ABOUT"))
}, controllers.AppSettings.prototype._eDebug = function _eDebug(sender, e) {
    NavManager.requestChildScreen(Screens.getView("DEBUG"))
}, controllers.AppSettings.prototype._eLicense = function _eLicense(sender, e) {
    services.URL.process(gLocalization.lText(enums.BaseURLHALString.USER_AGREEMENT))
}, controllers.AppSettings.prototype._ePrivacy = function _ePrivacy(sender, e) {
    services.URL.process(gLocalization.lText(enums.BaseURLHALString.PRIVACY_POLICY))
}, controllers.AppSettings.prototype._eLogout = function _eLogout(sender, e) {
    utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.SIGN_OUT, null, function onLogoutConfirmed() {
        gAuthenticationModel.logout()
    }.bind(this))
}, controllers.AppSettings.prototype._eUsage = function _eUsage(sender, e) {
    var message = gUserSettingsModel.getUsageSharingEnabled() ? utils.PopupManager.Confirmations.DISABLE_USAGE_SHARING : utils.PopupManager.Confirmations.ENABLE_USAGE_SHARING;
    utils.PopupManager.ShowConfirmation(message, null, this.onConfirmToggleUsageSharing.bind(this), null)
}, controllers.AppSettings.prototype.onConfirmToggleUsageSharing = function onConfirmToggleUsageSharing(sender, e) {
    var t = !gUserSettingsModel.getUsageSharingEnabled();
    gUserSettingsModel.setUsageSharingEnabled(t);
    var i = t ? enums.PIN.EVENT.BOOT_START : enums.PIN.EVENT.BOOT_END,
        s = t ? {
            status: enums.PIN.BOOT_START_EVT_STATUS.SUCCESS,
            source: enums.PIN.BOOT_START_EVT_SOURCE.OPT_IN_TEL
        } : {
            end_reason: enums.PIN.BOOT_END_EVT_REASON.OPT_OUT_TEL
        };
    gPinManager.trigger(utils.PinFactory.createEvent(i, s), !0);
    var o = t ? enums.PIN.SETTINGS_EVT_STATUS.OPT_IN : enums.PIN.SETTINGS_EVT_STATUS.OPT_OUT;
    s = {
        type: PinManager.SETTINGS_EVT_TYPE,
        status: o
    }, gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.SETTINGS, s), !0), this.getView().setUsageSharingLabel(gUserSettingsModel.getUsageSharingEnabled() ? "more.usagesharing.disable" : "more.usagesharing.enable")
}, pages.controllers.AppSettingsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.AppSettings
}, utils.JS.inherits(pages.controllers.AppSettingsController, pages.controllers.ScreenControllerBase), pages.controllers.AppSettingsController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.AppSettingsController.prototype.destroy = function destroy() {
    this.getView().clearListenersByScope(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.AppSettingsController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.AppSettingsController.superClass_.onScreenInitialized.call(this, data, t), data && data.showHeader && this._controller.showHeader(), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, components.GenerationsSquadTile = function() {
    components.ActiveSquadTile.call(this)
}, utils.JS.inherits(components.GenerationsSquadTile, components.ActiveSquadTile), components.GenerationsSquadTile.prototype.init = function() {
    components.GenerationsSquadTile.superClass_.init.call(this), this.setTitle(gLocalization.lText("navbar.label.generations")), this.addClass("generations")
}, components.GenerationsSquadTile.prototype.setData = function(t) {
    this.$_squadName.text(t.getName()), this._squadStats.set(t.getChemistry(), t.getRating()), this.$_formation.html(t.getFormation().getDisplayName()), this.addClass("mySquad")
}, Screens.Register("SQUADS_HUB", "SquadsHub", Screens.APP_SECTION.FUT, "Hub - Squads"), pages.SquadsHub = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.CURRENCY | components.Header.FIFA_POINTS, gLocalization.lText("infopanel.label.squads"), components.Header.FUT_CLASS), gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "Squads Hub"), this._generate()
}, utils.JS.inherits(pages.SquadsHub, pages.ScreenBase), pages.SquadsHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("TileSection"), t.classList.add("layout-hub"), t.classList.add("SquadsHub"), this._activeSquadTile = new components.ActiveSquadTile, this._activeSquadTile.getRootElement().classList.add("col-mobile-1-1"), t.appendChild(this._activeSquadTile.getRootElement()), this._squadSelectorTile = new components.Tile, this._squadSelectorTile.getRootElement().classList.add("col-1-2"), this._squadSelectorTile.getRootElement().classList.add("col-mobile-1-2"), this._squadSelectorTile.getRootElement().classList.add("squadSelectorTile"), t.appendChild(this._squadSelectorTile.getRootElement()), this._totwTile = new components.FUTWelcomeTile, this._totwTile.getRootElement().classList.add("col-1-2"), this._totwTile.getRootElement().classList.add("col-mobile-1-2"), this._totwTile.getRootElement().classList.add("totwTile"), t.appendChild(this._totwTile.getRootElement()), this._generationsTile = new components.GenerationsSquadTile, this._generationsTile.getRootElement().classList.add("col-2-3"), this._generationsTile.getRootElement().classList.add("col-mobile-1-1"), t.appendChild(this._generationsTile.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SquadsHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._activeSquadTile.destroy(), this._activeSquadTile = null, this._squadSelectorTile.destroy(), this._squadSelectorTile = null, this._totwTile.destroy(), this._totwTile = null, this._generationsTile.destroy(), this._generationsTile = null
}, pages.SquadsHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SquadsHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.SquadsHub.EVENT = {
    ACTIVE_SQUAD: "pages.SquadsHub.EVENT.ACTIVE_SQUAD",
    SQUAD_SELECTOR: "pages.SquadsHub.EVENT.SQUAD_SELECTOR",
    TOTW: "pages.SquadsHub.EVENT.TOTW",
    GENERATIONS: "pages.SquadsHub.EVENT.GENERATIONS"
}, pages.SquadsHub.prototype.init = function init() {
    pages.SquadsHub.superClass_.init.call(this), this._generationsTile.hide(), this._activeSquadTile.init(), this._generationsTile.init(), this._squadSelectorTile.init(), this._totwTile.init(), this._squadSelectorTile.setTitle(gLocalization.lText("navbar.label.squadlist")), this._totwTile.setTitle(gLocalization.lText("navbar.label.TOTW"))
}, pages.SquadsHub.prototype.start = function start() {
    pages.SquadsHub.superClass_.start.call(this), this._activeSquadTile.addTarget(this, this._eActiveSquadTileSelected, enums.Event.TAP), this._squadSelectorTile.addTarget(this, this._eSquadListTileSelected, enums.Event.TAP), this._totwTile.addTarget(this, this._eTOTWTileSelected, enums.Event.TAP), this._generationsTile.addTarget(this, this._eGenerationsTileSelected, enums.Event.TAP)
}, pages.SquadsHub.prototype.stop = function stop() {
    pages.SquadsHub.superClass_.stop.call(this), this._activeSquadTile.removeTarget(this, this._eActiveSquadTileSelected, enums.Event.TAP), this._squadSelectorTile.removeTarget(this, this._eSquadListTileSelected, enums.Event.TAP), this._totwTile.removeTarget(this, this._eTOTWTileSelected, enums.Event.TAP), this._generationsTile.removeTarget(this, this._eGenerationsTileSelected, enums.Event.TAP)
}, pages.SquadsHub.prototype.setActiveSquad = function setActiveSquad(t) {
    t && this._activeSquadTile.setData(t), this._activeSquadTile.setInteractionState(utils.JS.isValid(t))
}, pages.SquadsHub.prototype.setGenerationsSquad = function setGenerationsSquad(t) {
    var i = utils.JS.isValid(t);
    i && (this._generationsTile.setData(t), this._activeSquadTile.addClass("col-2-3"), this._squadSelectorTile.removeClass("col-1-2"), this._squadSelectorTile.addClass("col-1-3"), this._totwTile.removeClass("col-1-2"), this._totwTile.addClass("col-1-3"), this._generationsTile.show()), this._generationsTile.setInteractionState(i)
}, pages.SquadsHub.prototype.setTOTWEnabled = function setTOTWEnabled(t) {
    this._totwTile.setInteractionState(t), this._totwTile.setDimmed(!t), t || this._totwTile.setTileDisabledMessage(gLocalization.lText("tile.disabled.totw").toUpperCase())
}, pages.SquadsHub.prototype._eActiveSquadTileSelected = function _eActiveSquadTileSelected(sender, event, data) {
    this.dispatch(pages.SquadsHub.EVENT.ACTIVE_SQUAD)
}, pages.SquadsHub.prototype._eSquadListTileSelected = function _eSquadListTileSelected(sender, event, data) {
    this.dispatch(pages.SquadsHub.EVENT.SQUAD_SELECTOR)
}, pages.SquadsHub.prototype._eTOTWTileSelected = function _eTOTWTileSelected(sender, event, data) {
    this.dispatch(pages.SquadsHub.EVENT.TOTW)
}, pages.SquadsHub.prototype._eGenerationsTileSelected = function _eGenerationsTileSelected(sender, event, data) {
    this.dispatch(pages.SquadsHub.EVENT.GENERATIONS)
}, pages.controllers.SquadsHubController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._generationsSquad = null
}, utils.JS.inherits(pages.controllers.SquadsHubController, pages.controllers.ScreenControllerBase), pages.controllers.SquadsHubController.prototype.init = function init() {
    pages.controllers.SquadsHubController.superClass_.init.call(this);
    var view = this.getView();
    view.addListener(pages.SquadsHub.EVENT.ACTIVE_SQUAD, this, function() {
        NavManager.requestChildScreen(Screens.getView("SQUAD_OVERVIEW"))
    }), view.addListener(pages.SquadsHub.EVENT.SQUAD_SELECTOR, this, function() {
        NavManager.requestChildScreen(Screens.getView("SQUAD_LIST"))
    }), view.addListener(pages.SquadsHub.EVENT.TOTW, this, function() {
        NavManager.requestChildScreen(Screens.getView("TOTW_PREVIEW_SQUAD"), {
            copySquadEnabled: !0
        })
    }), gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_GENERATIONS) || view.addListener(pages.SquadsHub.EVENT.GENERATIONS, this, function() {
        NavManager.requestChildScreen(Screens.getView("GENERATIONS_SQUAD"), {
            squad: this._generationsSquad
        })
    })
}, pages.controllers.SquadsHubController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.SquadsHubController.superClass_.onScreenInitialized.call(data, t), this._loadActiveSquadData(), this._loadGenerationsData(), this.getView().setTOTWEnabled(gTOTWHistoryModel.hasValidTOTW())
}, pages.controllers.SquadsHubController.prototype.onScreenStopped = function onScreenStopped() {
    pages.controllers.SquadsHubController.superClass_.onScreenStopped.call(this), this.getView().clearListenersByScope(this)
}, pages.controllers.SquadsHubController.prototype._loadActiveSquadData = function _loadActiveSquadData() {
    repositories.Squad.getSquadById(repositories.Squad.getActiveSquadId()).observe(this, function _onGetActiveSquadComplete(t, i) {
        t.unobserve(this), this.getView().setActiveSquad(i)
    })
}, pages.controllers.SquadsHubController.prototype._loadGenerationsData = function _loadGenerationsData() {
    function _onGetGenerationsSquadComplete(t, i) {
        t.unobserve(this), this._generationsSquad = i, this.getView().setGenerationsSquad(i)
    }
    gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_GENERATIONS) || repositories.TeamConfig.getPreviousYearsData().observe(this, function _onGenerationsDataLoaded(t, i) {
        t.unobserve(this), repositories.Squad.getGenerationsSquad(!0).observe(this, _onGetGenerationsSquadComplete)
    })
}, Screens.Register("TRANSFERS_HUB", "TransfersHub", Screens.APP_SECTION.FUT, "Hub - Transfers"), pages.TransfersHub = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.CURRENCY | components.Header.FIFA_POINTS, gLocalization.lText("nav.label.trading"), components.Header.FUT_CLASS), gTelemetryManager.trackPage(TelemetryManager.Sections.AUCTIONS, "Transfers Hub"), this._generate()
}, utils.JS.inherits(pages.TransfersHub, pages.ScreenBase), pages.TransfersHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("layout-hub"), t.classList.add("TileSection"), t.classList.add("TransfersHub"), this._transferMarketTile = new components.Tile, this._transferMarketTile.getRootElement().classList.add("transferMarketTile"), t.appendChild(this._transferMarketTile.getRootElement()), this._transferListTile = new components.Tile, this._transferListTile.getRootElement().classList.add("col-mobile-1-2"), this._transferListTile.getRootElement().classList.add("col-1-2"), this._transferListTile.getRootElement().classList.add("transferListTile"), t.appendChild(this._transferListTile.getRootElement()), this._transferTargetsTile = new components.Tile, this._transferTargetsTile.getRootElement().classList.add("col-mobile-1-2"), this._transferTargetsTile.getRootElement().classList.add("col-1-2"), this._transferTargetsTile.getRootElement().classList.add("transferTargetsTile"), t.appendChild(this._transferTargetsTile.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.TransfersHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._transferMarketTile.destroy(), this._transferMarketTile = null, this._transferListTile.destroy(), this._transferListTile = null, this._transferTargetsTile.destroy(), this._transferTargetsTile = null
}, pages.TransfersHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.TransfersHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.TransfersHub.EVENT_TRANSFER_MARKET = "pages.TransfersHub.EVENT_TRANSFER_MARKET", pages.TransfersHub.EVENT_TRANSFER_LIST = "pages.TransfersHub.EVENT_TRANSFER_LIST", pages.TransfersHub.EVENT_TRANSFER_TARGETS = "pages.TransfersHub.EVENT_TRANSFER_TARGETS", pages.TransfersHub.CLASS_MAINTENANCE = "maintenance", pages.TransfersHub.prototype.init = function init() {
    pages.TransfersHub.superClass_.init.call(this), this._transferMarketTile.init(), this._transferMarketTile.setTitle(gLocalization.lText("navbar.label.search")), this._transferTargetsTile.init(), this.getController().setupTransferTargetsTile(), this.getController().setupTransferListTile()
}, pages.TransfersHub.prototype.start = function start() {
    pages.TransfersHub.superClass_.start.call(this), this._transferMarketTile.addTarget(this, this._onTransferMarketTileClicked, enums.Event.TAP), this._transferListTile.addTarget(this, this._onTransferListTileClicked, enums.Event.TAP), this._transferTargetsTile.addTarget(this, this._onTransferTargetsTileClicked, enums.Event.TAP)
}, pages.TransfersHub.prototype.stop = function stop() {
    pages.TransfersHub.superClass_.stop.call(this), this._transferMarketTile.removeTarget(this, this._onTransferMarketTileClicked, enums.Event.TAP), this._transferListTile.removeTarget(this, this._onTransferListTileClicked, enums.Event.TAP), this._transferTargetsTile.removeTarget(this, this._onTransferTargetsTileClicked, enums.Event.TAP)
}, pages.TransfersHub.prototype._disableTiles = function _disableTiles() {
    this._transferMarketTile.disable(), this._transferMarketTile.setDimmed(!0), this._transferTargetsTile.disable(), this._transferTargetsTile.setDimmed(!0)
}, pages.TransfersHub.prototype.onTradingDisabled = function onTradingDisabled() {
    this._disableTiles(), this._transferMarketTile.setTileDisabledMessage(gLocalization.lText("tile.disabled.transfersunavailable").toUpperCase())
}, pages.TransfersHub.prototype.onNoTradeAccess = function onNoTradeAccess(t, i) {
    if (this._disableTiles(), this._hasMarketAccess = !1, t === models.UserModel.TRADE_ACCESS.MAINTENANCE) this._transferMarketTile.getRoot().addClass(pages.TransfersHub.CLASS_MAINTENANCE), this._transferTargetsTile.getRoot().addClass(pages.TransfersHub.CLASS_MAINTENANCE), this._transferMarketTile.setTileDisabledMessage(gLocalization.lText("tile.disabled.transfersMaintenance")), this._transferMarketTile.setInteractionState(!1), this._transferTargetsTile.setInteractionState(!1);
    else if (t === models.UserModel.TRADE_ACCESS.GREYLIST) this._transferMarketTile.setInteractionState(!1), this._transferMarketTile.setTileDisabledMessage(gLocalization.lText("tile.disabled.transfersGreylisted"));
    else if (t === models.UserModel.TRADE_ACCESS.BLACKLIST) this._transferMarketTile.setInteractionState(!1), this._transferMarketTile.setTileDisabledMessage(gLocalization.lText("tile.disabled.transfersBlacklisted"));
    else {
        var console = "";
        switch (i) {
            case enums.SKU.XBX:
                console = "platform.console.xbox360";
                break;
            case enums.SKU.XBO:
                console = "platform.console.xboxOne";
                break;
            case enums.SKU.PS3:
                console = "platform.console.ps3";
                break;
            case enums.SKU.PS4:
                console = "platform.console.ps4";
                break;
            case enums.SKU.PC:
                console = "platform.pc"
        }
        this._transferMarketTile.setTileDisabledMessage(gLocalization.lPrint("tile.disabled.transfersUnlockAccess", [gLocalization.lText(console)]))
    }
}, pages.TransfersHub.prototype.getTransferMarketTile = function getTransferMarketTile() {
    return this._transferMarketTile
}, pages.TransfersHub.prototype.getTransferListTile = function getTransferListTile() {
    return this._transferListTile
}, pages.TransfersHub.prototype.getTransferTargetsTile = function getTransferTargetsTile() {
    return this._transferTargetsTile
}, pages.TransfersHub.prototype._onTransferMarketTileClicked = function _onTransferMarketTileClicked() {
    this.isInteractionEnabled() && this.dispatch(pages.TransfersHub.EVENT_TRANSFER_MARKET)
}, pages.TransfersHub.prototype._onTransferListTileClicked = function _onTransferListTileClicked() {
    this.isInteractionEnabled() && this.dispatch(pages.TransfersHub.EVENT_TRANSFER_LIST)
}, pages.TransfersHub.prototype._onTransferTargetsTileClicked = function _onTransferTargetsTileClicked() {
    this.isInteractionEnabled() && this.dispatch(pages.TransfersHub.EVENT_TRANSFER_TARGETS)
}, pages.controllers.TransfersHubController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._transferListLoaded = !1, this._transferTargetsLoaded = !1
}, utils.JS.inherits(pages.controllers.TransfersHubController, pages.controllers.ScreenControllerBase), pages.controllers.TransfersHubController.prototype.init = function init() {
    pages.controllers.TransfersHubController.superClass_.init.call(this);
    var view = this.getView();
    view.addListener(pages.TransfersHub.EVENT_TRANSFER_MARKET, this, this.onTransferMarketTileClicked), view.addListener(pages.TransfersHub.EVENT_TRANSFER_LIST, this, this.onTransferListTileClicked), view.addListener(pages.TransfersHub.EVENT_TRANSFER_TARGETS, this, this.onTransferTargetsTileClicked)
}, pages.controllers.TransfersHubController.prototype._transferTileLoaded = function _transferTileLoaded() {
    if (!gUserModel.hasTradeAccess() && this._transferListLoaded && this._transferTargetsLoaded) {
        var t = gUserModel.getTradeAccess(),
            status = "No Access";
        this.getView().onNoTradeAccess(t, repositories.User.getCurrent().getSelectedPersona().sku), t === models.UserModel.TRADE_ACCESS.BLACKLIST ? status = "Blacklisted" : t === models.UserModel.TRADE_ACCESS.GREYLIST ? status = "Greylisted" : t === models.UserModel.TRADE_ACCESS.MAINTENANCE && (status = "Maintenance"), gTelemetryManager.trackEvent(TelemetryManager.Sections.AUCTIONS, TelemetryManager.Categories.MARKET_STATUS, status)
    }
}, pages.controllers.TransfersHubController.prototype._onTradingIsDisabled = function _onTradingIsDisabled() {
    gTelemetryManager.trackEvent(TelemetryManager.Sections.AUCTIONS, TelemetryManager.Categories.MARKET_STATUS, "Disabled"), this.getView().onTradingDisabled()
}, pages.controllers.TransfersHubController.prototype.setupTransferListTile = function setupTransferListTile() {
    this.getView().getTransferListTile().showLoadingState(), repositories.Item.getTransferItems().observe(this, this._completeTransferListTileSetup)
}, pages.controllers.TransfersHubController.prototype._completeTransferListTileSetup = function(t, data) {
    t.unobserve(this);
    var i = this.getView().getTransferListTile();
    if (utils.JS.isValid(i)) {
        if (i.setTitle(gLocalization.lText("panel.label.transferlist")), data.success) {
            var s = new viewmodels.TransferSectionList(data.items),
                all = new components.TextField;
            if (i.addDynamicContent(all.getRoot(), all, "all", function(available) {
                    var t = 1 === s.length ? gLocalization.lText("dock.label.item") : gLocalization.lText("dock.label.items");
                    available.setText('<span class="count">' + s.length + '</span><span class="description">' + t + "</span>")
                }), gSettingsModel.isTradingEnabled()) {
                var active = new components.TextField;
                i.addDynamicContent(active.getRoot(), active, "active", function(active) {
                    active.setText("<span class='label'>" + gLocalization.lText("dock.label.selling") + "</span><span class='value'>" + s.getActiveItems().length + "</span>")
                });
                var o = new components.TextField;
                i.addDynamicContent(o.getRoot(), o, "sold", function(t) {
                    t.setText("<span class='label'>" + gLocalization.lText("tradepile.dock.categories.sold") + "</span> <span class='value'>" + s.getSoldItems().length + "</span>")
                })
            }
        } else {
            var l = new components.TextField;
            l.setText(gLocalization.lText("tradepile.unavailable")), i.addDynamicContent(l.getRoot(), l, "unavailable", function() {})
        }
        i.hideLoadingState(), this._transferListLoaded = !0, this._transferTileLoaded()
    }
}, pages.controllers.TransfersHubController.prototype.setupTransferTargetsTile = function setupTransferTargetsTile() {
    gUserModel.hasTradeAccess() ? repositories.Item.getWatchedItems().observe(this, function(t, data) {
        t.unobserve(this), gSettingsModel.isTradingEnabled() ? (this.getView().getTransferTargetsTile().showLoadingState(), this._completeTransferTargetsTileSetup(data.success, data.success ? data.items : [])) : this._onTradingIsDisabled()
    }) : this._completeTransferTargetsTileSetup(!1, [])
}, pages.controllers.TransfersHubController.prototype._completeTransferTargetsTileSetup = function _completeTransferTargetsTileSetup(t, i) {
    var all, s, o, l = this.getView().getTransferTargetsTile();
    utils.JS.isValid(l) && (l.setTitle(gLocalization.lText("panel.label.transfertargets")), t && (all = new components.TextField, l.addDynamicContent(all.getRoot(), all, "all", function(active) {
        var t = 1 === i.length ? gLocalization.lText("dock.label.item") : gLocalization.lText("dock.label.items");
        active.setText('<span class="count">' + i.length + '</span><span class="description">' + t + "</span>")
    }), s = new components.TextField, l.addDynamicContent(s.getRoot(), s, "watched", function(t) {
        var s = 0;
        i.forEach(function(item) {
            var t = item.getAuctionData();
            t.isHighestBid() && t.isActiveTrade() && s++
        }), t.setText("<span class='label'>" + gLocalization.lText("dock.label.winning") + "</span> <span class='value'>" + s + "</span>")
    }), o = new components.TextField, l.addDynamicContent(o.getRoot(), o, "expired", function(t) {
        var s = 0;
        i.forEach(function(item) {
            item.getAuctionData().isOutbid() && s++
        }), t.setText("<span class='label'>" + gLocalization.lText("dock.label.outbid") + "</span> <span class='value'>" + s + "</span>")
    })), l.hideLoadingState(), this._transferTargetsLoaded = !0, this._transferTileLoaded())
}, pages.controllers.TransfersHubController.prototype.onTransferMarketTileClicked = function onTransferMarketTileClicked() {
    NavManager.requestChildScreen(Screens.getView("SEARCH"))
}, pages.controllers.TransfersHubController.prototype.onTransferListTileClicked = function onTransferListTileClicked() {
    NavManager.requestChildScreen(Screens.getView("TRADE_PILE"))
}, pages.controllers.TransfersHubController.prototype.onTransferTargetsTileClicked = function onTransferTargetsTileClicked() {
    NavManager.requestChildScreen(Screens.getView("WATCH_LIST"))
}, Screens.Register("STORE_HUB", "StoreHub", Screens.APP_SECTION.FUT, "Hub - Store"), pages.StoreHub = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.CURRENCY | components.Header.FIFA_POINTS, gLocalization.lText("navbar.label.store"), components.Header.FUT_CLASS), gTelemetryManager.trackPage(TelemetryManager.Sections.STORE, "Store Hub"), this._generate()
}, utils.JS.inherits(pages.StoreHub, pages.ScreenBase), pages.StoreHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.StoreHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.StoreHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.StoreHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("utils"), utils.NumberDrawBox = function(t) {
    this._originalNumberList = [], this._currentNumberList = [], this._lastDrawnIndex = -1, utils.JS.isValid(t) && (t = "number" == typeof t ? this.createSequentialArrayFromNumber(t) : t, this.setNumberList(t))
}, utils.NumberDrawBox.prototype.setNumberList = function(t) {
    Array.isArray(t) && (utils.Debug.Assert(t.length > 0, "utils.NumberDrawBox expecting at least one number to draw."), this._originalNumberList = t, this.reset())
}, utils.NumberDrawBox.prototype.draw = function() {
    var t = 0;
    return this._originalNumberList.length > 0 ? (0 === this._currentNumberList.length && this.reset(), t = this._currentNumberList.splice(Math.floor(Math.random() * this._currentNumberList.length), 1)[0], -1 !== this._lastDrawnIndex && (this._currentNumberList.push(this._originalNumberList[this._lastDrawnIndex]), this._lastDrawnIndex = -1), 0 === this._currentNumberList.length && (this._lastDrawnIndex = this._originalNumberList.indexOf(t)), t) : t
}, utils.NumberDrawBox.prototype.reset = function() {
    this._currentNumberList = [];
    var t = this._originalNumberList.length;
    t > 1 ? this._currentNumberList = this._originalNumberList.reduce(function(t, i, s) {
        return this._lastDrawnIndex !== s && t.push(i), t
    }.bind(this), []) : 1 === t && (this._currentNumberList = this._originalNumberList.slice())
}, utils.NumberDrawBox.prototype.createSequentialArrayFromNumber = function(t) {
    var i, s = [];
    for (i = 0; i < t; ++i) s.push(i);
    return s
}, NamespaceManager.Register("utils"), utils.PackUtils = {}, utils.PackUtils._fgAssetRandomizers = {}, utils.PackUtils._fgAssetRandomizers[enums.Purchase.PackTier.BRONZE] = new utils.NumberDrawBox(4), utils.PackUtils._fgAssetRandomizers[enums.Purchase.PackTier.SILVER] = new utils.NumberDrawBox(4), utils.PackUtils._fgAssetRandomizers[enums.Purchase.PackTier.GOLD] = new utils.NumberDrawBox(4), utils.PackUtils._fgAssetRandomizers[enums.Purchase.PackTier.SPECIAL] = new utils.NumberDrawBox(1), utils.PackUtils._fgAssetRandomizers[enums.Purchase.PackTier.STORY] = new utils.NumberDrawBox(1), utils.PackUtils._fgAssetRandomizers[enums.Purchase.PackTier.LOAN] = new utils.NumberDrawBox(1), Object.freeze(utils.PackUtils._fgAssetRandomizers), utils.PackUtils.getForegroundId = function(t) {
    return t === enums.Purchase.PackTier.LOAN ? 0 : utils.PackUtils.hasForeground(t) ? utils.PackUtils._fgAssetRandomizers[t].draw() : -1
}, utils.PackUtils.hasForeground = function(t) {
    return !!utils.JS.isValid(utils.PackUtils._fgAssetRandomizers[t])
}, utils.PackUtils.hasLogo = function(t) {
    switch (t) {
        case enums.Purchase.PackTier.LEGENDS:
        case enums.Purchase.PackTier.SBC:
        case enums.Purchase.PackTier.CHAMPION:
            return !1;
        default:
            return !0
    }
}, utils.PackUtils.onLogoLoad = function onLogoLoad(t, i, s) {
    t.unobserve(this), i || s.replaceAndShowResource("images/transparent.png")
}, NamespaceManager.Register("views.buttons"), views.buttons.CurrencyButton = function FUICurrencyButton() {
    FUIButton.call(this), this._currencyType = null, this._generate()
}, utils.JS.inherits(views.buttons.CurrencyButton, FUIButton), views.buttons.CurrencyButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("currency"), this.__currencyAmount = document.createElement("span"), this.$_currencyAmount = $(this.__currencyAmount), this.__currencyAmount.classList.add("text"), t.appendChild(this.__currencyAmount), this.__currencyLabel = document.createElement("span"), this.$_currencyLabel = $(this.__currencyLabel), this.__currencyLabel.classList.add("subtext"), t.appendChild(this.__currencyLabel), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.CurrencyButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__currencyAmount = null, this.$_currencyAmount = null, this.__currencyLabel = null, this.$_currencyLabel = null
}, views.buttons.CurrencyButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.CurrencyButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.buttons.CurrencyButton.prototype.setText = function setText(text) {
    this.__currencyAmount.textContent = text
}, views.buttons.CurrencyButton.prototype.setAmount = function setAmount(text) {
    this.setText(text)
}, views.buttons.CurrencyButton.prototype.setCurrencyLabel = function setCurrencyLabel(text) {
    this.__currencyLabel.textContent = text
}, views.buttons.CurrencyButton.prototype.setCurrencyType = function setCurrencyType(type) {
    if (type !== this._currencyType) {
        this._currencyType = type;
        var t = "";
        type && (t = type === enums.Currency.POINTS ? gLocalization.lText("currency.points") : gLocalization.lText("currency.coins")), this.setCurrencyLabel(t), this.toggleClass("cCoins", type === enums.Currency.COINS), this.toggleClass("cPoints", type === enums.Currency.POINTS)
    }
}, NamespaceManager.Register("views.packs"), views.packs.PackGraphic = function PackGraphicView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.packs.PackGraphic, FUIView), views.packs.PackGraphic.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("basePack"), this._packBackgroundImage = new components.ImageLoader, this._packBackgroundImage.getRootElement().classList.add("packBackgroundImage"), t.appendChild(this._packBackgroundImage.getRootElement()), this._packForegroundImage = new components.ImageLoader, this._packForegroundImage.getRootElement().classList.add("packForegroundImage"), t.appendChild(this._packForegroundImage.getRootElement()), this._packLogoImage = new components.ImageLoader, this._packLogoImage.getRootElement().classList.add("packLogoImage"), t.appendChild(this._packLogoImage.getRootElement()), this.__promoText = document.createElement("div"), this.$_promoText = $(this.__promoText), this.__promoText.classList.add("promo"), t.appendChild(this.__promoText), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.packs.PackGraphic.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._packBackgroundImage.destroy(), this._packBackgroundImage = null, this._packForegroundImage.destroy(), this._packForegroundImage = null, this._packLogoImage.destroy(), this._packLogoImage = null, this.__promoText = null, this.$_promoText = null
}, views.packs.PackGraphic.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.packs.PackGraphic.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.packs.PackGraphic.prototype.setPackAssets = function setPackAssets(t, i) {
    if (this._packBackgroundImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_BACKGROUND, enums.Year.ASSET, t, t)), utils.PackUtils.hasForeground(t)) {
        var s = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_FOREGROUND, enums.Year.ASSET, t, i);
        this._packForegroundImage.setResource(s)
    }
    if (utils.PackUtils.hasLogo(t)) {
        var o = utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_LOGO, enums.Year.ASSET, t);
        this._packLogoImage.setResource(o, !0).observe(this._packLogoImage, utils.PackUtils.onLogoLoad)
    }
}, views.packs.PackGraphic.prototype.setPromo = function setPromo(t, i) {
    if (i) this.__promoText.classList.add("limited"), this.__promoText.textContent = gLocalization.lText("store.sale.limited"), this.__promoText.style.display = "";
    else switch (this.__promoText.classList.remove("limited"), t) {
        case enums.Purchase.DealType.DEAL:
            this.__promoText.textContent = gLocalization.lText("store.sale.deal"), this.__promoText.style.display = "";
            break;
        case enums.Purchase.DealType.PROMO:
            this.__promoText.textContent = gLocalization.lText("store.sale.promo"), this.__promoText.style.display = "";
            break;
        case enums.Purchase.DealType.BESTDEAL:
            this.__promoText.textContent = gLocalization.lText("store.sale.bestdeal"), this.__promoText.style.display = "";
            break;
        default:
            this.__promoText.textContent = "", this.__promoText.style.display = "none"
    }
}, NamespaceManager.Register("views.packs"), views.packs.StorePackDetails = function StorePackDetailsView() {
    FUITargetActionView.call(this), this._timeInterval = 0, this._packId = 0, this._generate()
}, utils.JS.inherits(views.packs.StorePackDetails, FUITargetActionView), views.packs.StorePackDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("StorePack");
        var i = document.createElement("div");
        i.classList.add("details"), this._pack = new views.packs.PackGraphic, i.appendChild(this._pack.getRootElement());
        var s = document.createElement("div");
        s.classList.add("packContent"), this.__packTitle = document.createElement("h1"), this.$_packTitle = $(this.__packTitle), this.__packTitle.classList.add("title"), s.appendChild(this.__packTitle);
        var o = document.createElement("div");
        o.classList.add("packCounts"), this.__itemQuantity = document.createElement("div"), this.$_itemQuantity = $(this.__itemQuantity), this.__itemQuantity.classList.add("packCount"), this.__itemQuantityValue = document.createElement("span"), this.$_itemQuantityValue = $(this.__itemQuantityValue), this.__itemQuantityValue.classList.add("value"), this.__itemQuantity.appendChild(this.__itemQuantityValue), this.__itemQuantityLabel = document.createElement("span"), this.$_itemQuantityLabel = $(this.__itemQuantityLabel), this.__itemQuantityLabel.classList.add("label"), this.__itemQuantity.appendChild(this.__itemQuantityLabel), o.appendChild(this.__itemQuantity), this.__tierQuantity = document.createElement("div"), this.$_tierQuantity = $(this.__tierQuantity), this.__tierQuantity.classList.add("packCount"), this.__tierQuantityValue = document.createElement("span"), this.$_tierQuantityValue = $(this.__tierQuantityValue), this.__tierQuantityValue.classList.add("value"), this.__tierQuantity.appendChild(this.__tierQuantityValue), this.__tierQuantityLabel = document.createElement("span"), this.$_tierQuantityLabel = $(this.__tierQuantityLabel), this.__tierQuantityLabel.classList.add("label"), this.__tierQuantity.appendChild(this.__tierQuantityLabel), o.appendChild(this.__tierQuantity), this.__rareQuantity = document.createElement("div"), this.$_rareQuantity = $(this.__rareQuantity), this.__rareQuantity.classList.add("rare"), this.__rareQuantity.classList.add("packCount"), this.__rareQuantityValue = document.createElement("span"), this.$_rareQuantityValue = $(this.__rareQuantityValue), this.__rareQuantityValue.classList.add("value"), this.__rareQuantity.appendChild(this.__rareQuantityValue), this.__rareQuantityLabel = document.createElement("span"), this.$_rareQuantityLabel = $(this.__rareQuantityLabel), this.__rareQuantityLabel.classList.add("label"), this.__rareQuantity.appendChild(this.__rareQuantityLabel), o.appendChild(this.__rareQuantity), s.appendChild(o), this.__packDesc = document.createElement("p"), this.$_packDesc = $(this.__packDesc), this.__packDesc.classList.add("description"), s.appendChild(this.__packDesc), this.__quantity = document.createElement("p"), this.$_quantity = $(this.__quantity), this.__quantity.classList.add("quantity"), this.__quantityLabel = document.createElement("span"), this.$_quantityLabel = $(this.__quantityLabel), this.__quantityLabel.classList.add("label"), this.__quantity.appendChild(this.__quantityLabel), this.__quantityValue = document.createElement("span"), this.$_quantityValue = $(this.__quantityValue), this.__quantityValue.classList.add("value"), this.__quantity.appendChild(this.__quantityValue), s.appendChild(this.__quantity), this.__time = document.createElement("p"), this.$_time = $(this.__time), this.__time.classList.add("expiry"), this.__timeLabel = document.createElement("span"), this.$_timeLabel = $(this.__timeLabel), this.__timeLabel.classList.add("label"), this.__time.appendChild(this.__timeLabel), this.__timeValue = document.createElement("span"), this.$_timeValue = $(this.__timeValue), this.__timeValue.classList.add("value"), this.__time.appendChild(this.__timeValue), s.appendChild(this.__time), i.appendChild(s);
        var l = document.createElement("div");
        l.classList.add("purchasing"), this._btnOpen = new views.buttons.CurrencyButton, this._btnOpen.getRootElement().classList.add("call-to-action"), l.appendChild(this._btnOpen.getRootElement()), this._btnBuyCoins = new views.buttons.CurrencyButton, this._btnBuyCoins.getRootElement().classList.add("call-to-action"), l.appendChild(this._btnBuyCoins.getRootElement()), this._btnBuyPoints = new views.buttons.CurrencyButton, this._btnBuyPoints.getRootElement().classList.add("call-to-action"), l.appendChild(this._btnBuyPoints.getRootElement()), i.appendChild(l), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.packs.StorePackDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._pack.destroy(), this._pack = null, this.__packTitle = null, this.$_packTitle = null, this.__itemQuantity = null, this.$_itemQuantity = null, this.__itemQuantityValue = null, this.$_itemQuantityValue = null, this.__itemQuantityLabel = null, this.$_itemQuantityLabel = null, this.__tierQuantity = null, this.$_tierQuantity = null, this.__tierQuantityValue = null, this.$_tierQuantityValue = null, this.__tierQuantityLabel = null, this.$_tierQuantityLabel = null, this.__rareQuantity = null, this.$_rareQuantity = null, this.__rareQuantityValue = null, this.$_rareQuantityValue = null, this.__rareQuantityLabel = null, this.$_rareQuantityLabel = null, this.__packDesc = null, this.$_packDesc = null, this.__quantity = null, this.$_quantity = null, this.__quantityLabel = null, this.$_quantityLabel = null, this.__quantityValue = null, this.$_quantityValue = null, this.__time = null, this.$_time = null, this.__timeLabel = null, this.$_timeLabel = null, this.__timeValue = null, this.$_timeValue = null, this._btnOpen.destroy(), this._btnOpen = null, this._btnBuyCoins.destroy(), this._btnBuyCoins = null, this._btnBuyPoints.destroy(), this._btnBuyPoints = null
}, views.packs.StorePackDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.packs.StorePackDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.packs.StorePackDetails.prototype.init = function init() {
    this.superclass(), this.__rareQuantityLabel.textContent = gLocalization.lText("store.group.rarelabel"), this.__timeLabel.textContent = gLocalization.lText("store.sale.endingTime"), this.__quantityLabel.textContent = gLocalization.lText("store.saletype.quantity"), this._btnOpen.init(), this._btnBuyCoins.init(), this._btnBuyPoints.init(), this._btnBuyCoins.setCurrencyType(enums.Currency.COINS), this._btnBuyPoints.setCurrencyType(enums.Currency.POINTS), this._btnOpen.setText(gLocalization.lText("store.mypack.open")), this._btnOpen.setCurrencyLabel(gLocalization.lText("store.mypack.claimPack")), this._btnOpen.addTarget(this, this._eOpenPack, enums.Event.TAP), this._btnBuyCoins.addTarget(this, this._eBuyWithCoins, enums.Event.TAP), this._btnBuyPoints.addTarget(this, this._eBuyWithPoints, enums.Event.TAP)
}, views.packs.StorePackDetails.prototype.dealloc = function dealloc() {
    clearTimeout(this._timeInterval), this.superclass()
}, views.packs.StorePackDetails.prototype.setPackId = function setPackId(id) {
    this._packId = id
}, views.packs.StorePackDetails.prototype.setPackAssets = function setPackAssets(t, i) {
    this._pack.setPackAssets(t, i)
}, views.packs.StorePackDetails.prototype.setPromo = function setPromo(t, i) {
    this._pack.setPromo(t, i)
}, views.packs.StorePackDetails.prototype.setName = function setName(name) {
    this.__packTitle.textContent = name
}, views.packs.StorePackDetails.prototype.setDescription = function setDescription(t) {
    this.__packDesc.textContent = t
}, views.packs.StorePackDetails.prototype.setItemCounts = function setItemCounts(total, t, i, s, o) {
    function _toggleCountDisplay(t, i) {
        t.style.display = i ? "" : "none"
    }
    _toggleCountDisplay(this.__itemQuantity, total > 0), _toggleCountDisplay(this.__rareQuantity, o > 0), _toggleCountDisplay(this.__tierQuantity, t > 0 || i > 0 || s > 0);
    var l = "",
        u = "",
        h = "";
    s > 0 ? (l = "store.group.goldlabel", u = s.toString(), h = "gold") : i > 0 ? (l = "store.group.silverlabel", u = i.toString(), h = "silver") : (l = "store.group.bronzelabel", u = t.toString(), h = "bronze"), this.__itemQuantityLabel.textContent = gLocalization.lText(total > 1 ? "dock.label.items" : "dock.label.item"), this.__tierQuantityLabel.textContent = gLocalization.lText(l), this.__itemQuantityValue.textContent = total.toString(), this.__tierQuantityValue.textContent = u, this.__rareQuantityValue.textContent = o.toString(), this.__tierQuantity.classList.remove("gold"), this.__tierQuantity.classList.remove("silver"), this.__tierQuantity.classList.remove("bronze"), this.__tierQuantity.classList.add(h)
}, views.packs.StorePackDetails.prototype.setTimeRemaining = function setTimeRemaining(time) {
    clearTimeout(this._timeInterval);
    var t = Math.round(time - Date.now() / 1e3);
    this.__timeValue.textContent = t > 0 ? gLocalization.lTimeRemainingPromo(t) : "", this.__time.style.display = t > 0 ? "" : "none", t > 0 ? this._timeInterval = setTimeout(this.setTimeRemaining.bind(this, time), 1e3) : (this.enableCoinPurchase(!1), this.enablePointsPurchase(!1))
}, views.packs.StorePackDetails.prototype.setPackQuantity = function setPackQuantity(count) {
    this.__quantity.style.display = count > 0 ? "" : "none", this.__quantityValue.textContent = count > 0 ? count.toString() : "0"
}, views.packs.StorePackDetails.prototype.setCoinsAmount = function setCoinsAmount(t) {
    this._btnBuyCoins.setText(gLocalization.lNum(t))
}, views.packs.StorePackDetails.prototype.setPointsAmount = function setPointsAmount(points) {
    this._btnBuyPoints.setText(gLocalization.lNum(points))
}, views.packs.StorePackDetails.prototype.toggleCoins = function toggleCoins(t) {
    this._btnBuyCoins.setDisplay(t)
}, views.packs.StorePackDetails.prototype.togglePoints = function togglePoints(t) {
    this._btnBuyPoints.setDisplay(t)
}, views.packs.StorePackDetails.prototype.enableCoinPurchase = function enableCoinPurchase(t) {
    this._btnBuyCoins.setInteractionState(t)
}, views.packs.StorePackDetails.prototype.enablePointsPurchase = function enablePointsPurchase(t) {
    this._btnBuyPoints.setInteractionState(t)
}, views.packs.StorePackDetails.prototype.setMyPack = function setMyPack(t) {
    this._btnOpen.setDisplay(t), this.toggleCoins(!t), this.togglePoints(!t)
}, views.packs.StorePackDetails.prototype._eOpenPack = function _eOpenPack(sender, event, data) {
    this._triggerActions(enums.UIPackEvent.OPEN, {
        packId: this._packId
    })
}, views.packs.StorePackDetails.prototype._eBuyWithCoins = function _eBuyWithCoins(sender, event, data) {
    this._triggerActions(enums.UIPackEvent.BUY_COINS, {
        packId: this._packId
    })
}, views.packs.StorePackDetails.prototype._eBuyWithPoints = function _eBuyWithPoints(sender, event, data) {
    this._triggerActions(enums.UIPackEvent.BUY_POINTS, {
        packId: this._packId
    })
}, NamespaceManager.Register("components"), components.TabMenuItem = function TabMenuItemView() {
    FUITargetActionView.call(this), this._id = 0, Object.defineProperty(this, "_id", {
        writable: !0,
        enumerable: !1
    }), this._generate()
}, utils.JS.inherits(components.TabMenuItem, FUITargetActionView), components.TabMenuItem.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("a");
        t.setAttribute("href", "#"), t.setAttribute("draggable", "false"), t.classList.add("TabMenuItem"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.TabMenuItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.TabMenuItem.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.TabMenuItem.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.TabMenuItem.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, components.TabMenuItem.prototype.getTitle = function getTitle() {
    return this.getRootElement().textContent
}, components.TabMenuItem.prototype.setTitle = function setTitle(title) {
    var t = utils.JS.isString(title);
    utils.Debug.Assert(t, "Expected a string"), t && (this.getRootElement().textContent = title)
}, components.TabMenuItem.prototype.getId = function getId() {
    return this._id
}, components.TabMenuItem.prototype.setId = function setId(id) {
    var t = utils.JS.isNumber(id) || utils.JS.isString(id);
    utils.Debug.Assert(t, "Expected a number or string"), t && (this._id = id)
}, components.TabMenuItem.prototype._touchStarted = function _touchStarted(e) {
    this.addClass(enums.UIButtonState.ACTIVE)
}, components.TabMenuItem.prototype._touchMoved = function _touchMoved(e) {
    this.removeClass(enums.UIButtonState.ACTIVE)
}, components.TabMenuItem.prototype._touchEnded = function _touchEnded(e) {
    this.removeClass(enums.UIButtonState.ACTIVE)
}, components.TabMenuItem.prototype._touchCancelled = function _touchCancelled(e) {
    this.removeClass(enums.UIButtonState.ACTIVE)
}, components.TabMenuItem.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIState.ACTIVE), this.removeClass(enums.UIState.HOVER)
}, components.TabMenuItem.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIState.HOVER)
}, components.TabMenuItem.prototype._tapDetected = function _tapDetected(e) {
    this._triggerActions(enums.Event.TAP, {
        id: this._id
    })
}, NamespaceManager.Register("components"), components.TabMenu = function TabMenuView() {
    FUITargetActionView.call(this), this._tabs = [], this._activeId = 0, this._generate()
}, utils.JS.inherits(components.TabMenu, FUITargetActionView), components.TabMenu.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("TabMenu"), this.__menuContainer = document.createElement("div"), this.$_menuContainer = $(this.__menuContainer), this.__menuContainer.classList.add("menuContainer"), t.appendChild(this.__menuContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.TabMenu.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__menuContainer = null, this.$_menuContainer = null
}, components.TabMenu.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.TabMenu.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.TabMenu.prototype.dealloc = function dealloc() {
    this.superclass(), this.clearTabs()
}, components.TabMenu.prototype.setInteractionState = function setInteractionState(t) {
    this._setInteractionStateFlag(t), this._tabs.forEach(function(item) {
        item.setInteractionState(t)
    })
}, components.TabMenu.prototype.clearTabs = function clearTabs() {
    this._tabs.forEach(function(item) {
        item.dealloc()
    }), this._tabs = []
}, components.TabMenu.prototype.addTab = function addTab(id, title) {
    var t = new components.TabMenuItem;
    t.init(), t.setId(id), t.setTitle(title), t.addTarget(this, this._eMenuItemTapped, enums.Event.TAP), this.addSubview(t, this.$_menuContainer), this._tabs.push(t), 1 === this._tabs.length && (this._activeId = id, this._updateTabState())
}, components.TabMenu.prototype._updateTabState = function _updateTabState() {
    var t = null;
    this._tabs.forEach(function(i) {
        var s = i.getId() === this._activeId;
        i.toggleClass(enums.UIState.SELECTED, s), s && (t = i)
    }, this), t && this._animateTabShift(t)
}, components.TabMenu.prototype.setActiveTab = function setActiveTab(id) {
    id !== this._activeId && (this._activeId = id, this._updateTabState())
}, components.TabMenu.prototype._animateTabShift = function _animateTabShift(t) {
    var root = this.getRoot(),
        i = t.getBoundingClientRect(),
        s = this.getBoundingClientRect(),
        o = this.getRootElement().scrollLeft;
    i.left < s.left ? root.animate({
        scrollLeft: o + Math.round(i.left - s.left)
    }, 250) : Math.round(i.right) > s.right && root.animate({
        scrollLeft: o + Math.round(i.right - s.right)
    }, 250)
}, components.TabMenu.prototype._eMenuItemTapped = function _eMenuItemTapped(sender, event, data) {
    data.id !== this._activeId && (this.setActiveTab(data.id), this._triggerActions(enums.Event.TAP, {
        tab: sender,
        id: data.id,
        index: this._tabs.indexOf(sender)
    }))
}, NamespaceManager.Register("views.store"), views.store.Store = function StoreView() {
    FUITargetActionView.call(this), this._storePacks = [], this._generate()
}, utils.JS.inherits(views.store.Store, FUITargetActionView), views.store.Store.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "StoreHub"), this._navigation = new components.TabMenu, t.appendChild(this._navigation.getRootElement());
        var i = document.createElement("div");
        i.classList.add("storeContent"), this.__unassignedRow = document.createElement("div"), this.$_unassignedRow = $(this.__unassignedRow), this._unassignedTile = new components.UnassignedTile, this.__unassignedRow.appendChild(this._unassignedTile.getRootElement()), i.appendChild(this.__unassignedRow), this.__packList = document.createElement("div"), this.$_packList = $(this.__packList), this.__packList.classList.add("packList"), i.appendChild(this.__packList), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.store.Store.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._navigation.destroy(), this._navigation = null, this.__unassignedRow = null, this.$_unassignedRow = null, this._unassignedTile.destroy(), this._unassignedTile = null, this.__packList = null, this.$_packList = null
}, views.store.Store.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.store.Store.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.store.Store.prototype.init = function init() {
    this.superclass(), this._unassignedTile.init(), this._unassignedTile.addTarget(this, this._eUnassignedTileSelected, enums.Event.TAP), this.__unassignedRow.style.display = "none", this.setInteractionState(!0)
}, views.store.Store.prototype.dealloc = function dealloc() {
    this.clearPacks(), this.superclass()
}, views.store.Store.prototype.setInteractionState = function setInteractionState(t) {
    this._setInteractionStateFlag(t), this._navigation.setInteractionState(t), this._storePacks.forEach(function(i) {
        i.setInteractionState(t)
    })
}, views.store.Store.prototype.clearPacks = function clearPacks() {
    this._storePacks.forEach(function(t) {
        t.dealloc()
    }), this._storePacks = []
}, views.store.Store.prototype.setCategoryTabs = function setCategoryTabs(t, i) {
    this._navigation.clearTabs(), i && this._navigation.addTab(enums.Purchase.DisplayGroup.MYPACKS, gLocalization.lText("store.group.mypacks")), t && this._navigation.addTab(enums.Purchase.DisplayGroup.SPECIAL, gLocalization.lText("store.sale.promo")), this._navigation.addTab(enums.Purchase.DisplayGroup.GOLD, gLocalization.lText("store.group.goldlabel")), this._navigation.addTab(enums.Purchase.DisplayGroup.SILVER, gLocalization.lText("store.group.silverlabel")), this._navigation.addTab(enums.Purchase.DisplayGroup.BRONZE, gLocalization.lText("store.group.bronzelabel")), this._navigation.layoutSubviews()
}, views.store.Store.prototype.setStoreCategory = function setStoreCategory(category) {
    this._navigation.setActiveTab(category)
}, views.store.Store.prototype.addNavigationTarget = function addNavigationTarget(target, t) {
    this._navigation.addTarget(target, t, enums.Event.TAP)
}, views.store.Store.prototype.setNumUnassignedItems = function setNumUnassignedItems(count) {
    count > 0 && (this._unassignedTile.setNumberOfItems(count), this.__unassignedRow.style.display = "")
}, views.store.Store.prototype.setPacks = function setPacks(t, i, s) {
    this.clearPacks(), t.forEach(function(t) {
        this._generatePack(t, i, s)
    }, this), this.layoutSubviews()
}, views.store.Store.prototype._generatePack = function _generatePack(t, i, s) {
    var o = new views.packs.StorePackDetails,
        l = utils.PackUtils.getForegroundId(t.assetId),
        u = t.prices.has(enums.Currency.COINS) ? t.prices.get(enums.Currency.COINS).funds : 0,
        h = t.prices.has(enums.Currency.POINTS) ? t.prices.get(enums.Currency.POINTS).funds : 0;
    o.init(), o.setPackId(t.id), o.setPackAssets(t.assetId, l), o.setPromo(t.dealType, t.isLimited), o.setName(t.packName), o.setDescription(t.packDesc), o.setPackQuantity(t.quantity), o.setItemCounts(t.itemQuantity, t.bronzeQuantity, t.silverQuantity, t.goldQuantity, t.rareQuantity), o.setTimeRemaining(t.end), o.setCoinsAmount(u), o.setPointsAmount(h), o.setMyPack(t.isMyPack), t.isMyPack || (o.toggleCoins(s.coins && u > 0), o.togglePoints(s.points && h > 0), o.enableCoinPurchase(u > 0 && i.getCoins() >= u), o.enablePointsPurchase(h > 0 && i.getFifaPoints() >= h)), o.addTarget(this, this._ePackEventHandler, enums.UIPackEvent.OPEN), o.addTarget(this, this._ePackEventHandler, enums.UIPackEvent.BUY_COINS), o.addTarget(this, this._ePackEventHandler, enums.UIPackEvent.BUY_POINTS), this.addSubview(o, this.$_packList), this._storePacks.push(o)
}, views.store.Store.prototype.disableStore = function disableStore() {
    this.clearPacks(), this.__unassignedRow.style.display = "none", this.__packList.style.display = "none";
    var t = $("<div class='StoreDisabledTile'><div class='Aligner-item'><span>" + gLocalization.lText("store.disabled") + "</span></div></div>");
    this.getRootElement().appendChild(t.get(0)), this.addClass("StoreDisable")
}, views.store.Store.prototype._ePackEventHandler = function _ePackEventHandler(sender, event, data) {
    this.isInteractionEnabled() && this._triggerActions(event, data)
}, views.store.Store.prototype._eUnassignedTileSelected = function _eUnassignedTileSelected(sender, event, data) {
    gTelemetryManager.trackEvent(TelemetryManager.Sections.STORE, TelemetryManager.Categories.BUTTON_PRESS, "Store - Unassigned Tile"), this.setInteractionState(!1), NavManager.requestChildScreen(Screens.getView("UNASSIGNED_ITEMS")) || this.setInteractionState(!0)
}, NamespaceManager.Register("viewmodels"), viewmodels.Store = function(t) {
    var i = [],
        s = {},
        o = !1,
        l = !1;
    t.forEach(function(t) {
        t.isMyPack ? (o = !0, i.push(t)) : (t.isSpecialPack && (l = !0), s[t.id] = t)
    });
    var u = !1;
    Object.defineProperty(this, "isLoadingPacks", {
        get: function() {
            return u
        },
        set: function(t) {
            utils.JS.isBoolean(t) && (u = t)
        }
    }), this._myPacks = new FUTIterator(i), Object.defineProperty(this, "_myPacks", {
        writable: !1
    }), this._packs = new FUTHashTable(s), Object.defineProperty(this, "_packs", {
        writable: !1
    }), this.hasMyPacks = o, Object.defineProperty(this, "hasMyPacks", {
        writable: !1
    }), this.hasSpecialPacks = l, Object.defineProperty(this, "hasSpecialPacks", {
        writable: !1
    }), this.isLoadingPacks = !1, this.isOpeningPack = !1
}, viewmodels.Store.prototype.getPackById = function(id, t) {
    return t ? this._myPacks.get(this._myPacks.indexOf(function comparePackId(t) {
        return id === t.id
    })) : this._packs.get(id)
}, viewmodels.Store.prototype.getPacks = function(t) {
    return t === enums.Purchase.DisplayGroup.MYPACKS ? this._myPacks.values() : this._packs.filter(function(i) {
        return i.displayGroup === t
    }).sort(function sortByPrice(a, b) {
        var t = a.prices.get(enums.Currency.COINS),
            i = b.prices.get(enums.Currency.COINS);
        if (t && i) {
            if (t.funds > i.funds) return 1;
            if (t.funds < i.funds) return -1
        }
        return 0
    })
}, NamespaceManager.Register("controllers.store"), controllers.store.Store = function StoreViewController() {
    FUIViewController.call(this), this._viewmodel = null, this._startingCategory = enums.Purchase.DisplayGroup.MYPACKS
}, utils.JS.inherits(controllers.store.Store, FUIViewController), controllers.store.Store.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.addNavigationTarget(this, this._eTabSelected), view.addTarget(this, this._eOpenPack, enums.UIPackEvent.OPEN), view.addTarget(this, this._eOpenPack, enums.UIPackEvent.BUY_COINS), view.addTarget(this, this._eOpenPack, enums.UIPackEvent.BUY_POINTS)
    }
}, controllers.store.Store.prototype.initWithStartingCategory = function initWithStartingCategory(category) {
    this.initialized || (this._startingCategory = category, this.init())
}, controllers.store.Store.prototype.dealloc = function dealloc() {
    this.superclass(), this._viewmodel = null
}, controllers.store.Store.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.store.Store
}, controllers.store.Store.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), gSettingsModel.isServiceAvailable(models.SettingsModel.STORE_ENABLED) && gLocalization.storeLocLoaded ? this._getStorePacks() : this.getView().disableStore()
}, controllers.store.Store.prototype._getStorePacks = function _getStorePacks() {
    var view = this.getView();
    repositories.Store.getPacks(enums.Purchase.PackType.CARDPACK, !0).observe(this, function _onPackLoadComplete(t, i) {
        if (t.unobserve(this), 0 !== i.length) {
            this._viewmodel = new viewmodels.Store(i);
            var s = !0,
                o = !0;
            gSettingsModel.isServiceAvailable(models.SettingsModel.COIN_ENABLED) || (s = !1), gSettingsModel.isFIFAPointsUnrecoveredTransation() && gSettingsModel.isServiceAvailable(models.SettingsModel.FIFA_POINTS_ENABLED) && (!repositories.User.getCurrent().getSelectedPersona().isPC || gSettingsModel.isServiceAvailable(models.SettingsModel.MTX_ENABLED)) || (o = !1), s || o ? s ? o || services.Notification.queue([gLocalization.lText("notification.store.fifapointsDisabled"), enums.UINotificationType.NEGATIVE]) : services.Notification.queue([gLocalization.lText("notification.store.coinsDisabled"), enums.UINotificationType.NEGATIVE]) : services.Notification.queue([gLocalization.lText("notification.store.allCurrenciesDisabled"), enums.UINotificationType.NEGATIVE]), this._startingCategory !== enums.Purchase.DisplayGroup.MYPACKS || this._viewmodel.hasMyPacks || (this._startingCategory = enums.Purchase.DisplayGroup.SPECIAL), this._startingCategory !== enums.Purchase.DisplayGroup.SPECIAL || this._viewmodel.hasSpecialPacks || (this._startingCategory = enums.Purchase.DisplayGroup.GOLD), this._getUnassignedItems(), view.setPacks(this._viewmodel.getPacks(this._startingCategory), gUserModel.getCurrencyVO(), {
                coins: s,
                points: o
            }), view.setCategoryTabs(this._viewmodel.hasSpecialPacks, this._viewmodel.hasMyPacks), view.setStoreCategory(this._startingCategory)
        } else this.getView().disableStore()
    })
}, controllers.store.Store.prototype._getUnassignedItems = function _getUnassignedItems() {
    repositories.Item.getUnassignedItems().observe(this, function _setupUnassignedTile(t, response) {
        t.unobserve(this), this.getView().setNumUnassignedItems(response.items.length)
    })
}, controllers.store.Store.prototype._eTabSelected = function _eTabSelected(sender, event, data) {
    if (!this._viewmodel.isLoadingPacks) {
        var view = this.getView();
        this._viewmodel.isLoadingPacks = !0, view.setInteractionState(!1);
        var t = gSettingsModel.isServiceAvailable(models.SettingsModel.COIN_ENABLED),
            i = gSettingsModel.isFIFAPointsUnrecoveredTransation() && gSettingsModel.isServiceAvailable(models.SettingsModel.FIFA_POINTS_ENABLED) && (!repositories.User.getCurrent().getSelectedPersona().isPC || gSettingsModel.isServiceAvailable(models.SettingsModel.MTX_ENABLED));
        this.getView().setPacks(this._viewmodel.getPacks(data.id), gUserModel.getCurrencyVO(), {
            coins: t,
            points: i
        }), gTelemetryManager.trackEvent(TelemetryManager.Sections.STORE, TelemetryManager.Categories.FILTER, "Store - " + data.id.toString().toUpperCase()), setTimeout(function() {
            this._viewmodel && (this._viewmodel.isLoadingPacks = !1, view.setInteractionState(!0))
        }.bind(this), 0)
    }
}, controllers.store.Store.prototype._eOpenPack = function _eOpenPack(sender, event, data) {
    function gotoUnassigned() {
        utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.UNASSIGNED_ENTITLEMENT, null, function() {
            NavManager.requestChildScreen(Screens.getView("UNASSIGNED_ITEMS"))
        }.bind(this), function() {
            view.setInteractionState(!0)
        })
    }

    function onPackOpenComplete(s, item, errorCode) {
        if (s.unobserve(this), this._viewmodel.isOpeningPack = !1, errorCode && view.setInteractionState(!0), errorCode === enums.NetworkError.ITEM_EXISTS) repositories.Item.setDirty(enums.FUTItemPile.PURCHASED), gotoUnassigned.call(this);
        else if (errorCode === enums.NetworkError.SERVICE_IS_DISABLED) switch (i) {
            case enums.Currency.COINS:
                gSettingsModel.disableService(models.SettingsModel.COIN_ENABLED);
                break;
            case enums.Currency.POINTS:
                gAuthenticationModel.getUser().getSelectedPersona().isPC ? gSettingsModel.disableService(models.SettingsModel.MTX_ENABLED) : gSettingsModel.disableService(models.SettingsModel.FIFA_POINTS_ENABLED);
                break;
            default:
                gSettingsModel.disableService(models.SettingsModel.STORE_ENABLED)
        } else if (!errorCode) {
            repositories.Item.setDirty(enums.FUTItemPile.PURCHASED), gUserModel.setCurrencyDirtyFlag(!0), t.isMyPack && repositories.User.getCurrent().decrementNumUnopenedPacks();
            NavManager.requestChildScreen(Screens.getView("PACK_ANIMATION"), {
                itemData: item,
                packTier: t.assetId,
                callback: function() {
                    NavManager.requestSiblingScreen(Screens.getView("UNASSIGNED_ITEMS"))
                }
            })
        }
    }
    if (!this._viewmodel.isOpeningPack) {
        var view = this.getView(),
            t = this._viewmodel.getPackById(data.packId, event === enums.UIPackEvent.OPEN),
            i = event === enums.UIPackEvent.BUY_POINTS ? enums.Currency.POINTS : enums.Currency.COINS;
        this._viewmodel.isOpeningPack = !0, view.setInteractionState(!1), repositories.Item.numItemsInCache(enums.FUTItemPile.PURCHASED) > 0 ? (gotoUnassigned.call(this), this._viewmodel.isOpeningPack = !1) : event === enums.UIPackEvent.OPEN ? t.open().observe(this, onPackOpenComplete) : function confirmPurchase() {
            var s = i === enums.Currency.POINTS ? utils.PopupManager.Confirmations.BUY_PACK_FIFAPOINTS : utils.PopupManager.Confirmations.BUY_PACK;
            utils.PopupManager.ShowConfirmation(s, [t.packName, gLocalization.lNum(t.prices.get(i).funds)], function() {
                t.purchase(i).observe(this, onPackOpenComplete)
            }.bind(this), function() {
                this._viewmodel.isOpeningPack = !1, view.setInteractionState(!0)
            }.bind(this))
        }.call(this)
    }
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.STORE, function(t) {
    if (gLocalization.storeLocLoaded) {
        var data = {};
        if (t.length > 0) {
            var key, category = t[0];
            for (key in enums.Purchase.DisplayGroup) enums.Purchase.DisplayGroup.hasOwnProperty(key) && enums.Purchase.DisplayGroup[key] === category && (data.category = category)
        }
        NavManager.requestRootScreen(Screens.getView("STORE_HUB"), data)
    } else NavManager.requestRootScreen(Screens.getView("HOME"))
}), pages.controllers.StoreHubController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.store.Store
}, utils.JS.inherits(pages.controllers.StoreHubController, pages.controllers.ScreenControllerBase), pages.controllers.StoreHubController.prototype.destroy = function destroy() {
    pages.controllers.StoreHubController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.StoreHubController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.StoreHubController.superClass_.onScreenInitialized.call(this, data, t), gTelemetryManager.trackPage(TelemetryManager.Sections.STORE, Screens.getView("STORE_HUB")), data && data.category ? this._controller.initWithStartingCategory(data.category) : this._controller.init(), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, views.tiles.Tile = function TileView() {
    views.tiles.BaseTile.call(this), this._generate()
}, utils.JS.inherits(views.tiles.Tile, views.tiles.BaseTile), views.tiles.Tile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("tile");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), t.appendChild(i), this.__tileContent = document.createElement("div"), this.$_tileContent = $(this.__tileContent), this.__tileContent.classList.add("tileContent"), t.appendChild(this.__tileContent), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.tiles.Tile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__tileContent = null, this.$_tileContent = null
}, views.tiles.Tile.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.tiles.Tile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.tiles.Tile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, views.tiles.Tile.prototype.appendContent = function appendContent(content) {
    (Array.isArray(content) ? content : [content]).forEach(function(content) {
        this.$_tileContent.append(content)
    }, this)
}, views.tiles.Tile.prototype.setBackgroundUrls = function setBackgroundUrls(t, i) {
    var value = "",
        s = Array.isArray(t) ? t : [t];
    i = utils.JS.isValid(i) ? i : this.$_tileContent, s.forEach(function(url, t) {
        t > 0 && (value += ","), value += "url(" + url + ")"
    }, this), i.css("background-image", value)
}, NamespaceManager.Register("views.club"), views.club.ClubHub = function ClubHubView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.club.ClubHub, FUIView), views.club.ClubHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "ClubHub"), t.classList.add("TileSection"), t.classList.add("layout-hub"), this._playersTile = new views.tiles.Tile, this._playersTile.getRootElement().classList.add("col-1-2"), this._playersTile.getRootElement().classList.add("playersTile"), t.appendChild(this._playersTile.getRootElement()), this._consumablesTile = new views.tiles.Tile, this._consumablesTile.getRootElement().classList.add("col-mobile-1-2"), this._consumablesTile.getRootElement().classList.add("col-1-2"), this._consumablesTile.getRootElement().classList.add("consumablesTile"), t.appendChild(this._consumablesTile.getRootElement()), this._staffTile = new views.tiles.Tile, this._staffTile.getRootElement().classList.add("col-mobile-1-2"), this._staffTile.getRootElement().classList.add("col-1-2"), this._staffTile.getRootElement().classList.add("staffTile"), t.appendChild(this._staffTile.getRootElement()), this._kitTile = new views.tiles.Tile, this._kitTile.getRootElement().classList.add("col-mobile-1-2"), this._kitTile.getRootElement().classList.add("col-1-2"), this._kitTile.getRootElement().classList.add("img-tile"), this._kitTile.getRootElement().classList.add("kits-tile"), t.appendChild(this._kitTile.getRootElement()), this._badgeTile = new views.tiles.Tile, this._badgeTile.getRootElement().classList.add("col-mobile-1-2"), this._badgeTile.getRootElement().classList.add("col-1-3"), this._badgeTile.getRootElement().classList.add("img-tile"), this._badgeTile.getRootElement().classList.add("badges-tile"), t.appendChild(this._badgeTile.getRootElement()), this._ballTile = new views.tiles.Tile, this._ballTile.getRootElement().classList.add("col-mobile-1-2"), this._ballTile.getRootElement().classList.add("col-1-3"), this._ballTile.getRootElement().classList.add("img-tile"), this._ballTile.getRootElement().classList.add("balls-tile"), t.appendChild(this._ballTile.getRootElement()), this._stadiumTile = new views.tiles.Tile, this._stadiumTile.getRootElement().classList.add("col-mobile-1-2"), this._stadiumTile.getRootElement().classList.add("col-1-3"), this._stadiumTile.getRootElement().classList.add("full-img-tile"), t.appendChild(this._stadiumTile.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.club.ClubHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._playersTile.destroy(), this._playersTile = null, this._consumablesTile.destroy(), this._consumablesTile = null, this._staffTile.destroy(), this._staffTile = null, this._kitTile.destroy(), this._kitTile = null, this._badgeTile.destroy(), this._badgeTile = null, this._ballTile.destroy(), this._ballTile = null, this._stadiumTile.destroy(), this._stadiumTile = null
}, views.club.ClubHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.club.ClubHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.club.ClubHub.prototype.init = function init() {
    this.superclass(), this._playersTile.init(), this._consumablesTile.init(), this._staffTile.init(), this._kitTile.init(), this._badgeTile.init(), this._ballTile.init(), this._stadiumTile.init(), this._playersTile.setTitle(gLocalization.lText("search.filters.players")), this._consumablesTile.setTitle(gLocalization.lText("search.filters.consumables")), this._staffTile.setTitle(gLocalization.lText("search.filters.staff")), this._kitTile.setTitle(gLocalization.lText("clubtype.kit")), this._badgeTile.setTitle(gLocalization.lText("clubtype.badge")), this._ballTile.setTitle(gLocalization.lText("search.filters.balls")), this._stadiumTile.setTitle(gLocalization.lText("search.filters.stadiums"))
}, views.club.ClubHub.prototype.render = function render(data) {
    this._kitTile.appendContent([data[enums.UIActiveItemImgType.HOME_KIT].getRoot(), data[enums.UIActiveItemImgType.AWAY_KIT].getRoot()]), this._badgeTile.appendContent(data[enums.UIActiveItemImgType.BADGE_NORMAL].getRoot()), this._ballTile.appendContent(data[enums.UIActiveItemImgType.BALL].getRoot()), this._stadiumTile.appendContent(data[enums.UIActiveItemImgType.STADIUM].getRoot())
}, views.club.ClubHub.prototype.showTotalConsumables = function showTotalConsumables(count) {
    var t = new components.TextField;
    t.setText(count), this._consumablesTile.appendContent(t.getRoot())
}, views.club.ClubHub.prototype.getPlayersTile = function getPlayersTile() {
    return this._playersTile
}, views.club.ClubHub.prototype.getConsumablesTile = function getConsumablesTile() {
    return this._consumablesTile
}, views.club.ClubHub.prototype.getStaffTile = function getStaffTile() {
    return this._staffTile
}, views.club.ClubHub.prototype.getKitsTile = function getKitsTile() {
    return this._kitTile
}, views.club.ClubHub.prototype.getBadgesTile = function getBadgesTile() {
    return this._badgeTile
}, views.club.ClubHub.prototype.getBallsTile = function getBallsTile() {
    return this._ballTile
}, views.club.ClubHub.prototype.getStadiaTile = function getStadiaTile() {
    return this._stadiumTile
}, NamespaceManager.Register("controllers.club"), controllers.club.ClubHub = function() {
    FUIViewController.call(this), this._viewmodel = new viewmodels.Club([])
}, utils.JS.inherits(controllers.club.ClubHub, FUIViewController), controllers.club.ClubHub.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.getPlayersTile().addTarget(this, this._ePlayersTileSelected, enums.Event.TAP), view.getConsumablesTile().addTarget(this, this._eConsumablesTileSelected, enums.Event.TAP), view.getStaffTile().addTarget(this, this._eStaffTileSelected, enums.Event.TAP), view.getKitsTile().addTarget(this, this._eKitsTileSelected, enums.Event.TAP), view.getBadgesTile().addTarget(this, this._eBadgesTileSelected, enums.Event.TAP), view.getBallsTile().addTarget(this, this._eBallsTileSelected, enums.Event.TAP), view.getStadiaTile().addTarget(this, this._eStadiaTileSelected, enums.Event.TAP);
        var t = new transferobjects.SearchCriteria;
        t.type = enums.SearchType.CONSUMABLES_DEVELOPMENT, repositories.Item.getClubItems(t).observe(this, function _onGetConsumables(t, data) {
            if (t.unobserve(this), data.success) {
                var total = data.items.reduce(function(t, item) {
                    return t + item.stackCount
                }, 0);
                view.showTotalConsumables(total)
            }
        }), this._renderView()
    }
}, controllers.club.ClubHub.prototype.dealloc = function dealloc() {
    this.superclass(), this._viewmodel = null
}, controllers.club.ClubHub.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubHub
}, controllers.club.ClubHub.prototype._renderView = function _renderView() {
    this.getView().render(this._viewmodel.getActiveItemsImgs())
}, controllers.club.ClubHub.prototype._ePlayersTileSelected = function _ePlayersTileSelected(sender, event, data) {
    var t = new transferobjects.SearchCriteria;
    t.type = enums.SearchType.PLAYER, NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        searchCriteria: t
    })
}, controllers.club.ClubHub.prototype._eConsumablesTileSelected = function _eConsumablesTileSelected(sender, event, data) {
    NavManager.requestChildScreen(Screens.getView("CONSUMABLES_HUB"))
}, controllers.club.ClubHub.prototype._eStaffTileSelected = function _eStaffTileSelected(sender, event, data) {
    var t = new transferobjects.SearchCriteria;
    t.type = enums.SearchType.STAFF, NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        searchCriteria: t
    })
}, controllers.club.ClubHub.prototype._eKitsTileSelected = function _eKitsTileSelected(sender, event, data) {
    var t = new transferobjects.SearchCriteria;
    t.type = enums.SearchType.CLUB_INFO, t.category = enums.SearchCategory.KIT, NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        searchCriteria: t
    })
}, controllers.club.ClubHub.prototype._eBadgesTileSelected = function _eBadgesTileSelected(sender, event, data) {
    var t = new transferobjects.SearchCriteria;
    t.type = enums.SearchType.CLUB_INFO, t.category = enums.SearchCategory.BADGE, NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        searchCriteria: t
    })
}, controllers.club.ClubHub.prototype._eBallsTileSelected = function _eBallsTileSelected(sender, event, data) {
    var t = new transferobjects.SearchCriteria;
    t.type = enums.SearchType.BALL, NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        searchCriteria: t
    })
}, controllers.club.ClubHub.prototype._eStadiaTileSelected = function _eStadiaTileSelected(sender, event, data) {
    var t = new transferobjects.SearchCriteria;
    t.type = enums.SearchType.STADIUM, NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        searchCriteria: t
    })
}, Screens.Register("CLUB_HUB", "ClubHub", Screens.APP_SECTION.FUT, "Hub - Club"), pages.ClubHub = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.CURRENCY | components.Header.FIFA_POINTS, gLocalization.lText("nav.label.club"), components.Header.FUT_CLASS), gTelemetryManager.trackPage(TelemetryManager.Sections.CLUB, "Club Hub"), this._generate()
}, utils.JS.inherits(pages.ClubHub, pages.ScreenBase), pages.ClubHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ClubHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ClubHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ClubHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.ClubHubController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.club.ClubHub
}, utils.JS.inherits(pages.controllers.ClubHubController, pages.controllers.ScreenControllerBase), pages.controllers.ClubHubController.prototype.destroy = function destroy() {
    this._controller.dealloc(), pages.controllers.ClubHubController.superClass_.destroy.call(this)
}, pages.controllers.ClubHubController.prototype.onScreenStarted = function onScreenStarted() {
    pages.controllers.ClubHubController.superClass_.onScreenStarted.call(this), this._controller.init(), this.getView().getRoot().append(this._controller.getView().getRoot())
}, NamespaceManager.Register("views.controls"), views.controls.DropDown = function DropDownControlView() {
    FUIControl.call(this), this._generate(), this.__picker = document.createElement("select"), Object.defineProperty(this, "enabled", {
        get: this.getEnabled,
        set: this.setEnabled,
        enumerable: !0
    }), this.enabled = !0, this._options = [], Object.defineProperty(this, "_options", {
        writable: !0,
        enumerable: !1
    }), this._shieldShowing = !1, Object.defineProperty(this, "_shieldShowing", {
        writable: !0,
        enumerable: !1
    }), this._defaultIndex = 0, Object.defineProperty(this, "_defaultIndex", {
        writable: !0,
        enumerable: !1
    }), this._index = 0, Object.defineProperty(this, "_index", {
        writable: !0,
        enumerable: !1
    }), this.label = "", Object.defineProperty(this, "label", {
        get: this.getLabel,
        enumerable: !0
    }), this.id = 0, Object.defineProperty(this, "id", {
        get: this.getId,
        enumerable: !0
    }), this.value = "", Object.defineProperty(this, "value", {
        get: this.getValue,
        enumerable: !0
    }), this.length = 0, Object.defineProperty(this, "length", {
        get: function() {
            return this._options.length
        },
        enumerable: !0
    }), this._windowListener = null, this._isOpen = !1, this._list = document.createElement("ul"), this._list.classList.add("inline-list"), this._closeTimeout = 0, this._iconTable = null, this._searchString = "", Object.defineProperty(this, "_searchString", {
        writable: !0,
        enumerable: !1
    }), this._searchTimeout = 0, Object.defineProperty(this, "_searchTimeout", {
        writable: !0,
        enumerable: !1
    })
}, utils.JS.inherits(views.controls.DropDown, FUIControl), views.controls.DropDown.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("inline-list-select"), t.classList.add("drop-down-select"), this.__animatedContainer = document.createElement("div"), this.$_animatedContainer = $(this.__animatedContainer), this.__animatedContainer.classList.add("inline-container"), this.__label = document.createElement("span"), this.$_label = $(this.__label), this.__label.classList.add("label"), this.__animatedContainer.appendChild(this.__label), t.appendChild(this.__animatedContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.controls.DropDown.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__animatedContainer = null, this.$_animatedContainer = null, this.__label = null, this.$_label = null
}, views.controls.DropDown.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.controls.DropDown.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.controls.DropDown.prototype.init = function init() {
    if (this.superclass(), this._startHandlingEvents(this.__animatedContainer), isPhone()) {
        var t = this.getDropDownElement();
        this.__animatedContainer.appendChild(t), this._addListener(enums.Event.CHANGE, t, this._handleNativeChange.bind(this))
    } else this._windowListener = this._windowClick.bind(this)
}, views.controls.DropDown.prototype.dealloc = function dealloc() {
    this._removeListenersByName(enums.Event.CHANGE), this._removeWindowListener(), getKeyboardEventController().unregisterDelegate(this, UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT), clearTimeout(this._closeTimeout), this._options = null, this._windowListener = null, this._list = null, this._iconTable = null, this.__picker = null, this.superclass()
}, views.controls.DropDown.prototype.setInteractionState = function setInteractionState(t) {
    this.toggleClass(enums.UIState.DISABLED, !t), this._setInteractionStateFlag(t) && (this._interactionState ? this._startHandlingEvents(this.__animatedContainer) : this._stopHandlingEvents())
}, views.controls.DropDown.prototype._open = function _open() {
    if (!this._isOpen && !this._isAnimating) {
        clearTimeout(this._closeTimeout), this._isOpen = !0, this.__animatedContainer.appendChild(this._list);
        var t = this._requiresFlip();
        t && this.__animatedContainer.insertBefore(this._list, this.__animatedContainer.childNodes[0]), this.__animatedContainer.style.top = t ? "-" + this._list.clientHeight.toString() + "px" : "0px", this._scrollToSelected(), this.addClass("is-open"), this.toggleClass(enums.UIDirection.FLIP_VERTICAL, t), this._addWindowListener(), getKeyboardEventController().registerDelegate(this, UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT)
    }
}, views.controls.DropDown.prototype._close = function _close() {
    this._isOpen && (this._isOpen = !1, this._removeWindowListener(), getKeyboardEventController().unregisterDelegate(this, UTKeyboardEventController.PRIORITY.ACTIVE_ELEMENT), this.__animatedContainer.style.top = "0px", utils.JS.isValid(this._list.parentNode) && this._list.parentNode.removeChild(this._list), this.removeClass("is-open"), this.removeClass(enums.UIDirection.FLIP_VERTICAL))
}, views.controls.DropDown.prototype._requiresFlip = function _requiresFlip() {
    utils.Debug.Assert(utils.JS.isValid(this._list.parentNode), "List must be appended to the DOM in order for calculations to work");
    var bounds = this.__root.getBoundingClientRect(),
        bottom = (this._list.getBoundingClientRect(), bounds.bottom + this._list.clientHeight);
    return $(window).height() < bottom
}, views.controls.DropDown.prototype._addWindowListener = function _addWindowListener() {
    this._removeWindowListener(), setTimeout(function() {
        window.addEventListener(enums.Event.CLICK, this._windowListener, !1), window.addEventListener(enums.Event.TOUCHEND, this._windowListener, !1)
    }.bind(this), 0)
}, views.controls.DropDown.prototype._removeWindowListener = function _removeWindowListener() {
    window.removeEventListener(enums.Event.CLICK, this._windowListener, !1), window.removeEventListener(enums.Event.TOUCHEND, this._windowListener, !1)
}, views.controls.DropDown.prototype._scrollToSelected = function _scrollToSelected() {
    var t = this._list.childNodes;
    this._index < t.length && (this._list.scrollTop = t[this._index].offsetTop)
}, views.controls.DropDown.prototype._windowClick = function _windowClick(e) {
    "LI" === e.target.nodeName && e.target.parentNode === this._list || this._close()
}, views.controls.DropDown.prototype.getDropDownElement = function getDropDownElement() {
    return this.__picker
}, views.controls.DropDown.prototype.getEnabled = function getEnabled() {
    return isPhone() ? !this.getDropDownElement().disabled : this.isInteractionEnabled()
}, views.controls.DropDown.prototype.setEnabled = function setEnabled(t) {
    t = !!t, isPhone() ? this._setNativeEnabled(t) : this.setInteractionState(t)
}, views.controls.DropDown.prototype.setOptions = function setOptions(options) {
    this._options = options;
    var t = "",
        src = "",
        i = utils.JS.isValid(this._iconTable);
    isPhone() ? this._generateNativeOptions() : Array.isArray(options) && (this._list.html = "", options.forEach(function _generateOptionElement(s) {
        i ? (src = this._iconTable.get(s.value), utils.JS.isEmpty(src) ? t += "<li>" + s.label + "</li>" : t += "<li class='with-icon' style='background-image: url(" + src + ");' >" + s.label + "</li>") : t += "<li>" + s.label + "</li>"
    }, this), this._list.innerHTML = t, this.__label.textContent = this.getLabel()), this.removeClass("is-open"), this.removeClass(enums.UIDirection.FLIP_VERTICAL)
}, views.controls.DropDown.prototype.setIconTable = function setIconTable(table) {
    this._iconTable = table
}, views.controls.DropDown.prototype.getOptions = function getOptions() {
    return this._options.slice()
}, views.controls.DropDown.prototype.setIndex = function setIndex(index) {
    if (isPhone()) this._index = index, this._setNativeIndex(index);
    else {
        if (this._index === index) return;
        var t = this._index;
        this._index = index;
        var i = this._list.childNodes;
        t < i.length && i[t].classList.remove("selected"), index < i.length && i[index].classList.add("selected"), this._handleChange()
    }
}, views.controls.DropDown.prototype.getIndex = function getIndex() {
    return isPhone() ? this.getDropDownElement().selectedIndex : this._index
}, views.controls.DropDown.prototype.setIndexById = function setIndexById(id) {
    for (var t = this._options.length; t-- > 0;)
        if (this._options[t].id === id) {
            this.setIndex(t);
            break
        }
}, views.controls.DropDown.prototype.setIndexByValue = function setIndexByValue(value) {
    for (var t = this._options.length; t-- > 0;)
        if (this._options[t].value === value) return this.setIndex(t), !0;
    return !1
}, views.controls.DropDown.prototype.setDefaultIndexById = function setDefaultIndexById(id, t) {
    for (var i = this._options.length; i-- > 0;)
        if (this._options[i].id === id) return this._defaultIndex = i, t && this.setIndex(i), !0;
    return !1
}, views.controls.DropDown.prototype.setDefaultIndexByValue = function setDefaultIndexByValue(value, t) {
    for (var i = this._options.length; i-- > 0;)
        if (this._options[i].value === value) {
            this._defaultIndex = i, t && this.setIndex(i);
            break
        }
}, views.controls.DropDown.prototype.getDefaultIndex = function getDefaultIndex() {
    return this._defaultIndex
}, views.controls.DropDown.prototype.getLabel = function getLabel() {
    var t = this._options[this.getIndex()];
    return t ? t.label : ""
}, views.controls.DropDown.prototype.getId = function getId() {
    var t = this._options[this.getIndex()];
    return t ? t.id : -1
}, views.controls.DropDown.prototype.getValue = function getValue() {
    var t = this._options[this.getIndex()];
    return t ? t.value : ""
}, views.controls.DropDown.prototype.blur = function blur() {
    var t = this.getDropDownElement();
    t === document.activeElement && t.blur()
}, views.controls.DropDown.prototype.focus = function focus() {
    var t = this.getDropDownElement();
    t !== document.activeElement && t.focus()
}, views.controls.DropDown.prototype._handleDropdownSearch = function _handleDropdownSearch(c) {
    this._searchTimeout > 0 && clearTimeout(this._searchTimeout), this._searchTimeout = setTimeout(function _resetSearch() {
        this._searchTimeout = 0, this._searchString = ""
    }.bind(this), 1e3);
    var t = this._searchString += c,
        i = DOMKit.HTMLCollectionToArray(this._list.childNodes),
        s = utils.JS.find(i, function(i) {
            var style = getComputedStyle(i);
            return "none" !== style.display && "visible" === style.visibility && 0 === i.textContent.trim().toLowerCase().indexOf(t.trim().toLowerCase())
        });
    s && (this._list.scrollTop = s.offsetTop)
}, views.controls.DropDown.prototype.handleKeyUpEvent = function handleKeyUpEvent(e) {
    /^[a-zA-Z0-9 ]$/.test(e.key) && this._handleDropdownSearch(e.key.toString())
}, views.controls.DropDown.prototype._handleChange = function _handleChange() {
    this.enabled && (this.$_label.text(this.getLabel()), this._triggerActions(enums.Event.CHANGE))
}, views.controls.DropDown.prototype._handleFocus = function _handleFocus(e) {
    this.enabled && !this._shieldShowing && (this._shieldShowing = !0, gClickShield.showShield(components.ClickShield.SHIELD.FULL))
}, views.controls.DropDown.prototype._handleBlur = function _handleBlur(e) {
    this._shieldShowing && (gClickShield.hideShield(components.ClickShield.SHIELD.FULL), this._shieldShowing = !1)
}, views.controls.DropDown.prototype._touchStarted = function _touchStarted(e) {
    this.enabled && requestAnimationFrame(function() {
        this.getRoot().addClass(enums.UIState.ACTIVE)
    }.bind(this))
}, views.controls.DropDown.prototype._touchMoved = function _touchMoved(e) {
    requestAnimationFrame(function() {
        this.getRoot().removeClass(enums.UIState.ACTIVE)
    }.bind(this))
}, views.controls.DropDown.prototype._touchEnded = function _touchEnded(e) {
    requestAnimationFrame(function() {
        this.getRoot().removeClass(enums.UIState.ACTIVE)
    }.bind(this))
}, views.controls.DropDown.prototype._tapDetected = function _tapDetected(e) {
    this.enabled && !isPhone() && "UL" !== e.target.nodeName && ("LI" === e.target.nodeName ? (clearTimeout(this._closeTimeout), this._closeTimeout = setTimeout(function() {
        this.setIndex(Array.prototype.indexOf.call(this._list.children, e.target)), this._close()
    }.bind(this), 0)) : this._isOpen ? (clearTimeout(this._closeTimeout), this._closeTimeout = setTimeout(function() {
        this._close()
    }.bind(this), 0)) : this._open())
}, views.controls.DropDown.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass(enums.UIButtonState.HOVER)
}, views.controls.DropDown.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIButtonState.HOVER)
}, views.controls.DropDown.prototype._setNativeIndex = function _setNativeIndex(index) {
    var t = this.getDropDownElement();
    utils.JS.isNumber(index) && t.selectedIndex !== index && (t.selectedIndex = index, t.dispatchEvent(utils.JS.createEvent("change")))
}, views.controls.DropDown.prototype._generateNativeOptions = function _generateNativeOptions() {
    var t = this.getDropDownElement();
    if (Array.isArray(this._options)) {
        for (; t.firstChild;) t.removeChild(t.firstChild);
        this._options.forEach(function _generateOptionElement(i) {
            var s = document.createElement("option");
            s.value = i.value, s.textContent = i.label, t.appendChild(s)
        }, this), this.setIndex(this._defaultIndex), this.__label.textContent = this.getLabel()
    }
}, views.controls.DropDown.prototype._handleNativeChange = function _handleNativeChange(e) {
    this._handleChange()
}, views.controls.DropDown.prototype._setNativeEnabled = function _setNativeEnabled(t) {
    t = !!t;
    var i = this.getDropDownElement(),
        isDisabled = i.disabled;
    t === isDisabled && (t || i !== document.activeElement || i.dispatchEvent(utils.JS.createEvent("blur")), i.disabled = !t, isDisabled ? this.removeClass(enums.UIState.DISABLED) : this.addClass(enums.UIState.DISABLED))
}, views.controls.SearchCriteriaPickerRow = function SearchCriteriaPickerRowView() {
    views.controls.DropDown.call(this), this._generate(), Object.defineProperty(this, "image", {
        get: this.getImage,
        set: this.setImage,
        enumerable: !0
    }), this.setId = "", this.image = "", this._defaultLabel = "", this._hasDefault = !1
}, utils.JS.inherits(views.controls.SearchCriteriaPickerRow, views.controls.DropDown), views.controls.SearchCriteriaPickerRow.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("inline-list-select"), t.classList.add("filter"), this.__animatedContainer = document.createElement("div"), this.$_animatedContainer = $(this.__animatedContainer), this.__animatedContainer.classList.add("inline-container");
        var i = document.createElement("div");
        i.classList.add("filter-image-container"), this.__filterImage = document.createElement("img"), this.$_filterImage = $(this.__filterImage), this.__filterImage.classList.add("filterImage"), i.appendChild(this.__filterImage), this.__animatedContainer.appendChild(i), this.__label = document.createElement("span"), this.$_label = $(this.__label), this.__label.classList.add("label"), this.__animatedContainer.appendChild(this.__label), this._clearBtn = new views.buttons.FlatButton, this._clearBtn.getRootElement().classList.add("inline-list-btn"), this._clearBtn.getRootElement().classList.add("icon-btn"), this._clearBtn.getRootElement().classList.add("exit-btn"), this.__animatedContainer.appendChild(this._clearBtn.getRootElement()), t.appendChild(this.__animatedContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.controls.SearchCriteriaPickerRow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__animatedContainer = null, this.$_animatedContainer = null, this.__filterImage = null, this.$_filterImage = null, this.__label = null, this.$_label = null, this._clearBtn.destroy(), this._clearBtn = null
}, views.controls.SearchCriteriaPickerRow.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.controls.SearchCriteriaPickerRow.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.controls.SearchCriteriaPickerRow.prototype.init = function init() {
    this.superclass(), this._clearBtn.init(), this._clearBtn.addTarget(this, this._onClear, enums.Event.TAP)
}, views.controls.SearchCriteriaPickerRow.prototype.setOptions = function setOptions(options) {
    this.superclass(options), this.removeClass("has-selection"), 0 === this.getIndex() && this._hasDefault && this.$_label.text(this._defaultLabel)
}, views.controls.SearchCriteriaPickerRow.prototype.getImage = function getImage() {
    return this.__filterImage.getAttribute("src")
}, views.controls.SearchCriteriaPickerRow.prototype.setImage = function setImage(src) {
    var t = utils.JS.isEmpty(src);
    this.toggleClass("has-image", !t), t || this.__filterImage.setAttribute("src", src)
}, views.controls.SearchCriteriaPickerRow.prototype.setDefaultLabel = function setDefaultLabel(label) {
    this._defaultLabel = label, 0 === this.getIndex() && this._hasDefault && this.$_label.text(this._defaultLabel)
}, views.controls.SearchCriteriaPickerRow.prototype.setIndex = function setIndex(index) {
    this.superclass(index), this.toggleClass("has-selection", 0 !== this.getIndex() || !this._hasDefault)
}, views.controls.SearchCriteriaPickerRow.prototype.setHasDefault = function setHasDefault(value) {
    this._hasDefault = value, this.toggleClass("has-default", value)
}, views.controls.SearchCriteriaPickerRow.prototype._handleChange = function _handleChange() {
    this.superclass(), 0 === this.getIndex() && this._hasDefault && this.$_label.text(this._defaultLabel)
}, views.controls.SearchCriteriaPickerRow.prototype._onClear = function _onClear(e) {
    if (this.enabled) {
        var parentNode = this.getDropDownElement().parentNode;
        isPhone() && utils.JS.isValid(parentNode) && (parentNode.removeChild(this.getDropDownElement()), setTimeout(function() {
            this.__animatedContainer.appendChild(this.getDropDownElement())
        }.bind(this), 500)), this.setIndex(this.getDefaultIndex())
    }
}, NamespaceManager.Register("utils"), utils.PlayerSearchEngine = function(t) {
    var entries = t.filter(function(t) {
        return !entities.Item.isAlex(t.id) && !entities.Item.isDanny(t.id) && t.id !== entities.Item.KENTON_CHARITY_ID && (t.id & enums.ItemMask.DATABASE) === t.id
    });
    this.list = entries.sort(function sortByRating(a, b) {
        return a.rating > b.rating ? -1 : a.rating < b.rating ? 1 : a.id > b.id ? -1 : a.id < b.id ? 1 : 0
    }), Object.defineProperty(this, "list", {
        writable: !1
    })
}, utils.PlayerSearchEngine.prototype.getEntriesForString = function(t, i) {
    function stringArray(t) {
        return utils.TextUtils.stripSpecialCharacters(t).trim().toLowerCase().split(" ")
    }

    function search(n, t) {
        var i = t.shift();
        if (!i) return !0;
        var s, match = !1;
        for (s = 0; s < n.length; ++s)
            if (0 === n[s].indexOf(i)) {
                match = !0;
                break
            }
        return !!match && search(n, t)
    }
    i = i || utils.PlayerSearchEngine.MAX_ENTRIES_DEFAULT;
    var s = [];
    if (t.length > 0)
        for (var o = 0; o < this.list.length && s.length < i;) {
            var l = this.list[o];
            search(stringArray(l.name), stringArray(t)) && s.push(l), ++o
        }
    return s
}, utils.PlayerSearchEngine.MAX_ENTRIES_DEFAULT = 10, NamespaceManager.Register("views.buttons"), views.buttons.ListButton = function FUIListButton() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(views.buttons.ListButton, FUIButton), views.buttons.ListButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("list"), this.__text = document.createElement("span"), this.$_text = $(this.__text), this.__text.classList.add("btn-text"), t.appendChild(this.__text), this.__subtext = document.createElement("span"), this.$_subtext = $(this.__subtext), this.__subtext.classList.add("btn-subtext"), t.appendChild(this.__subtext), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.ListButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__text = null, this.$_text = null, this.__subtext = null, this.$_subtext = null
}, views.buttons.ListButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.ListButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.buttons.ListButton.prototype.setText = function setText(text) {
    this.__text.textContent = text
}, views.buttons.ListButton.prototype.setSubtext = function setSubtext(text) {
    this.__subtext.textContent = text
}, views.buttons.ListButton.prototype.displayCurrencyIcon = function displayCurrencyIcon(t) {
    t ? this.__subtext.classList.add("coins") : this.__subtext.classList.remove("coins")
}, views.controls.PlayerNameSearch = function PlayerNameSearchControl() {
    FUIControl.call(this), this._timeout = 0, this._closeTimeout = 0, this._inputChangeTimeout = 0, this._tapDelay = 0, this._searchEngine = new utils.PlayerSearchEngine(repositories.Item.getStaticData()), this._currentQuery = [], this._currentName = "", this._isOpen = !1, this._selected = null, this._windowListener = this._windowClick.bind(this), this._generate()
}, utils.JS.inherits(views.controls.PlayerNameSearch, FUIControl), views.controls.PlayerNameSearch.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("inline-list-select"), t.classList.add("searchPlayerName"), this.__animatedContainer = document.createElement("div"), this.$_animatedContainer = $(this.__animatedContainer), this.__animatedContainer.classList.add("inline-container");
        var i = document.createElement("span");
        i.classList.add("secondary"), i.classList.add("fut_icon"), i.classList.add("icon_magnifier"), this.__animatedContainer.appendChild(i), this._clearButton = new views.buttons.FlatButton, this._clearButton.getRootElement().classList.add("inline-list-btn"), this._clearButton.getRootElement().classList.add("exit-btn"), this._clearButton.getRootElement().classList.add("icon-btn"), this.__animatedContainer.appendChild(this._clearButton.getRootElement()), this._playerNameInput = new views.TextInput, this._playerNameInput.getRootElement().classList.add("borderless"), this.__animatedContainer.appendChild(this._playerNameInput.getRootElement()), this.__playerResults = document.createElement("div"), this.$_playerResults = $(this.__playerResults), this.__playerResults.classList.add("inline-list");
        var s = document.createElement("div");
        s.classList.add("secondary"), s.classList.add("sectionHeader"), this.__playerNameTitle = document.createElement("span"), this.$_playerNameTitle = $(this.__playerNameTitle), this.__playerNameTitle.classList.add("playerNameTitle"), s.appendChild(this.__playerNameTitle), this.__ratingTitle = document.createElement("span"), this.$_ratingTitle = $(this.__ratingTitle), this.__ratingTitle.classList.add("ratingTitle"), s.appendChild(this.__ratingTitle), this.__playerResults.appendChild(s), this.__playerResultsList = document.createElement("ul"), this.$_playerResultsList = $(this.__playerResultsList), this.__playerResultsList.classList.add("playerResultsList"), this.__playerResults.appendChild(this.__playerResultsList), this.__playerResultsEmpty = document.createElement("div"), this.$_playerResultsEmpty = $(this.__playerResultsEmpty), this.__playerResultsEmpty.classList.add("icon_negative"), this.__playerResultsEmpty.classList.add("fut_icon"), this.__playerResultsEmpty.classList.add("secondary"), this.__playerResultsEmpty.classList.add("playerResultsEmpty"), this.__playerResults.appendChild(this.__playerResultsEmpty), this.__animatedContainer.appendChild(this.__playerResults), t.appendChild(this.__animatedContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.controls.PlayerNameSearch.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__animatedContainer = null, this.$_animatedContainer = null, this._clearButton.destroy(), this._clearButton = null, this._playerNameInput.destroy(), this._playerNameInput = null, this.__playerResults = null, this.$_playerResults = null, this.__playerNameTitle = null, this.$_playerNameTitle = null, this.__ratingTitle = null, this.$_ratingTitle = null, this.__playerResultsList = null, this.$_playerResultsList = null, this.__playerResultsEmpty = null, this.$_playerResultsEmpty = null
}, views.controls.PlayerNameSearch.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.controls.PlayerNameSearch.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.controls.PlayerNameSearch.prototype.init = function init() {
    this._playerNameInput.onInput.observe(this, this._ePlayerNameTextChanged), this._playerNameInput.init(), this._playerNameInput.setPlaceholder(gLocalization.lText("searchauctions.playersearch.inputcaption")), this._playerNameInput.setMaxLength(50), this.$_playerNameTitle.html(gLocalization.lText("searchauctions.label.playername")), this.$_ratingTitle.html(gLocalization.lText("squads.rating")), this.$_playerResultsEmpty.html(gLocalization.lText("searchauctions.playersearch.noresults")), this.$_playerResultsEmpty.hide(), this.$_playerResults.hide(), this._clearButton.init(), this._clearButton.addTarget(this, this._eClearInput, enums.Event.TAP), this.superclass()
}, views.controls.PlayerNameSearch.prototype.dealloc = function dealloc() {
    clearTimeout(this._timeout), clearTimeout(this._closeTimeout), clearTimeout(this._inputChangeTimeout), this._clearList(), this._removeWindowListener(), this._searchEngine = null, this._windowListener = null, this.superclass()
}, views.controls.PlayerNameSearch.prototype._inputChange = function _inputChange(input) {
    var t = !utils.JS.isEmpty(input);
    this.toggleClass("has-selection", t), clearTimeout(this._inputChangeTimeout), t ? this.addClass("contract-text-input") : this._inputChangeTimeout = setTimeout(function() {
        this.removeClass("contract-text-input")
    }.bind(this), this._tapDelay)
}, views.controls.PlayerNameSearch.prototype.setPlayerData = function setPlayerData(t) {
    this._selected = t, this.setInput(utils.JS.isValid(t.commonName) ? t.commonName : t.firstName + " " + t.lastName)
}, views.controls.PlayerNameSearch.prototype.getSelected = function getSelected() {
    return this._selected
}, views.controls.PlayerNameSearch.prototype.setInput = function setInput(input) {
    this._playerNameInput.value = input, this._currentName = input, this._inputChange(input)
}, views.controls.PlayerNameSearch.prototype.clearInput = function clearInput() {
    this.setInput(""), this._selected = null
}, views.controls.PlayerNameSearch.prototype._ePlayerNameTextChanged = function ePlayerNameTextChanged(t) {
    utils.JS.isEmpty(this._getPlayerNameText()) && (this.clearInput(), this._triggerActions(enums.Event.CHANGE)), clearTimeout(this._timeout), this._timeout = setTimeout(function() {
        var t = this._getPlayerNameText();
        this._inputChange(t), this._updateList(t, this._searchEngine.getEntriesForString(t, 5)), clearTimeout(this._timeout)
    }.bind(this), 500)
}, views.controls.PlayerNameSearch.prototype._clearList = function _clearList() {
    this._currentQuery.forEach(function(t) {
        t.dealloc()
    }), this._currentQuery = []
}, views.controls.PlayerNameSearch.prototype._updateList = function _updateList(t, entries) {
    this._clearList(), this.$_playerResultsList.toggle(!utils.JS.isEmpty(t) && entries.length > 0), this.$_playerResultsEmpty.toggle(0 === entries.length || utils.JS.isEmpty(t)), this._open(), utils.JS.isValid(t) && entries.forEach(function generateListRow(t) {
        var name = utils.JS.isValid(t.commonName) ? t.commonName : t.firstName + " " + t.lastName,
            i = new views.buttons.ListButton;
        i.init(), i.setText(name), i.setSubtext(t.rating.toString()), i.addTarget(this, this._ePlayerEntryClicked.bind(this, t, name), enums.Event.TAP), this._currentQuery.push(i), this.$_playerResultsList.append(i.getRoot())
    }, this)
}, views.controls.PlayerNameSearch.prototype._getPlayerNameText = function _getPlayerNameText() {
    return this._playerNameInput.value
}, views.controls.PlayerNameSearch.prototype._open = function _open() {
    this._isOpen || (this._isOpen = !0, clearTimeout(this._closeTimeout), requestAnimationFrame(function() {
        this.addClass("is-open"), this._addWindowListener(), this.$_playerResults.show()
    }.bind(this)))
}, views.controls.PlayerNameSearch.prototype._close = function _close() {
    this._isOpen && (this._isOpen = !1, clearTimeout(this._closeTimeout), this._closeTimeout = setTimeout(function() {
        this.removeClass("is-open"), this.$_playerResults.hide(), this._clearList(), this.setInput(this._currentName), this._removeWindowListener(), clearTimeout(this._timeout), clearTimeout(this._closeTimeout)
    }.bind(this), this._tapDelay))
}, views.controls.PlayerNameSearch.prototype._windowClick = function _windowClick(e) {
    for (var t = e.target; t;) {
        if (t === this.__root) return;
        t = t.parentNode
    }
    this._close()
}, views.controls.PlayerNameSearch.prototype._addWindowListener = function _addWindowListener() {
    this._removeWindowListener(), window.addEventListener(enums.Event.MOUSEUP, this._windowListener, !1), window.addEventListener(enums.Event.TOUCHEND, this._windowListener, !1)
}, views.controls.PlayerNameSearch.prototype._removeWindowListener = function _removeWindowListener() {
    window.removeEventListener(enums.Event.CLICK, this._windowListener, !1), window.removeEventListener(enums.Event.TOUCHEND, this._windowListener, !1)
}, views.controls.PlayerNameSearch.prototype._eClearInput = function _eClearInput(sender, e) {
    this.clearInput(), this._triggerActions(enums.Event.CHANGE), this._close()
}, views.controls.PlayerNameSearch.prototype._ePlayerEntryClicked = function _ePlayerEntryClicked(t, name) {
    this._selected = t, this.setInput(name), this._triggerActions(enums.Event.CHANGE), this._close()
}, NamespaceManager.Register("views.items"), views.items.ItemSearch = function ItemSearchView() {
    FUIView.call(this), this._searchFilters = new FUTHashTable({}), this._filters = [], this._filterIconTables = new FUTHashTable({}), this._pileFilterIcons = new FUTHashTable({}), this._bucketFilterIconTables = new FUTHashTable({}), this._pileFilter = null, this._searchBucket = 0, this.onFilterChange = new FUTObservable, Object.defineProperty(this, "onFilterChange", {
        writable: !1,
        enumerable: !0
    }), this.onSearchModeChange = new FUTObservable, Object.defineProperty(this, "onSearchModeChange", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.items.ItemSearch, FUIView), views.items.ItemSearch.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("clearfix"), this._playerNameSearch = new views.controls.PlayerNameSearch, t.appendChild(this._playerNameSearch.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.ItemSearch.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._playerNameSearch.destroy(), this._playerNameSearch = null
}, views.items.ItemSearch.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.ItemSearch.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.ItemSearch.prototype.init = function init() {
    this.superclass(), this._playerNameSearch.init()
}, views.items.ItemSearch.prototype.dealloc = function dealloc() {
    function clearTable(table) {
        table.clear()
    }
    this._pileFilter && (this._pileFilter.removeTarget(this, this._eSearchModeChanged, enums.Event.CHANGE), this._pileFilter.dealloc(), this._pileFilter = null), this._pileFilterIcons.clear(), this.clearFilters(), this._filterIconTables.forEach(clearTable), this._filterIconTables.clear(), this._filterIconTables = null, this._bucketFilterIconTables.forEach(function(t) {
        t.forEach(clearTable), t.clear()
    }), this._bucketFilterIconTables.clear(), this._bucketFilterIconTables = null, this.superclass()
}, views.items.ItemSearch.prototype.setInteractionState = function setInteractionState(t) {
    this._filters.forEach(function(filter) {
        filter.enabled = t
    }, this), this._playerNameSearch.setInteractionState(t), utils.JS.isValid(this._pileFilter) && (this._pileFilter.enabled = t), this.superclass(t)
}, views.items.ItemSearch.prototype.clearFilters = function clearFilters() {
    this._searchFilters.forEach(function(filter) {
        filter.dealloc()
    }), this._searchFilters.clear(), this._filters = []
}, views.items.ItemSearch.prototype.resetFilters = function resetFilters() {
    this._searchFilters.forEach(function(filter) {
        filter.setIndex(filter.getDefaultIndex())
    }), this.clearPlayerData()
}, views.items.ItemSearch.prototype.setFilterLock = function setFilterLock(filter, t) {
    this._searchFilters.has(filter) && (this._searchFilters.get(filter).enabled = !t)
}, views.items.ItemSearch.prototype._setFilterImage = function _setFilterImage(filter, t) {
    filter.image = this._generateFilterImage(filter.setId, filter.getId(), filter.getValue())
}, views.items.ItemSearch.prototype._generatePileFilterIconTable = function _generatePileFilterIconTable() {
    return this._pileFilterIcons.set(enums.ItemSearchFeature.CLUB, this._generatePileFilterImage(enums.ItemSearchFeature.CLUB)), this._pileFilterIcons.set(enums.ItemSearchFeature.CONCEPT, this._generatePileFilterImage(enums.ItemSearchFeature.CONCEPT)), this._pileFilterIcons
}, views.items.ItemSearch.prototype._generatePileFilterImage = function _generatePileFilterImage(value) {
    return value === enums.ItemSearchFeature.CLUB ? "images/SearchFilters/players_club.png" : value === enums.ItemSearchFeature.CONCEPT ? "images/SearchFilters/players_concept.png" : void 0
}, views.items.ItemSearch.prototype._generateFilterIconTable = function _generateFilterIconTable(options, t, i) {
    var table = null,
        s = !1;
    if (this._useBucketTables(t)) {
        var o = this._bucketFilterIconTables.has(i) ? this._bucketFilterIconTables.get(i) : new FUTHashTable({});
        s = o.has(t), table = s ? o.get(t) : new FUTHashTable({}), o.set(t, table), this._bucketFilterIconTables.set(i, o)
    } else s = this._filterIconTables.has(t), table = s ? this._filterIconTables.get(t) : new FUTHashTable({}), this._filterIconTables.set(t, table);
    return s || options.forEach(function(i, s) {
        table.set(i.value, this._generateFilterImage(t, i.id, i.value))
    }, this), table
}, views.items.ItemSearch.prototype._useBucketTables = function _useBucketTables(t) {
    switch (t) {
        case enums.UISearchFilters.YEAR:
        case enums.UISearchFilters.LEVEL:
        case enums.UISearchFilters.TYPE:
            return !0;
        default:
            return !1
    }
}, views.items.ItemSearch.prototype._generateFilterImage = function _generateFilterImage(t, id, value) {
    switch (t) {
        case enums.UISearchFilters.YEAR:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.YEAR, value);
        case enums.UISearchFilters.LEVEL:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.LEVEL, value);
        case enums.UISearchFilters.POSITION:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.POSITION, id >= 0 ? id : "default");
        case enums.UISearchFilters.PLAYSTYLE:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.PLAYSTYLE, id >= 0 ? id : "default");
        case enums.UISearchFilters.LEAGUE:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.LEAGUE, id >= 0 ? id : "default");
        case enums.UISearchFilters.NATION:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.NATION, id >= 0 ? id : "default");
        case enums.UISearchFilters.CLUB:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.CLUB, id >= 0 ? id : "default");
        case enums.UISearchFilters.TYPE:
            return utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.TYPE, id >= 0 ? id : "default", this._searchBucket)
    }
    return ""
}, views.items.ItemSearch.prototype.setFilterValue = function setFilterValue(filter, value) {
    if (this._searchFilters.has(filter)) {
        var t = this._searchFilters.get(filter);
        utils.JS.isNumber(value) ? t.setIndexById(value) : utils.JS.isString(value) && t.setIndexByValue(value)
    }
}, views.items.ItemSearch.prototype.setFilterDefaultValue = function setFilterDefaultValue(filter, value) {
    if (this._searchFilters.has(filter)) {
        var t = this._searchFilters.get(filter);
        utils.JS.isNumber(value) ? t.setDefaultIndexById(value) : utils.JS.isString(value) && t.setDefaultIndexByValue(value)
    }
}, views.items.ItemSearch.prototype._getFilterTitle = function _getFilterTitle(t) {
    switch (t) {
        case enums.UISearchFilters.YEAR:
            return gLocalization.lText("search.fut.2018");
        case enums.UISearchFilters.TYPE:
            return gLocalization.lText("search.details.type");
        case enums.UISearchFilters.LEVEL:
            return gLocalization.lText("search.pagination.level");
        case enums.UISearchFilters.POSITION:
            return gLocalization.lText("search.pagination.position");
        case enums.UISearchFilters.PLAYSTYLE:
            return gLocalization.lText("search.pagination.playerstyle");
        case enums.UISearchFilters.NATION:
            return gLocalization.lText("controlbar.cardview.Nationality");
        case enums.UISearchFilters.LEAGUE:
            return gLocalization.lText("controlbar.cardview.League");
        case enums.UISearchFilters.CLUB:
            return gLocalization.lText("controlbar.cardview.Club");
        case enums.UISearchFilters.POSITION_MOD:
            return gLocalization.lText("search.pagination.position")
    }
    return ""
}, views.items.ItemSearch.prototype._getFilterHasDefault = function _getFilterHasDefault(t) {
    return t === enums.UISearchFilters.TYPE ? this._searchBucket === enums.SearchBucket.STAFF : t !== enums.UISearchFilters.YEAR
}, views.items.ItemSearch.prototype._normalizeCriteria = function _normalizeCriteria(t) {
    t.type !== enums.SearchType.PLAYER && t.level === enums.SearchLevel.SPECIAL && (t.level = enums.SearchLevel.GOLD)
}, views.items.ItemSearch.prototype._generateFilter = function _generateFilter(t, options, value) {
    var filter;
    this._searchFilters.has(t) ? (filter = this._searchFilters.get(t)).removeTarget(this, this._eFilterChange, enums.Event.CHANGE) : ((filter = new views.controls.SearchCriteriaPickerRow).init(), filter.setId = t, filter.setDefaultLabel(this._getFilterTitle(t)), filter.setInteractionState(!0), this._searchFilters.set(t, filter)), filter.setHasDefault(this._getFilterHasDefault(t)), filter.setIconTable(this._generateFilterIconTable(options, t, this._searchBucket)), filter.setOptions(options), this._filters.push(filter), utils.JS.isValid(value) && this.setFilterValue(t, value), filter.addTarget(this, this._eFilterChange, enums.Event.CHANGE)
}, views.items.ItemSearch.prototype.setFilters = function setFilters(t, i) {
    var s = t.searchCriteria;
    if (this._searchBucket = t.getBucketFromType(s.type), this._normalizeCriteria(s), this._filters.forEach(function(filter) {
            filter.blur(), filter.getRoot().detach()
        }, this), this._filters = [], s.type === enums.SearchType.PLAYER && t.isGenerationsSearch) {
        var o = s.year === enums.SearchType.ANY ? utils.TextUtils.getYearString(enums.Year.ASSET) : s.year;
        this._generateFilter(enums.UISearchFilters.YEAR, factories.DataProvider.getItemYearDP(), o)
    }
    if (this._searchBucket === enums.SearchBucket.STAFF) this._generateFilter(enums.UISearchFilters.TYPE, factories.DataProvider.getStaffTypeDP(), s.category);
    else if (this._searchBucket === enums.SearchBucket.CLUB) {
        var l = s.type === enums.SearchType.CLUB_INFO ? s.category : s.type;
        this._generateFilter(enums.UISearchFilters.TYPE, factories.DataProvider.getClubTypeDP(), l)
    } else this._searchBucket === enums.SearchBucket.CONSUMABLE && this._generateFilter(enums.UISearchFilters.TYPE, factories.DataProvider.getConsumableTypeDP(), s.category);
    if (s.type === enums.SearchType.PLAYER ? this._generateFilter(enums.UISearchFilters.LEVEL, factories.DataProvider.getItemLevelDP(!0), s.level) : s.type !== enums.SearchType.BALL && this._generateFilter(enums.UISearchFilters.LEVEL, factories.DataProvider.getItemLevelDP(!1), s.level), s.type === enums.SearchType.PLAYER) {
        var position = s.zone !== enums.SearchType.ANY ? s.zone : s.position;
        if (this._generateFilter(enums.UISearchFilters.POSITION, factories.DataProvider.getPlayerPositionDP(i), position), !t.isGenerationsSearch) {
            var u = position !== enums.SearchType.ANY ? position === enums.PlayerPositions.GK : null;
            this._generateFilter(enums.UISearchFilters.PLAYSTYLE, factories.DataProvider.getPlayStyleDP(u), s.playStyle)
        }
        this._generateFilter(enums.UISearchFilters.NATION, factories.DataProvider.getNationDP(), s.nation), this._generateFilter(enums.UISearchFilters.LEAGUE, factories.DataProvider.getLeagueDP(!1), s.league), this._generateFilter(enums.UISearchFilters.CLUB, factories.DataProvider.getTeamDP(s.league), s.club), t.playerData ? this.setPlayerSearch(t.playerData) : this.resetPlayerName()
    } else s.category === enums.SearchCategory.MANAGER ? (this._generateFilter(enums.UISearchFilters.NATION, factories.DataProvider.getNationDP(), s.nation), this._generateFilter(enums.UISearchFilters.LEAGUE, factories.DataProvider.getLeagueDP(t.isMarketSearch), s.league)) : s.category === enums.SearchCategory.POSITION ? this._generateFilter(enums.UISearchFilters.POSITION_MOD, factories.DataProvider.getPositionModifierDP(), s.position) : s.category === enums.SearchCategory.PLAYSTYLE ? this._generateFilter(enums.UISearchFilters.PLAYSTYLE, factories.DataProvider.getPlayStyleDP(), s.playStyle) : s.category !== enums.SearchCategory.KIT && s.category !== enums.SearchCategory.BADGE || (this._generateFilter(enums.UISearchFilters.LEAGUE, factories.DataProvider.getLeagueDP(t.isMarketSearch), s.league), this._generateFilter(enums.UISearchFilters.CLUB, factories.DataProvider.getTeamDP(s.league), s.club));
    var h = utils.JS.isValid(t.playerData);
    this.setFilterLock(enums.UISearchFilters.NATION, h), this.setFilterLock(enums.UISearchFilters.LEAGUE, h), this.setFilterLock(enums.UISearchFilters.CLUB, h), this._searchFilters.forEach(function(filter) {
        this._setFilterImage(filter, this._searchBucket)
    }, this), this._filters.forEach(function(filter) {
        this.getRoot().append(filter.getRoot())
    }, this)
}, views.items.ItemSearch.prototype.setPlayerSearch = function setPlayerSearch(t) {
    this._playerNameSearch.setPlayerData(t), this.setFilterValue(enums.UISearchFilters.NATION, -1), this.setFilterValue(enums.UISearchFilters.LEAGUE, -1), this.setFilterValue(enums.UISearchFilters.CLUB, -1), this.setFilterLock(enums.UISearchFilters.NATION, !0), this.setFilterLock(enums.UISearchFilters.LEAGUE, !0), this.setFilterLock(enums.UISearchFilters.CLUB, !0)
}, views.items.ItemSearch.prototype.resetPlayerName = function resetPlayerName() {
    this._playerNameSearch.clearInput(), this.setFilterLock(enums.UISearchFilters.NATION, !1), this.setFilterLock(enums.UISearchFilters.LEAGUE, !1), this.setFilterLock(enums.UISearchFilters.CLUB, !1)
}, views.items.ItemSearch.prototype.togglePlayerNameRow = function togglePlayerNameRow(t) {
    this._playerNameSearch.setDisplay(t)
}, views.items.ItemSearch.prototype.togglePileFilter = function togglePileFilter(display) {
    this._pileFilter && this._pileFilter.setDisplay(display)
}, views.items.ItemSearch.prototype.setPileFilter = function setPileFilter(t, value) {
    this._pileFilter || (this._pileFilter = new views.controls.SearchCriteriaPickerRow, this._pileFilter.init(), this._pileFilter.setIconTable(this._generatePileFilterIconTable()), this._pileFilter.setOptions(t), this._pileFilter.addTarget(this, this._eSearchModeChanged, enums.Event.CHANGE), this._pileFilter.setInteractionState(!0), this._playerNameSearch.getRoot().after(this._pileFilter.getRoot())), this.setPileFilterImage(value), this._pileFilter.setIndexByValue(value), this._pileFilter.setDefaultLabel(gLocalization.lText("search.pagination.searchmode"))
}, views.items.ItemSearch.prototype.setPileFilterImage = function setPileFilterImage(t) {
    utils.Debug.Assert(utils.JS.isValid(this._pileFilter), "Attempted to set search pile image when no pile filter exists."), this._pileFilter && (this._pileFilter.image = this._generatePileFilterImage(this._pileFilter.getValue()))
}, views.items.ItemSearch.prototype.getPlayerNameSearch = function getPlayerNameSearch() {
    return this._playerNameSearch
}, views.items.ItemSearch.prototype._eFilterChange = function _eFilterChange(sender, event, data) {
    this._setFilterImage(sender, this._searchBucket), this.onFilterChange.notify(sender.setId, sender.getId(), sender.getValue())
}, views.items.ItemSearch.prototype._eSearchModeChanged = function _eSearchModeChanged(sender, event, data) {
    var value = this._pileFilter.getValue();
    this.setPileFilterImage(value), this.onSearchModeChange.notify(value)
}, NamespaceManager.Register("components"), components.NumericInput = function() {
    utils.EventDispatcher.call(this), this._generate();
    var minValue = 0;
    Object.defineProperty(this, "minValue", {
        get: function() {
            return minValue
        },
        set: function(t) {
            var i = utils.JS.isNumber(t);
            utils.Debug.Assert(i, "Expected a number to assign as min value."), i && minValue !== t && (minValue = this._roundToNearestStep(t), this.maxValue = Math.max(this.maxValue, minValue), this.value = Math.max(this.value, minValue))
        }
    });
    var maxValue = AUCTION_MAX_BID;
    Object.defineProperty(this, "maxValue", {
        get: function() {
            return maxValue
        },
        set: function(t) {
            var i = utils.JS.isNumber(t);
            utils.Debug.Assert(i, "Expected a number to assign as max value."), i && maxValue !== t && (maxValue = this._roundToNearestStep(t), this.minValue = Math.min(this.minValue, maxValue), this.value = Math.min(this.value, maxValue))
        }
    });
    var t = 0;
    Object.defineProperty(this, "zeroValueReset", {
        get: function() {
            return t
        },
        set: function(i) {
            var s = utils.JS.isNumber(i);
            utils.Debug.Assert(s, "Expected a number to assign as default value."), s && t !== i && (t = i)
        }
    }), Object.defineProperty(this, "value", {
        get: function() {
            return utils.JS.parseNumber(this.getRootElement().value, gLocalization.getEffectiveLocaleFormattedForServer())
        },
        set: function(t) {
            var i = utils.JS.isNumber(t);
            if (utils.Debug.Assert(i, "Expected a number to assign as value."), i) {
                var root = this.getRootElement(),
                    s = utils.JS.parseNumber(root.value, gLocalization.getEffectiveLocaleFormattedForServer()),
                    value = this._toValidValue(t);
                value !== s && (root.value = this._toFormattedValue(value), DOMKit.toggleClass(root, "filled", 0 !== value), this.dispatch(components.NumericInput.CHANGED))
            }
        }
    }), Object.defineProperty(this, "enabled", {
        get: function() {
            return !this.getRoot().prop("disabled")
        },
        set: function(t) {
            utils.JS.isBoolean(t) && (!t && this.getRoot().is(":focus") && this.getRoot().blur(), this.getRoot().prop("disabled", !t), this.getRoot().toggleClass("disabled", !t))
        }
    }), this.zeroValueReset = 0, this.minValue = 0, this.maxValue = AUCTION_MAX_BID, this.value = 0, this.enabled = !0, this._selectionTimeout = void 0, Object.defineProperty(this, "_selectionTimeout", {
        writable: !0,
        enumerable: !1
    }), this.setPlaceholder(gLocalization.lText("roles.defaultRole")), this.getRoot().on("focus", this._onFocus.bind(this)).on("blur", this._onBlur.bind(this)).on("change", this._onChange.bind(this))
}, utils.JS.inherits(components.NumericInput, utils.EventDispatcher), components.NumericInput.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("input");
        t.setAttribute("type", "tel"), t.setAttribute("pattern", "[0-9]*"), t.classList.add("numericInput"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.NumericInput.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.NumericInput.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.NumericInput.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.NumericInput.CHANGED = "components.NumericInput.CHANGED", components.NumericInput.PRICE_TIERS = [{
    min: 1e5,
    inc: 1e3
}, {
    min: 5e4,
    inc: 500
}, {
    min: 1e4,
    inc: 250
}, {
    min: 1e3,
    inc: 100
}, {
    min: 150,
    inc: 50
}, {
    min: 0,
    inc: 150
}], components.NumericInput.prototype.destroy = function destroy() {
    this._selectionTimeout = clearTimeout(this._selectionTimeout), this.getRoot().off(), this.clearListeners(), this.destroyGeneratedElements()
}, components.NumericInput.prototype.reset = function reset() {
    this.value = 0
}, components.NumericInput.prototype.setPlaceholder = function setPlaceholder(t) {
    this.getRootElement().setAttribute("placeholder", t)
}, components.NumericInput.prototype.setLimits = function setLimits(min, max) {
    this.minValue = min, this.maxValue = max
}, components.NumericInput.prototype.getIncrementBelowVal = function getIncrementBelowVal(t) {
    if (t <= 0) return t;
    var i = utils.JS.find(components.NumericInput.PRICE_TIERS, function(i) {
        return t > i.min
    });
    return t - i.inc > 0 ? Math.round((t - i.inc) / i.inc) * i.inc : 0
}, components.NumericInput.prototype.getIncrementAboveVal = function getIncrementAboveVal(t) {
    if (t >= AUCTION_MAX_BID) return AUCTION_MAX_BID;
    var i = utils.JS.find(components.NumericInput.PRICE_TIERS, function(i) {
        return t >= i.min
    });
    return t + i.inc < AUCTION_MAX_BID ? Math.round((t + i.inc) / i.inc) * i.inc : AUCTION_MAX_BID
}, components.NumericInput.prototype.increase = function increase(t) {
    var start = utils.JS.isNumber(t) ? t : this.value;
    this.value = this.getIncrementAboveVal(start)
}, components.NumericInput.prototype.decrease = function decrease(t) {
    var start = utils.JS.isNumber(t) ? t : this.value;
    this.value = this.getIncrementBelowVal(start)
}, components.NumericInput.prototype._roundToNearestStep = function _roundToNearestStep(value) {
    var t = utils.JS.find(components.NumericInput.PRICE_TIERS, function(t) {
        return value >= t.min
    });
    return Math.round(value / t.inc) * t.inc
}, components.NumericInput.prototype._toValidValue = function _toValidValue(value) {
    return Math.max(Math.min(this._roundToNearestStep(0 === value ? this.zeroValueReset : value), this.maxValue), this.minValue)
}, components.NumericInput.prototype._toFormattedValue = function _toFormattedValue(value) {
    return value > 0 ? gLocalization.lNum(value) : ""
}, components.NumericInput.prototype._onFocus = function _onFocus(e) {
    var root = this.getRootElement();
    root.value = root.value.replace(/\D/g, ""), this._selectionTimeout = setTimeout(function() {
        root.setSelectionRange(0, root.value.length)
    }, 50)
}, components.NumericInput.prototype._onBlur = function _onBlur(e) {
    clearTimeout(this._selectionTimeout), this._selectionTimeout = 0, this.getRootElement().value = this._toFormattedValue(this._toValidValue(this.value))
}, components.NumericInput.prototype._onChange = function _onChange(e) {
    this.dispatch(components.NumericInput.CHANGED)
}, NamespaceManager.Register("components"), components.NumericInputSpinner = function() {
    function beginIncrease() {
        if (!i)
            if (this._numericInput.value < this._numericInput.maxValue) {
                this._numericInput.increase();
                var interval = ++duration <= 4 ? s : o;
                t = setTimeout(beginIncrease.bind(this), interval)
            } else endIncrease.call(this)
    }

    function beginDecrease() {
        if (!t)
            if (this._numericInput.value > this._numericInput.minValue) {
                this._numericInput.decrease();
                var interval = ++duration <= 4 ? s : o;
                i = setTimeout(beginDecrease.bind(this), interval)
            } else endDecrease.call(this)
    }

    function endIncrease() {
        t = clearTimeout(t), duration = 0
    }

    function endDecrease() {
        i = clearTimeout(i), duration = 0
    }
    this._generate(), Object.defineProperty(this, "value", {
        get: function() {
            return this._numericInput.value
        },
        set: function(t) {
            this._numericInput.value = t
        }
    }), Object.defineProperty(this, "zeroValueReset", {
        get: function() {
            return this._numericInput.zeroValueReset
        },
        set: function(t) {
            this._numericInput.zeroValueReset = t
        }
    });
    var enabled;
    Object.defineProperty(this, "enabled", {
        get: function() {
            return enabled
        },
        set: function(t) {
            utils.JS.isBoolean(t) && (enabled = t, this._numericInput.enabled = t, this._decrementBtn.setInteractionState(t && this.value > this._numericInput.minValue), this._incrementBtn.setInteractionState(t && this.value < this._numericInput.maxValue))
        }
    }), this.value = AUCTION_MIN_BID, this.enabled = !0, this._decrementBtn.init(), this._incrementBtn.init();
    var t, i, s = 250,
        o = 50,
        duration = 0;
    this._decrementBtn.addTarget(this, beginDecrease, enums.Event.TOUCHSTART), this._decrementBtn.addTarget(this, endDecrease, enums.Event.TOUCHEND), this._decrementBtn.addTarget(this, endDecrease, enums.Event.TOUCHCANCEL), this._incrementBtn.addTarget(this, beginIncrease, enums.Event.TOUCHSTART), this._incrementBtn.addTarget(this, endIncrease, enums.Event.TOUCHEND), this._incrementBtn.addTarget(this, endIncrease, enums.Event.TOUCHCANCEL), this._numericInput.minValue = AUCTION_MIN_BID, this._numericInput.setPlaceholder(gLocalization.lText("post.spinnerDefaultValue")), this._numericInput.addListener(components.NumericInput.CHANGED, this, function() {
        this._decrementBtn.setInteractionState(this.value > this._numericInput.minValue), this._incrementBtn.setInteractionState(this.value < this._numericInput.maxValue)
    })
}, components.NumericInputSpinner.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("buttonInfo"), this._decrementBtn = new views.buttons.DefaultButton, this._decrementBtn.getRootElement().classList.add("decrementBtn"), t.appendChild(this._decrementBtn.getRootElement());
        var i = document.createElement("div");
        i.classList.add("inputBox"), this._numericInput = new components.NumericInput, i.appendChild(this._numericInput.getRootElement()), t.appendChild(i), this._incrementBtn = new views.buttons.DefaultButton, this._incrementBtn.getRootElement().classList.add("incrementBtn"), t.appendChild(this._incrementBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.NumericInputSpinner.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._decrementBtn.destroy(), this._decrementBtn = null, this._numericInput.destroy(), this._numericInput = null, this._incrementBtn.destroy(), this._incrementBtn = null
}, components.NumericInputSpinner.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.NumericInputSpinner.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.NumericInputSpinner.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.NumericInputSpinner.prototype.reset = function() {
    this._numericInput.reset()
}, components.NumericInputSpinner.prototype.getInput = function() {
    return this._numericInput
}, components.NumericInputSpinner.prototype.setLimits = function(min, max) {
    this._numericInput.setLimits(min, max), this._decrementBtn.setInteractionState(this.value > min), this._incrementBtn.setInteractionState(this.value < max)
}, NamespaceManager.Register("components"), components.SearchCriteriaPriceRow = function() {
    this._generate(), Object.defineProperty(this, "minPrice", {
        get: function() {
            return this._numericInput.minValue
        },
        set: function(t) {
            this._numericInput.minValue = t
        }
    }), Object.defineProperty(this, "maxPrice", {
        get: function() {
            return this._numericInput.maxValue
        },
        set: function(t) {
            this._numericInput.maxValue = t
        }
    });
    var label;
    Object.defineProperty(this, "label", {
        get: function() {
            return label
        },
        set: function(t) {
            utils.JS.isString(t) && (label = t, this.$_label.text(label))
        }
    }), Object.defineProperty(this, "value", {
        get: function() {
            return this._numericInput.value
        },
        set: function(t) {
            this._numericInput.value = t
        }
    }), this.label = "", this.minPrice = 0, this.maxPrice = AUCTION_MAX_BID, this.value = 0
}, components.SearchCriteriaPriceRow.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("price-filter");
        var i = document.createElement("div");
        i.classList.add("info"), this.__label = document.createElement("span"), this.$_label = $(this.__label), this.__label.classList.add("secondary"), this.__label.classList.add("label"), i.appendChild(this.__label), t.appendChild(i), this._numericInput = new components.NumericInputSpinner, this._numericInput.getRootElement().classList.add("bidSpinner"), t.appendChild(this._numericInput.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SearchCriteriaPriceRow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__label = null, this.$_label = null, this._numericInput.destroy(), this._numericInput = null
}, components.SearchCriteriaPriceRow.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SearchCriteriaPriceRow.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SearchCriteriaPriceRow.prototype.destroy = function() {
    this._numericInput.getInput().clearListeners(), this.destroyGeneratedElements()
}, components.SearchCriteriaPriceRow.prototype.reset = function() {
    this._numericInput.reset()
}, components.SearchCriteriaPriceRow.prototype.getNumericInput = function() {
    return this._numericInput.getInput()
}, Screens.Register("SEARCH", "Search", Screens.APP_SECTION.AUCTION_SEARCH, "Transfer Market Search"), pages.Search = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.search")), gTelemetryManager.trackPage(TelemetryManager.Sections.AUCTIONS, "Transfer Market Search Filters"), this.onFilterChange = new FUTObservable, Object.defineProperty(this, "onFilterChange", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(pages.Search, pages.ScreenBase), pages.Search.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("SearchWrapper");
        var i = document.createElement("div");
        i.classList.add("search-container"), this._tabMenu = new components.TabMenu, i.appendChild(this._tabMenu.getRootElement());
        var s = document.createElement("div");
        s.classList.add("filters-container-parent");
        var o = document.createElement("div");
        o.classList.add("filters-container-child");
        var l = document.createElement("div");
        l.classList.add("tabletButtons"), l.classList.add("legacy"), l.classList.add("buttonContainer"), this._searchButton1 = new views.buttons.DefaultButton, this._searchButton1.getRootElement().classList.add("call-to-action"), l.appendChild(this._searchButton1.getRootElement()), this._resetButton1 = new views.buttons.DefaultButton, l.appendChild(this._resetButton1.getRootElement()), o.appendChild(l);
        var u = document.createElement("div");
        u.classList.add("filters-scroller"), this._searchFilters = new views.items.ItemSearch, u.appendChild(this._searchFilters.getRootElement());
        var h = document.createElement("div");
        h.classList.add("searchPrices");
        var p = document.createElement("div");
        p.classList.add("searchPriceHeader"), this.__clearBidHeader = document.createElement("h1"), this.$_clearBidHeader = $(this.__clearBidHeader), this.__clearBidHeader.classList.add("secondary"), p.appendChild(this.__clearBidHeader), this._clearBidPrice = new views.buttons.FlatButton, this._clearBidPrice.getRootElement().classList.add("camel-case"), p.appendChild(this._clearBidPrice.getRootElement()), h.appendChild(p), this._minBidPriceRow = new components.SearchCriteriaPriceRow, h.appendChild(this._minBidPriceRow.getRootElement()), this._maxBidPriceRow = new components.SearchCriteriaPriceRow, h.appendChild(this._maxBidPriceRow.getRootElement());
        var m = document.createElement("div");
        m.classList.add("searchPriceHeader"), this.__clearBuyHeader = document.createElement("h1"), this.$_clearBuyHeader = $(this.__clearBuyHeader), this.__clearBuyHeader.classList.add("secondary"), m.appendChild(this.__clearBuyHeader), this._clearBuyPrice = new views.buttons.FlatButton, this._clearBuyPrice.getRootElement().classList.add("camel-case"), m.appendChild(this._clearBuyPrice.getRootElement()), h.appendChild(m), this._minBuyNowPriceRow = new components.SearchCriteriaPriceRow, h.appendChild(this._minBuyNowPriceRow.getRootElement()), this._maxBuyNowPriceRow = new components.SearchCriteriaPriceRow, h.appendChild(this._maxBuyNowPriceRow.getRootElement()), u.appendChild(h), o.appendChild(u), s.appendChild(o), i.appendChild(s), t.appendChild(i);
        var _ = document.createElement("div");
        _.classList.add("mobileButtons"), _.classList.add("legacy"), _.classList.add("buttonContainer"), this._resetButton2 = new views.buttons.DefaultButton, _.appendChild(this._resetButton2.getRootElement()), this._searchButton2 = new views.buttons.DefaultButton, this._searchButton2.getRootElement().classList.add("call-to-action"), _.appendChild(this._searchButton2.getRootElement()), t.appendChild(_), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.Search.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._tabMenu.destroy(), this._tabMenu = null, this._searchButton1.destroy(), this._searchButton1 = null, this._resetButton1.destroy(), this._resetButton1 = null, this._searchFilters.destroy(), this._searchFilters = null, this.__clearBidHeader = null, this.$_clearBidHeader = null, this._clearBidPrice.destroy(), this._clearBidPrice = null, this._minBidPriceRow.destroy(), this._minBidPriceRow = null, this._maxBidPriceRow.destroy(), this._maxBidPriceRow = null, this.__clearBuyHeader = null, this.$_clearBuyHeader = null, this._clearBuyPrice.destroy(), this._clearBuyPrice = null, this._minBuyNowPriceRow.destroy(), this._minBuyNowPriceRow = null, this._maxBuyNowPriceRow.destroy(), this._maxBuyNowPriceRow = null, this._resetButton2.destroy(), this._resetButton2 = null, this._searchButton2.destroy(), this._searchButton2 = null
}, pages.Search.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.Search.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.Search.EVENT_RESET_BUTTON_CLICKED = "pages.Search.EVENT_RESET_BUTTON_CLICKED", pages.Search.EVENT_SEARCH_BUTTON_CLICKED = "pages.Search.EVENT_SEARCH_BUTTON_CLICKED", pages.Search.EVENT_MIN_BID_PRICE_CHANGED = "pages.Search.EVENT_MIN_BID_PRICE_CHANGED", pages.Search.EVENT_MAX_BID_PRICE_CHANGED = "pages.Search.EVENT_MAX_BID_PRICE_CHANGED", pages.Search.EVENT_MIN_BUYNOW_PRICE_CHANGED = "pages.Search.EVENT_MIN_BUYNOW_PRICE_CHANGED", pages.Search.EVENT_MAX_BUYNOW_PRICE_CHANGED = "pages.Search.EVENT_MAX_BUYNOW_PRICE_CHANGED", pages.Search.prototype.init = function init() {
    this._minBidPriceRow.label = gLocalization.lText("abbr.minimum"), this._maxBidPriceRow.label = gLocalization.lText("abbr.maximum"), this._minBuyNowPriceRow.label = gLocalization.lText("abbr.minimum"), this._maxBuyNowPriceRow.label = gLocalization.lText("abbr.maximum"), this.$_clearBidHeader.text(gLocalization.lText("auctioninfo.bidprice")), this.$_clearBuyHeader.text(gLocalization.lText("auctioninfo.buynowprice")), this._clearBidPrice.setText(gLocalization.lText("search.button.clear")), this._clearBuyPrice.setText(gLocalization.lText("search.button.clear")), this._searchButton1.init(), this._searchButton2.init(), this._resetButton1.init(), this._resetButton2.init(), this._setupClearButton(this._clearBidPrice, this._minBidPriceRow, this._maxBidPriceRow), this._setupClearButton(this._clearBuyPrice, this._minBuyNowPriceRow, this._maxBuyNowPriceRow), this._minBidPriceRow.getNumericInput().minValue = 0, this._maxBidPriceRow.getNumericInput().minValue = 0, this._minBuyNowPriceRow.getNumericInput().minValue = 0, this._maxBuyNowPriceRow.getNumericInput().minValue = 0, this._minBidPriceRow.getNumericInput().setPlaceholder(gLocalization.lText("roles.defaultRole")), this._maxBidPriceRow.getNumericInput().setPlaceholder(gLocalization.lText("roles.defaultRole")), this._minBuyNowPriceRow.getNumericInput().setPlaceholder(gLocalization.lText("roles.defaultRole")), this._maxBuyNowPriceRow.getNumericInput().setPlaceholder(gLocalization.lText("roles.defaultRole")), this._resetButton1.setText(gLocalization.lText("search.pagination.reset")), this._searchButton1.setText(gLocalization.lText("button.search")), this._resetButton2.setText(gLocalization.lText("search.pagination.reset")), this._searchButton2.setText(gLocalization.lText("button.search")), this._searchFilters.init(), this._searchFilters.onFilterChange.observe(this, this._eFilterChanged), this._tabMenu.addTab(enums.SearchBucket.PLAYER, gLocalization.lText("search.filters.players")), this._tabMenu.addTab(enums.SearchBucket.STAFF, gLocalization.lText("search.filters.staff")), this._tabMenu.addTab(enums.SearchBucket.CLUB, gLocalization.lText("search.filters.club")), this._tabMenu.addTab(enums.SearchBucket.CONSUMABLE, gLocalization.lText("search.filters.consumables")), this._tabMenu.setActiveTab(enums.SearchBucket.PLAYER), this._tabMenu.layoutSubviews()
}, pages.Search.prototype.getTabMenuComponent = function() {
    return this._tabMenu
}, pages.Search.prototype.getPlayerNameSearch = function getPlayerNameSearch() {
    return this._searchFilters.getPlayerNameSearch()
}, pages.Search.prototype.setFilters = function setFilters(t, i) {
    this._searchFilters.setFilters(t, i), this._searchFilters.togglePlayerNameRow(t.searchCriteria.type === enums.SearchType.PLAYER)
}, pages.Search.prototype.setFilterValue = function setFilterValue(filter, value) {
    this._searchFilters.setFilterValue(filter, value)
}, pages.Search.prototype.setPlayerSearch = function setPlayerSearch(t) {
    this._searchFilters.setPlayerSearch(t)
}, pages.Search.prototype.resetPlayerName = function resetPlayerName() {
    this._searchFilters.resetPlayerName()
}, pages.Search.prototype.setMinBidPrice = function setMinBidPrice(t) {
    this._minBidPriceRow.value = t
}, pages.Search.prototype.setMaxBidPrice = function setMaxBidPrice(t) {
    this._maxBidPriceRow.value = t
}, pages.Search.prototype.setMinBuyNowPrice = function setMinBuyNowPrice(t) {
    this._minBuyNowPriceRow.value = t
}, pages.Search.prototype.setMaxBuyNowPrice = function setMaxBuyNowPrice(t) {
    this._maxBuyNowPriceRow.value = t
}, pages.Search.prototype.start = function start() {
    function onReset(sender) {
        this.dispatch(pages.Search.EVENT_RESET_BUTTON_CLICKED)
    }

    function onSearch(sender) {
        this.dispatch(pages.Search.EVENT_SEARCH_BUTTON_CLICKED)
    }
    pages.Search.superClass_.start.call(this), this._resetButton1.addTarget(this, onReset, enums.Event.TAP), this._resetButton2.addTarget(this, onReset, enums.Event.TAP), this._searchButton1.addTarget(this, onSearch, enums.Event.TAP), this._searchButton2.addTarget(this, onSearch, enums.Event.TAP), this._minBidPriceRow.getNumericInput().addListener(components.NumericInput.CHANGED, this, this.minBidPriceChanged), this._maxBidPriceRow.getNumericInput().addListener(components.NumericInput.CHANGED, this, this.maxBidPriceChanged), this._minBuyNowPriceRow.getNumericInput().addListener(components.NumericInput.CHANGED, this, this.minBuyNowPriceChanged), this._maxBuyNowPriceRow.getNumericInput().addListener(components.NumericInput.CHANGED, this, this.maxBuyNowPriceChanged)
}, pages.Search.prototype.stop = function stop() {
    this.clearListeners(), pages.Search.superClass_.stop.call(this)
}, pages.Search.prototype.minBidPriceChanged = function(sender) {
    var t = this._minBidPriceRow.value,
        i = this._maxBidPriceRow.value,
        s = this._minBuyNowPriceRow.value;
    0 !== i && i <= t && this.setMaxBidPrice(this._minBidPriceRow.getNumericInput().getIncrementAboveVal(t)), 0 !== s && s <= t && this.setMinBuyNowPrice(this._minBidPriceRow.getNumericInput().getIncrementAboveVal(t)), this.dispatch(pages.Search.EVENT_MIN_BID_PRICE_CHANGED, t)
}, pages.Search.prototype.maxBidPriceChanged = function(sender) {
    var t = this._minBidPriceRow.value,
        i = this._maxBidPriceRow.value,
        s = this._maxBuyNowPriceRow.value;
    0 !== i && t >= i && this.setMinBidPrice(this._maxBidPriceRow.getNumericInput().getIncrementBelowVal(i)), 0 !== s && s <= i && this.setMaxBuyNowPrice(this._maxBidPriceRow.getNumericInput().getIncrementAboveVal(i)), this.dispatch(pages.Search.EVENT_MAX_BID_PRICE_CHANGED, i)
}, pages.Search.prototype.minBuyNowPriceChanged = function(sender) {
    var t = this._minBidPriceRow.value,
        i = this._minBuyNowPriceRow.value,
        s = this._maxBuyNowPriceRow.value;
    0 !== i && i < AUCTION_MIN_BUY ? this.setMinBuyNowPrice(AUCTION_MIN_BUY) : (0 !== i && t >= i && this.setMinBidPrice(this._minBuyNowPriceRow.getNumericInput().getIncrementBelowVal(i)), 0 !== s && s <= i && this.setMaxBuyNowPrice(this._minBuyNowPriceRow.getNumericInput().getIncrementAboveVal(i)), this.dispatch(pages.Search.EVENT_MIN_BUYNOW_PRICE_CHANGED, i))
}, pages.Search.prototype.maxBuyNowPriceChanged = function(sender) {
    var t = this._maxBidPriceRow.value,
        i = this._minBuyNowPriceRow.value,
        s = this._maxBuyNowPriceRow.value;
    0 !== s && t >= s && this.setMaxBidPrice(this._maxBuyNowPriceRow.getNumericInput().getIncrementBelowVal(s)), 0 !== s && i >= s && this.setMinBuyNowPrice(this._maxBuyNowPriceRow.getNumericInput().getIncrementBelowVal(s)), this.dispatch(pages.Search.EVENT_MAX_BUYNOW_PRICE_CHANGED, s)
}, pages.Search.prototype._setupClearButton = function _setupClearButton(t, i, s) {
    t.init(), i.getNumericInput().addListener(components.NumericInput.CHANGED, this, this._inputChange.bind(this, t, i, s)), s.getNumericInput().addListener(components.NumericInput.CHANGED, this, this._inputChange.bind(this, t, i, s)), this._inputChange(t, i, s), t.addTarget(this, this._clearPressed.bind(this, i, s), enums.Event.TAP)
}, pages.Search.prototype._inputChange = function _inputChange(t, i, s) {
    t.setInteractionState(0 !== i.value || 0 !== s.value)
}, pages.Search.prototype._clearPressed = function _clearPressed(t, i) {
    t.value = 0, i.value = 0
}, pages.Search.prototype._eFilterChanged = function _eFilterChanged(t, i, id, value) {
    this.onFilterChange.notify(i, id, value)
}, NamespaceManager.Register("viewmodels"), viewmodels.ItemSearch = function ItemSearchViewmodel() {
    FUTObject.call(this), this.searchFeature = enums.ItemSearchFeature.CLUB, this.searchCriteria = new transferobjects.SearchCriteria, Object.defineProperty(this, "searchCriteria", {
        writable: !1,
        enumerable: !0
    }), this.playerData = null, this.defaultSearchCriteria = new transferobjects.SearchCriteria, Object.defineProperty(this, "defaultSearchCriteria", {
        writable: !1,
        enumerable: !0
    }), this.isMarketSearch = !1, Object.defineProperty(this, "isMarketSearch", {
        get: function() {
            return this.searchFeature === enums.ItemSearchFeature.MARKET
        },
        enumerable: !0
    });
    var t = !1;
    Object.defineProperty(this, "isGenerationsSearch", {
        get: function() {
            return t
        },
        set: function(i) {
            utils.JS.isBoolean(i) && (t = i), t ? this.searchCriteria.type = enums.SearchType.PLAYER : this.searchCriteria.year = enums.SearchType.ANY
        },
        enumerable: !0
    }), this.isGenerationsSearch = !1, this.sort = enums.SearchSort.DESCENDING, Object.defineProperty(this, "sort", {
        get: function() {
            return this.searchCriteria.sort
        },
        set: function(value) {
            this.searchCriteria.sort = value
        }
    }), this.defaultSearchCriteria.type = enums.SearchType.PLAYER, this.searchCriteria.type = enums.SearchType.PLAYER
}, utils.JS.inherits(viewmodels.ItemSearch, FUTObject), viewmodels.ItemSearch.prototype.resetSearch = function resetSearch() {
    this.clearPlayerData(), this.updateSearchCriteria(this.defaultSearchCriteria)
}, viewmodels.ItemSearch.prototype.updateSearchCriteria = function updateSearchCriteria(t) {
    this.searchCriteria.update(t);
    var i = 0;
    this.searchCriteria.hasValidDefId() ? i = this.searchCriteria.defId[0] : this.isMarketSearch && this.searchCriteria.maskedDefId > 0 && (i = this.searchCriteria.maskedDefId), i > 0 ? this.playerData = repositories.Item.getStaticDataByDefId(i) : this.clearPlayerData()
}, viewmodels.ItemSearch.prototype.setPlayerData = function setPlayerData(data) {
    this.playerData = data, this.isMarketSearch ? this.searchCriteria.maskedDefId = data.id : this.searchCriteria.defId = [data.id]
}, viewmodels.ItemSearch.prototype.clearPlayerData = function clearPlayerData() {
    this.playerData = null, this.searchCriteria.resetDefId()
}, viewmodels.ItemSearch.prototype.getBucketFromType = function getBucketFromType(type) {
    switch (type) {
        case enums.SearchType.ANY:
        case enums.SearchType.PLAYER:
            return enums.SearchBucket.PLAYER;
        case enums.SearchType.STAFF:
            return enums.SearchBucket.STAFF;
        case enums.SearchType.STADIUM:
        case enums.SearchType.BALL:
        case enums.SearchType.CLUB_INFO:
            return enums.SearchBucket.CLUB;
        case enums.SearchType.CONSUMABLES_TRAINING:
        case enums.SearchType.CONSUMABLES_DEVELOPMENT:
            return enums.SearchBucket.CONSUMABLE
    }
    return enums.SearchBucket.PLAYER
}, viewmodels.ItemSearch.prototype.updateFromFilterChange = function updateFromFilterChange(filter, id, value) {
    var t = this.searchCriteria;
    switch (filter) {
        case enums.UISearchFilters.TYPE:
            switch (value) {
                case enums.SearchType.PLAYER:
                case enums.SearchType.STAFF:
                case enums.SearchType.CONSUMABLES_TRAINING:
                case enums.SearchType.CONSUMABLES_DEVELOPMENT:
                case enums.SearchType.STADIUM:
                case enums.SearchType.BALL:
                    t.type = value;
                    break;
                case enums.SearchCategory.ANY:
                case enums.SearchCategory.MANAGER:
                case enums.SearchCategory.COACH_HEAD:
                case enums.SearchCategory.COACH_GK:
                case enums.SearchCategory.COACH_FITNESS:
                case enums.SearchCategory.PHYSIO:
                case enums.SearchCategory.POSITION:
                case enums.SearchCategory.PLAYSTYLE:
                case enums.SearchCategory.PLAYER_TRAINING:
                case enums.SearchCategory.GK_TRAINING:
                case enums.SearchCategory.MANAGER_LEAGUE:
                case enums.SearchCategory.CONTRACT:
                case enums.SearchCategory.FITNESS:
                case enums.SearchCategory.HEALING:
                case enums.SearchCategory.KIT:
                case enums.SearchCategory.BADGE:
                    t.category = value;
                    break;
                default:
                    utils.Debug.Assert(!1, "Invalid search category: " + value)
            }
            break;
        case enums.UISearchFilters.POSITION:
            if (value === enums.SearchType.ANY) t.zone = enums.SearchType.ANY, t.position = enums.SearchType.ANY;
            else {
                var data = this._generatePositionSearchDataFromId(id);
                "zone" === data.label ? t.zone = data.value || enums.SearchType.ANY : t.position = data.value || enums.SearchType.ANY
            }
            break;
        case enums.UISearchFilters.POSITION_MOD:
            t.position = value;
            break;
        case enums.UISearchFilters.LEVEL:
            t.level = value;
            break;
        case enums.UISearchFilters.PLAYSTYLE:
            t.playStyle = id;
            break;
        case enums.UISearchFilters.LEAGUE:
            t.league = id, t.club = -1;
            break;
        case enums.UISearchFilters.NATION:
            t.nation = id;
            break;
        case enums.UISearchFilters.CLUB:
            t.club = id;
            break;
        case enums.UISearchFilters.YEAR:
            t.year = value
    }
}, viewmodels.ItemSearch.prototype._generatePositionSearchDataFromId = function _generatePositionSearchDataFromId(id) {
    -1 === id && (id = 1);
    var data = {
            value: "",
            label: ""
        },
        t = utils.JS.find(PLAYER_ZONE_LOOKUP, function(t) {
            return t.id === id
        });
    if (t) data.value = t.value, data.label = "zone";
    else {
        var position = repositories.Squad.getPosition(id);
        data.value = position ? position.getName() : "", data.label = "pos"
    }
    return data
}, NamespaceManager.Register("viewmodels"), viewmodels.BucketedItemSearch = function BucketedItemSearchViewmodel() {
    viewmodels.ItemSearch.call(this);
    var t = enums.SearchBucket.PLAYER;
    Object.defineProperty(this, "searchBucket", {
        get: function() {
            return t
        },
        set: function(i) {
            var s;
            for (s in enums.SearchBucket) enums.SearchBucket.hasOwnProperty(s) && enums.SearchBucket[s] === i && (t = i)
        },
        enumerable: !0
    }), this.searchBucket = enums.SearchBucket.PLAYER
}, utils.JS.inherits(viewmodels.BucketedItemSearch, viewmodels.ItemSearch), viewmodels.BucketedItemSearch.prototype.resetSearch = function resetSearch() {
    this.superclass(), this._updateSearchType()
}, viewmodels.BucketedItemSearch.prototype.updateSearchCriteria = function updateSearchCriteria(t) {
    this.superclass(t), this.searchBucket = this.getBucketFromType(t.type)
}, viewmodels.BucketedItemSearch.prototype._updateSearchType = function _updateSearchType() {
    this.searchBucket === enums.SearchBucket.PLAYER ? (this.searchCriteria.type = enums.SearchType.PLAYER, this.defaultSearchCriteria.type = enums.SearchType.PLAYER) : this.searchBucket === enums.SearchBucket.STAFF ? (this.searchCriteria.type = enums.SearchType.STAFF, this.defaultSearchCriteria.type = enums.SearchType.STAFF) : this.searchBucket === enums.SearchBucket.CLUB ? (this.searchCriteria.type = enums.SearchType.CLUB_INFO, this.defaultSearchCriteria.type = enums.SearchType.CLUB_INFO) : this.searchBucket === enums.SearchBucket.CONSUMABLE && (this.searchCriteria.type = enums.SearchType.CONSUMABLES_TRAINING, this.defaultSearchCriteria.type = enums.SearchType.CONSUMABLES_TRAINING)
}, viewmodels.BucketedItemSearch.prototype.setSearchBucket = function setSearchBucket(t) {
    this.searchBucket = t, this._updateSearchType()
}, NamespaceManager.Register("transferobjects"), transferobjects.SearchCriteria = function SearchCriteriaDTO() {
    function setNumberProperty(t, i) {
        return utils.Debug.Assert(utils.JS.isNumber(i), "[SearchCriteria] Assignment to numeric property expects a number."), utils.JS.isNumber(i) && (t = i), t
    }

    function setStringProperty(t, i) {
        return utils.Debug.Assert(utils.JS.isString(i), "[SearchCriteria] Assignment to string property expects a string."), utils.JS.isString(i) && (t = i), t
    }

    function setBooleanProperty(t, i) {
        return utils.Debug.Assert(utils.JS.isBoolean(i), "[SearchCriteria] Assignment to boolean property expects a boolean."), utils.JS.isBoolean(i) && (t = i), t
    }

    function setEnumProperty(t, i, s) {
        var o;
        for (o in t)
            if (t.hasOwnProperty(o) && t[o] === s) return s;
        utils.Debug.Assert(!1, "[SearchCriteria] Value assignment not found in enum.")
    }
    var offset = 0;
    Object.defineProperty(this, "offset", {
        get: function() {
            return offset
        },
        set: function(t) {
            offset = setNumberProperty.call(this, offset, t)
        }
    });
    var sort = enums.SearchSort.DESCENDING;
    Object.defineProperty(this, "sort", {
        get: function() {
            return sort
        },
        set: function(t) {
            sort = setStringProperty.call(this, sort, t)
        }
    });
    var count = 0;
    Object.defineProperty(this, "count", {
        get: function() {
            return count
        },
        set: function(t) {
            count = setNumberProperty.call(this, count, t)
        }
    });
    var type = enums.SearchType.ANY;
    Object.defineProperty(this, "type", {
        get: function() {
            return type
        },
        set: function(t) {
            type !== t && ((type = setEnumProperty.call(this, enums.SearchType, type, t)) === enums.SearchType.ANY || type === enums.SearchType.STADIUM || type === enums.SearchType.BALL ? this.category = enums.SearchCategory.ANY : type === enums.SearchType.PLAYER && this.category !== enums.SearchCategory.PLAYER_GK && this.category !== enums.SearchCategory.PLAYER_NO_GK ? this.category = enums.SearchCategory.ANY : type === enums.SearchType.STAFF && this.category !== enums.SearchCategory.ANY && this.category !== enums.SearchCategory.MANAGER && this.category !== enums.SearchCategory.COACH_FITNESS && this.category !== enums.SearchCategory.COACH_GK && this.category !== enums.SearchCategory.COACH_HEAD && this.category !== enums.SearchCategory.PHYSIO ? this.category = enums.SearchCategory.ANY : type === enums.SearchType.CLUB_INFO && this.category !== enums.SearchCategory.KIT && this.category !== enums.SearchCategory.BADGE ? this.category = enums.SearchCategory.KIT : type === enums.SearchType.CONSUMABLES_DEVELOPMENT && this.category !== enums.SearchCategory.CONTRACT && this.category !== enums.SearchCategory.FITNESS && this.category !== enums.SearchCategory.HEALING ? this.category = enums.SearchCategory.CONTRACT : type === enums.SearchType.CONSUMABLES_TRAINING && this.category !== enums.SearchCategory.PLAYER_TRAINING && this.category !== enums.SearchCategory.GK_TRAINING && this.category !== enums.SearchCategory.POSITION && this.category !== enums.SearchCategory.PLAYSTYLE && this.category !== enums.SearchCategory.MANAGER_LEAGUE && (this.category = enums.SearchCategory.PLAYER_TRAINING), this.league = -1, this.nation = -1, this.club = -1, type !== enums.SearchType.PLAYER && (this.defId = [], this.playStyle = -1, this.position = enums.SearchType.ANY, this.zone = enums.SearchType.ANY), type === enums.SearchType.BALL && (this.level = enums.SearchLevel.ANY))
        }
    });
    var category = enums.SearchCategory.ANY;
    Object.defineProperty(this, "category", {
        get: function() {
            return category
        },
        set: function(t) {
            category = setEnumProperty.call(this, enums.SearchCategory, category, t), this.type === enums.SearchType.PLAYER || category !== enums.SearchCategory.PLAYER_GK && category !== enums.SearchCategory.PLAYER_NO_GK ? this.type === enums.SearchType.STAFF || category !== enums.SearchCategory.MANAGER && category !== enums.SearchCategory.COACH_FITNESS && category !== enums.SearchCategory.COACH_GK && category !== enums.SearchCategory.COACH_HEAD && category !== enums.SearchCategory.PHYSIO ? this.type === enums.SearchType.CLUB_INFO || category !== enums.SearchCategory.KIT && category !== enums.SearchCategory.BADGE ? this.type === enums.SearchType.CONSUMABLES_DEVELOPMENT || category !== enums.SearchCategory.CONTRACT && category !== enums.SearchCategory.FITNESS && category !== enums.SearchCategory.HEALING ? this.type === enums.SearchType.CONSUMABLES_TRAINING || category !== enums.SearchCategory.PLAYER_TRAINING && category !== enums.SearchCategory.GK_TRAINING && category !== enums.SearchCategory.POSITION && category !== enums.SearchCategory.PLAYSTYLE && category !== enums.SearchCategory.MANAGER_LEAGUE || (this.type = enums.SearchType.CONSUMABLES_TRAINING) : this.type = enums.SearchType.CONSUMABLES_DEVELOPMENT : this.type = enums.SearchType.CLUB_INFO : this.type = enums.SearchType.STAFF : this.type = enums.SearchType.PLAYER, this.type === enums.SearchType.STAFF && category !== enums.SearchCategory.MANAGER && (this.league = -1, this.nation = -1), this.type === enums.SearchType.CONSUMABLES_TRAINING && (category !== enums.SearchCategory.POSITION && (this.position = enums.SearchType.ANY), category !== enums.SearchCategory.PLAYSTYLE && (this.playStyle = -1))
        }
    });
    var position = enums.SearchType.ANY;
    Object.defineProperty(this, "position", {
        get: function() {
            return position
        },
        set: function(t) {
            position = setStringProperty.call(this, position, t), t !== enums.SearchType.ANY && this.zone !== enums.SearchType.ANY && (this.zone = enums.SearchType.ANY)
        }
    });
    var t = enums.SearchType.ANY;
    Object.defineProperty(this, "zone", {
        get: function() {
            return t
        },
        set: function(i) {
            t = setStringProperty.call(this, t, i), i !== enums.SearchType.ANY && this.position !== enums.SearchType.ANY && (this.position = enums.SearchType.ANY)
        }
    });
    var level = enums.SearchLevel.ANY;
    Object.defineProperty(this, "level", {
        get: function() {
            return level
        },
        set: function(t) {
            level = setEnumProperty.call(this, enums.SearchLevel, level, t)
        }
    });
    var i = -1;
    Object.defineProperty(this, "nation", {
        get: function() {
            return i
        },
        set: function(t) {
            i = setNumberProperty.call(this, i, t)
        }
    });
    var s = -1;
    Object.defineProperty(this, "league", {
        get: function() {
            return s
        },
        set: function(t) {
            s = setNumberProperty.call(this, s, t)
        }
    });
    var o = -1;
    Object.defineProperty(this, "club", {
        get: function() {
            return o
        },
        set: function(t) {
            o = setNumberProperty.call(this, o, t)
        }
    });
    var l = 0;
    Object.defineProperty(this, "playStyle", {
        get: function() {
            return l
        },
        set: function(t) {
            l = setNumberProperty.call(this, l, t)
        }
    });
    var u = 0;
    Object.defineProperty(this, "minBid", {
        get: function() {
            return u
        },
        set: function(t) {
            u = setNumberProperty.call(this, u, t)
        }
    });
    var h = 0;
    Object.defineProperty(this, "maxBid", {
        get: function() {
            return h
        },
        set: function(t) {
            h = setNumberProperty.call(this, h, t)
        }
    });
    var p = 0;
    Object.defineProperty(this, "minBuy", {
        get: function() {
            return p
        },
        set: function(t) {
            p = setNumberProperty.call(this, p, t)
        }
    });
    var m = 0;
    Object.defineProperty(this, "maxBuy", {
        get: function() {
            return m
        },
        set: function(t) {
            m = setNumberProperty.call(this, m, t)
        }
    });
    var _ = 0;
    Object.defineProperty(this, "maskedDefId", {
        get: function() {
            return _
        },
        set: function(t) {
            _ = setNumberProperty.call(this, _, t)
        }
    });
    var g = enums.SearchType.ANY;
    Object.defineProperty(this, "year", {
        get: function() {
            return g
        },
        set: function(t) {
            g = setStringProperty.call(this, g, t)
        }
    });
    var S = enums.SearchUntradeables.DEFAULT;
    Object.defineProperty(this, "untradeables", {
        get: function() {
            return S
        },
        set: function(t) {
            if (utils.JS.isString(t)) S = setStringProperty.call(this, S, t);
            else if (utils.JS.isBoolean(t)) {
                var i = t ? enums.SearchUntradeables.ONLY : enums.SearchUntradeables.EXCLUDE;
                S = setStringProperty.call(this, S, i)
            }
        }
    });
    var v = !1;
    Object.defineProperty(this, "isExactSearch", {
        get: function() {
            return v
        },
        set: function(t) {
            v = setBooleanProperty.call(this, v, t)
        }
    }), this.offset = 0, this.count = 20, this.type = enums.SearchType.ANY, this.category = enums.SearchCategory.ANY, this.position = enums.SearchType.ANY, this.zone = enums.SearchType.ANY, this.level = enums.SearchLevel.ANY, this.nation = -1, this.league = -1, this.club = -1, this.playStyle = -1, this.minBid = 0, this.maxBid = 0, this.minBuy = 0, this.maxBuy = 0, this.defId = [], this.maskedDefId = 0, this.year = enums.SearchType.ANY, this.untradeables = enums.SearchUntradeables.DEFAULT, this.isExactSearch = !1
}, transferobjects.SearchCriteria.prototype.update = function update(t) {
    this.offset = t.offset, this.count = t.count, this.type = t.type, this.category = t.category, this.sort = t.sort, this.zone = t.zone, this.position = t.position, this.level = t.level, this.nation = t.nation, this.league = t.league, this.club = t.club, this.playStyle = t.playStyle, this.minBid = t.minBid, this.maxBid = t.maxBid, this.minBuy = t.minBuy, this.maxBuy = t.maxBuy, this.defId = t.defId, this.maskedDefId = t.maskedDefId, this.year = t.year, this.untradeables = t.untradeables, this.isExactSearch = t.isExactSearch
}, transferobjects.SearchCriteria.prototype.compare = function compare(t) {
    return this.offset === t.offset && this.sort === t.sort && this.count === t.count && this.type === t.type && this.category === t.category && this.zone === t.zone && this.position === t.position && this.level === t.level && this.nation === t.nation && this.league === t.league && this.club === t.club && this.playStyle === t.playStyle && this.minBid === t.minBid && this.maxBid === t.maxBid && this.minBuy === t.minBuy && this.maxBuy === t.maxBuy && this.defId === t.defId && this.maskedDefId === t.maskedDefId && this.year === t.year && this.untradeables === t.untradeables && this.isExactSearch === t.isExactSearch
}, transferobjects.SearchCriteria.prototype.reset = function reset() {
    this.offset = 0, this.sort = enums.SearchSort.DESCENDING, this.count = 20, this.type = enums.SearchType.ANY, this.category = enums.SearchCategory.ANY, this.position = enums.SearchType.ANY, this.zone = enums.SearchType.ANY, this.level = enums.SearchLevel.ANY, this.nation = -1, this.league = -1, this.club = -1, this.playStyle = -1, this.minBid = 0, this.maxBid = 0, this.minBuy = 0, this.maxBuy = 0, this.defId = [], this.maskedDefId = 0, this.year = enums.SearchType.ANY, this.untradeables = enums.SearchUntradeables.DEFAULT, this.isExactSearch = !1
}, transferobjects.SearchCriteria.prototype.hasValidDefId = function hasValidDefId() {
    return this.defId.length > 0 && this.defId.every(function _checkDefId(t) {
        return utils.JS.isNumber(t) && t > 0
    })
}, transferobjects.SearchCriteria.prototype.resetDefId = function resetDefId() {
    this.defId = [], this.maskedDefId = 0
}, transferobjects.SearchCriteria.prototype.isModified = function isModified(t) {
    return this.position !== enums.SearchType.ANY || this.zone !== enums.SearchType.ANY || this.level !== enums.SearchLevel.ANY || this.nation > 0 || this.league > 0 || this.club > 0 || this.playStyle > 0 || 0 !== this.minBid || 0 !== this.maxBid || 0 !== this.minBuy || 0 !== this.maxBuy || this.defId.length > 0 || 0 !== this.maskedDefId || this.year !== enums.SearchType.ANY || this.untradeables !== enums.SearchUntradeables.DEFAULT || !0 === this.isExactSearch || !t && this.sort !== enums.SearchSort.DESCENDING
}, pages.controllers.SearchController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._viewmodel = new viewmodels.BucketedItemSearch
}, utils.JS.inherits(pages.controllers.SearchController, pages.controllers.ScreenControllerBase), pages.controllers.SearchController.prototype.getDataCache = function() {
    return {
        viewmodel: this._viewmodel
    }
}, pages.controllers.SearchController.prototype.onScreenInitialized = function(data, t) {
    if (pages.controllers.SearchController.superClass_.onScreenInitialized.call(this, data, t), gTelemetryManager.trackPage(TelemetryManager.Sections.AUCTIONS, Screens.getView("SEARCH")), t && t.viewmodel) this._viewmodel = t.viewmodel, this._viewmodel.searchCriteria.offset = 0;
    else {
        var i = gAuthenticationModel.getUser().marketSearchCriteria;
        this._viewmodel.defaultSearchCriteria.type = i.type, this._viewmodel.defaultSearchCriteria.category = i.category, this._viewmodel.updateSearchCriteria(i), this._viewmodel.searchCriteria.type === enums.SearchType.ANY && (this._viewmodel.searchCriteria.type = enums.SearchType.PLAYER)
    }
    var s = gConfigurationModel.getConfigObject(models.ConfigurationModel.KEY_ITEMS_PER_PAGE),
        count = 1 + (utils.JS.isValid(s) ? s[models.ConfigurationModel.ITEMS_PER_PAGE.TRANSFER_MARKET] : 15);
    this._viewmodel.searchCriteria.count = count, this._viewmodel.searchFeature = enums.ItemSearchFeature.MARKET;
    var view = this.getView();
    view.getTabMenuComponent().setActiveTab(this._viewmodel.searchBucket), view.setFilters(this._viewmodel), this._viewmodel.playerData && this.getView().setPlayerSearch(this._viewmodel.playerData), view.setMinBidPrice(this._viewmodel.searchCriteria.minBid), view.setMaxBidPrice(this._viewmodel.searchCriteria.maxBid), view.setMinBuyNowPrice(this._viewmodel.searchCriteria.minBuy), view.setMaxBuyNowPrice(this._viewmodel.searchCriteria.maxBuy)
}, pages.controllers.SearchController.prototype.onScreenStarted = function() {
    var view = this.getView();
    view.getTabMenuComponent().addTarget(this, this.onSearchCategoryChanged, enums.Event.TAP), view.getPlayerNameSearch().addTarget(this, this._ePlayerNameChange, enums.Event.CHANGE), view.onFilterChange.observe(this, this._onFilterChange), view.addListener(pages.Search.EVENT_RESET_BUTTON_CLICKED, this, this._onReset), view.addListener(pages.Search.EVENT_SEARCH_BUTTON_CLICKED, this, this.onSearchButtonClicked), view.addListener(pages.Search.EVENT_MIN_BID_PRICE_CHANGED, this, this.onMinBidPriceChanged), view.addListener(pages.Search.EVENT_MAX_BID_PRICE_CHANGED, this, this.onMaxBidPriceChanged), view.addListener(pages.Search.EVENT_MIN_BUYNOW_PRICE_CHANGED, this, this.onMinBuyNowPriceChanged), view.addListener(pages.Search.EVENT_MAX_BUYNOW_PRICE_CHANGED, this, this.onMaxBuyNowPriceChanged)
}, pages.controllers.SearchController.prototype._onReset = function() {
    var view = this.getView();
    this._viewmodel.resetSearch(), view.setFilters(this._viewmodel), view._minBidPriceRow.reset(), view._maxBidPriceRow.reset(), view._minBuyNowPriceRow.reset(), view._maxBuyNowPriceRow.reset(), gAuthenticationModel.getUser().marketSearchCriteria.reset()
}, pages.controllers.SearchController.prototype._ePlayerNameChange = function _ePlayerNameChange(sender, t) {
    var i = this.getView().getPlayerNameSearch().getSelected(),
        view = this.getView();
    utils.JS.isValid(i) ? this._viewmodel.setPlayerData(i) : this._viewmodel.clearPlayerData(), view.setFilters(this._viewmodel), utils.JS.isValid(i) && (view.setFilterValue(enums.UISearchFilters.NATION, -1), view.setFilterValue(enums.UISearchFilters.LEAGUE, -1), view.setFilterValue(enums.UISearchFilters.CLUB, -1))
}, pages.controllers.SearchController.prototype.onSearchButtonClicked = function() {
    var t = gAuthenticationModel.getUser().marketSearchCriteria;
    t.update(this._viewmodel.searchCriteria), t.maskedDefId = 0, NavManager.requestChildScreen(Screens.getView("SEARCH_RESULTS"), {
        searchCriteria: this._viewmodel.searchCriteria
    })
}, pages.controllers.SearchController.prototype.onSearchCategoryChanged = function(sender, event, data) {
    if (data.id !== this._viewmodel.searchBucket) {
        var view = this.getView();
        data.id !== enums.SearchBucket.PLAYER && (this._viewmodel.clearPlayerData(), this._view.resetPlayerName()), this._viewmodel.setSearchBucket(data.id), view.setFilters(this._viewmodel)
    }
}, pages.controllers.SearchController.prototype._onFilterChange = function(t, i, id, value) {
    this._viewmodel.updateFromFilterChange(i, id, value), this.getView().setFilters(this._viewmodel)
}, pages.controllers.SearchController.prototype.onMinBidPriceChanged = function(sender, t) {
    this._viewmodel.searchCriteria.minBid = t
}, pages.controllers.SearchController.prototype.onMaxBidPriceChanged = function(sender, t) {
    this._viewmodel.searchCriteria.maxBid = t
}, pages.controllers.SearchController.prototype.onMinBuyNowPriceChanged = function(sender, t) {
    this._viewmodel.searchCriteria.minBuy = t
}, pages.controllers.SearchController.prototype.onMaxBuyNowPriceChanged = function(sender, t) {
    this._viewmodel.searchCriteria.maxBuy = t
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.AUCTION, function(t) {
    if (!gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET) && gUserModel.hasTradeAccess() && gSettingsModel.isTradingEnabled())
        if (NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("TRANSFERS_HUB")), 0 === t.length) NavManager.requestChildScreen(Screens.getView("SEARCH"));
        else {
            NavManager.pushScreenOntoStack(Screens.getView("TRANSFERS_HUB"), Screens.getView("SEARCH"));
            var i = new transferobjects.SearchCriteria;
            i.defId = [parseInt(t[0], 10)], NavManager.requestChildScreen(Screens.getView("SEARCH_RESULTS"), {
                searchCriteria: i
            })
        }
    else NavManager.requestRootScreen(Screens.getView("TRANSFERS_HUB"))
}), NamespaceManager.Register("components"), components.SectionHeader = function() {
    this._generate(), this.onAction = new FUTObservable, Object.defineProperty(this, "onAction", {
        writable: !1
    }), this._optionButton.init(), this._optionButton.addTarget(this, function onAction() {
        this.onAction.notify()
    }, enums.Event.TAP)
}, components.SectionHeader.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("header");
        t.classList.add("list-view-header"), this.__text = document.createElement("h2"), this.$_text = $(this.__text), t.appendChild(this.__text), this._optionButton = new views.buttons.DefaultButton, this._optionButton.getRootElement().classList.add("section-header-btn"), this._optionButton.getRootElement().classList.add("mini"), this._optionButton.getRootElement().classList.add("call-to-action"), t.appendChild(this._optionButton.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SectionHeader.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__text = null, this.$_text = null, this._optionButton.destroy(), this._optionButton = null
}, components.SectionHeader.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SectionHeader.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SectionHeader.prototype.destroy = function destroy() {
    this.onAction.dealloc(), this.destroyGeneratedElements()
}, components.SectionHeader.prototype.setButtonText = function setButtonText(text) {
    this._optionButton.setText(text)
}, components.SectionHeader.prototype.hideButton = function hideButton() {
    this._optionButton.hide()
}, components.SectionHeader.prototype.showButton = function showButton() {
    this._optionButton.show()
}, components.SectionHeader.prototype.toggleButton = function toggleButton(t) {
    this._optionButton.setDisplay(t)
}, components.SectionHeader.prototype.toggleButtonEnabled = function toggleButtonEnabled(t) {
    this._optionButton.setInteractionState(t)
}, components.SectionHeader.prototype.setText = function setText(text) {
    this.__text.textContent = text
}, Screens.Register("WATCH_LIST", "WatchList", Screens.APP_SECTION.WATCH_LIST, "Transfer Targets - List View"), pages.WatchList = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.watchlist")), this._generate()
}, utils.JS.inherits(pages.WatchList, pages.ScreenBase), pages.WatchList.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.WatchList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.WatchList.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.WatchList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("viewmodels"), viewmodels.ItemSectionList = function(t) {
    viewmodels.ItemList.call(this, t), this._sections = new FUTHashTable({})
}, utils.JS.inherits(viewmodels.ItemSectionList, viewmodels.ItemList), viewmodels.ItemSectionList.prototype.setSection = function(id, t, i) {
    this._sections.set(id, {
        filter: t,
        priority: i
    })
}, viewmodels.ItemSectionList.prototype.getSectionItems = function(t) {
    return this._sections.has(t) ? this.values().filter(this._sections.get(t).filter) : this.values()
}, viewmodels.ItemSectionList.prototype._organizeItems = function() {
    if (0 !== this.length && 0 !== this._sections.length) {
        var t = [],
            i = [];
        this._sections.forEach(function(i) {
            t[i.priority] = this.values().filter(i.filter)
        }, this), t.forEach(function(t) {
            t.sort(this.sortByType.bind(this)), i = i.concat(t)
        }, this), this.resetCollection(i)
    }
}, viewmodels.WatchSectionList = function(t) {
    viewmodels.ItemSectionList.call(this, t), this.setSection(viewmodels.WatchSectionList.SECTION.ACTIVE, function(item) {
        var t = item.getAuctionData();
        return t.isActiveTrade() && t.isBid()
    }, viewmodels.WatchSectionList.SECTION.ACTIVE), this.setSection(viewmodels.WatchSectionList.SECTION.WATCHED, function(item) {
        var t = item.getAuctionData();
        return t.isActiveTrade() && !t.isBid() && t.watched
    }, viewmodels.WatchSectionList.SECTION.WATCHED), this.setSection(viewmodels.WatchSectionList.SECTION.WON, function(item) {
        var t = item.getAuctionData();
        return item.getAuctionData().isWon() || !t.isValid()
    }, viewmodels.WatchSectionList.SECTION.WON), this.setSection(viewmodels.WatchSectionList.SECTION.EXPIRED, function(item) {
        var t = item.getAuctionData();
        return t.isExpired() || t.isClosedTrade() && !t.isWon()
    }, viewmodels.WatchSectionList.SECTION.EXPIRED), this._organizeItems()
}, utils.JS.inherits(viewmodels.WatchSectionList, viewmodels.ItemSectionList), viewmodels.WatchSectionList.SECTION = {
    ACTIVE: 0,
    WATCHED: 1,
    WON: 2,
    EXPIRED: 3
}, viewmodels.WatchSectionList.prototype.hasMovableWonItems = function() {
    return this.indexOf(this._findMovableWon) > -1
}, viewmodels.WatchSectionList.prototype.getMovableWonItems = function() {
    return this.values().filter(this._findMovableWon)
}, viewmodels.WatchSectionList.prototype.hasExpiredAuctions = function() {
    return this.indexOf(this._findExpired) > -1
}, viewmodels.WatchSectionList.prototype.getExpiredAuctions = function() {
    return this.values().filter(this._findExpired)
}, viewmodels.WatchSectionList.prototype._findMovableWon = function(item) {
    return item.isMovable() && item.getAuctionData().isWon()
}, viewmodels.WatchSectionList.prototype._findExpired = function(item) {
    var t = item.getAuctionData();
    return t.isExpired() || t.isClosedTrade() && !t.isWon()
}, components.EmptySectionMessage = function() {
    components.BaseComponent.call(this), this._generate()
}, utils.JS.inherits(components.EmptySectionMessage, components.BaseComponent), components.EmptySectionMessage.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("layout-article"), t.classList.add("emptySectionMessage");
        var i = document.createElement("span");
        i.classList.add("secondary"), i.classList.add("icon_squad"), i.classList.add("fut_icon"), t.appendChild(i), this.__header = document.createElement("span"), this.$_header = $(this.__header), this.__header.classList.add("secondary"), t.appendChild(this.__header), this.__body = document.createElement("p"), this.$_body = $(this.__body), this.__body.classList.add("secondary"), t.appendChild(this.__body), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.EmptySectionMessage.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__header = null, this.$_header = null, this.__body = null, this.$_body = null
}, components.EmptySectionMessage.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.EmptySectionMessage.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.EmptySectionMessage.prototype.render = function(t, body) {
    this.$_header.text(t), this.$_body.html(body)
}, components.EmptySectionMessage.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, NamespaceManager.Register("views.lists"), views.lists.SectionedItemList = function SectionedItemListView() {
    FUIView.call(this), this._generate(), this._listRows = [], this._footerBtn = null, this._footerCallback = null, this._emptyHeaderMessage = gLocalization.lText("squads.setEmptyMessage.defaultHeader"), this._emptyBodyMessage = gLocalization.lText("squads.setEmptyMessage.defaultBody"), this._emptyMessage = null, this._selectedIndex = -1
}, utils.JS.inherits(views.lists.SectionedItemList, FUIView), views.lists.SectionedItemList.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("list-view"), t.classList.add("sectioned-item-list"), this._header = new components.SectionHeader, t.appendChild(this._header.getRootElement()), this.__list = document.createElement("ul"), this.$_list = $(this.__list), this.__list.classList.add("itemList"), t.appendChild(this.__list), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.lists.SectionedItemList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._header.destroy(), this._header = null, this.__list = null, this.$_list = null
}, views.lists.SectionedItemList.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.lists.SectionedItemList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.lists.SectionedItemList.prototype.init = function init() {
    this.superclass(), this._header.hideButton()
}, views.lists.SectionedItemList.prototype.dealloc = function dealloc() {
    this._footerCallback = null, this._removeEmptyMessage(), this.clearList(), this.removeFooter(), this.superclass()
}, views.lists.SectionedItemList.prototype.clearList = function clearList() {
    this._listRows.forEach(function(t) {
        t.destroy()
    }), this._listRows = []
}, views.lists.SectionedItemList.prototype._showEmptyMessage = function _showEmptyMessage() {
    this._emptyMessage || (this._emptyMessage = new components.EmptySectionMessage), this.getRootElement().appendChild(this._emptyMessage.getRootElement()), this._emptyMessage.render(this._emptyHeaderMessage, this._emptyBodyMessage)
}, views.lists.SectionedItemList.prototype._removeEmptyMessage = function _removeEmptyMessage() {
    this._emptyMessage && (this._emptyMessage.destroy(), this._emptyMessage = null)
}, views.lists.SectionedItemList.prototype.setHeader = function setHeader(title, t, i) {
    this._header.setText(title), this._header.setButtonText(t), utils.JS.isFunction(i) && (this._header.onAction.unobserve(this).observe(this, i), this._header.showButton())
}, views.lists.SectionedItemList.prototype.setFooter = function setFooter(text, t, i, s) {
    this._footerBtn || (this._footerBtn = new views.buttons.ListButton, this._footerBtn.init(), this.getRootElement().appendChild(this._footerBtn.getRootElement())), DOMKit.toggleClass(this._footerBtn.getRootElement(), "coin-btn", i), this._footerBtn.setText(text), this._footerBtn.setSubtext(t), this._footerBtn.displayCurrencyIcon(!0), this._footerCallback && this._footerBtn.removeTarget(this, this._footerCallback, enums.Event.TAP), this._footerCallback = s, this._footerBtn.addTarget(this, this._footerCallback, enums.Event.TAP)
}, views.lists.SectionedItemList.prototype.removeFooter = function removeFooter() {
    this._footerBtn && (this._footerBtn.dealloc(), this._footerBtn = null)
}, views.lists.SectionedItemList.prototype.setEmptyMessage = function setEmptyMessage(t, body) {
    this._emptyHeaderMessage = t, this._emptyBodyMessage = body, utils.JS.isValid(this._emptyMessage) && this._emptyMessage.render(this._emptyHeaderMessage, this._emptyBodyMessage)
}, views.lists.SectionedItemList.prototype.addItems = function addItems(t, i) {
    return t.forEach(function(item) {
        this._listRows.push(this._generateListRow(item, i))
    }, this), this._listRows
}, views.lists.SectionedItemList.prototype.removeItemsById = function removeItemsById(t) {
    t.forEach(function _removeItemById(id) {
        var t = utils.JS.find(this._listRows, function(t) {
            return t.getData().id === id
        });
        t && (t.destroy(), this._listRows.splice(this._listRows.indexOf(t), 1))
    }, this), this.render()
}, views.lists.SectionedItemList.prototype.render = function render() {
    0 === this._listRows.length ? this._showEmptyMessage() : (this._removeEmptyMessage(), this._listRows.forEach(function(t) {
        t.render(), this.__list.appendChild(t.getRootElement())
    }, this))
}, views.lists.SectionedItemList.prototype._generateListRow = function _generateListRow(data, t) {
    var i = new components.ListRowItem;
    return i.setData(data.getItemData()), utils.JS.isFunction(t) && i.setTapCallback(t), i
}, views.lists.SectionedItemList.prototype.toggleHeaderButtonEnabled = function toggleHeaderButtonEnabled(t) {
    this._header.toggleButtonEnabled(t)
}, views.lists.SectionedItemList.prototype.toggleHeaderButton = function toggleHeaderButton(t) {
    this._header.toggleButton(t)
}, views.lists.SectionedItemList.prototype.selectRowByIndex = function selectRowByIndex(index) {
    var selectedIndex = -1;
    index >= 0 && index < this._listRows.length && this._listRows.forEach(function(t) {
        var i = t === this._listRows[index];
        t.setSelected(i), i && (selectedIndex = index)
    }, this), this._selectedIndex = selectedIndex
}, views.lists.SectionedItemList.prototype.selectRowByItemId = function selectRowByItemId(id) {
    var selectedIndex = -1;
    this._listRows.forEach(function(t) {
        var i = t.getData().id === id;
        t.setSelected(i), i && (selectedIndex = this._listRows.indexOf(t))
    }, this), this._selectedIndex = selectedIndex
}, views.lists.SectionedItemList.prototype.getNumOfRows = function getNumOfRows() {
    return this._listRows.length
}, views.lists.SectionedItemList.prototype.getSelectedRow = function getSelectedRow() {
    return this._listRows[this._selectedIndex] || null
}, views.lists.SectionedItemList.prototype.onTimedUpdate = function onTimedUpdate() {
    this._listRows.forEach(function(t) {
        t instanceof components.ListRowItem && t.onTimedUpdate()
    })
}, components.ListNoResults = function() {
    components.BaseComponent.call(this), this._generate()
}, utils.JS.inherits(components.ListNoResults, components.BaseComponent), components.ListNoResults.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("noResultsScreen"), this.__icon = document.createElement("div"), this.$_icon = $(this.__icon), t.appendChild(this.__icon);
        var i = document.createElement("div");
        i.classList.add("layout-article"), i.classList.add("contents"), this.__message = document.createElement("h2"), this.$_message = $(this.__message), this.__message.classList.add("secondary"), i.appendChild(this.__message), this.__description = document.createElement("p"), this.$_description = $(this.__description), this.__description.classList.add("secondary"), i.appendChild(this.__description), this._button = new views.buttons.DefaultButton, this._button.getRootElement().classList.add("call-to-action"), i.appendChild(this._button.getRootElement()), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListNoResults.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__icon = null, this.$_icon = null, this.__message = null, this.$_message = null, this.__description = null, this.$_description = null, this._button.destroy(), this._button = null
}, components.ListNoResults.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListNoResults.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListNoResults.ICON_TYPE = {
    ITEM: "noItems",
    SEARCH: "emptySearch",
    TRANSFER: "noTransfers",
    WATCH: "noWatched"
}, components.ListNoResults.prototype.init = function init() {
    this._button.init(), this._button.setDisplay(!1)
}, components.ListNoResults.prototype.destroy = function destroy() {
    this.clearListeners(), this.destroyGeneratedElements()
}, components.ListNoResults.prototype.setContext = function setContext(context) {
    this.getRoot().addClass(context ? "compare" : "search")
}, components.ListNoResults.prototype.setText = function setText(text) {
    this.$_message.html(text)
}, components.ListNoResults.prototype.setDescription = function setDescription(text) {
    this.$_description.html(text)
}, components.ListNoResults.prototype.setIcon = function setIcon(t) {
    var icon = this.$_icon,
        i = [components.ListNoResults.ICON_TYPE.ITEM, components.ListNoResults.ICON_TYPE.SEARCH, components.ListNoResults.ICON_TYPE.TRANSFER, components.ListNoResults.ICON_TYPE.WATCH].join(" ");
    switch (icon.removeClass(i), t) {
        case components.ListNoResults.ICON_TYPE.ITEM:
        case components.ListNoResults.ICON_TYPE.SEARCH:
        case components.ListNoResults.ICON_TYPE.TRANSFER:
        case components.ListNoResults.ICON_TYPE.WATCH:
            icon.addClass(t);
            break;
        default:
            utils.Debug.Assert(!1, "[components.ListNoResults] Hit default case in method setIcon."), icon.addClass(components.ListNoResults.ICON_TYPE.ITEM)
    }
}, components.ListNoResults.prototype.setupButton = function setupButton(text, t) {
    utils.JS.isString(text) && utils.JS.isFunction(t) && (this._button.addTarget(this, t, enums.Event.TAP), this._button.setText(text), this._button.setDisplay(!0))
}, NamespaceManager.Register("views.items"), views.items.WatchList = function WatchListView() {
    FUIView.call(this), this._sections = [], this._emptyListView = null, this._generate()
}, utils.JS.inherits(views.items.WatchList, FUIView), views.items.WatchList.prototype._generate = function _generate() {
    this._generated || (this.__scrollerDiv = document.createElement("article"), this.$_scrollerDiv = $(this.__scrollerDiv), this.__scrollerDiv.setAttribute("id", "scrollWrapper"), this.__scrollerDiv.classList.add("nativeScrolling"), this.__scrollerDiv.classList.add("panel-list"), this.__scrollerDiv.classList.add("WatchList"), this.__root = this.__scrollerDiv, this.$_root = $(this.$_scrollerDiv), this._generated = !0)
}, views.items.WatchList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__scrollerDiv = null, this.$_scrollerDiv = null
}, views.items.WatchList.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.WatchList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.WatchList.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._emptyListView) && (this._emptyListView.destroy(), this._emptyListView = null), this.clearSections(), this.superclass()
}, views.items.WatchList.prototype.clearSections = function clearSections() {
    this._sections.forEach(function(t) {
        t.destroy()
    }), this._sections = []
}, views.items.WatchList.prototype.renderSection = function renderSection(t, i, s) {
    var o = this._sections[i];
    return o ? o.clearList() : ((o = new views.lists.SectionedItemList).init(), this._sections[i] = o), o.addItems(t, s), o.render(), this.getRoot().empty().append(this._sections.map(function(t) {
        return t.getRoot()
    })), o
}, views.items.WatchList.prototype.getSection = function getSection(t) {
    return this._sections[t] || null
}, views.items.WatchList.prototype.renderEmptyView = function renderEmptyView(message, t, i) {
    this.clearSections(), this._emptyListView = new components.ListNoResults, this._emptyListView.init(), this._emptyListView.setText(message), this._emptyListView.setIcon(components.ListNoResults.ICON_TYPE.TRANSFER), utils.JS.isFunction(i) && this._emptyListView.setupButton(t, i), this.getRoot().append(this._emptyListView.getRoot())
}, views.items.WatchList.prototype.onTimedUpdate = function onTimedUpdate() {
    this._sections.forEach(function(t) {
        t.onTimedUpdate()
    })
}, views.items.WatchList.prototype.selectListRow = function selectListRow(id) {
    this._sections.forEach(function(t) {
        t.selectRowByItemId(id)
    })
}, views.items.WatchList.prototype.removeItemsById = function removeItemsById(t) {
    this._sections.forEach(function(i) {
        i.removeItemsById(t)
    })
}, NamespaceManager.Register("controllers.items"), controllers.items.WatchList = function WatchListViewController() {
    FUIViewController.call(this), this._viewmodel = null, this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1
    }), this.onItemSelected = new FUTObservable, Object.defineProperty(this, "onItemSelected", {
        writable: !1
    })
}, utils.JS.inherits(controllers.items.WatchList, FUIViewController), controllers.items.WatchList.prototype.init = function init() {
    this.initialized || (this.superclass(), this._viewmodel = new viewmodels.WatchSectionList([]), this._viewmodel.dataUpdated.observe(this, this._eViewmodelDataUpdated), TelemetryManager.trackPage(TelemetryManager.Sections.AUCTIONS, "Transfer Targets"), getDefaultDispatcher().addObserver(enums.AppNotification.ITEM_UNWATCH, this, this._onItemUnwatched), gUserModel.addListener(models.UserModel.EVENT_AUCTION_CLOSED, this, this._onAuctionClosed))
}, controllers.items.WatchList.prototype.dealloc = function dealloc() {
    getDefaultDispatcher().removeObserver(enums.AppNotification.ITEM_UNWATCH, this), gUserModel.removeListener(models.UserModel.EVENT_AUCTION_CLOSED, this, this._onAuctionClosed), this._viewmodel.stopAuctionUpdates(), this._viewmodel.dataUpdated.unobserve(this), this.onDataChange.dealloc(), this.onItemSelected.dealloc(), this.superclass(), this._viewmodel = null
}, controllers.items.WatchList.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.WatchList
}, controllers.items.WatchList.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._requestItems()
}, controllers.items.WatchList.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this._viewmodel && this._viewmodel.stopAuctionUpdates()
}, controllers.items.WatchList.prototype.getIterator = function getIterator() {
    return this._viewmodel
}, controllers.items.WatchList.prototype._requestItems = function _requestItems() {
    this._viewmodel.stopAuctionUpdates(), this.getView().setInteractionState(!1), repositories.Item.getWatchedItems().observe(this, function _onRequestItemsComplete(t, data) {
        if (t.unobserve(this), data.success) {
            var i = this._viewmodel.getIndex();
            this._viewmodel.resetCollection([]), this._viewmodel.addArray(data.items), this._viewmodel.setIndex(Math.min(i, this._viewmodel.getLastIndex())), this.onDataChange.notify({
                items: this._viewmodel.values()
            }), this._renderView(), this._viewmodel.values().length > 0 && !isPhone() && this.getView().selectListRow(this._viewmodel.current().id), this.getView().setInteractionState(!0)
        } else NetworkErrorManager.handle(data.error, !1, function() {
            services.Notification.queue([gLocalization.lText("watchlist.loaderror"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen()
        });
        this._viewmodel.hasExpiredAuctions() && gUserModel.updateCredits(), this._viewmodel.startAuctionUpdates()
    })
}, controllers.items.WatchList.prototype.removeItemsById = function removeItemsById(t) {
    if (this._viewmodel.length > 0) {
        var view = this.getView();
        view.removeItemsById(t), view.selectListRow(this._viewmodel.current().id), this._updateSectionHeaders()
    } else this._renderView()
}, controllers.items.WatchList.prototype._updateSectionHeaders = function _updateSectionHeaders() {
    var view = this.getView(),
        t = view.getSection(viewmodels.WatchSectionList.SECTION.WON),
        i = view.getSection(viewmodels.WatchSectionList.SECTION.EXPIRED);
    t && t.setHeader(gLocalization.lText("watchlist.dock.categories.won"), gLocalization.lText("infopanel.label.alltoclub"), this._viewmodel.getMovableWonItems().length > 0 ? this._onSendToClub.bind(this) : null), i && i.setHeader(gLocalization.lText("watchlist.dock.categories.expired"), gLocalization.lText("button.label.clearexpired"), this._viewmodel.getSectionItems(viewmodels.WatchSectionList.SECTION.EXPIRED).length > 0 ? this._onUnwatchExpired.bind(this) : null)
}, controllers.items.WatchList.prototype._renderView = function _renderView() {
    function _rowTapCallback(item) {
        var index = this._viewmodel.indexOf(function(a) {
            return a.id === item.id
        });
        if (this._viewmodel.setIndex(index), isPhone()) {
            var t = item.getAuctionData();
            if (!gSettingsModel.isTradingEnabled() && (t.isActiveTrade() || t.isClosedTrade())) return void utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.TRADING_DISABLED);
            NavManager.requestChildScreen(Screens.getView("ITEM_DETAILS"), {
                iterator: this._viewmodel
            })
        } else view.selectListRow(item.id), this.onItemSelected.notify(index)
    }
    var view = this.getView();
    view.clearSections();
    var t = this._viewmodel.getSectionItems(viewmodels.WatchSectionList.SECTION.ACTIVE),
        i = view.renderSection(t, viewmodels.WatchSectionList.SECTION.ACTIVE, _rowTapCallback.bind(this));
    i.setHeader(gLocalization.lText("watchlist.dock.categories.active"), "", null), i.setEmptyMessage(gLocalization.lText("watchlist.availabletransfers.empty.header"), gLocalization.lText("watchlist.availabletransfers.empty.body"));
    var s = this._viewmodel.getSectionItems(viewmodels.WatchSectionList.SECTION.WATCHED),
        o = view.renderSection(s, viewmodels.WatchSectionList.SECTION.WATCHED, _rowTapCallback.bind(this));
    o.setHeader(gLocalization.lText("watchlist.dock.categories.watched"), "", null), o.setEmptyMessage(gLocalization.lText("watchlist.watched.empty.header"), gLocalization.lText("watchlist.watched.empty.body"));
    var l = this._viewmodel.getSectionItems(viewmodels.WatchSectionList.SECTION.WON);
    view.renderSection(l, viewmodels.WatchSectionList.SECTION.WON, _rowTapCallback.bind(this)).setEmptyMessage(gLocalization.lText("watchlist.won.empty.header"), gLocalization.lText("watchlist.won.empty.body"));
    var u = this._viewmodel.getSectionItems(viewmodels.WatchSectionList.SECTION.EXPIRED);
    view.renderSection(u, viewmodels.WatchSectionList.SECTION.EXPIRED, _rowTapCallback.bind(this)).setEmptyMessage(gLocalization.lText("watchlist.expired.empty.header"), gLocalization.lText("watchlist.expired.empty.body")), this._updateSectionHeaders()
}, controllers.items.WatchList.prototype.onGoToTransferMarketButtonClicked = function onGoToTransferMarketButtonClicked() {
    NavManager.getCurrentScreen().setInteractionsEnabled(!1), NavManager.clearScreenStackToId(Screens.getView("TRANSFERS_HUB")), NavManager.requestChildScreen(Screens.getView("SEARCH"))
}, controllers.items.WatchList.prototype._onSendToClub = function _onSendToClub(sender) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.AUCTIONS, TelemetryManager.Categories.BUTTON_PRESS, "Transfer Targets - Send All To Club");
    var t = this._viewmodel.getMovableWonItems();
    t.length > 0 && (this.getView().setInteractionState(!1), services.Item.move(t, enums.FUTItemPile.CLUB).observe(this, this._onMoveToClubComplete))
}, controllers.items.WatchList.prototype._onUnwatchExpired = function _onUnwatchExpired(sender) {
    TelemetryManager.trackEvent(TelemetryManager.Sections.AUCTIONS, TelemetryManager.Categories.BUTTON_PRESS, "Transfer Targets - Clear Expired");
    var t = this._viewmodel.getExpiredAuctions();
    t.length > 0 && (this.getView().setInteractionState(!1), services.Item.untarget(t).observe(this, this._onUnwatchExpiredComplete))
}, controllers.items.WatchList.prototype._onUnwatchExpiredComplete = function _onUnwatchExpiredComplete(t, response) {
    t.unobserve(this), response.success || NavManager.requestGoBackScreen()
}, controllers.items.WatchList.prototype._onMoveToClubComplete = function _onMoveToClubComplete(t, response) {
    if (t.unobserve(this), response.success) {
        var i = response.itemIds.length,
            s = i > 1 ? gLocalization.lPrint("notification.item.allToClub", [i]) : gLocalization.lText("notification.item.oneToClub");
        this._requestItems(), services.Notification.queue([s, enums.UINotificationType.NEUTRAL])
    } else services.Notification.queue([gLocalization.lText("notification.item.moveFailed"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen()
}, controllers.items.WatchList.prototype._onAuctionClosed = function _onAuctionClosed(sender, data) {
    this._requestItems()
}, controllers.items.WatchList.prototype._onItemUnwatched = function _onItemUnwatched(t, sender, data) {
    this._requestItems()
}, controllers.items.WatchList.prototype._eViewmodelDataUpdated = function _eViewmodelDataUpdated(t) {
    this.getView().onTimedUpdate()
}, NamespaceManager.Register("views"), views.Table = function() {
    FUIView.call(this), this._rowGroups = [], this._generate()
}, utils.JS.inherits(views.Table, FUIView), views.Table.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("panel-table"), t.classList.add("table"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.Table.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.Table.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.Table.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.Table.CLASS = {
    TABLE: "table",
    TABLE_ROW: "table-row",
    TABLE_HEAD: "table-header-group",
    TABLE_BODY: "table-row-group",
    TABLE_DATA: "table-cell",
    TABLE_FOOTER: "table-footer-group"
}, views.Table.prototype.dealloc = function dealloc() {
    this.superclass(), this._rowGroups = []
}, views.Table.prototype.addRowGroup = function(headers) {
    if (utils.JS.isValid(headers)) {
        var t = $(document.createElement("ul")).addClass("secondary").addClass(views.Table.CLASS.TABLE_HEAD);
        this.getRoot().append(t), headers.forEach(function(text, i) {
            t.append($(document.createElement("li")).text(text).addClass(views.Table.CLASS.TABLE_DATA))
        })
    }
    var i = $(document.createElement("ul")).addClass(views.Table.CLASS.TABLE_BODY);
    return this.getRoot().append(i), this._rowGroups.push(i), this._rowGroups.length
}, views.Table.prototype.addRowData = function(data, t, rowIndex) {
    0 === this._rowGroups.length && this.addRowGroup();
    var body = utils.JS.isValid(rowIndex) ? this._rowGroups[rowIndex] : this._rowGroups[this._rowGroups.length - 1],
        i = $(document.createElement("li")).addClass(views.Table.CLASS.TABLE_ROW);
    body.append(i);
    data.forEach(function(data, s) {
        var o = $(document.createElement("div")).addClass(views.Table.CLASS.TABLE_DATA);
        utils.JS.isString(data) ? (o.text(data), i.append(o)) : data instanceof FUIView ? (o.append(data.getRoot()), this.addSubview(data, i)) : (o.append(data), i.append(o)), utils.JS.isValid(t) && s < t.length && o.addClass(t[s])
    })
}, NamespaceManager.Register("components"), views.ProgressBar = function ProgressBarView() {
    FUIView.call(this), this._progress = 0, this._generate()
}, utils.JS.inherits(views.ProgressBar, FUIView), views.ProgressBar.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("progress-bar"), this.__progressText = document.createElement("span"), this.$_progressText = $(this.__progressText), this.__progressText.classList.add("progressText"), t.appendChild(this.__progressText), this.__bar = document.createElement("div"), this.$_bar = $(this.__bar), this.__bar.classList.add("bar"), this.__bg = document.createElement("div"), this.$_bg = $(this.__bg), this.__bg.classList.add("bg"), this.__fill = document.createElement("div"), this.$_fill = $(this.__fill), this.__fill.classList.add("fill"), this.__bg.appendChild(this.__fill), this.__bar.appendChild(this.__bg), t.appendChild(this.__bar), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.ProgressBar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__progressText = null, this.$_progressText = null, this.__bar = null, this.$_bar = null, this.__bg = null, this.$_bg = null, this.__fill = null, this.$_fill = null
}, views.ProgressBar.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.ProgressBar.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.ProgressBar.CLASSES = {
    SHOW_PROGRESS: "show-progress"
}, views.ProgressBar.prototype.setProgress = function setProgress(value) {
    this._progress = value
}, views.ProgressBar.prototype.setProgressText = function setProgressText(text) {
    this.__progressText.textContent = text
}, views.ProgressBar.prototype.render = function render() {
    this.updateProgress()
}, views.ProgressBar.prototype.updateProgress = function updateProgress(value) {
    utils.JS.isNumber(value) && this.setProgress(value), this.__fill.style.width = this._progress + "%", this.toggleClass(views.ProgressBar.CLASSES.SHOW_PROGRESS, 0 !== this._progress)
}, NamespaceManager.Register("views.lists"), views.lists.ProgressListItem = function ProgressListItemView() {
    views.ProgressBar.call(this), this.value = "", this.title = "", this._generate()
}, utils.JS.inherits(views.lists.ProgressListItem, views.ProgressBar), views.lists.ProgressListItem.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("li");
        t.classList.add("mini"), t.classList.add("progress-bar"), t.classList.add("layout-progress-list-item");
        var i = document.createElement("div");
        i.classList.add("bar-container"), this.__title = document.createElement("span"), this.$_title = $(this.__title), this.__title.classList.add("secondary"), this.__title.classList.add("title"), i.appendChild(this.__title), this.__bar = document.createElement("div"), this.$_bar = $(this.__bar), this.__bar.classList.add("bar"), this.__bg = document.createElement("div"), this.$_bg = $(this.__bg), this.__bg.classList.add("bg"), this.__fill = document.createElement("div"), this.$_fill = $(this.__fill), this.__fill.classList.add("fill"), this.__bg.appendChild(this.__fill), this.__bar.appendChild(this.__bg), i.appendChild(this.__bar), t.appendChild(i), this.__value = document.createElement("span"), this.$_value = $(this.__value), this.__value.classList.add("value"), t.appendChild(this.__value), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.lists.ProgressListItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__bar = null, this.$_bar = null, this.__bg = null, this.$_bg = null, this.__fill = null, this.$_fill = null, this.__value = null, this.$_value = null
}, views.lists.ProgressListItem.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.lists.ProgressListItem.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.lists.ProgressListItem.prototype.setProgress = function setProgress(value) {
    this.superclass(value);
    var t = null;
    t = value >= 75 ? enums.UIFeedbackState.HIGH : value >= 25 ? enums.UIFeedbackState.MEDIUM : enums.UIFeedbackState.LOW, this.addClass(t)
}, views.lists.ProgressListItem.prototype.render = function render() {
    this.superclass(), this.__value.textContent = this.value, this.__title.textContent = this.title
}, NamespaceManager.Register("interfaces"), interfaces.ListDataComponent = function() {};
interfaces.ListDataComponent.prototype.render = function(data) {}, interfaces.ListDataComponent.prototype.update = function(data) {}, NamespaceManager.Register("interfaces"), interfaces.ListRow = function() {}, interfaces.ListRow.prototype.setData = function(data) {}, interfaces.ListRow.prototype.getData = function() {}, interfaces.ListRow.prototype.render = function() {}, interfaces.ListRow.prototype.setDataComponent = function(t) {}, interfaces.ListRow.prototype.setAction = function(style, t) {}, interfaces.ListRow.prototype.setTapCallback = function(t) {}, components.ListDataPlaystyle = function() {
    components.BaseComponent.call(this), this._generate()
}, utils.JS.inherits(components.ListDataPlaystyle, components.BaseComponent), components.ListDataPlaystyle.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("secondary"), t.classList.add("list-data-playstyle"), t.classList.add("styleView");
        var i = document.createElement("ul"),
            s = document.createElement("li");
        this.__labelPace = document.createElement("span"), this.$_labelPace = $(this.__labelPace), this.__labelPace.classList.add("Pace"), this.__labelPace.classList.add("statLabel"), s.appendChild(this.__labelPace), this.__chevronSet1 = document.createElement("div"), this.$_chevronSet1 = $(this.__chevronSet1), this.__chevronSet1.classList.add("chevrons");
        var o = document.createElement("div");
        o.classList.add("chevron1"), o.classList.add("chevron"), this.__chevronSet1.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("chevron2"), l.classList.add("chevron"), this.__chevronSet1.appendChild(l);
        var u = document.createElement("div");
        u.classList.add("chevron3"), u.classList.add("chevron"), this.__chevronSet1.appendChild(u), s.appendChild(this.__chevronSet1), i.appendChild(s);
        var h = document.createElement("li");
        this.__labelShooting = document.createElement("span"), this.$_labelShooting = $(this.__labelShooting), this.__labelShooting.classList.add("Shooting"), this.__labelShooting.classList.add("statLabel"), h.appendChild(this.__labelShooting), this.__chevronSet2 = document.createElement("div"), this.$_chevronSet2 = $(this.__chevronSet2), this.__chevronSet2.classList.add("chevrons");
        var p = document.createElement("div");
        p.classList.add("chevron1"), p.classList.add("chevron"), this.__chevronSet2.appendChild(p);
        var m = document.createElement("div");
        m.classList.add("chevron2"), m.classList.add("chevron"), this.__chevronSet2.appendChild(m);
        var _ = document.createElement("div");
        _.classList.add("chevron3"), _.classList.add("chevron"), this.__chevronSet2.appendChild(_), h.appendChild(this.__chevronSet2), i.appendChild(h);
        var g = document.createElement("li");
        this.__labelPassing = document.createElement("span"), this.$_labelPassing = $(this.__labelPassing), this.__labelPassing.classList.add("Passing"), this.__labelPassing.classList.add("statLabel"), g.appendChild(this.__labelPassing), this.__chevronSet3 = document.createElement("div"), this.$_chevronSet3 = $(this.__chevronSet3), this.__chevronSet3.classList.add("chevrons");
        var S = document.createElement("div");
        S.classList.add("chevron1"), S.classList.add("chevron"), this.__chevronSet3.appendChild(S);
        var v = document.createElement("div");
        v.classList.add("chevron2"), v.classList.add("chevron"), this.__chevronSet3.appendChild(v);
        var T = document.createElement("div");
        T.classList.add("chevron3"), T.classList.add("chevron"), this.__chevronSet3.appendChild(T), g.appendChild(this.__chevronSet3), i.appendChild(g);
        var C = document.createElement("li");
        this.__labelDribbling = document.createElement("span"), this.$_labelDribbling = $(this.__labelDribbling), this.__labelDribbling.classList.add("Dibbling"), this.__labelDribbling.classList.add("statLabel"), C.appendChild(this.__labelDribbling), this.__chevronSet4 = document.createElement("div"), this.$_chevronSet4 = $(this.__chevronSet4), this.__chevronSet4.classList.add("chevrons");
        var I = document.createElement("div");
        I.classList.add("chevron1"), I.classList.add("chevron"), this.__chevronSet4.appendChild(I);
        var L = document.createElement("div");
        L.classList.add("chevron2"), L.classList.add("chevron"), this.__chevronSet4.appendChild(L);
        var A = document.createElement("div");
        A.classList.add("chevron3"), A.classList.add("chevron"), this.__chevronSet4.appendChild(A), C.appendChild(this.__chevronSet4), i.appendChild(C);
        var R = document.createElement("li");
        this.__labelDefending = document.createElement("span"), this.$_labelDefending = $(this.__labelDefending), this.__labelDefending.classList.add("Defending"), this.__labelDefending.classList.add("statLabel"), R.appendChild(this.__labelDefending), this.__chevronSet5 = document.createElement("div"), this.$_chevronSet5 = $(this.__chevronSet5), this.__chevronSet5.classList.add("chevrons");
        var D = document.createElement("div");
        D.classList.add("chevron1"), D.classList.add("chevron"), this.__chevronSet5.appendChild(D);
        var P = document.createElement("div");
        P.classList.add("chevron2"), P.classList.add("chevron"), this.__chevronSet5.appendChild(P);
        var N = document.createElement("div");
        N.classList.add("chevron3"), N.classList.add("chevron"), this.__chevronSet5.appendChild(N), R.appendChild(this.__chevronSet5), i.appendChild(R);
        var O = document.createElement("li");
        this.__labelHeader = document.createElement("span"), this.$_labelHeader = $(this.__labelHeader), this.__labelHeader.classList.add("Header"), this.__labelHeader.classList.add("statLabel"), O.appendChild(this.__labelHeader), this.__chevronSet6 = document.createElement("div"), this.$_chevronSet6 = $(this.__chevronSet6), this.__chevronSet6.classList.add("chevrons");
        var B = document.createElement("div");
        B.classList.add("chevron1"), B.classList.add("chevron"), this.__chevronSet6.appendChild(B);
        var U = document.createElement("div");
        U.classList.add("chevron2"), U.classList.add("chevron"), this.__chevronSet6.appendChild(U);
        var M = document.createElement("div");
        M.classList.add("chevron3"), M.classList.add("chevron"), this.__chevronSet6.appendChild(M), O.appendChild(this.__chevronSet6), i.appendChild(O), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataPlaystyle.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__labelPace = null, this.$_labelPace = null, this.__chevronSet1 = null, this.$_chevronSet1 = null, this.__labelShooting = null, this.$_labelShooting = null, this.__chevronSet2 = null, this.$_chevronSet2 = null, this.__labelPassing = null, this.$_labelPassing = null, this.__chevronSet3 = null, this.$_chevronSet3 = null, this.__labelDribbling = null, this.$_labelDribbling = null, this.__chevronSet4 = null, this.$_chevronSet4 = null, this.__labelDefending = null, this.$_labelDefending = null, this.__chevronSet5 = null, this.$_chevronSet5 = null, this.__labelHeader = null, this.$_labelHeader = null, this.__chevronSet6 = null, this.$_chevronSet6 = null
}, components.ListDataPlaystyle.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataPlaystyle.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataPlaystyle.prototype.render = function(item) {
    var t = item.isPlayer() ? item.playStyle : item.subtype,
        i = item.isPlayer() ? item.isGK() : item.isGKStyleModifier(),
        s = repositories.PlayStyle.getPlayStyleBonusById(t, i);
    this.applyChevrons(s), i ? (this.$_labelPace.html(gLocalization.lText("cards.cardfront.divingAbbr")), this.$_labelHeader.html(gLocalization.lText("cards.cardfront.positionAbbr")), this.$_labelDribbling.html(gLocalization.lText("cards.cardfront.reflexAbbr")), this.$_labelShooting.html(gLocalization.lText("cards.cardfront.handlingAbbr")), this.$_labelDefending.html(gLocalization.lText("cards.cardfront.speedAbbr")), this.$_labelPassing.html(gLocalization.lText("cards.cardfront.kickAbbr"))) : (this.$_labelPace.html(gLocalization.lText("cards.cardfront.paceAbbr")), this.$_labelHeader.html(gLocalization.lText("cards.cardfront.headingAbbr")), this.$_labelDribbling.html(gLocalization.lText("cards.cardfront.dribblingAbbr")), this.$_labelShooting.html(gLocalization.lText("cards.cardfront.shootingAbbr")), this.$_labelDefending.html(gLocalization.lText("cards.cardfront.defendingAbbr")), this.$_labelPassing.html(gLocalization.lText("cards.cardfront.passingAbbr")))
}, components.ListDataPlaystyle.prototype.update = function(item) {}, components.ListDataPlaystyle.prototype.applyChevrons = function(t) {
    t.slice(0, 6).forEach(function applyChevrons(t, i) {
        DOMKit.HTMLCollectionToArray(this["__chevronSet" + (i + 1)].children).forEach(function(i, s) {
            DOMKit.toggleClass(i, "chemBoost", s + 1 <= t)
        })
    }, this)
}, components.ListDataPlayerStats = function() {
    components.BaseComponent.call(this), this.slotData = null, this.comparisonData = null, this._zoneClasses = [{
        zone: enums.PlayerZone.ATTACKERS,
        zoneClass: "zone-att"
    }, {
        zone: enums.PlayerZone.DEFENDERS,
        zoneClass: "zone-def"
    }, {
        zone: enums.PlayerZone.MIDFIELDERS,
        zoneClass: "zone-mid"
    }, {
        zone: enums.PlayerZone.GOALKEEPERS,
        zoneClass: "zone-gk"
    }], this._generate()
}, utils.JS.inherits(components.ListDataPlayerStats, components.BaseComponent), components.ListDataPlayerStats.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("secondary"), t.classList.add("player-stats-data-component");
        var i = document.createElement("ul"),
            s = document.createElement("li"),
            o = document.createElement("span");
        o.classList.add("label"), s.appendChild(o);
        var l = document.createElement("span");
        l.classList.add("value"), s.appendChild(l), i.appendChild(s);
        var u = document.createElement("li"),
            h = document.createElement("span");
        h.classList.add("label"), u.appendChild(h);
        var p = document.createElement("span");
        p.classList.add("value"), u.appendChild(p), i.appendChild(u);
        var m = document.createElement("li"),
            _ = document.createElement("span");
        _.classList.add("label"), m.appendChild(_);
        var g = document.createElement("span");
        g.classList.add("value"), m.appendChild(g), i.appendChild(m);
        var S = document.createElement("li"),
            v = document.createElement("span");
        v.classList.add("label"), S.appendChild(v);
        var T = document.createElement("span");
        T.classList.add("value"), S.appendChild(T), i.appendChild(S);
        var C = document.createElement("li"),
            I = document.createElement("span");
        I.classList.add("label"), C.appendChild(I);
        var L = document.createElement("span");
        L.classList.add("value"), C.appendChild(L), i.appendChild(C);
        var A = document.createElement("li"),
            R = document.createElement("span");
        R.classList.add("label"), A.appendChild(R);
        var D = document.createElement("span");
        D.classList.add("value"), A.appendChild(D), i.appendChild(A), t.appendChild(i), this.__slotPosition = document.createElement("span"), this.$_slotPosition = $(this.__slotPosition), this.__slotPosition.classList.add("slot-position"), t.appendChild(this.__slotPosition), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataPlayerStats.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__slotPosition = null, this.$_slotPosition = null
}, components.ListDataPlayerStats.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataPlayerStats.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataPlayerStats.prototype.setSlotData = function(data) {
    this.slotData = data
}, components.ListDataPlayerStats.prototype.setComparisonData = function(data) {
    this.comparisonData = data
}, components.ListDataPlayerStats.prototype.render = function(item) {
    function limitToMax(t) {
        return t > 99 ? 99 : t
    }
    item.getStaticData();
    var t = item.getAttributes(),
        i = this.getRoot().find("li"),
        labels = this.getRoot().find(".label"),
        values = this.getRoot().find(".value"),
        s = item.isGK() ? enums.Localization.STATS_LABELS_GK : enums.Localization.STATS_LABELS_PLAYER,
        o = 0;
    for (o = 0; o < t.length; o++) item.isValid() ? (labels.get(o).innerHTML = gLocalization.lText(s[o]), values.get(o).innerHTML = t[o]) : (labels.get(o).innerHTML = "", values.get(o).innerHTML = "");
    if (labels.removeClass("statIncrease statDecrease"), values.removeClass("statIncrease statDecrease"), utils.JS.isValid(this.comparisonData) && this.comparisonData.isValid() && item.compareType(this.comparisonData)) {
        var l, u, h = t.slice(),
            p = this.comparisonData.getStaticData(),
            m = "",
            _ = this.comparisonData.getAttributes();
        if (this.comparisonData.isPlayer() && item.isPlayer() && this.comparisonData.isGK() === item.isGK())
            for (o = 0; o < t.length; o++) t[o] !== _[o] && (m = t[o] > _[o] ? "statIncrease" : "statDecrease", labels.eq(o).addClass(m), values.eq(o).addClass(m));
        else if (this.comparisonData.isPlayerTraining() || this.comparisonData.isGKTraining()) {
            if (item.hasTraining()) {
                var g = item.getAppliedTrainingItem(),
                    S = g.getStaticData();
                if (l = S.amount, u = S.trainedAttribute, g.isAllAttributeTraining())
                    for (o = 0; o < t.length; o++) h[o] -= l;
                else h[u] -= l
            }
            if (l = p.amount, u = p.trainedAttribute, this.comparisonData.isAllAttributeTraining())
                for (o = 0; o < t.length; o++) h[o] = limitToMax(h[o] + l);
            else h[u] = limitToMax(h[u] + l);
            for (o = 0; o < t.length; o++) m = h[o] > t[o] ? "statIncrease" : h[o] < t[o] ? "statDecrease" : "", labels.eq(o).addClass(m), values.eq(o).addClass(m), values.get(o).innerHTML = h[o]
        }
    }
    if (item.hasTraining()) {
        var v;
        for (v = item.getBoostLevel() === enums.ItemRatingTier.GOLD ? components.ItemFUTBase.QUALITY.GOLD : item.getBoostLevel() === enums.ItemRatingTier.SILVER ? components.ItemFUTBase.QUALITY.SILVER : components.ItemFUTBase.QUALITY.BRONZE, o = 0; o < t.length; ++o) item.isAttributeBoosted(o) && i.eq(o).addClass(v)
    }
    if (utils.JS.isValid(this.slotData) && utils.JS.isValid(this.slotData.getUniquePosition())) {
        var T = this.slotData.getGeneralPosition();
        utils.JS.isValid(T) && (this.$_slotPosition.text(utils.FUTLocalization.getLocalizedPositionStringById(T)), this.$_slotPosition.addClass(this.getZoneClass(this.slotData.getGeneralPosition())))
    }
}, components.ListDataPlayerStats.prototype.update = function(item) {}, components.ListDataPlayerStats.prototype.getZoneClass = function(t) {
    var i = enums.SquadPositionZones[t],
        s = 0;
    for (s = 0; s < this._zoneClasses.length; s++)
        if (this._zoneClasses[s].zone === i) return this._zoneClasses[s].zoneClass;
    return ""
}, components.ListDataString = function() {
    this.string = "", this._generate()
}, components.ListDataString.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("dataString"), this.__str = document.createElement("span"), this.$_str = $(this.__str), this.__str.classList.add("subtype"), t.appendChild(this.__str), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataString.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__str = null, this.$_str = null
}, components.ListDataString.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataString.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataString.prototype.render = function() {
    this.$_str.text(this.string)
}, components.ListDataString.prototype.update = function() {}, components.ListDataString.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.ListDataString.prototype.setString = function(t) {
    this.string = t
}, components.ListDataString.prototype.getString = function() {
    return this.string
}, NamespaceManager.Register("components"), components.ListDataContracts = function() {
    this._comparisonData = null, this._generate()
}, components.ListDataContracts.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("secondary"), t.classList.add("contracts-data-component"), this.__label = document.createElement("span"), this.$_label = $(this.__label), t.appendChild(this.__label), this.__delta = document.createElement("span"), this.$_delta = $(this.__delta), this.__delta.classList.add("statIncrease"), t.appendChild(this.__delta), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataContracts.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__label = null, this.$_label = null, this.__delta = null, this.$_delta = null
}, components.ListDataContracts.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataContracts.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataContracts.prototype.init = function() {}, components.ListDataContracts.prototype.destroy = function() {
    this._comparisonData = null, this.destroyGeneratedElements()
}, components.ListDataContracts.prototype.render = function(item) {
    if (this.$_label.text(gLocalization.lPrint("listdata.contracts", [item.contract])), this._comparisonData && this._comparisonData.isContract()) {
        var delta, t = this._comparisonData.getStaticData();
        delta = item.isBronzeRating() ? t.bronzeBoost : item.isSilverRating() ? t.silverBoost : t.goldBoost, this.$_delta.text(" +" + delta)
    }
}, components.ListDataContracts.prototype.setComparisonData = function(data) {
    this._comparisonData = data
}, components.ListDataContracts.prototype.update = function(item) {}, NamespaceManager.Register("components"), components.ListDataFitness = function() {
    this._comparisonData = null, this._generate()
}, components.ListDataFitness.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("secondary"), this.__label = document.createElement("span"), this.$_label = $(this.__label), t.appendChild(this.__label), this.__delta = document.createElement("span"), this.$_delta = $(this.__delta), this.__delta.classList.add("statIncrease"), t.appendChild(this.__delta), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataFitness.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__label = null, this.$_label = null, this.__delta = null, this.$_delta = null
}, components.ListDataFitness.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataFitness.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataFitness.prototype.init = function() {}, components.ListDataFitness.prototype.destroy = function() {
    this._comparisonData = null, this.destroyGeneratedElements()
}, components.ListDataFitness.prototype.render = function(item) {
    if (this.$_label.text(gLocalization.lPrint("listdata.fitness", [item.fitness])), utils.JS.isValid(this._comparisonData) && this._comparisonData.isFitness()) {
        var t = this._comparisonData.getStaticData(),
            delta = t.amount + item.fitness >= 99 ? 99 - item.fitness : t.amount;
        this.$_delta.text(" +" + delta)
    }
}, components.ListDataFitness.prototype.setComparisonData = function(data) {
    this._comparisonData = data
}, components.ListDataFitness.prototype.update = function(item) {}, NamespaceManager.Register("components"), components.ListDataPlayerPosition = function() {
    this._comparisonData = null, this._generate()
}, components.ListDataPlayerPosition.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("secondary"), this.__label = document.createElement("span"), this.$_label = $(this.__label), t.appendChild(this.__label), this.__delta = document.createElement("span"), this.$_delta = $(this.__delta), this.__delta.classList.add("statIncrease"), t.appendChild(this.__delta), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataPlayerPosition.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__label = null, this.$_label = null, this.__delta = null, this.$_delta = null
}, components.ListDataPlayerPosition.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataPlayerPosition.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataPlayerPosition.prototype.init = function() {}, components.ListDataPlayerPosition.prototype.destroy = function() {
    this._comparisonData = null, this.destroyGeneratedElements()
}, components.ListDataPlayerPosition.prototype.render = function(item) {
    var t = gLocalization.lText("extendedPlayerInfo.positions.position" + item.preferredPosition);
    if (this.__label.textContent = gLocalization.lPrint("listdata.change", [t]), utils.JS.isValid(this._comparisonData) && this._comparisonData.isPlayerPositionModifier()) {
        var i = this._comparisonData.getStaticData(),
            delta = utils.FUTLocalization.getLocalizedPositionStringByName(i.trainPosTo);
        this.__delta.textContent = " " + delta
    }
}, components.ListDataPlayerPosition.prototype.setComparisonData = function(data) {
    this._comparisonData = data
}, components.ListDataPlayerPosition.prototype.update = function(item) {}, NamespaceManager.Register("components"), components.ListDataHealing = function() {
    this._comparisonData = null, this._generate()
}, components.ListDataHealing.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("secondary"), this.__label = document.createElement("span"), this.$_label = $(this.__label), t.appendChild(this.__label), this.__delta = document.createElement("span"), this.$_delta = $(this.__delta), this.__delta.classList.add("statIncrease"), t.appendChild(this.__delta), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataHealing.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__label = null, this.$_label = null, this.__delta = null, this.$_delta = null
}, components.ListDataHealing.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataHealing.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataHealing.prototype.init = function() {}, components.ListDataHealing.prototype.destroy = function() {
    this._comparisonData = null, this.destroyGeneratedElements()
}, components.ListDataHealing.prototype.render = function(item) {
    if (this.$_label.text(gLocalization.lPrint("listdata.injury", [utils.FUTLocalization.convertInjuryTypeToText(item.injuryType), item.injuryGames])), utils.JS.isValid(this._comparisonData) && this._comparisonData.isInjuryHealing()) {
        var t = this._comparisonData.getStaticData(),
            delta = item.injuryGames - t.amount < 0 ? item.injuryGames : t.amount;
        this.$_delta.text(" -" + delta)
    }
}, components.ListDataHealing.prototype.setComparisonData = function(data) {
    this._comparisonData = data
}, components.ListDataHealing.prototype.update = function(item) {}, NamespaceManager.Register("components"), components.ListDataManagerLeague = function() {
    this._comparisonData = null, this._generate()
}, components.ListDataManagerLeague.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("secondary"), this.__label = document.createElement("span"), this.$_label = $(this.__label), t.appendChild(this.__label), this.__delta = document.createElement("span"), this.$_delta = $(this.__delta), this.__delta.classList.add("statIncrease"), t.appendChild(this.__delta), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataManagerLeague.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__label = null, this.$_label = null, this.__delta = null, this.$_delta = null
}, components.ListDataManagerLeague.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataManagerLeague.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataManagerLeague.prototype.init = function() {}, components.ListDataManagerLeague.prototype.destroy = function() {
    this._comparisonData = null, this.destroyGeneratedElements()
}, components.ListDataManagerLeague.prototype.render = function(item) {
    var t = utils.FUTLocalization.getLeagueNameByID(item.leagueId);
    if (this.$_label.text(gLocalization.lPrint("listdata.change", [t])), utils.JS.isValid(this._comparisonData) && this._comparisonData.isManagerLeagueModifier()) {
        var i = this._comparisonData.getStaticData(),
            delta = utils.FUTLocalization.getLeagueNameByID(i.amount);
        this.$_delta.text(" " + delta)
    }
}, components.ListDataManagerLeague.prototype.setComparisonData = function(data) {
    this._comparisonData = data
}, components.ListDataManagerLeague.prototype.update = function(item) {}, components.ImageButton = function UTImageButtonView() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(components.ImageButton, FUIButton), components.ImageButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("btn"), t.classList.add("imgBtn"), t.setAttribute("aria-disabled", "false"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ImageButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.ImageButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ImageButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("components"), components.ListRowItem = function ItemListRowView() {
    FUITargetActionView.call(this), this.slotData = null, this.comparisonData = null, this.data = null, this._viewDirty = !0, this.dataComponent = null, this.itemComponent = null, this._hasAction = !1, this._tapCallback = null, this._generate()
}, utils.JS.inherits(components.ListRowItem, FUITargetActionView), components.ListRowItem.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("li");
        t.classList.add("listFUTItem"), this._btnAction = new components.ImageButton, this._btnAction.getRootElement().classList.add("btnAction"), t.appendChild(this._btnAction.getRootElement()), this.__rowContent = document.createElement("div"), this.$_rowContent = $(this.__rowContent), this.__rowContent.classList.add("rowContent"), this.__entityContainer = document.createElement("div"), this.$_entityContainer = $(this.__entityContainer), this.__entityContainer.classList.add("entityContainer"), this.__name = document.createElement("div"), this.$_name = $(this.__name), this.__name.classList.add("name"), this.__entityContainer.appendChild(this.__name), this.__rowContent.appendChild(this.__entityContainer), this.__auction = document.createElement("div"), this.$_auction = $(this.__auction), this.__auction.classList.add("auction");
        var i = document.createElement("div");
        i.classList.add("auctionStartPrice"), i.classList.add("auctionValue"), this.__auctionStartLabel = document.createElement("span"), this.$_auctionStartLabel = $(this.__auctionStartLabel), this.__auctionStartLabel.classList.add("label"), i.appendChild(this.__auctionStartLabel), this.__auctionStartValue = document.createElement("span"), this.$_auctionStartValue = $(this.__auctionStartValue), this.__auctionStartValue.classList.add("coins"), this.__auctionStartValue.classList.add("value"), i.appendChild(this.__auctionStartValue), this.__auction.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("auctionValue"), this.__auctionBidLabel = document.createElement("span"), this.$_auctionBidLabel = $(this.__auctionBidLabel), this.__auctionBidLabel.classList.add("label"), s.appendChild(this.__auctionBidLabel), this.__auctionBidValue = document.createElement("span"), this.$_auctionBidValue = $(this.__auctionBidValue), this.__auctionBidValue.classList.add("coins"), this.__auctionBidValue.classList.add("value"), s.appendChild(this.__auctionBidValue), this.__auction.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("auctionValue"), this.__auctionBuyLabel = document.createElement("span"), this.$_auctionBuyLabel = $(this.__auctionBuyLabel), this.__auctionBuyLabel.classList.add("label"), o.appendChild(this.__auctionBuyLabel), this.__auctionBuyValue = document.createElement("span"), this.$_auctionBuyValue = $(this.__auctionBuyValue), this.__auctionBuyValue.classList.add("coins"), this.__auctionBuyValue.classList.add("value"), o.appendChild(this.__auctionBuyValue), this.__auction.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("auction-state"), this.__auctionTimeLabel = document.createElement("span"), this.$_auctionTimeLabel = $(this.__auctionTimeLabel), this.__auctionTimeLabel.classList.add("label"), l.appendChild(this.__auctionTimeLabel), this.__auctionTime = document.createElement("span"), this.$_auctionTime = $(this.__auctionTime), this.__auctionTime.classList.add("time"), l.appendChild(this.__auctionTime), this.__auction.appendChild(l), this.__rowContent.appendChild(this.__auction), t.appendChild(this.__rowContent), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListRowItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._btnAction.destroy(), this._btnAction = null, this.__rowContent = null, this.$_rowContent = null, this.__entityContainer = null, this.$_entityContainer = null, this.__name = null, this.$_name = null, this.__auction = null, this.$_auction = null, this.__auctionStartLabel = null, this.$_auctionStartLabel = null, this.__auctionStartValue = null, this.$_auctionStartValue = null, this.__auctionBidLabel = null, this.$_auctionBidLabel = null, this.__auctionBidValue = null, this.$_auctionBidValue = null, this.__auctionBuyLabel = null, this.$_auctionBuyLabel = null, this.__auctionBuyValue = null, this.$_auctionBuyValue = null, this.__auctionTimeLabel = null, this.$_auctionTimeLabel = null, this.__auctionTime = null, this.$_auctionTime = null
}, components.ListRowItem.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListRowItem.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListRowItem.CLASS = {
    HAS_AUCTION_DATA: "has-auction-data",
    SBC: "sbc",
    HAS_ACTION: "hasAction",
    WON: "won",
    EXPIRED: "expired",
    OUTBID: "outbid",
    HIGHEST_BID: "highest-bid",
    PROCESSING: "processing",
    CHEMISTRY_STYLE: "chemistryStyle"
}, components.ListRowItem.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, components.ListRowItem.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this.itemComponent) && (this.itemComponent.dealloc(), this.itemComponent = null), utils.JS.isValid(this.dataComponent) && (this.dataComponent.destroy(), this.dataComponent = null), utils.JS.isValid(this.data) && this.data.getAuctionData().onDataUpdated.unobserve(this), this.data = null, this.slotData = null, this.comparisonData = null, this._tapCallback = null, this._actionCallback = null, this.superclass()
}, components.ListRowItem.prototype.setData = function setData(data, t) {
    this._viewDirty = !0, this.data = data, this.slotData = t || null, this.data.getAuctionData().onDataUpdated.observe(this, this._eAuctionUpdated), this.setInteractionState(!0)
}, components.ListRowItem.prototype.getData = function getData() {
    return this.data
}, components.ListRowItem.prototype.setComparisonData = function setComparisonData(data) {
    this.comparisonData = data
}, components.ListRowItem.prototype.setDataComponent = function setDataComponent(t) {
    this.dataComponent = t
}, components.ListRowItem.prototype.setAction = function setAction(style, t) {
    utils.Debug.Assert(!this._hasAction, "[ListRowItem::setAction] Action already set."), this._hasAction || (this._actionCallback = t, this.addClass(enums.UIListRowState.HAS_ACTION), this._btnAction.addClass(style), this._btnAction.addTarget(this, this._actionCallback, enums.Event.TAP), this._btnAction.init(), this._hasAction = !0)
}, components.ListRowItem.prototype.setActionState = function setActionState(state) {
    state ? this.enableAction() : this.disableAction()
}, components.ListRowItem.prototype.disableAction = function disableAction() {
    this._btnAction.setInteractionState(!1)
}, components.ListRowItem.prototype.enableAction = function enableAction() {
    this._btnAction.setInteractionState(!0)
}, components.ListRowItem.prototype.render = function render() {
    utils.Debug.Assert(utils.JS.isValid(this.data), "Missing item data in list row component.");
    var data = this.getData(),
        t = data.getAuctionData();
    data.getStaticData(), this.getRoot();
    if (gSettingsModel.isTradingEnabled() && t.isValid()) {
        this.__auctionTimeLabel.textContent = gLocalization.lText("auctioninfo.timeremaining.condensed"), this.addClass(components.ListRowItem.CLASS.HAS_AUCTION_DATA);
        var i = t.currentBid > 0 ? t.currentBid : t.startingBid;
        this.__auctionBidLabel.textContent = gLocalization.lText("auctioninfo.currentbid.condensed"), this.__auctionBidValue.textContent = gLocalization.lNum(i), this.__auctionStartLabel.textContent = gLocalization.lText("auctioninfo.startprice"), this.__auctionStartValue.textContent = gLocalization.lNum(t.startingBid), 0 === t.buyNowPrice ? (DOMKit.toggleDisplayStyle(this.__auctionBuyLabel, !1), DOMKit.toggleDisplayStyle(this.__auctionBuyValue, !1)) : (this.__auctionBuyLabel.textContent = gLocalization.lText("auctioninfo.buynowprice.condensed"), this.__auctionBuyValue.textContent = gLocalization.lNum(t.buyNowPrice))
    } else this.removeClass(components.ListRowItem.CLASS.HAS_AUCTION_DATA), DOMKit.toggleDisplayStyle(this.__auction, !1);
    var s = utils.JS.isValid(this.itemComponent);
    s && this.itemComponent.canRender(data) || (s && this.itemComponent.destroy(), this.itemComponent = factories.ItemView.createSmallItem(data), this.__entityContainer.insertBefore(this.itemComponent.getRootElement(), this.__entityContainer.firstChild)), this.itemComponent.render(data), this.renderName(), utils.JS.isValid(this.dataComponent) && this._viewDirty && (this.dataComponent.destroy(), this.dataComponent = null), utils.JS.isValid(this.dataComponent) ? this._updateDataComponent(this.dataComponent, this.data, this.comparisonData, this.slotData) : this.setDataComponent(this._generateDataComponent(this.data, this.comparisonData, this.slotData)), utils.JS.isValid(this.slotData) && !this.slotData.isValid() && this.data.isPlayer() && (this.__name.textContent = enums.Localization.BLANK_STR), utils.JS.isValid(this.dataComponent) && (this.__entityContainer.appendChild(this.dataComponent.getRootElement()), this.dataComponent.render(data)), this._viewDirty = !1, this.onTimedUpdate()
}, components.ListRowItem.prototype.setSelected = function setSelected(value) {
    this.toggleClass(enums.UIListRowState.SELECTED, value)
}, components.ListRowItem.prototype.renderName = function renderName() {
    var data = this.getData(),
        t = data.getStaticData(),
        name = enums.Localization.BLANK_STR;
    if (data.isBadge() || data.isKit()) name = utils.FUTLocalization.getTeamAbb15ByID(data.teamId, data.getYear());
    else if (data.isBall()) name = gLocalization.lText(t.description);
    else if (data.isManagerContract()) name = gLocalization.lText("card.title.managercontracts");
    else if (data.isPlayerContract()) name = gLocalization.lText("card.title.playercontracts");
    else if (data.isTeamFitness()) name = gLocalization.lText("card.title.squadfitness");
    else if (data.isPlayerFitness()) name = gLocalization.lText("card.title.playerfitness");
    else if (data.isInjuryHealing()) switch (data.subtype) {
            case enums.ItemSubType.HEALING_HEAD:
                name = gLocalization.lText("card.desc.healing.head");
                break;
            case enums.ItemSubType.HEALING_SHOULDER:
                name = gLocalization.lText("card.desc.healing.shoulder");
                break;
            case enums.ItemSubType.HEALING_ARM:
                name = gLocalization.lText("card.desc.healing.arm");
                break;
            case enums.ItemSubType.HEALING_BACK:
                name = gLocalization.lText("card.desc.healing.back");
                break;
            case enums.ItemSubType.HEALING_HIP:
                name = gLocalization.lText("card.desc.healing.hip");
                break;
            case enums.ItemSubType.HEALING_LEG:
                name = gLocalization.lText("card.desc.healing.leg");
                break;
            case enums.ItemSubType.HEALING_FOOT:
                name = gLocalization.lText("card.desc.healing.foot");
                break;
            case enums.ItemSubType.HEALING_ALL:
                name = gLocalization.lText("list.healing.all.injuries");
                break;
            default:
                name = gLocalization.lText("card.desc.contract.player") + " " + gLocalization.lText("card.title.healing")
        } else if (data.isPlayer() || data.isStaff()) name = t.name;
        else if (data.isMiscItem()) {
        if (data.isFreeCoins()) name = gLocalization.lPrint("card.desc.misc.coins", [t.amount]);
        else if (data.isDraftToken()) name = gLocalization.lText("card.desc.misc.drafttoken");
        else if (data.isFreePack())
            if (t.hasLoanPackDescription()) name = gLocalization.lText("card.desc.FreeLoanPackDesc");
            else switch (t.assetId) {
                case utils.AssetLocator.ASSET_ID_BRONZE_PACK:
                    name = gLocalization.lText("card.desc.freebronze");
                    break;
                case utils.AssetLocator.ASSET_ID_SILVER_PACK:
                    name = gLocalization.lText("card.desc.freesilver");
                    break;
                case utils.AssetLocator.ASSET_ID_GOLD_PACK:
                    name = gLocalization.lText("card.desc.freegold")
            }
    } else if (data.isStadium()) name = t.description;
    else if (data.isStyleModifier()) name = gLocalization.lText("playstyles.2018.playstyle" + data.subtype);
    else if (data.isAllAttributeTraining()) name = gLocalization.lText("card.desc.training.all.attributes");
    else if (data.isPlayerTraining()) {
        var i = utils.FUTLocalization.convertAttributeIdToHALString(t.trainedAttribute, !1);
        name = gLocalization.lText("card.desc.training.attrib." + i)
    } else if (data.isGKTraining()) {
        var s = utils.FUTLocalization.convertAttributeIdToHALString(t.trainedAttribute, !0);
        name = gLocalization.lText("card.desc.training.gkattrib." + s)
    } else data.isPlayerPositionModifier() ? name = gLocalization.lText("card.desc.training.pos." + t.trainPosFrom + "_" + t.trainPosTo) : data.isManagerLeagueModifier() && (name = gLocalization.lText("global.leagueFull.2018.league" + data.leagueId));
    this.__auctionTime.textContent = enums.Localization.BLANK_STR, this.__name.textContent = name
}, components.ListRowItem.prototype.onTimedUpdate = function onTimedUpdate() {
    var data = this.getData(),
        t = data.getAuctionData();
    if (utils.JS.isValid(this.dataComponent) && this.dataComponent.update(data), this.removeClass([components.ListRowItem.CLASS.WON, components.ListRowItem.CLASS.EXPIRED, components.ListRowItem.CLASS.HIGHEST_BID, components.ListRowItem.CLASS.OUTBID, components.ListRowItem.CLASS.PROCESSING].join(" ")), gSettingsModel.isTradingEnabled() && t.isValid()) {
        if (t.getSecondsRemaining() <= 0) {
            t.isWon() || t.isSold() ? this.addClass(components.ListRowItem.CLASS.WON) : t.isPendingExpiry() ? t.isOutbid() ? this.addClass(components.ListRowItem.CLASS.OUTBID) : t.isHighestBid() && this.addClass(components.ListRowItem.CLASS.HIGHEST_BID) : this.addClass(components.ListRowItem.CLASS.EXPIRED);
            var i = t.isPendingExpiry() ? "auctioninfo.timeremaining.pending.condensed" : "watchlist.dock.categories.expired.condensed";
            this.__auctionTime.textContent = gLocalization.lText(i)
        } else this.__auctionTime.textContent = gLocalization.lTimeRemainingCondensed(t.getSecondsRemaining()), t.isWon() ? this.addClass(components.ListRowItem.CLASS.WON) : t.isOutbid() ? this.addClass(components.ListRowItem.CLASS.OUTBID) : t.isHighestBid() && this.addClass(components.ListRowItem.CLASS.HIGHEST_BID);
        var s = t.currentBid > 0 ? t.currentBid : t.startingBid;
        this.__auctionBidValue.textContent = gLocalization.lNum(s)
    } else DOMKit.toggleDisplayStyle(this.__auction, !1);
    this.itemComponent.renderAuctionState(t), DOMKit.toggleClass(this.__name, "watchIcon", !t.tradeOwner && t.watched && !t.isWon())
}, components.ListRowItem.prototype._updateDataComponent = function _updateDataComponent(t, item, i, s) {
    item.isPlayer() ? (t.setSlotData(s), t.setComparisonData(i)) : t.update(item)
}, components.ListRowItem.prototype._generateDataComponent = function _generateDataComponent(item, t, i) {
    var s = null,
        o = item.getStaticData();
    if (utils.JS.isValid(t) && t.isConsumable() && !t.canApplyTo(item)) this.disableAction(), s = new components.ListDataString, item.isManager() ? s.setString(gLocalization.lText("panel.applyitem.invaliditem_manager")) : item.isPlayer() && s.setString(gLocalization.lText("panel.applyitem.invaliditem")), s.getRoot().addClass("unapplicableConsumable statDecrease");
    else if (item.isStyleModifier()) s = new components.ListDataPlaystyle, this.addClass(components.ListRowItem.CLASS.CHEMISTRY_STYLE);
    else if (utils.JS.isValid(t) && t.isContract() && (item.isPlayer() || item.isManager()))(s = new components.ListDataContracts).setComparisonData(t);
    else if (utils.JS.isValid(t) && t.isManagerLeagueModifier() && item.isManager())(s = new components.ListDataManagerLeague).setComparisonData(t);
    else if (utils.JS.isValid(t) && t.isConsumable() && item.isPlayer()) t.isFitness() ? (s = new components.ListDataFitness).setComparisonData(t) : t.isPlayerPositionModifier() ? (s = new components.ListDataPlayerPosition).setComparisonData(t) : t.isInjuryHealing() ? (s = new components.ListDataHealing).setComparisonData(t) : t.isStyleModifier() ? (s = new components.ListDataPlaystyle, this.addClass(components.ListRowItem.CLASS.CHEMISTRY_STYLE)) : t.isTraining() && (s = new components.ListDataPlayerStats).setComparisonData(t);
    else if (item.isPlayer())(s = new components.ListDataPlayerStats).setSlotData(i), s.setComparisonData(t);
    else if (item.isActiveClubItem()) {
        (s = new components.ListDataString).getRoot().addClass("active");
        var l = gLocalization.lText("listrow.clubitem.active").toUpperCase();
        item.isKit() && (l += item.state === enums.ItemState.ACTIVE_HOME_KIT ? " - " + gLocalization.lText("card.desc.homekitcaps") : item.state === enums.ItemState.ACTIVE_AWAY_KIT ? " - " + gLocalization.lText("card.desc.awaykitcaps") : ""), s.setString(l)
    } else if (item.isHealth())(s = new components.ListDataString).getRoot().addClass("secondary"), s.setString("+" + gLocalization.lNum(o.amount));
    else if (item.isTraining()) {
        utils.FUTLocalization.convertAttributeIdToHALString(o.trainedAttribute, item.isGKTraining());
        var u = "";
        item.isGKTraining() || item.isPlayerTraining() ? u = " +" + gLocalization.lNum(o.amount) : item.isPlayerPositionModifier() ? u = "" : item.isManagerLeagueModifier() && (u = " +" + utils.FUTLocalization.getLeagueAbbr5ByID(item.leagueId, item.getYear())), (s = new components.ListDataString).getRoot().addClass("secondary"), s.setString(u)
    }
    return s
}, components.ListRowItem.prototype.setTapCallback = function setTapCallback(t) {
    this._tapCallback = t, DOMKit.addClass(this.__rowContent, enums.UIListRowState.HAS_TAP_CALLBACK)
}, components.ListRowItem.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), e.target === this.__rowContent && DOMKit.addClass(this.__rowContent, enums.UIState.ACTIVE)
}, components.ListRowItem.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), e.target === this.__rowContent && DOMKit.removeClass(this.__rowContent, enums.UIState.ACTIVE)
}, components.ListRowItem.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), e.target === this.__rowContent && DOMKit.removeClass(this.__rowContent, enums.UIState.ACTIVE)
}, components.ListRowItem.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), utils.JS.isFunction(this._tapCallback) && this._tapCallback(this.data)
}, components.ListRowItem.prototype._eAuctionUpdated = function _eAuctionUpdated(t, data) {
    this.render()
}, NamespaceManager.Register("utils"), utils.Time = {}, utils.Time.convertToUTC = function(t) {
    return new Date(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate(), t.getUTCHours(), t.getUTCMinutes(), t.getUTCSeconds())
}, NamespaceManager.Register("views.items"), views.items.PlayerBio = function PlayerBioView() {
    FUIView.call(this), this._tables = [], this._headers = [], this._pinnedRow = null, this._generate()
}, utils.JS.inherits(views.items.PlayerBio, FUIView), views.items.PlayerBio.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "PlayerBio"), this.__pinnedDiv = document.createElement("div"), this.$_pinnedDiv = $(this.__pinnedDiv), t.appendChild(this.__pinnedDiv), this.__scrollerDiv = document.createElement("div"), this.$_scrollerDiv = $(this.__scrollerDiv), this.__scrollerDiv.classList.add("nativeScrolling"), this._navigation = new components.TabMenu, this.__scrollerDiv.appendChild(this._navigation.getRootElement()), this.__dataDisplay = document.createElement("section"), this.$_dataDisplay = $(this.__dataDisplay), this.__dataDisplay.classList.add("layout-article"), this.__dataDisplay.classList.add("panel-list"), this.__scrollerDiv.appendChild(this.__dataDisplay), t.appendChild(this.__scrollerDiv), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.PlayerBio.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__pinnedDiv = null, this.$_pinnedDiv = null, this.__scrollerDiv = null, this.$_scrollerDiv = null, this._navigation.destroy(), this._navigation = null, this.__dataDisplay = null, this.$_dataDisplay = null
}, views.items.PlayerBio.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.PlayerBio.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.PlayerBio.CLASS = {
    ISOLATED_SECTION: "isolated-section",
    PSEUDO_TABLE: "psudo-table"
}, views.items.PlayerBio.prototype.dealloc = function dealloc() {
    this._clearComponentList(this._tables), this._clearComponentList(this._headers), this._tables = null, this._headers = null, this._pinnedRow = null, this.superclass()
}, views.items.PlayerBio.prototype.setupNavigation = function(t, i) {
    this._navigation.addTab(enums.PlayerBioDisplayGroup.INFO, gLocalization.lText("extendedPlayerInfo.tab.general")), this._navigation.addTab(enums.PlayerBioDisplayGroup.ATTRIBUTES, gLocalization.lText("extendedPlayerInfo.tab.stats")), i && this._navigation.addTab(enums.PlayerBioDisplayGroup.LEGENDS, gLocalization.lText("extendedPlayerInfo.tab.legend")), this._navigation.setActiveTab(enums.PlayerBioDisplayGroup.INFO), this._navigation.addTarget(this, t, enums.Event.TAP), this._navigation.layoutSubviews()
}, views.items.PlayerBio.prototype.render = function(t, item) {
    switch (this.$_dataDisplay.empty(), this._clearComponentList(this._tables), this._clearComponentList(this._headers), t) {
        case enums.PlayerBioDisplayGroup.INFO:
            this.renderInfo(item);
            break;
        case enums.PlayerBioDisplayGroup.ATTRIBUTES:
            this.renderAttributes(item);
            break;
        case enums.PlayerBioDisplayGroup.LEGENDS:
            this.renderLegends(item)
    }
}, views.items.PlayerBio.prototype.renderInfo = function renderInfo(item) {
    var t = item.getYellowCards(),
        i = item.getTotalYellowCards(),
        s = item.getRedCards(),
        o = item.getTotalRedCards(),
        l = item.getStaticData(),
        u = item.getMetaData(),
        h = utils.Time.convertToUTC(new Date(1e3 * u.birthday)),
        p = gLocalization.lPrint("extendedPlayerInfo.details.cards", [i, Math.max(0, i - t), t]),
        m = gLocalization.lPrint("extendedPlayerInfo.details.cards", [o, Math.max(0, o - s), s]),
        _ = "extendedPlayerInfo.stats." + (u.isLeftFoot ? "Left" : "Right");
    this._createHeader(this.__dataDisplay, gLocalization.lText("extendedPlayerInfo.header"), this._headers);
    var g = document.createElement("ul");
    g.classList.add(views.items.PlayerBio.CLASS.PSEUDO_TABLE), this.__dataDisplay.appendChild(g), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.firstName"), l.firstName + " " + l.lastName), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.knownAs"), l.knownAs), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.height"), gLocalization.lHeight(u.height)), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.dateOfBirth"), gLocalization.lDate(h)), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.preferredPosition"), gLocalization.lText("extendedPlayerInfo.positions.position" + item.preferredPosition)), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.preferredFoot"), gLocalization.lText(_)), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.nation"), utils.FUTLocalization.getNationNameById(item.nationId)), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.club"), utils.FUTLocalization.getTeamAbb15ByID(item.teamId, item.itemYear)), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.league"), utils.FUTLocalization.getLeagueNameByID(item.leagueId, item.itemYear)), this._createHeader(this.__dataDisplay, gLocalization.lText("extendedPlayerInfo.general.itemDetails"), this._headers), (g = document.createElement("ul")).classList.add(views.items.PlayerBio.CLASS.PSEUDO_TABLE), this.__dataDisplay.appendChild(g), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.playstyle"), utils.FUTLocalization.getPlaystyleByID(item.playStyle, item.itemYear)), this._createRow(g, gLocalization.lText("extendedPlayerInfo.stats.fitness"), item.fitness), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.numberOfOwners"), item.owners), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.contract"), item.contract), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.gamesPlayed"), item.getGamesPlayed()), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.goalsScored"), item.getGoals()), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.totalYellowCards"), p), this._createRow(g, gLocalization.lText("extendedPlayerInfo.general.totalRedCards"), m)
}, views.items.PlayerBio.prototype.renderAttributes = function renderAttributes(item) {
    var t = item.isGK() ? ["extendedPlayerInfo.stats.diving", "extendedPlayerInfo.stats.handling", "extendedPlayerInfo.stats.kicking", "extendedPlayerInfo.stats.reflexes", "extendedPlayerInfo.stats.acceleration", "extendedPlayerInfo.stats.positioning"] : ["extendedPlayerInfo.stats.pace", "extendedPlayerInfo.stats.shooting", "extendedPlayerInfo.stats.passing", "extendedPlayerInfo.stats.dribbling", "extendedPlayerInfo.stats.defending", "extendedPlayerInfo.stats.heading"];
    this._createHeader(this.__dataDisplay, gLocalization.lText("extendedPlayerInfo.tab.stats"), this._headers);
    var i = document.createElement("ul");
    i.classList.add(views.items.PlayerBio.CLASS.PSEUDO_TABLE), this.__dataDisplay.appendChild(i), this._createProgressListRow(i, gLocalization.lText("extendedPlayerInfo.general.overall"), item.rating, item.rating), (i = document.createElement("ul")).classList.add(views.items.PlayerBio.CLASS.PSEUDO_TABLE), this.__dataDisplay.appendChild(i), item.getAttributes().forEach(function(s, o) {
        this._createProgressListRow(i, gLocalization.lText(t[o]), s, s / 99 * 100)
    }, this), this._createHeader(this.__dataDisplay, gLocalization.lText("extendedPlayerInfo.stats.status"), this._headers), (i = document.createElement("ul")).classList.add(views.items.PlayerBio.CLASS.PSEUDO_TABLE), this.__dataDisplay.appendChild(i), this._createProgressListRow(i, gLocalization.lText("extendedPlayerInfo.stats.fitness"), item.fitness, item.fitness / 99 * 100), (i = document.createElement("ul")).classList.add(views.items.PlayerBio.CLASS.PSEUDO_TABLE), this.__dataDisplay.appendChild(i), this._createRow(i, gLocalization.lText("extendedPlayerInfo.general.injury"), gLocalization.lText("extendedPlayerInfo.general.injury." + item.injuryType)), this._createRow(i, gLocalization.lText("extendedPlayerInfo.general.injuryDuration"), item.injuryGames), this._createRow(i, gLocalization.lText("extendedPlayerInfo.currentYellowCards"), item.getYellowCards()), this._createRow(i, gLocalization.lText("extendedPlayerInfo.currentRedCards"), item.getRedCards())
}, views.items.PlayerBio.prototype.renderLegends = function(item) {
    function getTeamName(t, i) {
        if ((!i || utils.JS.isNumber(i) && i > enums.Year.ASSET) && (i = enums.Year.ASSET), i <= enums.Year.YEAR_2009) return enums.Localization.BLANK_STR;
        var s = utils.FUTLocalization.getTeamAbb15ByID(t, i);
        return -1 !== s.indexOf("*") ? getTeamName(t, i - 1) : s
    }
    var t = item.getMetaData().legendBio;
    this._createHeader(this.__dataDisplay, gLocalization.lText("extendedPlayerInfo.legend.clubCareerTitle"), this._headers);
    var table = new views.Table,
        i = table.getRootElement();
    i.classList.add(enums.UIPanels.TABLE_ALTERNATING), this._tables.push(table), this.__dataDisplay.appendChild(i), table.addRowGroup([gLocalization.lText("extendedPlayerInfo.legend.years"), gLocalization.lText("extendedPlayerInfo.legend.team"), gLocalization.lText("extendedPlayerInfo.legend.appearances"), gLocalization.lText("extendedPlayerInfo.legend.goals")]), t.clubCareer.forEach(function(t, i) {
        table.addRowData([t.endYear - t.startYear, getTeamName(t.teamId, item.itemYear), t.matches, t.goals])
    }), this._createHeader(this.__dataDisplay, gLocalization.lText("extendedPlayerInfo.legend.nationalCareerTitle"), this._headers), table = new views.Table, this._tables.push(table), this.__dataDisplay.appendChild(table.getRootElement()), table.addRowGroup([gLocalization.lText("extendedPlayerInfo.legend.years"), gLocalization.lText("extendedPlayerInfo.legend.team"), gLocalization.lText("extendedPlayerInfo.legend.appearances"), gLocalization.lText("extendedPlayerInfo.legend.goals")]), t.nationalCareer.forEach(function(t, i) {
        table.addRowData([t.endYear - t.startYear, utils.FUTLocalization.getTeamAbb15ByID(t.teamId, item.itemYear), t.matches, t.goals])
    }), this._createHeader(this.__dataDisplay, gLocalization.lText("extendedPlayerInfo.legend.claimToFameTitle"), this._headers);
    var s = document.createElement("p");
    s.classList.add(views.items.PlayerBio.CLASS.ISOLATED_SECTION), s.textContent = gLocalization.lText("FUT_LEGEND_DESCR_" + item.getMaskedResourceId()), this.__dataDisplay.appendChild(s)
}, views.items.PlayerBio.prototype._createHeader = function(t, text, list) {
    var i = new components.SectionHeader;
    i.hideButton(), i.setText(text), t.appendChild(i.getRootElement()), list.push(i)
}, views.items.PlayerBio.prototype._createRow = function(t, title, value) {
    var i = document.createElement("li"),
        s = document.createElement("h1"),
        o = document.createElement("h2");
    s.textContent = title, s.classList.add("secondary"), o.textContent = value, i.appendChild(s), i.appendChild(o), t.appendChild(i)
}, views.items.PlayerBio.prototype._createProgressListRow = function(t, title, value, i) {
    var s = new views.lists.ProgressListItem;
    s.value = value, s.title = title, s.setProgress(i), t.appendChild(s.getRootElement()), s.render()
}, views.items.PlayerBio.prototype._clearComponentList = function(list) {
    this._tables.forEach(function(table, t) {
        table.dealloc()
    }), this._tables.splice(0, this._tables.length)
}, views.items.PlayerBio.prototype.appendPinnedItemView = function appendPinnedItemView(view) {
    this._pinnedRow = view, this.addSubview(view, this.$_pinnedDiv)
}, views.items.PlayerBio.prototype.calculateHeights = function calculateHeights() {
    this._pinnedRow && (this.__scrollerDiv.style.top = this._pinnedRow.__root.clientHeight + "px")
}, NamespaceManager.Register("valueobjects"), valueobjects.SquadSlotChemistry = function() {
    this._chemistry = 0
}, valueobjects.SquadSlotChemistry.MIN = 0, valueobjects.SquadSlotChemistry.MAX = 10, valueobjects.SquadSlotChemistry.prototype.get = function() {
    return this._chemistry
}, valueobjects.SquadSlotChemistry.prototype.set = function(t) {
    t < valueobjects.SquadSlotChemistry.MIN ? t = valueobjects.SquadSlotChemistry.MIN : t > valueobjects.SquadSlotChemistry.MAX && (t = valueobjects.SquadSlotChemistry.MAX), this._chemistry = t
}, NamespaceManager.Register("entities"), entities.SquadSlot = function(index, position) {
    this.onDataUpdated = new FUTObservable, Object.defineProperty(this, "onDataUpdated", {
        writable: !1,
        enumerable: !0
    }), this._index = index, this._kitNumber = 0, this._chemistry = new valueobjects.SquadSlotChemistry, this._item = factories.Item.createItem(), this._position = position || null, this._requirement = null, this._managerBonus = 0
}, entities.SquadSlot.prototype.getIndex = function getIndex() {
    return this._index
}, entities.SquadSlot.prototype.getItem = function getItem() {
    return this._item
}, entities.SquadSlot.prototype.getItemData = function getItemData() {
    return this._item
}, entities.SquadSlot.prototype.getKitNumber = function getKitNumber() {
    return this._kitNumber
}, entities.SquadSlot.prototype.getAuctionData = function getAuctionData() {
    return this._item.getAuctionData()
}, entities.SquadSlot.prototype.setItem = function setItem(item) {
    this._item && this._item.onDataUpdated.unobserve(this), this._item = item, this._item.onDataUpdated.observe(this, this._eItemDataUpdated)
}, entities.SquadSlot.prototype.setKitNumber = function setKitNumber(value) {
    this._kitNumber = value
}, entities.SquadSlot.prototype.getChemistry = function getChemistry() {
    return this._chemistry.get()
}, entities.SquadSlot.prototype.setChemistry = function setChemistry(value) {
    this._chemistry.set(value)
}, entities.SquadSlot.prototype.setPosition = function setPosition(position) {
    this._position = position
}, entities.SquadSlot.prototype.getGeneralPosition = function getGeneralPosition() {
    return this._position ? this._position.getTypeId() : -1
}, entities.SquadSlot.prototype.getUniquePosition = function getUniquePosition() {
    return this._position ? this._position.getId() : -1
}, entities.SquadSlot.prototype.getGeneralPositionName = function getGeneralPositionName() {
    return this._position ? this._position.getTypeName() : ""
}, entities.SquadSlot.prototype.getUniquePositionName = function getUniquePositionName() {
    return this._position ? this._position.getName() : ""
}, entities.SquadSlot.prototype.setRequirement = function setRequirement(t) {
    this._requirement = t
}, entities.SquadSlot.prototype.getRequirement = function getRequirement() {
    return this._requirement
}, entities.SquadSlot.prototype.getManagerBonus = function getManagerBonus() {
    return this._managerBonus
}, entities.SquadSlot.prototype.setManagerBonus = function setManagerBonus(t) {
    this._managerBonus = t
}, entities.SquadSlot.prototype.getPositionBonus = function getPositionBonus() {
    return this._position && this._item && (this._item.isValid() || this.isCustomBrick()) ? this._position.getBonus(this._item.preferredPosition) : 0
}, entities.SquadSlot.prototype.hasChemistry = function hasChemistry() {
    return this._chemistry.get() > 0
}, entities.SquadSlot.prototype.isBrick = function isBrick() {
    return this.isRegularBrick() || this.isCustomBrick()
}, entities.SquadSlot.prototype.isRegularBrick = function isRegularBrick() {
    return !!this._requirement && this._requirement.isRegularBrickType()
}, entities.SquadSlot.prototype.isCustomBrick = function isCustomBrick() {
    return !!this._requirement && this._requirement.isCustomBrickType()
}, entities.SquadSlot.prototype.isValid = function isValid() {
    return !!this._item && this._item.isValid()
}, entities.SquadSlot.prototype.compareTo = function compareTo(t) {
    return this.getIndex() === t.getIndex()
}, entities.SquadSlot.prototype._eItemDataUpdated = function _eItemDataUpdated(t, sender, data) {
    this.onDataUpdated.notify(this, {
        item: sender
    })
}, NamespaceManager.Register("utils"), utils.Iterator = function(t, i) {
    utils.EventDispatcher.call(this), this._dataCollection = t, this._itemsPerPage = i, this._currentIndex = 0, this.swipeDirection = utils.Iterator.SWIPE_DIRECTION.NONE
}, utils.JS.inherits(utils.Iterator, utils.EventDispatcher), utils.Iterator.prototype.data = function() {
    return this._dataCollection
}, utils.Iterator.prototype.getNumItems = function() {
    return this._dataCollection.length
}, utils.Iterator.prototype.setData = function(value, dispatchEvent) {
    this._dataCollection = value, !0 === dispatchEvent && (this.swipeDirection === utils.Iterator.SWIPE_DIRECTION.RIGHT ? (this._currentIndex = this._currentIndex--, this.swipeRight()) : this.swipeDirection === utils.Iterator.SWIPE_DIRECTION.LEFT ? (this._currentIndex++, this.swipeLeft()) : (this._currentIndex > value.length - 1 && (this._currentIndex = value.length - 1), this.dispatch(utils.Iterator.DATA_UPDATED, ""))), this.swipeDirection = utils.Iterator.SWIPE_DIRECTION.NONE
}, utils.Iterator.prototype.first = function() {
    return this._dataCollection.length > 0 ? (this._currentIndex = 0, this._dataCollection[0]) : null
}, utils.Iterator.prototype.getFirstIndexOfPage = function(page) {
    return (page - 1) * this._itemsPerPage
}, utils.Iterator.prototype.hasNextPage = function() {
    return this.getCurrentPage() < this.getMaxPage()
}, utils.Iterator.prototype.hasPrevPage = function() {
    return this.getCurrentPage() > 1
}, utils.Iterator.prototype.hasNext = function() {
    return this._currentIndex < this._dataCollection.length - 1
}, utils.Iterator.prototype.hasPrev = function() {
    return this._currentIndex > 0
}, utils.Iterator.prototype.current = function() {
    return this._dataCollection.length > 0 ? (this._currentIndex >= this._dataCollection.length && (this._currentIndex = this._dataCollection.length - 1), this._dataCollection[this._currentIndex]) : null
}, utils.Iterator.prototype.next = function(remove) {
    var t = this.current(),
        data = null;
    return this.hasNext() && (data = this._dataCollection[++this._currentIndex], remove && this.removeFromData(t)), this.swipeLeft(), data
}, utils.Iterator.prototype.prev = function(remove) {
    var t = this.current(),
        data = null;
    return this.hasPrev() && (data = this._dataCollection[--this._currentIndex], remove && this.removeFromData(t)), this.swipeRight(), data
}, utils.Iterator.prototype.removeFromData = function(data) {
    var t = this._dataCollection.indexOf(data),
        i = this.current(); - 1 !== t && this._dataCollection.splice(t, 1), this.seek(i)
}, utils.Iterator.prototype.goToIndex = function(index) {
    var data = null;
    return utils.JS.isValid(index) && (this.setCurrentIndex(index), data = this._dataCollection[index]), this.dispatch(utils.Iterator.DATA_UPDATED), data
}, utils.Iterator.prototype.seek = function(data) {
    var t, i = this._dataCollection.length,
        s = !1;
    if ("function" != typeof data.compareTo) throw new Error("Iterator elements must implement a 'compareTo' function!");
    for (t = 0; t < i; ++t) {
        if ("function" != typeof this._dataCollection[t].compareTo) throw new Error("Iterator elements must implement a 'compareTo' function!");
        if (data.compareTo(this._dataCollection[t])) {
            this._currentIndex = t, s = !0;
            break
        }
    }
    return s && this.dispatch(utils.Iterator.DATA_UPDATED), s
}, utils.Iterator.prototype.setCurrentIndex = function(value) {
    this._currentIndex = value
}, utils.Iterator.prototype.getCurrentIndex = function() {
    return this._currentIndex
}, utils.Iterator.prototype.getCurrentPage = function() {
    var t = this.getCurrentIndex() + 1;
    return Math.ceil(t / this._itemsPerPage)
}, utils.Iterator.prototype.getMaxPage = function() {
    var t = this.data().length;
    return Math.ceil(t / this._itemsPerPage)
}, utils.Iterator.prototype.setSwipeDirection = function(dir) {
    this.swipeDirection = dir
}, utils.Iterator.prototype.swipeLeft = function() {
    this._swipe(utils.Iterator.SWIPE_LEFT)
}, utils.Iterator.prototype.swipeRight = function() {
    this._swipe(utils.Iterator.SWIPE_RIGHT)
}, utils.Iterator.prototype._swipe = function(d) {
    this.dispatch(utils.Iterator.DATA_UPDATED, d)
}, utils.Iterator.DATA_UPDATED = "DATA_UPDATED", utils.Iterator.SWIPE_LEFT = "Left", utils.Iterator.SWIPE_RIGHT = "Right", utils.Iterator.SWIPE_DIRECTION = {
    NONE: 0,
    LEFT: 1,
    RIGHT: 2
}, NamespaceManager.Register("views.lists"), views.lists.PinnedListItem = function PinnedListItem() {
    FUIView.call(this), this._pinnedListItem = null, this._generate()
}, utils.JS.inherits(views.lists.PinnedListItem, FUIView), views.lists.PinnedListItem.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("pinnedDiv"), this.__list = document.createElement("ul"), this.$_list = $(this.__list), t.appendChild(this.__list), this._btnRight = new views.buttons.FlatButton, this._btnRight.getRootElement().classList.add("btn-right"), t.appendChild(this._btnRight.getRootElement()), this._btnLeft = new views.buttons.FlatButton, this._btnLeft.getRootElement().classList.add("btn-left"), t.appendChild(this._btnLeft.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.lists.PinnedListItem.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__list = null, this.$_list = null, this._btnRight.destroy(), this._btnRight = null, this._btnLeft.destroy(), this._btnLeft = null
}, views.lists.PinnedListItem.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.lists.PinnedListItem.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.lists.PinnedListItem.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._pinnedListItem) && (this._pinnedListItem.destroy(), this._pinnedListItem = null), this.superclass()
}, views.lists.PinnedListItem.prototype.init = function init() {
    this._btnRight.init(), this._btnLeft.init()
}, views.lists.PinnedListItem.prototype.getBtnRight = function getBtnRight() {
    return this._btnRight
}, views.lists.PinnedListItem.prototype.getBtnLeft = function getBtnLeft() {
    return this._btnLeft
}, views.lists.PinnedListItem.prototype.setHasIterator = function setHasIterator(value) {
    this.getRoot().toggleClass(enums.UIPinnedListItem.HAS_ITERATOR, value)
}, views.lists.PinnedListItem.prototype.setHasNext = function setHasNext(value) {
    this._btnRight.setInteractionState(value), this.getRoot().toggleClass(enums.UIPinnedListItem.HAS_NEXT, value)
}, views.lists.PinnedListItem.prototype.setHasPrev = function setHasPrev(value) {
    this._btnLeft.setInteractionState(value), this.getRoot().toggleClass(enums.UIPinnedListItem.HAS_PREV, value)
}, views.lists.PinnedListItem.prototype.pinListItem = function pinListItem(t, i) {
    utils.JS.isValid(this._pinnedListItem) ? (this._pinnedListItem.setData(t, i), this._pinnedListItem.render()) : (this._pinnedListItem = new components.ListRowItem, this._pinnedListItem.setData(t, i), this._pinnedListItem.render(), this.$_list.append(this._pinnedListItem.getRoot()))
}, views.lists.PinnedListItem.prototype.onTimedUpdate = function onTimedUpdate() {
    utils.JS.isValid(this._pinnedListItem) && this._pinnedListItem.onTimedUpdate()
}, views.lists.PinnedListItem.prototype.refreshItem = function refreshItem() {
    utils.JS.isValid(this._pinnedListItem) && this._pinnedListItem.render()
}, NamespaceManager.Register("controllers.views"), controllers.views.PinnedListItem = function() {
    FUIViewController.call(this), this._item = null, this._slot = null, this._iterator = null, this.onItemChange = new FUTObservable, Object.defineProperty(this, "onItemChange", {
        writable: !1
    })
}, utils.JS.inherits(controllers.views.PinnedListItem, FUIViewController), controllers.views.PinnedListItem.prototype.init = function() {
    var view = this.getView();
    view.setHasIterator(utils.JS.isValid(this._iterator)), view.init(), view.getBtnRight().addTarget(this, this._ePinnedRightBtnPressed, enums.Event.TAP), view.getBtnLeft().addTarget(this, this._ePinnedLeftBtnPressed, enums.Event.TAP), utils.JS.isValid(this._iterator) && (view.setHasNext(!this._iterator.endOfList), view.setHasPrev(!this._iterator.startOfList))
}, controllers.views.PinnedListItem.prototype.initWithItem = function initWithItem(item) {
    this.setItem(item), this.init()
}, controllers.views.PinnedListItem.prototype.initWithSlot = function initWithItem(t) {
    this._slot = t, this.initWithItem(t.getItem())
}, controllers.views.PinnedListItem.prototype.initWithIterator = function initWithItem(iterator) {
    this._iterator = iterator, this.initWithSlot(iterator.current())
}, controllers.views.PinnedListItem.prototype.dealloc = function dealloc() {
    this.superclass(), this._item && this._item.getAuctionData().onDataUpdated.unobserve(this), this._view = null, this._item = null, this._slot = null, this.onItemChange.dealloc(), this.onItemChange = null
}, controllers.views.PinnedListItem.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.lists.PinnedListItem
}, controllers.views.PinnedListItem.prototype.setItem = function setItem(item) {
    this._item && this._item.getAuctionData().onDataUpdated.unobserve(this), this._item = item;
    var t = item.getAuctionData();
    this.getView().pinListItem(item, this._slot), t.isValid() && t.onDataUpdated.observe(this, this.onTimedUpdate)
}, controllers.views.PinnedListItem.prototype.getItem = function getItem() {
    return this._item
}, controllers.views.PinnedListItem.prototype.setSlot = function setSlot(t) {
    this._slot = t, this.setItem(this._slot.getItem())
}, controllers.views.PinnedListItem.prototype.getSlot = function getSlot() {
    return this._slot
}, controllers.views.PinnedListItem.prototype.viewDidAppear = function viewDidAppear() {
    if (this.superclass(), utils.JS.isValid(this._iterator)) {
        var view = this.getView();
        view.setHasNext(-1 !== this._getNextIndex(this._iterator)), view.setHasPrev(-1 !== this._getPrevIndex(this._iterator))
    }
}, controllers.views.PinnedListItem.prototype._ePinnedLeftBtnPressed = function _ePinnedLeftBtnPressed(sender, t) {
    if (utils.JS.isValid(this._iterator) && !this._iterator.startOfList) {
        this._iterator.setIndex(this._getPrevIndex(this._iterator));
        var i = this._iterator.current();
        this.setSlot(i), this.getView().setHasNext(-1 !== this._getNextIndex(this._iterator)), this.getView().setHasPrev(-1 !== this._getPrevIndex(this._iterator)), this.onItemChange.notify(i)
    }
}, controllers.views.PinnedListItem.prototype._ePinnedRightBtnPressed = function _ePinnedRightBtnPressed(sender, t) {
    if (utils.JS.isValid(this._iterator) && !this._iterator.endOfList) {
        this._iterator.setIndex(this._getNextIndex(this._iterator));
        var i = this._iterator.current();
        this.setSlot(i), this.getView().setHasNext(-1 !== this._getNextIndex(this._iterator)), this.getView().setHasPrev(-1 !== this._getPrevIndex(this._iterator)), this.onItemChange.notify(i)
    }
}, controllers.views.PinnedListItem.prototype._getNextIndex = function _getNextIndex(iterator) {
    for (var t = iterator.getIndex() + 1, i = iterator.get(t); null !== i;) {
        if (!i.getItem().isCustomBrick()) return t;
        i = iterator.get(++t)
    }
    return -1
}, controllers.views.PinnedListItem.prototype._getPrevIndex = function _getPrevIndex(iterator) {
    for (var t = iterator.getIndex() - 1, i = iterator.get(t); null !== i;) {
        if (!i.getItem().isCustomBrick()) return t;
        i = iterator.get(--t)
    }
    return -1
}, controllers.views.PinnedListItem.prototype.onTimedUpdate = function onTimedUpdate() {
    this.getView().onTimedUpdate()
}, controllers.views.PinnedListItem.prototype.refresh = function refresh() {
    this.getView().refreshItem()
}, NamespaceManager.Register("controllers.items"), controllers.items.PlayerBio = function PlayerBioController() {
    FUIViewController.call(this), this._pinnedItem = null, this._viewModel = new viewmodels.ItemList([]), this._pinnedItemController = new controllers.views.PinnedListItem
}, utils.JS.inherits(controllers.items.PlayerBio, FUIViewController), controllers.items.PlayerBio.prototype.init = function init() {
    this.initialized || (this.superclass(), TelemetryManager.trackPage(TelemetryManager.Sections.MISC, "PlayerBio"))
}, controllers.items.PlayerBio.prototype.initWithItem = function initWithItem(item) {
    this.initialized || (utils.Debug.Assert(item instanceof entities.Item, "Initialization expected an item entity."), this._pinnedItem = item, this._viewModel.add(item), this._pinnedItemController.initWithItem(item), this.init())
}, controllers.items.PlayerBio.prototype.dealloc = function dealloc() {
    this._pinnedItemController.dealloc(), this._viewModel.resetCollection([]), this._viewModel.stopAuctionUpdates(), this._pinnedItemController = null, this._pinnedItem = null, this._viewModel = null, this.superclass()
}, controllers.items.PlayerBio.prototype.viewDidDisappear = function viewDidDisappear() {
    this.superclass(), this._viewModel.stopAuctionUpdates()
}, controllers.items.PlayerBio.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    this._pinnedItem && this._pinnedItem.isPlayer() && this._pinnedItem.getMetaData() ? (view.setupNavigation(this._eNavSelected.bind(this), this._pinnedItem.isLegend()), view.appendPinnedItemView(this._pinnedItemController.getView()), view.render(enums.PlayerBioDisplayGroup.INFO, this._pinnedItem)) : (utils.Debug.Assert(!1, "controllers.items.PlayerBio::viewDidAppear. Requires a player item with proper meta data to be initialized with."), services.Notification.queue([gLocalization.lText("playerbio.unavailable"), enums.UINotificationType.NEGATIVE])), isPhone() && this._viewModel.startAuctionUpdates(), view.layoutSubviews(), view.calculateHeights(), this.getNavigationController().setNavigationVisibility(!0)
}, controllers.items.PlayerBio.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.PlayerBio
}, controllers.items.PlayerBio.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("navbar.label.playerBio")
}, controllers.items.PlayerBio.prototype._eNavSelected = function _eNavSelected(sender, event, data) {
    this.getView().render(data.id, this._pinnedItem)
}, NamespaceManager.Register("views.items"), views.items.SendToActiveSquad = function SendToActiveSquadView() {
    FUIView.call(this), this._pinnedRow = null, Object.defineProperty(this, "_pinnedRow", {
        writable: !0,
        enumerable: !1
    }), this.onSlotSelected = new FUTObservable, Object.defineProperty(this, "onSlotSelected", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.items.SendToActiveSquad, FUIView), views.items.SendToActiveSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "SendToActiveSquad"), t.classList.add("panel-list"), t.classList.add("layout-sectioned-list"), this.__pinnedDiv = document.createElement("ul"), this.$_pinnedDiv = $(this.__pinnedDiv), this.__pinnedDiv.classList.add("pinnedDiv"), t.appendChild(this.__pinnedDiv), this.__scrollerDiv = document.createElement("div"), this.$_scrollerDiv = $(this.__scrollerDiv), this.__scrollerDiv.classList.add("nativeScrolling"), this._startingEleven = new views.lists.SectionedItemList, this.__scrollerDiv.appendChild(this._startingEleven.getRootElement()), this._subs = new views.lists.SectionedItemList, this.__scrollerDiv.appendChild(this._subs.getRootElement()), this._reserves = new views.lists.SectionedItemList, this.__scrollerDiv.appendChild(this._reserves.getRootElement()), t.appendChild(this.__scrollerDiv), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.SendToActiveSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__pinnedDiv = null, this.$_pinnedDiv = null, this.__scrollerDiv = null, this.$_scrollerDiv = null, this._startingEleven.destroy(), this._startingEleven = null, this._subs.destroy(), this._subs = null, this._reserves.destroy(), this._reserves = null
}, views.items.SendToActiveSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.SendToActiveSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.SendToActiveSquad.prototype.init = function init() {
    this.superclass(), this._startingEleven.init(), this._startingEleven.setHeader(gLocalization.lText("dock.label.startingeleven"), ""), this._subs.init(), this._subs.setHeader(gLocalization.lText("dock.label.substitutes"), ""), this._reserves.init(), this._reserves.setHeader(gLocalization.lText("dock.label.reserves"), "")
}, views.items.SendToActiveSquad.prototype.dealloc = function dealloc() {
    this._pinnedRow && (this._pinnedRow.destroy(), this._pinnedRow = null), this.onSlotSelected.dealloc(), this.onSlotSelected = null, this.superclass()
}, views.items.SendToActiveSquad.prototype.setPinnedItem = function setPinnedItem(item) {
    this.$_pinnedDiv.empty(), this._pinnedRow && this._pinnedRow.destroy(), this._pinnedRow = new components.ListRowItem, this._pinnedRow.setData(item), this._pinnedRow.render(), this.$_pinnedDiv.append(this._pinnedRow.getRoot()), requestAnimationFrame(function() {
        this.$_scrollerDiv.css("top", parseInt(this.$_pinnedDiv.height(), 10))
    }.bind(this))
}, views.items.SendToActiveSquad.prototype.renderSections = function renderSections(t, i, s) {
    var o = [].concat(t, i, s);
    [].concat(this._startingEleven.addItems(t), this._subs.addItems(i), this._reserves.addItems(s)).forEach(function(t, i) {
        t.slotData = o[i], t.setComparisonData(this._pinnedRow.getData()), t.setAction(t.getData().isValid() ? enums.UIRowActionClass.SWAP : enums.UIRowActionClass.ADD, this._onActionCB.bind(this, i))
    }, this), this._startingEleven.render(), this._subs.render(), this._reserves.render()
}, views.items.SendToActiveSquad.prototype._onActionCB = function _onActionCB(index) {
    this.onSlotSelected.notify(index)
}, viewmodels.ActiveSquadSectionList = function(t) {
    viewmodels.ItemSectionList.call(this, t), this.setSection(viewmodels.ActiveSquadSectionList.SECTION.STARTING_ELEVEN, function(item) {
        return item.getIndex() >= 0 && item.getIndex() < entities.Squad.FIELD_PLAYERS
    }, viewmodels.ActiveSquadSectionList.SECTION.STARTING_ELEVEN), this.setSection(viewmodels.ActiveSquadSectionList.SECTION.SUBS, function(item) {
        return item.getIndex() >= entities.Squad.FIELD_PLAYERS && item.getIndex() < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
    }, viewmodels.ActiveSquadSectionList.SECTION.SUBS), this.setSection(viewmodels.ActiveSquadSectionList.SECTION.RESERVES, function(item) {
        return item.getIndex() >= entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS && item.getIndex() < entities.Squad.MANAGER_SLOT_INDEX
    }, viewmodels.ActiveSquadSectionList.SECTION.RESERVES), this._organizeItems()
}, utils.JS.inherits(viewmodels.ActiveSquadSectionList, viewmodels.ItemSectionList), viewmodels.ActiveSquadSectionList.SECTION = {
    STARTING_ELEVEN: 0,
    SUBS: 1,
    RESERVES: 2
}, viewmodels.ActiveSquadSectionList.prototype.getStartingEleven = function getStartingEleven() {
    return this.getSectionItems(viewmodels.ActiveSquadSectionList.SECTION.STARTING_ELEVEN)
}, viewmodels.ActiveSquadSectionList.prototype.getSubs = function getSubs() {
    return this.getSectionItems(viewmodels.ActiveSquadSectionList.SECTION.SUBS)
}, viewmodels.ActiveSquadSectionList.prototype.getReserves = function getReserves() {
    return this.getSectionItems(viewmodels.ActiveSquadSectionList.SECTION.RESERVES)
}, viewmodels.ActiveSquadSectionList.prototype._organizeItems = function _organizeItems() {}, NamespaceManager.Register("controllers.items"), controllers.items.SendToActiveSquad = function SendToActiveSquadController() {
    FUIViewController.call(this), this._viewmodel = null, this._pinnedItem = null
}, utils.JS.inherits(controllers.items.SendToActiveSquad, FUIViewController), controllers.items.SendToActiveSquad.prototype.init = function init() {
    this.initialized || (this.superclass(), gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "MyClubSquadSwap"), repositories.Squad.getSquadById(repositories.Squad.getActiveSquadId()).observe(this, function(t, data) {
        t.unobserve(this);
        var i = data ? data.getPlayers() : [];
        this._viewmodel = new viewmodels.ActiveSquadSectionList(i);
        var view = this.getView();
        view.renderSections(this._viewmodel.getStartingEleven(), this._viewmodel.getSubs(), this._viewmodel.getReserves()), view.onSlotSelected.observe(this, this._eAddSwap)
    }))
}, controllers.items.SendToActiveSquad.prototype.initWithItem = function initWithItem(item) {
    this.initialized || (utils.Debug.Assert(item instanceof entities.Item, "Initialization expected an item entity."), this._pinnedItem = item, this.init())
}, controllers.items.SendToActiveSquad.prototype.dealloc = function dealloc() {
    this.superclass(), this._viewmodel = null
}, controllers.items.SendToActiveSquad.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.SendToActiveSquad
}, controllers.items.SendToActiveSquad.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("navbar.label.activesquad")
}, controllers.items.SendToActiveSquad.prototype.viewDidAppear = function viewDidAppear() {
    this.getNavigationController().setNavigationVisibility(!0, !0), this.superclass(), this._pinnedItem && this.getView().setPinnedItem(this._pinnedItem)
}, controllers.items.SendToActiveSquad.prototype._eAddSwap = function _eAddSwap(t, i) {
    function _onSaveAddSwap(t, data) {
        t.unobserve(this), data.success ? services.Notification.queue([gLocalization.lText("notification.item.toActiveSquad"), enums.UINotificationType.NEUTRAL]) : (o && l.addItemToSlot(i, o), services.Notification.queue(s)), this.getView().setInteractionState(!0), this.getNavigationController().popToRootViewController(!0)
    }
    var s = new transferobjects.Notification(gLocalization.lText("notification.item.toActiveSquadFailed"), enums.UINotificationType.NEGATIVE),
        o = null,
        l = null;
    this.getView().setInteractionState(!1), repositories.Squad.getSquadById(repositories.Squad.getActiveSquadId()).observe(this, function(t, data) {
        if (t.unobserve(this), l = data) {
            var u = l.getSlot(i).getItem().compareDream(this._pinnedItem);
            !l.containsVariationOfCard(this._pinnedItem) || u ? this._pinnedItem.pile !== enums.FUTItemPile.CLUB ? services.Item.move(this._pinnedItem, enums.FUTItemPile.CLUB).observe(this, function(t, data) {
                t.unobserve(this), data.success ? (o = l.addItemToSlot(i, this._pinnedItem), l.save().observe(this, _onSaveAddSwap)) : (services.Notification.queue(s), this.getView().setInteractionState(!0), NavManager.requestGoBackScreen())
            }) : (o = l.addItemToSlot(i, this._pinnedItem), l.save().observe(this, _onSaveAddSwap)) : (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.DUPLICATE_ITEM), this.getView().setInteractionState(!0), this.getNavigationController().popToRootViewController(!0))
        } else services.Notification.queue(s), this.getView().setInteractionState(!0)
    })
}, NamespaceManager.Register("views.items"), views.items.QuickListPanel = function QuickListPanelView() {
    FUITargetActionView.call(this), this._priceLimitsSet = !1, Object.defineProperty(this, "_priceLimitsSet", {
        writable: !0,
        enumerable: !1
    }), this._generate()
}, utils.JS.inherits(views.items.QuickListPanel, FUITargetActionView), views.items.QuickListPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("QuickListPanel"), this._btnToggle = new views.buttons.ListButton, this._btnToggle.getRootElement().classList.add("accordian"), t.appendChild(this._btnToggle.getRootElement()), this.__panelActions = document.createElement("div"), this.$_panelActions = $(this.__panelActions), this.__panelActions.classList.add("panelActions"), this.__boughtPrice = document.createElement("div"), this.$_boughtPrice = $(this.__boughtPrice), this.__boughtPrice.classList.add("boughtPrice"), this.__boughtPrice.classList.add("panelActionRow"), this.__boughtPriceLabel = document.createElement("span"), this.$_boughtPriceLabel = $(this.__boughtPriceLabel), this.__boughtPriceLabel.classList.add("secondary"), this.__boughtPriceLabel.classList.add("boughtPriceLabel"), this.__boughtPrice.appendChild(this.__boughtPriceLabel), this.__boughtPriceValue = document.createElement("span"), this.$_boughtPriceValue = $(this.__boughtPriceValue), this.__boughtPriceValue.classList.add("coins"), this.__boughtPriceValue.classList.add("boughtPriceValue"), this.__boughtPrice.appendChild(this.__boughtPriceValue), this.__panelActions.appendChild(this.__boughtPrice);
        var i = document.createElement("div");
        i.classList.add("panelActionRow");
        var s = document.createElement("div");
        s.classList.add("buttonInfoLabel"), this.__minPriceLabel = document.createElement("span"), this.$_minPriceLabel = $(this.__minPriceLabel), this.__minPriceLabel.classList.add("secondary"), this.__minPriceLabel.classList.add("spinnerLabel"), s.appendChild(this.__minPriceLabel), this.__minPrice = document.createElement("span"), this.$_minPrice = $(this.__minPrice), this.__minPrice.classList.add("coins"), this.__minPrice.classList.add("bandingLabel"), s.appendChild(this.__minPrice), i.appendChild(s), this._bidNumericStepper = new components.NumericInputSpinner, this._bidNumericStepper.getRootElement().classList.add("bidSpinner"), i.appendChild(this._bidNumericStepper.getRootElement()), this.__panelActions.appendChild(i);
        var o = document.createElement("div");
        o.classList.add("panelActionRow");
        var l = document.createElement("div");
        l.classList.add("buttonInfoLabel"), this.__maxPriceLabel = document.createElement("span"), this.$_maxPriceLabel = $(this.__maxPriceLabel), this.__maxPriceLabel.classList.add("secondary"), this.__maxPriceLabel.classList.add("spinnerLabel"), l.appendChild(this.__maxPriceLabel), this.__maxPrice = document.createElement("span"), this.$_maxPrice = $(this.__maxPrice), this.__maxPrice.classList.add("coins"), this.__maxPrice.classList.add("bandingLabel"), l.appendChild(this.__maxPrice), o.appendChild(l), this._buyNowNumericStepper = new components.NumericInputSpinner, this._buyNowNumericStepper.getRootElement().classList.add("bidSpinner"), o.appendChild(this._buyNowNumericStepper.getRootElement()), this.__panelActions.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("panelActionRow"), this.__duration = document.createElement("div"), this.$_duration = $(this.__duration), this.__duration.classList.add("secondary"), this.__duration.classList.add("durationLabel"), this.__duration.classList.add("buttonInfoLabel"), u.appendChild(this.__duration), this._durationPicker = new views.controls.DropDown, u.appendChild(this._durationPicker.getRootElement()), this.__panelActions.appendChild(u), this._listButton = new views.buttons.DefaultButton, this._listButton.getRootElement().classList.add("call-to-action"), this.__panelActions.appendChild(this._listButton.getRootElement()), t.appendChild(this.__panelActions), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.QuickListPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._btnToggle.destroy(), this._btnToggle = null, this.__panelActions = null, this.$_panelActions = null, this.__boughtPrice = null, this.$_boughtPrice = null, this.__boughtPriceLabel = null, this.$_boughtPriceLabel = null, this.__boughtPriceValue = null, this.$_boughtPriceValue = null, this.__minPriceLabel = null, this.$_minPriceLabel = null, this.__minPrice = null, this.$_minPrice = null, this._bidNumericStepper.destroy(), this._bidNumericStepper = null, this.__maxPriceLabel = null, this.$_maxPriceLabel = null, this.__maxPrice = null, this.$_maxPrice = null, this._buyNowNumericStepper.destroy(), this._buyNowNumericStepper = null, this.__duration = null, this.$_duration = null, this._durationPicker.destroy(), this._durationPicker = null, this._listButton.destroy(), this._listButton = null
}, views.items.QuickListPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.QuickListPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.QuickListPanel.prototype.init = function init() {
    this.superclass(), this._bidNumericStepper.minValue = AUCTION_MIN_BID, this._bidNumericStepper.getInput().addListener(components.NumericInput.CHANGED, this, this.onBidPriceChanged), this._buyNowNumericStepper.minValue = AUCTION_MIN_BUY, this._buyNowNumericStepper.getInput().addListener(components.NumericInput.CHANGED, this, this.onBuyPriceChanged), this._durationPicker.init(), this._durationPicker.setOptions([{
        id: 0,
        label: gLocalization.lText("auctionduration.hour.singular"),
        value: 3600
    }, {
        id: 1,
        label: gLocalization.lPrint("auctionduration.hour.plural", [gLocalization.lNum(3)]),
        value: 10800
    }, {
        id: 2,
        label: gLocalization.lPrint("auctionduration.hour.plural", [gLocalization.lNum(6)]),
        value: 21600
    }, {
        id: 3,
        label: gLocalization.lPrint("auctionduration.hour.plural", [gLocalization.lNum(12)]),
        value: 43200
    }, {
        id: 4,
        label: gLocalization.lText("auctionduration.day.singular"),
        value: 86400
    }, {
        id: 5,
        label: gLocalization.lPrint("auctionduration.day.plural", [gLocalization.lNum(3)]),
        value: 259200
    }]), this._durationPicker.setIndex(repositories.Item.cachedDurationIndex), this._durationPicker.addTarget(this, this._eDurationChanged, enums.Event.CHANGE), this.__boughtPriceLabel.textContent = gLocalization.lText("auctioninfo.boughtfor"), this.__minPriceLabel.textContent = gLocalization.lText("auctioninfo.startprice"), this.__maxPriceLabel.textContent = gLocalization.lText("auctioninfo.buynowprice"), this.__duration.textContent = gLocalization.lText("auctioninfo.duration"), this._btnToggle.init(), this._btnToggle.addTarget(this, this._eToggle, enums.Event.TAP), this._listButton.init(), this._listButton.setText(gLocalization.lText("infopanel.label.listitem")), this._listButton.addTarget(this, this._eListSelected, enums.Event.TAP)
}, views.items.QuickListPanel.prototype.dealloc = function dealloc() {
    this._durationPicker.removeTarget(this, this._eDurationChanged, enums.Event.CHANGE), this.superclass()
}, views.items.QuickListPanel.prototype.setTitle = function setTitle(title) {
    this._btnToggle.setText(title)
}, views.items.QuickListPanel.prototype.onBidPriceChanged = function onBidPriceChanged(sender) {
    var t = this._bidNumericStepper.value,
        i = this._buyNowNumericStepper.value;
    t >= i && (i < this._buyNowNumericStepper.getInput().maxValue ? this._buyNowNumericStepper.getInput().increase(t) : this._bidNumericStepper.getInput().decrease(i))
}, views.items.QuickListPanel.prototype.onBuyPriceChanged = function onBuyPriceChanged(sender) {
    var t = this._bidNumericStepper.value,
        i = this._buyNowNumericStepper.value;
    t >= i && t !== this._bidNumericStepper.getInput().minValue && this._bidNumericStepper.getInput().decrease(i)
}, views.items.QuickListPanel.prototype._eDurationChanged = function _eDurationChanged(sender, t) {
    repositories.Item.cachedDurationIndex = sender.getIndex()
}, views.items.QuickListPanel.prototype.makeListButtonBusy = function makeListButtonBusy(t) {
    t ? this._listButton.setInteractionState(!1) : this._listButton.setInteractionState(!0)
}, views.items.QuickListPanel.prototype.setPriceLimits = function setPriceLimits(t) {
    this._priceLimitsSet = !!t;
    var i = t ? t.minPrice : AUCTION_MIN_BID,
        s = this._buyNowNumericStepper.getInput().getIncrementAboveVal(i),
        o = t ? t.maxPrice : AUCTION_MAX_BID,
        l = this._bidNumericStepper.getInput().getIncrementBelowVal(o);
    this.__minPrice.textContent = gLocalization.lText("auction.list.min") + " " + gLocalization.lNum(i), this.__maxPrice.textContent = gLocalization.lText("auction.list.max") + " " + gLocalization.lNum(o), this._bidNumericStepper.setLimits(i, l), this._buyNowNumericStepper.setLimits(s, o), this._buyNowNumericStepper.zeroValueReset = o, this._bidNumericStepper.value = i, this._buyNowNumericStepper.value = o, DOMKit.HTMLCollectionToArray(this.getRootElement().getElementsByClassName("buttonInfoLabel")).forEach(function(label) {
        DOMKit.toggleClass(label, "hasPriceBanding", this._priceLimitsSet)
    }, this)
}, views.items.QuickListPanel.prototype.setBidValue = function setBidValue(t) {
    this._bidNumericStepper.value = t > 0 ? Math.max(AUCTION_MIN_BID, Math.min(t, AUCTION_MAX_BID)) : AUCTION_MIN_BID, this._buyNowNumericStepper.value <= this._bidNumericStepper.value && (this._buyNowNumericStepper.value = Math.min(this._buyNowNumericStepper.getInput().getIncrementAboveVal(this._bidNumericStepper.value), AUCTION_MAX_BID))
}, views.items.QuickListPanel.prototype.setBuyNowValue = function setBuyNowValue(t) {
    this._buyNowNumericStepper.value = t > 0 ? Math.max(this._buyNowNumericStepper.getInput().getIncrementAboveVal(AUCTION_MIN_BID), Math.min(t, AUCTION_MAX_BID)) : 0, this._buyNowNumericStepper.value > 0 && this._bidNumericStepper.value >= this._buyNowNumericStepper.value && (this._bidNumericStepper.value = this._bidNumericStepper.getInput().getIncrementBelowVal(this._buyNowNumericStepper.value))
}, views.items.QuickListPanel.prototype.setBoughtPrice = function setBoughtPrice(t) {
    this.__boughtPriceValue.textContent = t > 0 ? gLocalization.lNum(t) : "", DOMKit.toggleClass(this.__boughtPrice, "hasPreviousPrice", t > 0)
}, views.items.QuickListPanel.prototype.hasPriceLimits = function hasPriceLimits() {
    return this._priceLimitsSet
}, views.items.QuickListPanel.prototype.toggle = function toggle() {
    this._btnToggle.toggleClass("open"), DOMKit.toggleClass(this.__panelActions, "open")
}, views.items.QuickListPanel.prototype.open = function open() {
    this._btnToggle.addClass("open"), DOMKit.addClass(this.__panelActions, "open")
}, views.items.QuickListPanel.prototype.close = function close() {
    this._btnToggle.removeClass("open"), DOMKit.removeClass(this.__panelActions, "open")
}, views.items.QuickListPanel.prototype.toggleDisplay = function toggleDisplay(show) {
    this.setDisplay(show)
}, views.items.QuickListPanel.prototype._eToggle = function _eToggle(sender, event, data) {
    this._triggerActions("panelToggle", {
        openState: this.hasClass("open")
    })
}, views.items.QuickListPanel.prototype._eListSelected = function _eListSelected(sender, event, data) {
    this._triggerActions(enums.UIItemActionEvent.LIST_ON_MARKET, {
        bidAmount: this._bidNumericStepper.value,
        buyAmount: this._buyNowNumericStepper.value,
        duration: parseInt(this._durationPicker.value, 10)
    })
}, NamespaceManager.Register("controllers.views"), controllers.views.QuickListPanel = function() {
    FUIViewController.call(this), this._item = null, this.onList = new FUTObservable, Object.defineProperty(this, "onList", {
        writable: !1,
        enumerable: !0
    })
}, utils.JS.inherits(controllers.views.QuickListPanel, FUIViewController), controllers.views.QuickListPanel.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.addTarget(this, this._onList, enums.UIItemActionEvent.LIST_ON_MARKET), view.addTarget(this, this._onOpen, "panelToggle")
    }
}, controllers.views.QuickListPanel.prototype.initWithItem = function initWithItem(item) {
    this.initialized || (utils.Debug.Assert(item instanceof entities.Item, "Initialization expected an Item entity."), this._item = item, this.init())
}, controllers.views.QuickListPanel.prototype.dealloc = function dealloc() {
    this.onList.dealloc(), this.superclass()
}, controllers.views.QuickListPanel.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.QuickListPanel
}, controllers.views.QuickListPanel.prototype._renderView = function _renderView() {
    var view = this.getView(),
        t = this._item.getAuctionData();
    view.setPriceLimits(this._item.getPriceLimits()), view.setBoughtPrice(this._item.lastSalePrice), t.isValid() && (view.setBidValue(t.currentBid > 0 ? t.currentBid : t.startingBid), view.setBuyNowValue(t.buyNowPrice))
}, controllers.views.QuickListPanel.prototype.setItem = function setItem(item) {
    this._item = item, this._renderView()
}, controllers.views.QuickListPanel.viewDidAppear = function viewDidAppear() {
    this._renderView()
}, controllers.views.QuickListPanel.prototype._onList = function _onList(sender, event, data) {
    services.Item.list(this._item, data.bidAmount, data.buyAmount, data.duration).observe(this, function(t, data) {
        t.unobserve(this), data.success && this.onList.notify()
    })
}, controllers.views.QuickListPanel.prototype._onOpen = function _onOpen(sender, event, data) {
    function _onGetMarketDataComplete(t, data) {
        this._renderView(), view.open()
    }
    var view = this.getView();
    data && !data.openState ? repositories.Item.getTransferItems().observe(this, function(t, data) {
        t.unobserve(this);
        var i = data.items.filter(function(item) {
            item.getAuctionData().isSelling()
        });
        data.success && i.length >= repositories.Item.maxAllowedAuctions ? utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.HIT_MAX_LISTING) : !gSettingsModel.isMarketDataEnabled() || view.hasPriceLimits() ? view.toggle() : this._item.hasPriceLimits() ? (this._renderView(), view.open()) : services.Item.getMarketData(this._item).observe(this, _onGetMarketDataComplete)
    }) : view.close()
}, NamespaceManager.Register("views.popups"), views.popups.ChangeKitOption = function ChangeKitOptionView() {
    FUITargetActionView.call(this), this._generate()
}, utils.JS.inherits(views.popups.ChangeKitOption, FUITargetActionView), views.popups.ChangeKitOption.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("kitWrapper");
        var i = document.createElement("div");
        i.classList.add("info"), this.__imgKit = document.createElement("div"), this.$_imgKit = $(this.__imgKit), this.__imgKit.classList.add("activeKitImg"), i.appendChild(this.__imgKit), this.__txtName = document.createElement("h3"), this.$_txtName = $(this.__txtName), i.appendChild(this.__txtName), this.__txtLabel = document.createElement("span"), this.$_txtLabel = $(this.__txtLabel), this.__txtLabel.classList.add("secondary"), this.__txtLabel.classList.add("activeKitTitle"), i.appendChild(this.__txtLabel), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("swap-icon"), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.ChangeKitOption.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__imgKit = null, this.$_imgKit = null, this.__txtName = null, this.$_txtName = null, this.__txtLabel = null, this.$_txtLabel = null
}, views.popups.ChangeKitOption.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.ChangeKitOption.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.ChangeKitOption.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, views.popups.ChangeKitOption.prototype.setKitName = function setKitName(name) {
    this.__txtName.textContent = name
}, views.popups.ChangeKitOption.prototype.setKitImage = function setKitImage(t) {
    this.__imgKit.appendChild(t.getRootElement())
}, views.popups.ChangeKitOption.prototype.setKitLabel = function setKitLabel(label) {
    this.__txtLabel.textContent = label
}, views.popups.ChangeKitOption.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass([enums.UIState.ACTIVE, enums.UIButtonState.HOVER].join(" "))
}, views.popups.ChangeKitOption.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIButtonState.HOVER)
}, views.popups.ChangeKitOption.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), this.addClass(enums.UIState.ACTIVE)
}, views.popups.ChangeKitOption.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.popups.ChangeKitOption.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.popups.ChangeKitOption.prototype._touchCancelled = function _touchCancelled(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.popups.ChangeKitOption.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), this._triggerActions(enums.Event.TAP)
}, NamespaceManager.Register("views.popups"), views.popups.ChangeKit = function ChangeKitView() {
    FUITargetActionView.call(this), this.onExit = new FUTObservable, Object.defineProperty(this, "onExit", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.popups.ChangeKit, FUITargetActionView), views.popups.ChangeKit.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "KitChangePopup");
        var i = document.createElement("header");
        this._exitBtn = new components.ImageButton, this._exitBtn.getRootElement().classList.add("exit-btn"), i.appendChild(this._exitBtn.getRootElement()), this.__selectKit = document.createElement("h1"), this.$_selectKit = $(this.__selectKit), this.__selectKit.classList.add("popupTitle"), i.appendChild(this.__selectKit), t.appendChild(i), this.__selectKitTextInfo = document.createElement("p"), this.$_selectKitTextInfo = $(this.__selectKitTextInfo), this.__selectKitTextInfo.classList.add("text-info"), t.appendChild(this.__selectKitTextInfo);
        var s = document.createElement("div");
        s.classList.add("kits"), this._homeKitOption = new views.popups.ChangeKitOption, s.appendChild(this._homeKitOption.getRootElement()), this._awayKitOption = new views.popups.ChangeKitOption, s.appendChild(this._awayKitOption.getRootElement()), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.ChangeKit.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._exitBtn.destroy(), this._exitBtn = null, this.__selectKit = null, this.$_selectKit = null, this.__selectKitTextInfo = null, this.$_selectKitTextInfo = null, this._homeKitOption.destroy(), this._homeKitOption = null, this._awayKitOption.destroy(), this._awayKitOption = null
}, views.popups.ChangeKit.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.ChangeKit.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.ChangeKit.prototype.init = function init() {
    this.superclass(), this._exitBtn.init(), this._exitBtn.addTarget(this.onExit, this.onExit.notify, enums.Event.TAP), this._homeKitOption.init(), this._awayKitOption.init(), this._homeKitOption.addTarget(this, this._eHomeKitSelected, enums.Event.TAP), this._awayKitOption.addTarget(this, this._eAwayKitSelected, enums.Event.TAP), this._homeKitOption.setKitLabel(gLocalization.lText("infopanel.label.yourhomekit")), this._awayKitOption.setKitLabel(gLocalization.lText("infopanel.label.yourawaykit")), this.__selectKit.textContent = gLocalization.lText("infopanel.label.selectKit")
}, views.popups.ChangeKit.prototype.dealloc = function dealloc() {
    this.onExit.dealloc(), this.superclass()
}, views.popups.ChangeKit.prototype.setHomeKit = function setHomeKit(item, t) {
    this._homeKitOption.setKitName(utils.FUTLocalization.getTeamAbb15ByID(item.teamId, item.getYear())), this._homeKitOption.setKitImage(t)
}, views.popups.ChangeKit.prototype.setAwayKit = function setAwayKit(item, t) {
    this._awayKitOption.setKitName(utils.FUTLocalization.getTeamAbb15ByID(item.teamId, item.getYear())), this._awayKitOption.setKitImage(t)
}, views.popups.ChangeKit.prototype.setSelectedItem = function setSelectedItem(item) {
    this.__selectKitTextInfo.textContent = gLocalization.lPrint("infopanel.text.selectKit", [utils.FUTLocalization.getTeamAbb15ByID(item.teamId, item.getYear())])
}, views.popups.ChangeKit.prototype._eHomeKitSelected = function _eHomeKitSelected(sender, event, data) {
    this._triggerActions(event, {
        kit: enums.KitActivationSlot.HOME
    })
}, views.popups.ChangeKit.prototype._eAwayKitSelected = function _eAwayKitSelected(sender, event, data) {
    this._triggerActions(event, {
        kit: enums.KitActivationSlot.AWAY
    })
}, controllers.views.popups.ChangeKit = function ChangeKitViewController() {
    controllers.views.popups.BasePopup.call(this), this._viewmodel = new viewmodels.Club([]), this._item = null, this.onKitSelected = new FUTObservable, Object.defineProperty(this, "onKitSelected", {
        writable: !1
    })
}, utils.JS.inherits(controllers.views.popups.ChangeKit, controllers.views.popups.BasePopup), controllers.views.popups.ChangeKit.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    view.addTarget(this, this._eKitSelected, enums.Event.TAP), view.onExit.observe(this, this.onExit.notify.bind(this.onExit))
}, controllers.views.popups.ChangeKit.prototype.dealloc = function dealloc() {
    this.onKitSelected.dealloc(), this.superclass()
}, controllers.views.popups.ChangeKit.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.ChangeKit
}, controllers.views.popups.ChangeKit.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var t = this._viewmodel.getActiveItemImg(enums.UIActiveItemImgType.HOME_KIT),
        i = this._viewmodel.getActiveItemImg(enums.UIActiveItemImgType.AWAY_KIT),
        s = repositories.Item.getActiveItems(enums.ItemState.ACTIVE_HOME_KIT),
        o = repositories.Item.getActiveItems(enums.ItemState.ACTIVE_AWAY_KIT),
        view = this.getView();
    view.setHomeKit(s, t), view.setAwayKit(o, i), view.setSelectedItem(this._item)
}, controllers.views.popups.ChangeKit.prototype.setItem = function setItem(item) {
    this._item = item
}, controllers.views.popups.ChangeKit.prototype._eKitSelected = function _eKitSelected(sender, event, data) {
    this.onKitSelected.notify(data.kit), this.closePopup()
}, NamespaceManager.Register("views.items"), views.items.DefaultActionPanel = function DefaultActionPanelView() {
    FUITargetActionView.call(this), this._quickListView = null, this._generate()
}, utils.JS.inherits(views.items.DefaultActionPanel, FUITargetActionView), views.items.DefaultActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("DetailPanel"), this.__auctionInfo = document.createElement("div"), this.$_auctionInfo = $(this.__auctionInfo), this.__auctionInfo.classList.add("auctionInfo");
        var i = document.createElement("div");
        i.classList.add("column"), this.__textInfo = document.createElement("span"), this.$_textInfo = $(this.__textInfo), this.__textInfo.classList.add("secondary"), this.__textInfo.classList.add("subHeading"), i.appendChild(this.__textInfo), this.__valueInfo = document.createElement("span"), this.$_valueInfo = $(this.__valueInfo), this.__valueInfo.classList.add("coins"), this.__valueInfo.classList.add("subContent"), i.appendChild(this.__valueInfo), this.__auctionInfo.appendChild(i), t.appendChild(this.__auctionInfo), this.__itemActions = document.createElement("ul"), this.$_itemActions = $(this.__itemActions), this._playerBioButton = new views.buttons.ListButton, this._playerBioButton.getRootElement().classList.add("more"), this.__itemActions.appendChild(this._playerBioButton.getRootElement()), this._redeemButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._redeemButton.getRootElement()), this._applyConsumableButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._applyConsumableButton.getRootElement()), this._makeItemActiveButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._makeItemActiveButton.getRootElement()), this._sendClubButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._sendClubButton.getRootElement()), this._sendActiveSquadButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._sendActiveSquadButton.getRootElement()), this._sendTransferButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._sendTransferButton.getRootElement()), this._comparePriceButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._comparePriceButton.getRootElement()), this._discardButton = new views.buttons.ListButton, this.__itemActions.appendChild(this._discardButton.getRootElement()), t.appendChild(this.__itemActions), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.DefaultActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__auctionInfo = null, this.$_auctionInfo = null, this.__textInfo = null, this.$_textInfo = null, this.__valueInfo = null, this.$_valueInfo = null, this.__itemActions = null, this.$_itemActions = null, this._playerBioButton.destroy(), this._playerBioButton = null, this._redeemButton.destroy(), this._redeemButton = null, this._applyConsumableButton.destroy(), this._applyConsumableButton = null, this._makeItemActiveButton.destroy(), this._makeItemActiveButton = null, this._sendClubButton.destroy(), this._sendClubButton = null, this._sendActiveSquadButton.destroy(), this._sendActiveSquadButton = null, this._sendTransferButton.destroy(), this._sendTransferButton = null, this._comparePriceButton.destroy(), this._comparePriceButton = null, this._discardButton.destroy(), this._discardButton = null
}, views.items.DefaultActionPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.DefaultActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.DefaultActionPanel.prototype.init = function init() {
    this.superclass(), this._playerBioButton.init(), this._redeemButton.init(), this._applyConsumableButton.init(), this._makeItemActiveButton.init(), this._sendClubButton.init(), this._sendActiveSquadButton.init(), this._sendTransferButton.init(), this._comparePriceButton.init(), this._discardButton.init(), this._playerBioButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._redeemButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._applyConsumableButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._makeItemActiveButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._sendClubButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._sendActiveSquadButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._comparePriceButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._sendTransferButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._discardButton.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._playerBioButton.setText(gLocalization.lText("extendedPlayerInfo.general.playerBio")), this._applyConsumableButton.setText(gLocalization.lText("panel.applyitem.button")), this._makeItemActiveButton.setText(gLocalization.lText("navbar.label.makeactive.item")), this._sendClubButton.setText(gLocalization.lText("infopanel.label.storeInClub")), this._sendActiveSquadButton.setText(gLocalization.lText("infopanel.button.sendtosquad")), this._sendTransferButton.setText(gLocalization.lText("infopanel.label.sendTradePile")), this._comparePriceButton.setText(gLocalization.lText("infopanel.label.findallitems")), this._discardButton.setText(gLocalization.lText("infopanel.label.quickSell")), this._discardButton.displayCurrencyIcon(!0)
}, views.items.DefaultActionPanel.prototype.dealloc = function dealloc() {
    this._quickListView && this.removeQuickList(), this.superclass()
}, views.items.DefaultActionPanel.prototype.render = function render(item, t, i) {
    if (item.isMiscItem()) {
        var s = "";
        return item.isFreeCoins() ? (DOMKit.toggleDisplayStyle(this.__auctionInfo, !0), s = "infopanel.label.collectcoins", this.__textInfo.textContent = gLocalization.lText("card.desc.FreeCreditsDesc"), this.__valueInfo.textContent = gLocalization.lNum(item.getStaticData().amount)) : item.isFreePack() ? (DOMKit.toggleDisplayStyle(this.__auctionInfo, !1), s = "infopanel.label.claimpack") : item.isDraftToken() && (DOMKit.toggleDisplayStyle(this.__auctionInfo, !1), s = "infopanel.label.claimdrafttoken"), this._redeemButton.setText(gLocalization.lText(s)), this._redeemButton.setDisplay(!0), this._applyConsumableButton.setDisplay(!1), this._makeItemActiveButton.setDisplay(!1), this._sendClubButton.setDisplay(!1), this._sendActiveSquadButton.setDisplay(!1), this._sendTransferButton.setDisplay(!1), this._discardButton.setDisplay(!1), this._playerBioButton.setDisplay(!1), void this._comparePriceButton.setDisplay(!1)
    }
    var o = item.isDuplicate(),
        l = item.isClubItem(),
        u = item.concept,
        h = !1;
    l && !o && (h = item.isActiveClubItem(), this._makeItemActiveButton.setInteractionState(!h), this._makeItemActiveButton.setText(h ? gLocalization.lText("navbar.label.itemalreadyactive") : gLocalization.lText("navbar.label.makeactive.item")));
    var p = item.pile !== enums.FUTItemPile.TRANSFER && !h;
    this._sendTransferButton.setDisplay(p), p && (item.untradeable || item.isLoaned()) ? (this._sendTransferButton.setText(gLocalization.lText("infopanel.label.untradeable")), this._sendTransferButton.setInteractionState(!1)) : p && i && (this._sendTransferButton.setText(gLocalization.lText("popup.error.tradetoken.SellItemTradePileFullTitle")), this._sendTransferButton.setInteractionState(!1)), this._sendClubButton.setText(gLocalization.lText(o ? "infopanel.button.swap" : "infopanel.label.storeInClub")), this._discardButton.setSubtext(gLocalization.lNum(item.discardValue)), item.isLoaned() && this._comparePriceButton.setText(gLocalization.lText("infopanel.button.searchmarket")), this._redeemButton.setDisplay(!1), this._makeItemActiveButton.setDisplay(l && !o), this._sendClubButton.setDisplay(!u && item.pile !== enums.FUTItemPile.CLUB), this._playerBioButton.setDisplay(item.isPlayer()), this._discardButton.setDisplay(!u && !h);
    var m = NavManager.getCurrentScreen().getScreenId() === Screens.getView("COMPARE_PRICE");
    this._comparePriceButton.setDisplay(!m && !entities.Item.isDanny(item.resourceId) && !entities.Item.isAlex(item.resourceId));
    var _ = item.getAuctionData(),
        g = item.lastSalePrice,
        S = _.startingBid,
        v = _.currentBid;
    _.buyNowPrice;
    this._applyConsumableButton.setDisplay(item.isConsumable() && (item.isTeamFitness() && utils.JS.isValid(t) && !t.isDream() || !item.isTeamFitness())), this._sendActiveSquadButton.setDisplay(utils.JS.isValid(t) && (item.isPlayer() || item.isManager()) && !t.containsItem(item) && !u), _ && v > 0 ? (this.__textInfo.textContent = gLocalization.lText("infopanel.label.congratulations"), this.__valueInfo.textContent = gLocalization.lNum(v), DOMKit.toggleDisplayStyle(this.__auctionInfo, !0)) : _.isExpired() ? (this.__textInfo.textContent = gLocalization.lText("infopanel.label.lastListedPrice"), this.__valueInfo.textContent = gLocalization.lNum(S), DOMKit.toggleDisplayStyle(this.__auctionInfo, !0)) : g > 0 ? (this.__textInfo.textContent = gLocalization.lText("infopanel.label.prevBoughtPrice"), this.__valueInfo.textContent = gLocalization.lNum(g), DOMKit.toggleDisplayStyle(this.__auctionInfo, !0)) : DOMKit.toggleDisplayStyle(this.__auctionInfo, !1)
}, views.items.DefaultActionPanel.prototype.appendQuickList = function appendQuickList(t) {
    this._quickListView = t, DOMKit.insertAfter(t.getRootElement(), this.__auctionInfo)
}, views.items.DefaultActionPanel.prototype.removeQuickList = function removeQuickList() {
    this._quickListView && (DOMKit.remove(this._quickListView.getRootElement()), this._quickListView = null)
}, views.items.DefaultActionPanel.prototype._eButtonSelected = function _eButtonSelected(sender, event, data) {
    var t = enums.UIItemActionEvent.BIO;
    sender === this._playerBioButton ? t = enums.UIItemActionEvent.BIO : sender === this._redeemButton ? t = enums.UIItemActionEvent.REDEEM : sender === this._applyConsumableButton ? t = enums.UIItemActionEvent.APPLY_CONSUMABLE : sender === this._makeItemActiveButton ? t = enums.UIItemActionEvent.ACTIVATE : sender === this._sendClubButton ? t = enums.UIItemActionEvent.SEND_TO_CLUB : sender === this._sendActiveSquadButton ? t = enums.UIItemActionEvent.SEND_TO_SQUAD : sender === this._sendTransferButton ? t = enums.UIItemActionEvent.SEND_TO_TRANSFERS : sender === this._comparePriceButton ? t = enums.UIItemActionEvent.COMPARE : sender === this._discardButton && (t = enums.UIItemActionEvent.DISCARD), this._triggerActions(t)
}, NamespaceManager.Register("views.items"), views.items.DuplicateLoanActionPanel = function DuplicateLoanActionPanelView() {
    FUIView.call(this), this.onDiscard = new FUTObservable, Object.defineProperty(this, "onDiscard", {
        writable: !1
    }), this.onPlayerBio = new FUTObservable, Object.defineProperty(this, "onPlayerBio", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.items.DuplicateLoanActionPanel, FUIView), views.items.DuplicateLoanActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("DetailPanel");
        var i = document.createElement("div");
        i.classList.add("auctionInfo");
        var s = document.createElement("div");
        s.classList.add("column"), this.__itemInfo1Label = document.createElement("span"), this.$_itemInfo1Label = $(this.__itemInfo1Label), this.__itemInfo1Label.classList.add("secondary"), this.__itemInfo1Label.classList.add("subHeading"), s.appendChild(this.__itemInfo1Label), this.__itemInfo1Value = document.createElement("span"), this.$_itemInfo1Value = $(this.__itemInfo1Value), this.__itemInfo1Value.classList.add("subContent"), s.appendChild(this.__itemInfo1Value), i.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("column"), this.__itemInfo2Label = document.createElement("span"), this.$_itemInfo2Label = $(this.__itemInfo2Label), this.__itemInfo2Label.classList.add("secondary"), this.__itemInfo2Label.classList.add("subHeading"), o.appendChild(this.__itemInfo2Label), this.__itemInfo2Value = document.createElement("span"), this.$_itemInfo2Value = $(this.__itemInfo2Value), this.__itemInfo2Value.classList.add("subContent"), o.appendChild(this.__itemInfo2Value), i.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("column"), this.__itemInfo3Label = document.createElement("span"), this.$_itemInfo3Label = $(this.__itemInfo3Label), this.__itemInfo3Label.classList.add("secondary"), this.__itemInfo3Label.classList.add("subHeading"), l.appendChild(this.__itemInfo3Label), this.__itemInfo3Value = document.createElement("span"), this.$_itemInfo3Value = $(this.__itemInfo3Value), this.__itemInfo3Value.classList.add("subContent"), l.appendChild(this.__itemInfo3Value), i.appendChild(l), t.appendChild(i), this.__itemActions = document.createElement("div"), this.$_itemActions = $(this.__itemActions), this.__itemActions.classList.add("loanPlayer"), this._infoText1 = new components.TextField, this._infoText1.getRootElement().classList.add("infoText"), this.__itemActions.appendChild(this._infoText1.getRootElement()), this._infoText2 = new components.TextField, this._infoText2.getRootElement().classList.add("infoText"), this.__itemActions.appendChild(this._infoText2.getRootElement()), this._actionButton = new views.buttons.DefaultButton, this._actionButton.getRootElement().classList.add("call-to-action"), this.__itemActions.appendChild(this._actionButton.getRootElement());
        var u = document.createElement("ul");
        this._playerBioButton = new views.buttons.ListButton, this._playerBioButton.getRootElement().classList.add("more"), u.appendChild(this._playerBioButton.getRootElement()), this.__itemActions.appendChild(u), t.appendChild(this.__itemActions), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.DuplicateLoanActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__itemInfo1Label = null, this.$_itemInfo1Label = null, this.__itemInfo1Value = null, this.$_itemInfo1Value = null, this.__itemInfo2Label = null, this.$_itemInfo2Label = null, this.__itemInfo2Value = null, this.$_itemInfo2Value = null, this.__itemInfo3Label = null, this.$_itemInfo3Label = null, this.__itemInfo3Value = null, this.$_itemInfo3Value = null, this.__itemActions = null, this.$_itemActions = null, this._infoText1.destroy(), this._infoText1 = null, this._infoText2.destroy(), this._infoText2 = null, this._actionButton.destroy(), this._actionButton = null, this._playerBioButton.destroy(), this._playerBioButton = null
}, views.items.DuplicateLoanActionPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.DuplicateLoanActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.DuplicateLoanActionPanel.prototype.init = function init() {
    this.superclass(), this._actionButton.init(), this._actionButton.setText(gLocalization.lText("common.dialog.ok").toUpperCase()), this._actionButton.addTarget(this.onDiscard, this.onDiscard.notify, enums.Event.TAP), this._playerBioButton.init(), this._playerBioButton.setText(gLocalization.lText("extendedPlayerInfo.general.playerBio")), this._playerBioButton.addTarget(this.onPlayerBio, this.onPlayerBio.notify, enums.Event.TAP)
}, views.items.DuplicateLoanActionPanel.prototype.dealloc = function dealloc() {
    this.onDiscard.dealloc(), this.onPlayerBio.dealloc(), this.superclass()
}, views.items.DuplicateLoanActionPanel.prototype.render = function render(item) {
    function getNumGamesString(t) {
        return gLocalization.lPrint("panel.label.game" + (t > 1 ? "s" : ""), [t])
    }
    utils.Debug.Assert(item.isDuplicateLoanPlayer(), "[views.items.DuplicateLoanActionPanel] Invalid item data, expected a duplicate loan player.");
    var t = item.loans,
        i = item.duplicateItemLoans,
        total = i + t;
    this.$_itemInfo1Label.html(gLocalization.lText("panel.label.currentContract")), this.$_itemInfo1Value.html(getNumGamesString(i)), this.$_itemInfo2Label.html(gLocalization.lText("panel.label.addContract")), this.$_itemInfo2Value.html(getNumGamesString(t)), this.$_itemInfo3Label.html(gLocalization.lText("panel.label.newContract")), this.$_itemInfo3Value.html(getNumGamesString(total)), this._infoText1.setText(gLocalization.lText("panel.text.loanDuplicatePlayer1")), this._infoText2.setText(gLocalization.lText("panel.text.loanDuplicatePlayer2")), this._actionButton.setInteractionState(item.isDuplicateLoanPlayer())
}, NamespaceManager.Register("views.items"), views.items.TransferActionPanel = function TransferActionPanelView() {
    FUIView.call(this), this._timeRemaining = 0, this._updateInterval = 0, this.onClearSold = new FUTObservable, Object.defineProperty(this, "onClearSold", {
        writable: !1
    }), this.onPlayerBio = new FUTObservable, Object.defineProperty(this, "onPlayerBio", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.items.TransferActionPanel, FUIView), views.items.TransferActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("DetailPanel"), this.__activeTrade = document.createElement("div"), this.$_activeTrade = $(this.__activeTrade), this.__activeTrade.classList.add("auctionInfo");
        var i = document.createElement("div");
        i.classList.add("column"), this.__headerTimeRemaining = document.createElement("span"), this.$_headerTimeRemaining = $(this.__headerTimeRemaining), this.__headerTimeRemaining.classList.add("secondary"), this.__headerTimeRemaining.classList.add("subHeading"), i.appendChild(this.__headerTimeRemaining), this.__txtTimeRemaining = document.createElement("span"), this.$_txtTimeRemaining = $(this.__txtTimeRemaining), this.__txtTimeRemaining.classList.add("subContent"), i.appendChild(this.__txtTimeRemaining), this.__activeTrade.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("column"), this.__headerCurrentBid = document.createElement("span"), this.$_headerCurrentBid = $(this.__headerCurrentBid), this.__headerCurrentBid.classList.add("secondary"), this.__headerCurrentBid.classList.add("subHeading"), s.appendChild(this.__headerCurrentBid), this.__txtBidValue = document.createElement("span"), this.$_txtBidValue = $(this.__txtBidValue), this.__txtBidValue.classList.add("coins"), this.__txtBidValue.classList.add("subContent"), s.appendChild(this.__txtBidValue), this.__activeTrade.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("column"), this.__headerCurrentBuyNow = document.createElement("span"), this.$_headerCurrentBuyNow = $(this.__headerCurrentBuyNow), this.__headerCurrentBuyNow.classList.add("secondary"), this.__headerCurrentBuyNow.classList.add("subHeading"), o.appendChild(this.__headerCurrentBuyNow), this.__txtBuyValue = document.createElement("span"), this.$_txtBuyValue = $(this.__txtBuyValue), this.__txtBuyValue.classList.add("coins"), this.__txtBuyValue.classList.add("subContent"), o.appendChild(this.__txtBuyValue), this.__activeTrade.appendChild(o), t.appendChild(this.__activeTrade), this.__itemActions = document.createElement("div"), this.$_itemActions = $(this.__itemActions), this.__itemActions.classList.add("tradeOptions"), this.__strTradeStatus = document.createElement("p"), this.$_strTradeStatus = $(this.__strTradeStatus), this.__strTradeStatus.classList.add("tradeStatus"), this.__itemActions.appendChild(this.__strTradeStatus), this._removeButton = new views.buttons.DefaultButton, this._removeButton.getRootElement().classList.add("call-to-action"), this.__itemActions.appendChild(this._removeButton.getRootElement());
        var l = document.createElement("ul");
        this._playerBioButton = new views.buttons.ListButton, this._playerBioButton.getRootElement().classList.add("more"), l.appendChild(this._playerBioButton.getRootElement()), this.__itemActions.appendChild(l), t.appendChild(this.__itemActions), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.TransferActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__activeTrade = null, this.$_activeTrade = null, this.__headerTimeRemaining = null, this.$_headerTimeRemaining = null, this.__txtTimeRemaining = null, this.$_txtTimeRemaining = null, this.__headerCurrentBid = null, this.$_headerCurrentBid = null, this.__txtBidValue = null, this.$_txtBidValue = null, this.__headerCurrentBuyNow = null, this.$_headerCurrentBuyNow = null, this.__txtBuyValue = null, this.$_txtBuyValue = null, this.__itemActions = null, this.$_itemActions = null, this.__strTradeStatus = null, this.$_strTradeStatus = null, this._removeButton.destroy(), this._removeButton = null, this._playerBioButton.destroy(), this._playerBioButton = null
}, views.items.TransferActionPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.TransferActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.TransferActionPanel.prototype.init = function init() {
    this.superclass(), this._removeButton.init(), this._removeButton.setText(gLocalization.lText("infopanel.button.remove")), this._removeButton.addTarget(this.onClearSold, this.onClearSold.notify, enums.Event.TAP), this._playerBioButton.init(), this._playerBioButton.setText(gLocalization.lText("extendedPlayerInfo.general.playerBio")), this._playerBioButton.addTarget(this.onPlayerBio, this.onPlayerBio.notify, enums.Event.TAP), this.$_headerTimeRemaining.text(gLocalization.lText("auctioninfo.timeremaining")), this.$_headerCurrentBuyNow.text(gLocalization.lText("auctioninfo.buynowprice")), this.$_strTradeStatus.text(gLocalization.lText("auctioninfo.currentlylisted"))
}, views.items.TransferActionPanel.prototype.dealloc = function dealloc() {
    clearTimeout(this._updateInterval), this._updateInterval = 0, this.onClearSold.dealloc(), this.onPlayerBio.dealloc(), this.superclass()
}, views.items.TransferActionPanel.prototype.toggleRemove = function toggleRemove(t) {
    this._removeButton.setDisplay(t)
}, views.items.TransferActionPanel.prototype.togglePlayerBio = function togglePlayerBio(t) {
    this._playerBioButton.setDisplay(t)
}, views.items.TransferActionPanel.prototype.setBuyNowText = function setBuyNowText(t) {
    this.$_txtBuyValue.text(gLocalization.lNum(t))
}, views.items.TransferActionPanel.prototype.setCurrentBidText = function setCurrentBidText(t, i) {
    var s = i >= t;
    this.$_headerCurrentBid.html(gLocalization.lText(s ? "auctioninfo.currentbid" : "auctioninfo.startprice")), this.$_txtBidValue.html(gLocalization.lNum(s ? i : t))
}, views.items.TransferActionPanel.prototype.render = function render(item) {
    var t = item.getAuctionData();
    this.toggleRemove(t.isClosedTrade()), this.togglePlayerBio(item.isPlayer()), this.$_strTradeStatus.toggle(!t.isClosedTrade()), this.setCurrentBidText(t.startingBid, t.currentBid), this.setBuyNowText(t.buyNowPrice), this.onTimedUpdate(t)
}, views.items.TransferActionPanel.prototype.onTimedUpdate = function onTimedUpdate(t) {
    if (clearTimeout(this._updateInterval), this._timeRemaining = t.getSecondsRemaining(), this._timeRemaining <= 0) {
        var i = t.isPendingExpiry() ? "auctioninfo.timeremaining.pending" : "watchlist.dock.categories.expired";
        this.$_txtTimeRemaining.removeClass("alarm-txt").text(gLocalization.lText(i))
    } else this._updateTimeRemaining()
}, views.items.TransferActionPanel.prototype._updateTimeRemaining = function _updateTimeRemaining() {
    this.$_txtTimeRemaining.toggleClass("alarm-txt", this._timeRemaining < 15).text(gLocalization.lTimeRemaining(this._timeRemaining)), this._timeRemaining > 0 && this._timeRemaining--, this._updateInterval = setTimeout(this._updateTimeRemaining.bind(this), 1e3)
}, NamespaceManager.Register("views.buttons"), views.buttons.ToggleButton = function FUIToggleButton() {
    FUIButton.call(this), this._checked = !1, this._textOn = "", this._textOff = "", this._generate()
}, utils.JS.inherits(views.buttons.ToggleButton, FUIButton), views.buttons.ToggleButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("toggle"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.ToggleButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.buttons.ToggleButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.ToggleButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.buttons.ToggleButton.prototype.setChecked = function setChecked(value) {
    var t = this._checked;
    this._checked = value, this._updateText(), this.toggleClass("checked", this._checked), value !== t && this._triggerActions(enums.Event.CHANGE)
}, views.buttons.ToggleButton.prototype.getChecked = function getChecked() {
    return this._checked
}, views.buttons.ToggleButton.prototype.setTextOn = function setTextOn(value) {
    this._textOn = value, this._updateText()
}, views.buttons.ToggleButton.prototype.setTextOff = function setTextOff(value) {
    this._textOff = value, this._updateText()
}, views.buttons.ToggleButton.prototype.setAllText = function setAllText(value) {
    this.setTextOff(value), this.setTextOn(value)
}, views.buttons.ToggleButton.prototype._updateText = function _updateText() {
    this.setText(this._checked ? this._textOn : this._textOff)
}, views.buttons.ToggleButton.prototype._tapDetected = function _tapDetected(e) {
    this.setChecked(!this._checked), this.superclass()
}, NamespaceManager.Register("components"), components.FUTTextfield = function() {
    components.BaseComponent.call(this), this._textVal = 0, this._generate()
}, utils.JS.inherits(components.FUTTextfield, components.BaseComponent), components.FUTTextfield.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("p");
        t.classList.add("fut-textfield"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.FUTTextfield.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.FUTTextfield.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.FUTTextfield.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.FUTTextfield.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.FUTTextfield.prototype.getVal = function() {
    return this._textVal
}, components.FUTTextfield.prototype.setVal = function(value) {
    this._textVal = value, this.setText(gLocalization.lNum(value))
}, components.FUTTextfield.prototype.getText = function() {
    return this.getRoot().find(".fut-textfield").html()
}, components.FUTTextfield.prototype.setText = function(t) {
    this.getRoot().find(".fut-textfield").html(t)
}, NamespaceManager.Register("views.items"), views.items.AuctionActionPanel = function AuctionActionPanelView() {
    FUIView.call(this), this._isOutbid = !1, this.onWatch = new FUTObservable, Object.defineProperty(this, "onWatch", {
        writable: !1
    }), this.onBid = new FUTObservable, Object.defineProperty(this, "onBid", {
        writable: !1
    }), this.onBuyNow = new FUTObservable, Object.defineProperty(this, "onBuyNow", {
        writable: !1
    }), this.onFindRelated = new FUTObservable, Object.defineProperty(this, "onFindRelated", {
        writable: !1
    }), this.onPlayerBio = new FUTObservable, Object.defineProperty(this, "onPlayerBio", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.items.AuctionActionPanel, FUIView), views.items.AuctionActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("DetailPanel"), this.__viewAuction = document.createElement("div"), this.$_viewAuction = $(this.__viewAuction), this.__viewAuction.classList.add("auctionInfo");
        var i = document.createElement("div");
        i.classList.add("column"), this.__timeRemainingTitle = document.createElement("span"), this.$_timeRemainingTitle = $(this.__timeRemainingTitle), this.__timeRemainingTitle.classList.add("secondary"), this.__timeRemainingTitle.classList.add("subHeading"), i.appendChild(this.__timeRemainingTitle), this.__timeRemainingVal = document.createElement("span"), this.$_timeRemainingVal = $(this.__timeRemainingVal), this.__timeRemainingVal.classList.add("subContent"), i.appendChild(this.__timeRemainingVal), this.__viewAuction.appendChild(i), this.__currentBid = document.createElement("div"), this.$_currentBid = $(this.__currentBid), this.__currentBid.classList.add("currentBid"), this.__currentBid.classList.add("column"), this.__currentBidTitle = document.createElement("span"), this.$_currentBidTitle = $(this.__currentBidTitle), this.__currentBidTitle.classList.add("secondary"), this.__currentBidTitle.classList.add("subHeading"), this.__currentBid.appendChild(this.__currentBidTitle), this.__detailCurrentBidVal = document.createElement("span"), this.$_detailCurrentBidVal = $(this.__detailCurrentBidVal), this.__detailCurrentBidVal.classList.add("coins"), this.__detailCurrentBidVal.classList.add("subContent"), this.__currentBid.appendChild(this.__detailCurrentBidVal);
        var s = document.createElement("span");
        s.classList.add("currencyArrow"), this.__currentBid.appendChild(s), this.__viewAuction.appendChild(this.__currentBid);
        var o = document.createElement("div");
        o.classList.add("column"), this._watchButton = new views.buttons.ToggleButton, this._watchButton.getRootElement().classList.add("mini"), this._watchButton.getRootElement().classList.add("watch"), o.appendChild(this._watchButton.getRootElement()), this.__viewAuction.appendChild(o), t.appendChild(this.__viewAuction);
        var l = document.createElement("div");
        l.classList.add("bidOptions"), this._bidNumericStepper = new components.NumericInputSpinner, this._bidNumericStepper.getRootElement().classList.add("bidSpinner"), l.appendChild(this._bidNumericStepper.getRootElement()), this._bidButton = new views.buttons.DefaultButton, this._bidButton.getRootElement().classList.add("call-to-action"), this._bidButton.getRootElement().classList.add("bidButton"), l.appendChild(this._bidButton.getRootElement()), this._buyNowButton = new views.buttons.DefaultButton, this._buyNowButton.getRootElement().classList.add("buyButton"), l.appendChild(this._buyNowButton.getRootElement()), t.appendChild(l);
        var u = document.createElement("ul");
        this._playerBioButton = new views.buttons.ListButton, this._playerBioButton.getRootElement().classList.add("more"), u.appendChild(this._playerBioButton.getRootElement()), this._findRelatedButton = new views.buttons.ListButton, u.appendChild(this._findRelatedButton.getRootElement()), t.appendChild(u), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.AuctionActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__viewAuction = null, this.$_viewAuction = null, this.__timeRemainingTitle = null, this.$_timeRemainingTitle = null, this.__timeRemainingVal = null, this.$_timeRemainingVal = null, this.__currentBid = null, this.$_currentBid = null, this.__currentBidTitle = null, this.$_currentBidTitle = null, this.__detailCurrentBidVal = null, this.$_detailCurrentBidVal = null, this._watchButton.destroy(), this._watchButton = null, this._bidNumericStepper.destroy(), this._bidNumericStepper = null, this._bidButton.destroy(), this._bidButton = null, this._buyNowButton.destroy(), this._buyNowButton = null, this._playerBioButton.destroy(), this._playerBioButton = null, this._findRelatedButton.destroy(), this._findRelatedButton = null
}, views.items.AuctionActionPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.AuctionActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.AuctionActionPanel.prototype.init = function init() {
    this.superclass(), this._watchButton.addTarget(this, function(sender, event, data) {
        this.setWatchBusyState(!0), this.onWatch.notify()
    }, enums.Event.TAP), this._watchButton.setTextOn(gLocalization.lText("button.unwatch")), this._watchButton.setTextOff(gLocalization.lText("button.watch")), this._watchButton.init(), this._bidButton.addTarget(this, function(sender, event, data) {
        this.setBidBusyState(!0), this.onBid.notify(this._bidNumericStepper.value)
    }, enums.Event.TAP), this._bidButton.setText(gLocalization.lText("infopanel.button.placebid")), this._bidButton.init(), this._buyNowButton.addTarget(this, function(sender, event, data) {
        this.setBidBusyState(!0), this.onBuyNow.notify()
    }, enums.Event.TAP), this._buyNowButton.setText(gLocalization.lText("infopanel.label.buynow")), this._buyNowButton.init(), NavManager.getCurrentScreen().getScreenId() !== Screens.getView("COMPARE_PRICE") ? (this._findRelatedButton.addTarget(this, function(sender, event, data) {
        this.onFindRelated.notify()
    }, enums.Event.TAP), this._findRelatedButton.setText(gLocalization.lText("infopanel.label.findallitems")), this._findRelatedButton.init()) : this._findRelatedButton.hide(), this._playerBioButton.addTarget(this, function(sender, event, data) {
        this.onPlayerBio.notify()
    }, enums.Event.TAP), this._playerBioButton.setText(gLocalization.lText("extendedPlayerInfo.general.playerBio")), this._playerBioButton.init(), this.__timeRemainingTitle.textContent = gLocalization.lText("auctioninfo.timeremaining")
}, views.items.AuctionActionPanel.prototype.dealloc = function dealloc() {
    this.onWatch.dealloc(), this.onBid.dealloc(), this.onBuyNow.dealloc(), this.onFindRelated.dealloc(), this.onPlayerBio.dealloc(), gUserModel.clearListenersByScope(this), this.superclass()
}, views.items.AuctionActionPanel.prototype.togglePlayerBio = function togglePlayerBio(t) {
    this._playerBioButton.setDisplay(t)
}, views.items.AuctionActionPanel.prototype.toggleBuyNow = function toggleBuyNow(t) {
    t > 0 ? (this._buyNowButton.setText(gLocalization.lPrint("infopanel.label.buynowfor", [gLocalization.lNum(t)])), this._buyNowButton.setDisplay(!0), this._buyNowButton.addClass("coins")) : (this._buyNowButton.setDisplay(!1), this._buyNowButton.removeClass("coins"))
}, views.items.AuctionActionPanel.prototype.toggleWatchedState = function toggleWatchedState(t) {
    this._watchButton.setChecked(t)
}, views.items.AuctionActionPanel.prototype.setBidLimits = function setBidLimits(min, max) {
    this._bidNumericStepper.setLimits(min, max)
}, views.items.AuctionActionPanel.prototype.getMinBidFromAuction = function getMinBidFromAuction(t) {
    var i = this._bidNumericStepper.getInput().getIncrementAboveVal(t.currentBid);
    return t.currentBid > 0 ? i : t.startingBid
}, views.items.AuctionActionPanel.prototype.getMaxBidFromAuction = function getMaxBidFromAuction(t) {
    var i = this._bidNumericStepper.getInput().getIncrementBelowVal(t.buyNowPrice),
        s = t.buyNowPrice > 0 ? i : AUCTION_MAX_BID;
    return Math.max(s, this.getMinBidFromAuction(t))
}, views.items.AuctionActionPanel.prototype.render = function render(item, t) {
    var i = item.getAuctionData(),
        s = i.currentBid > 0 ? this._bidNumericStepper.getInput().getIncrementAboveVal(i.currentBid) : i.startingBid,
        o = i.canBid(s, t);
    this.togglePlayerBio(item.isPlayer()), this.toggleBuyNow(i.buyNowPrice), this.toggleWatchedState(i.watched), this.setBidLimits(this.getMinBidFromAuction(i), this.getMaxBidFromAuction(i)), this.setCurrentBidText(i), this._watchButton.setInteractionState(i.canWatch() || i.watched), this._buyNowButton.setInteractionState(i.canBuy(t)), this._bidButton.setInteractionState(o), this._bidNumericStepper.enabled = o, this.onTimedUpdate(i)
}, views.items.AuctionActionPanel.prototype.setCurrentBidText = function setCurrentBidText(t) {
    var i = t.currentBid,
        s = t.startingBid,
        o = i >= s ? i : s,
        title = "";
    title = i >= s ? t.isActiveTrade() ? "auctioninfo.currentbid" : "auctioninfo.finalprice" : "auctioninfo.startprice", this.__currentBidTitle.textContent = gLocalization.lText(title), this.__detailCurrentBidVal.textContent = gLocalization.lNum(o)
}, views.items.AuctionActionPanel.prototype.onTimedUpdate = function onTimedUpdate(t) {
    !this._isOutbid && t.isOutbid() && this.performOutbidAnimation(), this._isOutbid = t.isOutbid();
    var i = "",
        s = t.getSecondsRemaining();
    s <= 0 ? (i = gLocalization.lText(t.isPendingExpiry() ? "auctioninfo.timeremaining.pending" : "watchlist.dock.categories.expired"), this._watchButton.setInteractionState(t.watched), this._buyNowButton.setInteractionState(!1), this._bidButton.setInteractionState(!1), this._bidNumericStepper.enabled = !1) : i = s > 30 ? gLocalization.lTimeRemainingCondensed(s) : gLocalization.lTimeRemaining(s), this.__timeRemainingVal.textContent = i, s > 0 && s < 15 ? (this.__timeRemainingVal.classList.add("alarm-txt"), s <= 5 && this.__timeRemainingVal.classList.add("expiring")) : (this.__timeRemainingVal.classList.remove("alarm-txt"), this.__timeRemainingVal.classList.remove("expiring")), s > 0 && (this.setBidLimits(this.getMinBidFromAuction(t), this.getMaxBidFromAuction(t)), this.setCurrentBidText(t))
}, views.items.AuctionActionPanel.prototype.setBidBusyState = function setBidBusyState(t) {
    this._buyNowButton.setInteractionState(!t), this._bidButton.setInteractionState(!t)
}, views.items.AuctionActionPanel.prototype.setWatchBusyState = function setWatchBusyState(t) {
    this._watchButton.setInteractionState(!t)
}, views.items.AuctionActionPanel.prototype._performBidAnimation = function _performBidAnimation(t) {
    function _removeBidAnimationClass() {
        this.__currentBid && this.__currentBid.classList.remove(t)
    }
    requestAnimationFrame(function _addBidAnimationClass() {
        this.__currentBid.classList.add(t), setTimeout(_removeBidAnimationClass.bind(this), 3e3)
    }.bind(this))
}, views.items.AuctionActionPanel.prototype.performOutbidAnimation = function performOutbidAnimation() {
    this._performBidAnimation("currencyIncreaseRed")
}, views.items.AuctionActionPanel.prototype.performBidIncreaseAnimation = function performBidIncreaseAnimation() {
    this._performBidAnimation("currencyIncrease")
}, NamespaceManager.Register("interfaces"), interfaces.AuctionUpdater = function() {}, interfaces.AuctionUpdater.prototype.startAuctionUpdates = function() {}, interfaces.AuctionUpdater.prototype.stopAuctionUpdates = function() {}, NamespaceManager.Register("controllers.items"), controllers.items.ItemDetails = function ItemDetailsViewController() {
    FUIViewController.call(this), this._panel = null, this._quickListPanel = new controllers.views.QuickListPanel, this._viewmodel = null, this._activeSquad = null, this._currentAuction = null, this._requestedBid = 0, this._panelSwiping = !0, this._arbitraryInterval = null
}, utils.JS.inherits(controllers.items.ItemDetails, FUIViewController), controllers.items.ItemDetails.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._quickListPanel.init();
        var view = this.getView();
        view.addTarget(this, this._ePrevItem, enums.UIItemNavigationEvent.PREV), view.addTarget(this, this._eNextItem, enums.UIItemNavigationEvent.NEXT);
        var t = getDefaultDispatcher();
        t.addObserver(enums.AppNotification.ITEM_LIST, this, this._onList), t.addObserver(enums.AppNotification.ITEM_MOVE, this, this._nItemMoved), this._arbitraryInterval = setInterval(this._arbitraryViewUpdate.bind(this), 5e3)
    }
}, controllers.items.ItemDetails.prototype.initWithIterator = function initWithIterator(t) {
    this.initialized || (utils.Debug.Assert(t instanceof FUTIterator, "Initialization expected an instance of FUTIterator."), this._viewmodel = t, this.init())
}, controllers.items.ItemDetails.prototype.dealloc = function dealloc() {
    this._viewmodel && this._viewmodel.conforms(interfaces.AuctionUpdater) && this._viewmodel.stopAuctionUpdates();
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.ITEM_LIST, this), t.removeObserver(enums.AppNotification.ITEM_MOVE, this), this._panel && (this._panel.dealloc(), this._panel = null), clearInterval(this._arbitraryInterval), this._quickListPanel.dealloc(), this.superclass()
}, controllers.items.ItemDetails.prototype.enableSwiping = function enableSwiping(t) {
    this._panelSwiping = t
}, controllers.items.ItemDetails.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ItemDetails
}, controllers.items.ItemDetails.prototype._getPanelViewInstanceFromData = function _getPanelViewInstanceFromData(item, t) {
    this._panel && this._panel.dealloc();
    var i = item.getAuctionData();
    if (item.isDuplicateLoanPlayer()) this._panel = new views.items.DuplicateLoanActionPanel, this._panel.init(), this._panel.render(item), this._panel.onPlayerBio.observe(this, this._onPlayerBio), this._panel.onDiscard.observe(this, this._onCombineLoans);
    else if (i.isSelling() && i.isActiveTrade() || i.isSold()) this._panel = new views.items.TransferActionPanel, this._panel.init(), this._panel.render(item), this._panel.onClearSold.observe(this, this._onClearSold), this._panel.onPlayerBio.observe(this, this._onPlayerBio);
    else if (!i.isValid() || i.isWon() || i.tradeOwner) {
        var s = gSettingsModel.isTradingEnabled() && !gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET) && gUserModel.hasTradeAccess(),
            o = repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER);
        if (this._panel = new views.items.DefaultActionPanel, this._panel.init(), this._panel.render(item, t, o), this._panel.addTarget(this, this._onDiscard, enums.UIItemActionEvent.DISCARD), this._panel.addTarget(this, this._onMove, enums.UIItemActionEvent.SEND_TO_CLUB), this._panel.addTarget(this, this._onMove, enums.UIItemActionEvent.SEND_TO_TRANSFERS), this._panel.addTarget(this, this._onCompare, enums.UIItemActionEvent.COMPARE), this._panel.addTarget(this, this._onRedeem, enums.UIItemActionEvent.REDEEM), this._panel.addTarget(this, this._onApply, enums.UIItemActionEvent.APPLY_CONSUMABLE), this._panel.addTarget(this, this._onActivate, enums.UIItemActionEvent.ACTIVATE), this._panel.addTarget(this, this._onSendToSquad, enums.UIItemActionEvent.SEND_TO_SQUAD), this._panel.addTarget(this, this._onPlayerBio, enums.UIItemActionEvent.BIO), s && !item.untradeable && !item.isActiveClubItem() && !item.isInjured() && (!o || item.pile === enums.FUTItemPile.TRANSFER)) {
            var l, u = this._quickListPanel.getView();
            l = i.isExpired() ? "infopanel.label.relistitem" : "infopanel.label.quickList", u.setTitle(gLocalization.lText(l)), u.close(), this._panel.appendQuickList(u)
        }
    } else this._panel = new views.items.AuctionActionPanel, this._panel.init(), this._panel.render(item, gUserModel.getCredits()), this._panel.onWatch.observe(this, this._onWatch), this._panel.onBid.observe(this, this._onBid), this._panel.onBuyNow.observe(this, this._onBuyNow), this._panel.onFindRelated.observe(this, this._onFindRelated), this._panel.onPlayerBio.observe(this, this._onPlayerBio)
}, controllers.items.ItemDetails.prototype.viewDidAppear = function viewDidAppear() {
    this.getNavigationController().setNavigationVisibility(!1, !1), repositories.Squad.getSquadById(repositories.Squad.getActiveSquadId()).observe(this, function(t, data) {
        t.unobserve(this), this._activeSquad = data;
        var view = this.getView();
        if (view && (this._renderView(), this._refreshPanel(), view.toggleCarouselSwiping(this._panelSwiping)), this._viewmodel) {
            var i = this._viewmodel.current();
            isPhone() && i.isClubConsumable() && 0 === i.stackCount && this._handleRemove([i.id]), this._viewmodel.conforms(interfaces.AuctionUpdater) && this._viewmodel.startAuctionUpdates()
        }
    })
}, controllers.items.ItemDetails.prototype.viewWillDisappear = function viewWillDisappear() {
    this._currentAuction && (this._currentAuction.onDataUpdated.unobserve(this), this._currentAuction = null)
}, controllers.items.ItemDetails.prototype._getViewIteratorItems = function _getViewIteratorItems() {
    var index = this._viewmodel.getIndex();
    return {
        current: this._viewmodel.current(),
        prev: this._viewmodel.get(index - 1),
        next: this._viewmodel.get(index + 1)
    }
}, controllers.items.ItemDetails.prototype._renderView = function _renderView() {
    var t = this._getViewIteratorItems();
    this.getView().render(t.current, t.prev, t.next), this._renderPanel(t.current)
}, controllers.items.ItemDetails.prototype._refreshView = function _refreshView() {
    var t = this._getViewIteratorItems();
    this.getView().render(t.current, t.prev, t.next)
}, controllers.items.ItemDetails.prototype._renderPanel = function _renderPanel(item) {
    this._currentAuction && this._currentAuction.onDataUpdated.unobserve(this), this._currentAuction = item.getAuctionData(), this._currentAuction.onDataUpdated.observe(this, this._onTimedUpdate), this._getPanelViewInstanceFromData(item, this._activeSquad), this._quickListPanel.setItem(item), this._appendPanel()
}, controllers.items.ItemDetails.prototype._refreshPanel = function _refreshPanel() {
    var item = this._viewmodel.current();
    this._panel.conforms(views.items.AuctionActionPanel) ? this._panel.render(item, gUserModel.getCredits()) : this._panel.conforms(views.items.DefaultActionPanel) ? this._panel.render(item, this._activeSquad, repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER)) : this._panel.render(item)
}, controllers.items.ItemDetails.prototype._appendPanel = function _appendPanel() {
    this.getView().appendPanel(this._panel)
}, controllers.items.ItemDetails.prototype._ePrevItem = function _ePrevItem(sender, event) {
    if (!this._viewmodel.startOfList) {
        var t = this._viewmodel.previous(),
            i = this._viewmodel.get(this._viewmodel.getIndex() - 1);
        this._renderPanel(t), this.getView().showPrev(i)
    }
}, controllers.items.ItemDetails.prototype._eNextItem = function _eNextItem(sender, event) {
    if (!this._viewmodel.endOfList) {
        var t = this._viewmodel.next(),
            next = this._viewmodel.get(this._viewmodel.getIndex() + 1);
        this._renderPanel(t), this.getView().showNext(next)
    }
}, controllers.items.ItemDetails.prototype.onIndexChange = function onIndexChange(index) {
    this._renderView()
}, controllers.items.ItemDetails.prototype._onBid = function _onBid(t, value) {
    var view = this._panel,
        i = this._viewmodel.current().getAuctionData();
    this._requestedBid = value, i.getSecondsRemaining() > 0 && (repositories.Item.isPileFull(enums.FUTItemPile.INBOX) && !i.watched ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.WATCH_LIST_FULL), view.setBidBusyState(!1)) : this._requestedBid < i.currentBid || this._requestedBid < i.startingBid ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.BID_TOO_LOW), view.setBidBusyState(!1)) : i.isHighestBid() ? utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.BID_WHEN_HIGHEST_BIDDER, null, this._eBidConfirmed.bind(this), this._eBidCancelled.bind(this)) : this._eBidConfirmed())
}, controllers.items.ItemDetails.prototype._eBidConfirmed = function _eBidConfirmed() {
    var item = this._viewmodel.current(),
        view = this._panel;
    utils.JS.isNumber(this._requestedBid) && this._requestedBid > 0 ? services.Item.bid(item, this._requestedBid).observe(this, function _eBidComplete(t, data) {
        t.unobserve(this);
        var i = item.getAuctionData();
        data.success ? i.isWon() ? this._renderView() : (i.isHighestBid() && view.performBidIncreaseAnimation(), this._refreshView(), this._refreshPanel()) : data.error ? NetworkErrorManager.handle(data.error, !1, function() {
            view.setBidBusyState(!1), data.error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET ? this._gotoLockedFromTransferMarket() : i.setStale(!0)
        }.bind(this)) : view.setBidBusyState(!1)
    }) : view.setBidBusyState(!1)
}, controllers.items.ItemDetails.prototype._eBidCancelled = function _eBidCancelled() {
    this._panel.setBidBusyState(!1)
}, controllers.items.ItemDetails.prototype._onBuyNow = function _onBuyNow(t) {
    var i = this._viewmodel.current().getAuctionData(),
        s = i.buyNowPrice;
    this._requestedBid = s, i.getSecondsRemaining() > 0 && (repositories.Item.numItemsInCache(enums.FUTItemPile.PURCHASED) >= MAX_NEW_ITEMS ? utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.NEW_ITEMS_FULL, null, this._goToUnassigned.bind(this), null) : s > 0 && s <= gUserModel.getCredits() && utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.CONFIRM_BUY_NOW, [gLocalization.lNum(s)], this._eBidConfirmed.bind(this), this._eBidCancelled.bind(this)))
}, controllers.items.ItemDetails.prototype._onCombineLoans = function _onCombineLoans(t) {
    services.Item.combineLoans(this._viewmodel.current()).observe(this, function _eCombineLoansComplete(t, response) {
        t.unobserve(this), response.success ? this._handleRemove(response.data.itemIds) : services.Notification.queue([gLocalization.lText("notification.error.item.combineLoans"), enums.UINotificationType.NEGATIVE])
    })
}, controllers.items.ItemDetails.prototype._onDiscard = function _onDiscard(sender, event, data) {
    var item = this._viewmodel.current();
    utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.CONFIRM_DISCARD, [gLocalization.lNum(item.discardValue)], this._onDiscardConfirm.bind(this))
}, controllers.items.ItemDetails.prototype._onDiscardConfirm = function _onDiscardConfirm() {
    services.Item.discard(this._viewmodel.current()).observe(this, function _eDiscardComplete(t, response) {
        t.unobserve(this), response.success ? this._handleRemove(response.data.itemIds) : services.Notification.queue([gLocalization.lText("notification.error.item.discard"), enums.UINotificationType.NEGATIVE])
    })
}, controllers.items.ItemDetails.prototype._onMove = function _onMove(sender, event, data) {
    var item = this._viewmodel.current(),
        t = event === enums.UIItemActionEvent.SEND_TO_TRANSFERS ? enums.FUTItemPile.TRANSFER : enums.FUTItemPile.CLUB;
    services.Item.move(item, t).observe(this, function _eMoveComplete(i, data) {
        if (i.unobserve(this), data.success) {
            var s = "";
            s = t === enums.FUTItemPile.TRANSFER ? item.isManager() ? gLocalization.lText("notification.manager.toTradePile") : item.isPlayer() ? gLocalization.lText("notification.player.toTradePile") : gLocalization.lText("notification.item.oneToTradePile") : gLocalization.lText("notification.item.oneToClub"), services.Notification.queue([s, enums.UINotificationType.NEUTRAL]), this._handleItemMove(data.itemIds, data.clubDuplicates)
        } else services.Notification.queue([gLocalization.lText("notification.item.moveFailed"), enums.UINotificationType.NEGATIVE])
    })
}, controllers.items.ItemDetails.prototype._nItemMoved = function _nItemMoved(t, sender, data) {
    this._viewmodel && this._viewmodel.length > 0 && (1 === data.itemIds.length ? this._handleItemMove(data.itemIds, data.clubDuplicates) : this._renderView())
}, controllers.items.ItemDetails.prototype._handleItemMove = function _handleItemMove(t, i) {
    var s = this._viewmodel.current(),
        o = s.isConsumable();
    if (t.indexOf(s.id) > -1 || o && 0 === s.stackCount) {
        var index = this._viewmodel.getIndex(),
            duplicate = utils.JS.find(i, function(item) {
                return item.id === s.duplicateId
            });
        if (this._viewmodel.remove(index), this._viewmodel.values().forEach(function(item) {
                item.compareResourceTo(s, !0) && s.pile === enums.FUTItemPile.CLUB && (item.duplicateId = s.id)
            }), duplicate && (this._viewmodel.add(duplicate, index), this._viewmodel.setIndex(index)), this._viewmodel.length > 0)
            if (utils.JS.isValid(duplicate)) this._renderView();
            else {
                var l = this._getViewIteratorItems();
                this._renderPanel(l.current), this.getView().removeCurrent(l.current, l.prev, l.next)
            }
        else NavManager.requestGoBackScreen()
    } else o && s.stackCount > 0 && this._refreshConsumable(s)
}, controllers.items.ItemDetails.prototype._onCompare = function _onCompare(sender, event, data) {
    var item = this._viewmodel.current(),
        t = {
            itemData: item,
            searchCriteria: new transferobjects.SearchCriteria
        };
    t.searchCriteria.type = item.getSearchType(), t.searchCriteria.defId = item.getDefId(), NavManager.requestChildScreen(Screens.getView("COMPARE_PRICE"), t)
}, controllers.items.ItemDetails.prototype._onRedeem = function _onRedeem(sender, event, data) {
    services.Item.redeem(this._viewmodel.current()).observe(this, function _eRedeemComplete(t, data) {
        t.unobserve(this), data.success && this._handleRemove(data.itemIds)
    })
}, controllers.items.ItemDetails.prototype._onList = function _onList(t, sender, data) {
    this._viewmodel.current() && data.itemIds.indexOf(this._viewmodel.current().id) > -1 && this._renderView()
}, controllers.items.ItemDetails.prototype._onClearSold = function _onClearSold(t) {
    services.Item.clearSoldItems(this._viewmodel.current()).observe(this, function _eClearSoldComplete(t, data) {
        t.unobserve(this), data.success && this._handleRemove(data.itemIds)
    })
}, controllers.items.ItemDetails.prototype._onActivate = function _onActivate(t, i) {
    function _eActivateComplete(t, data) {
        t.unobserve(this), data.success && (this._refreshView(), this._refreshPanel(), this._panel.removeQuickList())
    }
    var item = this._viewmodel.current();
    if (item.isKit()) {
        var s = new controllers.views.popups.ChangeKit;
        s.setItem(item), s.onKitSelected.observe(this, function _eKitTypeSelectComplete(t, i) {
            t.unobserve(this), services.Item.activate(item, i).observe(this, _eActivateComplete)
        }), gPopupClickShield.setActivePopup(s)
    } else services.Item.activate(item).observe(this, _eActivateComplete)
}, controllers.items.ItemDetails.prototype._onSendToSquad = function _onSendToSquad(t) {
    function _saveSquad(refresh) {
        repositories.Squad.getSquadById(repositories.Squad.getActiveSquadId()).observe(this, function(t, i) {
            t.unobserve(this), i.addItemToSlot(entities.Squad.MANAGER_SLOT_INDEX, item), i.save().observe(this, function(t, s) {
                t.unobserve(this), s.success && (this._activeSquad = i, refresh && this._refreshPanel(), services.Notification.queue([gLocalization.lText("notification.item.toActiveSquad"), enums.UINotificationType.NEUTRAL]))
            })
        })
    }
    var item = this._viewmodel.current();
    item.isPlayer() ? this._gotoSendToActiveSquadFlow() : item.isManager() && (item.pile !== enums.FUTItemPile.CLUB ? services.Item.move(item, enums.FUTItemPile.CLUB).observe(this, function _eSquadMoveComplete(t, data) {
        t.unobserve(this), data.success ? (this._handleItemMove(data.itemIds, data.clubDuplicates), _saveSquad.call(this, !1)) : services.Notification.queue([gLocalization.lText("notification.item.toActiveSquadFailed"), enums.UINotificationType.NEGATIVE])
    }) : _saveSquad.call(this, !0))
}, controllers.items.ItemDetails.prototype._onApply = function _onApply(t) {
    var item = this._viewmodel.current();
    item.isTeamFitness() ? utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.APPLY_CONSUMABLE, null, function _applyTeamFitness() {
        repositories.Squad.getSquadById(repositories.Squad.getActiveSquadId()).observe(this, function(t, i) {
            t.unobserve(this);
            var s = i.getPlayers().reduce(function(t, i) {
                    var s = i.getItemData();
                    return i.isValid() && s.isPlayer() && t.push(s), t
                }, []),
                o = services.Item.applyTo(item, s);
            isPhone() && o.observe(this, function(t, data) {
                t.unobserve(this), data.success && item.isClubConsumable() && 0 === item.stackCount && this._handleRemove([item.id])
            })
        })
    }.bind(this), null) : this._gotoApplyConsumableFlow()
}, controllers.items.ItemDetails.prototype._onWatch = function _onWatch(t) {
    var i = this._viewmodel.current().getAuctionData();
    i.watched ? i.isHighestBid() ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.CANT_UNWATCH_ACTIVE_BID), this._panel.setWatchBusyState(!1)) : this._onUnwatchAction(t) : repositories.Item.isPileFull(enums.FUTItemPile.INBOX) ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.WATCH_LIST_FULL), this._panel.setWatchBusyState(!1)) : this._onWatchAction(t)
}, controllers.items.ItemDetails.prototype._onWatchAction = function(t) {
    var item = this._viewmodel.current();
    services.Item.target(item).observe(this, function(t, data) {
        t.unobserve(this);
        var view = this._panel;
        view.toggleWatchedState(item.getAuctionData().watched), view.setWatchBusyState(!1), data.success ? services.Notification.queue([gLocalization.lText("notification.item.watched"), enums.UINotificationType.NEUTRAL]) : data.error && data.error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && this._gotoLockedFromTransferMarket()
    })
}, controllers.items.ItemDetails.prototype._onUnwatchAction = function _onUnwatchAction(t) {
    var item = this._viewmodel.current();
    services.Item.untarget(item).observe(this, function(t, data) {
        t.unobserve(this);
        var view = this._panel,
            i = item.getAuctionData();
        view.toggleWatchedState(i.watched), i.isExpired() || view.setWatchBusyState(!1), data.success ? services.Notification.queue([gLocalization.lText("notification.item.unwatched"), enums.UINotificationType.NEUTRAL]) : data.error && data.error.getCode() === enums.NetworkError.LOCKED_TRANSFER_MARKET && this._gotoLockedFromTransferMarket()
    })
}, controllers.items.ItemDetails.prototype._onPlayerBio = function _onPlayerBio(t) {
    var i = this._viewmodel.current();
    if (i.isValid() && i.isPlayer() && utils.JS.isValid(i.getMetaData())) {
        var s = new controllers.items.PlayerBio;
        s.initWithItem(i), this.getNavigationController().pushViewController(s, !0)
    } else utils.Debug.Assert(!1, "controllers.items.PlayerBio::init. Requires a player item with proper meta data to be initialized with."), services.Notification.queue([gLocalization.lText("playerbio.unavailable"), enums.UINotificationType.NEGATIVE])
}, controllers.items.ItemDetails.prototype._onFindRelated = function _onFindRelated(t) {
    var data = {
        itemData: this._viewmodel.current(),
        searchCriteria: new transferobjects.SearchCriteria
    };
    data.searchCriteria.defId = data.itemData.getDefId(), data.searchCriteria.type = data.itemData.getSearchType(), NavManager.requestChildScreen(Screens.getView("COMPARE_PRICE"), data)
}, controllers.items.ItemDetails.prototype._onTimedUpdate = function _onTimedUpdate(t, data) {
    if (this._panel instanceof views.items.AuctionActionPanel || this._panel instanceof views.items.TransferActionPanel) {
        var i = this._viewmodel.current().getAuctionData();
        i.isWon() || i.isExpired() ? (this._renderView(), this._refreshPanel()) : (this._refreshView(), this._panel.onTimedUpdate(i))
    }
}, controllers.items.ItemDetails.prototype._handleRemove = function _handleRemove(t) {
    if (Array.isArray(t) && 1 === t.length) {
        var i = this._viewmodel.current();
        if (i.isClubConsumable() && i.stackCount > 0) this._refreshConsumable(i);
        else if (t.indexOf(i.id) >= 0)
            if (this._viewmodel.remove(this._viewmodel.getIndex()), this._viewmodel.length > 0) {
                var s = this._getViewIteratorItems();
                this._renderPanel(s.current), this.getView().removeCurrent(s.current, s.prev, s.next)
            } else NavManager.requestGoBackScreen()
    } else this._renderView()
}, controllers.items.ItemDetails.prototype._refreshConsumable = function _refreshConsumable(item) {
    item.untradeable && this._refreshPanel(), this._renderView()
}, controllers.items.ItemDetails.prototype._gotoLockedFromTransferMarket = function _gotoLockedFromTransferMarket() {
    NavManager.requestGoBackToScreenId(Screens.getView("TRANSFERS_HUB"))
}, controllers.items.ItemDetails.prototype._gotoSendToActiveSquadFlow = function _gotoSendToActiveSquadFlow() {
    var t = this._viewmodel.current(),
        i = new controllers.items.SendToActiveSquad;
    t ? i.initWithItem(t) : i.init(), this.getNavigationController().pushViewController(i, !0)
}, controllers.items.ItemDetails.prototype._gotoApplyConsumableFlow = function _gotoApplyConsumableFlow() {
    var t = this._viewmodel.current(),
        i = new controllers.club.ClubSearchFilters;
    i.displayAsDetails = !0, t ? i.initWithItem(t) : i.init(), this.getNavigationController().pushViewController(i, !0)
}, controllers.items.ItemDetails.prototype._goToUnassigned = function _goToUnassigned() {
    NavManager.getCurrentScreen().setInteractionsEnabled(!1), NavManager.requestChildScreen(Screens.getView("UNASSIGNED_ITEMS"))
}, controllers.items.ItemDetails.prototype._arbitraryViewUpdate = function _arbitraryViewUpdate() {
    this._onTimedUpdate()
}, NamespaceManager.Register("controllers.navigation"), controllers.navigation.ItemDetails = function ItemDetailNavigationController(t, toolbar) {
    FUINavigationController.call(this, t, toolbar)
}, utils.JS.inherits(controllers.navigation.ItemDetails, FUINavigationController), controllers.navigation.ItemDetails.prototype.initWithIterator = function initWithIterator(t) {
    if (!this.initialized) {
        utils.Debug.Assert(t instanceof FUTIterator, "Initialization expected an instance of FUTIterator.");
        var i = this._getRootControllerInstance();
        i.initWithIterator(t), this.initWithRootController(i)
    }
}, controllers.navigation.ItemDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new controllers.items.ItemDetails
}, controllers.navigation.ItemDetails.prototype.setIndex = function setIndex(index) {
    this.popToRootViewController(), this.getRootController().onIndexChange(index)
}, controllers.navigation.ItemDetails.prototype.enableSwiping = function enableSwiping(t) {
    this.getRootController().enableSwiping(t)
}, NamespaceManager.Register("controllers.items"), controllers.items.WatchListLandscape = function WatchListLandscapeViewController() {
    FUIViewController.call(this), this._listController = new controllers.items.WatchList, this._itemDetailController = new controllers.navigation.ItemDetails
}, utils.JS.inherits(controllers.items.WatchListLandscape, FUISplitViewController), controllers.items.WatchListLandscape.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._listController.init(), this._listController.onDataChange.observe(this, this._eListDataChanged), this._listController.onItemSelected.observe(this, this._eItemSelected), this._itemDetailController.initWithIterator(this._listController.getIterator()), this.addChildViewController(this._listController), this.addChildViewController(this._itemDetailController);
        var t = getDefaultDispatcher();
        t.addObserver(enums.AppNotification.ITEM_ACTIVATE, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_DISCARD, this, this._nItemDiscarded), t.addObserver(enums.AppNotification.ITEM_LIST, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_MOVE, this, this._onItemDetailsUpdate)
    }
}, controllers.items.WatchListLandscape.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(), this._itemDetailController = null, this._listController.dealloc(), this._listController = null;
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.ITEM_ACTIVATE, this), t.removeObserver(enums.AppNotification.ITEM_DISCARD, this), t.removeObserver(enums.AppNotification.ITEM_LIST, this), t.removeObserver(enums.AppNotification.ITEM_MOVE, this), this.superclass()
}, controllers.items.WatchListLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._setLeftController(this._listController)
}, controllers.items.WatchListLandscape.prototype._eItemSelected = function _eItemSelected(t, index) {
    this._itemDetailController.setIndex(index)
}, controllers.items.WatchListLandscape.prototype._eListDataChanged = function _eListDataChanged(t, data) {
    data.items && (data.items.length > 0 ? (this._setRightController(this._itemDetailController), this._itemDetailController.enableSwiping(!1), this._itemDetailController.setIndex(this._listController.getIterator().getIndex())) : this.hideRightController())
}, controllers.items.WatchListLandscape.prototype._onItemDetailsUpdate = function _onItemDetailsUpdate(t, sender, data) {
    this._listController.removeItemsById(data.itemIds || [])
}, controllers.items.WatchListLandscape.prototype._nItemDiscarded = function _nItemDiscarded(t, sender, data) {
    this._listController.removeItemsById(data.itemIds || [])
}, pages.controllers.WatchListController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null
}, utils.JS.inherits(pages.controllers.WatchListController, pages.controllers.ScreenControllerBase), pages.controllers.WatchListController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.WatchListController.superClass_.destroy.call(this)
}, pages.controllers.WatchListController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.WatchListController.superClass_.onScreenInitialized.call(this, data, t), isPhone() ? this._controller = new controllers.items.WatchList : this._controller = new controllers.items.WatchListLandscape, this._controller.init(), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.WATCH_LIST, function(t) {
    gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET) ? NavManager.requestRootScreen(Screens.getView("TRANSFERS_HUB")) : (NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("TRANSFERS_HUB")), NavManager.requestChildScreen(Screens.getView("WATCH_LIST")))
}), Screens.Register("UNASSIGNED_ITEMS", "UnassignedItems", Screens.APP_SECTION.UNASSIGNED, "Unassigned Items - List View"), pages.UnassignedItems = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.assigncards")), this._generate()
}, utils.JS.inherits(pages.UnassignedItems, pages.ScreenBase), pages.UnassignedItems.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("Unassigned"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.UnassignedItems.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.UnassignedItems.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.UnassignedItems.prototype.getRootElement = function getRootElement() {
    return this.__root
}, viewmodels.UnassignedItemSectionList = function(t) {
    viewmodels.ItemSectionList.call(this, t), this.setSection(viewmodels.UnassignedItemSectionList.SECTION.ITEMS, function(item) {
        return item.isMovable() || item.isMiscItem()
    }, viewmodels.UnassignedItemSectionList.SECTION.ITEMS), this.setSection(viewmodels.UnassignedItemSectionList.SECTION.DUPLICATES, function(item) {
        return !item.isMovable() && !item.isMiscItem()
    }, viewmodels.UnassignedItemSectionList.SECTION.DUPLICATES), this._organizeItems()
}, utils.JS.inherits(viewmodels.UnassignedItemSectionList, viewmodels.ItemSectionList), viewmodels.UnassignedItemSectionList.SECTION = {
    ITEMS: 0,
    DUPLICATES: 1
}, viewmodels.UnassignedItemSectionList.prototype.getStorableSection = function getStorableSection() {
    return this.getSectionItems(viewmodels.UnassignedItemSectionList.SECTION.ITEMS)
}, viewmodels.UnassignedItemSectionList.prototype.getDuplicateSection = function getDuplicateSection() {
    return this.getSectionItems(viewmodels.UnassignedItemSectionList.SECTION.DUPLICATES)
}, viewmodels.UnassignedItemSectionList.prototype.hasMovableItems = function hasMovableItems() {
    return this.indexOf(function(item) {
        return item.isMovable()
    }) > -1
}, viewmodels.UnassignedItemSectionList.prototype.getMovableItems = function getMovableItems() {
    return this.values().filter(function(item) {
        return item.isMovable()
    })
}, viewmodels.UnassignedItemSectionList.prototype.hasTradeableDuplicates = function hasTradeableDuplicates() {
    return this.indexOf(function(item) {
        return !item.isMovable() && !item.untradeable
    }) > -1
}, viewmodels.UnassignedItemSectionList.prototype.getTradeableDuplicates = function getTradeableDuplicates() {
    return this.values().filter(function(item) {
        return item.isDuplicate() && !item.untradeable
    })
}, viewmodels.UnassignedItemSectionList.prototype.getDiscardableInfo = function getDiscardableInfo() {
    var t = {
        items: {
            entities: [],
            count: 0,
            value: 0
        },
        duplicates: {
            entities: [],
            count: 0,
            value: 0
        }
    };
    return this.values().forEach(function(item) {
        if (item.isDiscardable() && !item.isDuplicateLoanPlayer()) {
            var i = item.isDuplicate() ? t.duplicates : t.items;
            i.entities.push(item), i.count++, i.value += item.discardValue
        }
    }), t
}, NamespaceManager.Register("views.items"), views.items.UnassignedItems = function() {
    FUIView.call(this), this._sections = [], this._emptyListView = null, this._generate()
}, utils.JS.inherits(views.items.UnassignedItems, FUIView), views.items.UnassignedItems.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.setAttribute("id", "Unassigned"), t.classList.add("panel-list"), t.classList.add("layout-sectioned-list"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.UnassignedItems.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.items.UnassignedItems.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.UnassignedItems.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.UnassignedItems.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._emptyListView) && (this._emptyListView.destroy(), this._emptyListView = null), this.clearSections(), this.superclass()
}, views.items.UnassignedItems.prototype.selectListRow = function selectListRow(id) {
    this._sections.forEach(function(t) {
        t.selectRowByItemId(id)
    })
}, views.items.UnassignedItems.prototype.getSection = function(t) {
    return this._sections[t] || null
}, views.items.UnassignedItems.prototype.clearSections = function clearSections() {
    this._sections.forEach(function(t) {
        t.destroy()
    }), this._sections = []
}, views.items.UnassignedItems.prototype.renderSection = function renderSection(t, i, s) {
    var o = this._sections[i];
    return o ? o.clearList() : ((o = new views.lists.SectionedItemList).init(), this._sections[i] = o), 0 === t.length ? o.getRoot().remove() : (o.addItems(t, s), o.render(), this.getRoot().empty().append(this._sections.map(function(t) {
        return t.getRoot()
    }))), o
}, views.items.UnassignedItems.prototype.renderEmptyView = function renderEmptyView(message, t, i) {
    this.clearSections(), this._emptyListView = new components.ListNoResults, this._emptyListView.init(), this._emptyListView.setText(message), this._emptyListView.setIcon(components.ListNoResults.ICON_TYPE.ITEM), utils.JS.isFunction(i) && this._emptyListView.setupButton(t, i), this.getRoot().append(this._emptyListView.getRoot())
}, views.items.UnassignedItems.prototype.removeItemsById = function removeItemsById(t) {
    this._sections.forEach(function(i) {
        i.removeItemsById(t)
    })
}, NamespaceManager.Register("controllers.items"), controllers.items.UnassignedItems = function() {
    FUIViewController.call(this), this._viewmodel = null, this.onItemSelect = new FUTObservable, Object.defineProperty(this, "onItemSelect", {
        writable: !1
    }), this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1
    })
}, utils.JS.inherits(controllers.items.UnassignedItems, FUIViewController), controllers.items.UnassignedItems.prototype.init = function init() {
    this.initialized || (this.superclass(), this._viewmodel || this._updateViewModel([]), this._renderView(), TelemetryManager.trackPage(TelemetryManager.Sections.MISC, "Unassigned List"))
}, controllers.items.UnassignedItems.prototype.initWithItems = function initWithItems(t) {
    this.initialized || (this._updateViewModel(t), this.init())
}, controllers.items.UnassignedItems.prototype.dealloc = function dealloc() {
    this.superclass(), this.onItemSelect.dealloc(), this.onDataChange.dealloc(), this.onItemSelect = null, this.onDataChange = null
}, controllers.items.UnassignedItems.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.UnassignedItems
}, controllers.items.UnassignedItems.prototype.getViewModel = function getViewModel() {
    return this._viewmodel
}, controllers.items.UnassignedItems.prototype._updateViewModel = function _updateViewModel(t) {
    this._viewmodel ? (this._viewmodel.dataUpdated.clearObservers(), this._viewmodel.resetCollection([]), this._viewmodel.addArray(t)) : this._viewmodel = new viewmodels.UnassignedItemSectionList(t)
}, controllers.items.UnassignedItems.prototype.removeItemsById = function removeItemsById(t) {
    if (this._viewmodel.length > 0) {
        var view = this.getView();
        view.removeItemsById(t), view.selectListRow(this._viewmodel.current().id), this._updateItemSectionOptions(), this._updateDuplicateSectionOptions()
    } else this._renderView()
}, controllers.items.UnassignedItems.prototype.refreshList = function refreshList() {
    this._renderView()
}, controllers.items.UnassignedItems.prototype._updateItemSectionOptions = function _updateItemSectionOptions() {
    var t = this._viewmodel.getStorableSection(),
        i = this._viewmodel.getDiscardableInfo(),
        s = this.getView().getSection(viewmodels.UnassignedItemSectionList.SECTION.ITEMS);
    if (s)
        if (s.setHeader(gLocalization.lText("dock.label.items"), gLocalization.lText("infopanel.label.storeAllInClub"), this._viewmodel.hasMovableItems() ? this._storeInClub.bind(this) : null), i.items.count > 0) {
            var o = 1 === i.items.count ? gLocalization.lText("unassigned.sectionFooter.quickSellItem") : gLocalization.lPrint("unassigned.sectionFooter.quickSellItems", [i.items.count]);
            s.setFooter(o, gLocalization.lNum(i.items.value), !0, this._quickSell.bind(this, t, i.items.value))
        } else s.removeFooter()
}, controllers.items.UnassignedItems.prototype._updateDuplicateSectionOptions = function _updateDuplicateSectionOptions() {
    var t = this.getView().getSection(viewmodels.UnassignedItemSectionList.SECTION.DUPLICATES);
    if (t) {
        var i = this._viewmodel.getDuplicateSection(),
            s = this._viewmodel.getDiscardableInfo(),
            o = repositories.Item.numItemsInCache(enums.FUTItemPile.TRANSFER) + i.length <= repositories.Item.getPileSize(enums.FUTItemPile.TRANSFER);
        if (t.setHeader(gLocalization.lText("dock.label.duplicates"), gLocalization.lText("infopanel.label.sendTradePile"), this._viewmodel.hasTradeableDuplicates() && o ? this._sendToTransferList.bind(this) : null), s.duplicates.count > 0) {
            var l = 1 === s.duplicates.count ? gLocalization.lText("unassigned.sectionFooter.quickSellDuplicate") : gLocalization.lPrint("unassigned.sectionFooter.quickSellDuplicates", [s.duplicates.count]);
            t.setFooter(l, gLocalization.lNum(s.duplicates.value), !0, this._quickSell.bind(this, s.duplicates.entities, s.duplicates.value))
        } else t.removeFooter()
    }
}, controllers.items.UnassignedItems.prototype._renderView = function _renderView() {
    function _rowTapCallback(item) {
        var index = this._viewmodel.indexOf(function(a) {
            return a.id === item.id
        });
        isPhone() ? NavManager.requestChildScreen(Screens.getView("ITEM_DETAILS"), {
            iterator: this._viewmodel
        }) : this._viewmodel.getIndex() !== index && (view.selectListRow(item.id), this.onItemSelect.notify(index)), this._viewmodel.setIndex(index)
    }
    var view = this.getView();
    if (0 === this._viewmodel.length) hasConnection() ? view.renderEmptyView(gLocalization.lText("newitems.emptymessage"), gLocalization.lText("newitems.gotostore"), function() {
        NavManager.requestRootScreen(Screens.getView("STORE_HUB"))
    }) : view.renderEmptyView(gLocalization.lText("newitems.unavailable"));
    else {
        view.clearSections();
        var t = this._viewmodel.getStorableSection(),
            i = this._viewmodel.getDuplicateSection();
        t.length > 0 && (view.renderSection(t, viewmodels.UnassignedItemSectionList.SECTION.ITEMS, _rowTapCallback.bind(this)), this._updateItemSectionOptions()), i.length > 0 && (view.renderSection(i, viewmodels.UnassignedItemSectionList.SECTION.DUPLICATES, _rowTapCallback.bind(this)), this._updateDuplicateSectionOptions()), isPhone() || view.selectListRow(this._viewmodel.current().id)
    }
}, controllers.items.UnassignedItems.prototype._storeInClub = function _storeInClub() {
    gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.BUTTON_PRESS, "Unassigned - Store All In Club"), this.getView().setInteractionState(!1);
    var t = this._viewmodel.getMovableItems();
    0 === t.length ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ALL_NEED_TO_BE_CLAIMED), this.getView().setInteractionState(!0)) : services.Item.move(t, enums.FUTItemPile.CLUB).observe(this, this._onMoveToClubComplete)
}, controllers.items.UnassignedItems.prototype._sendToTransferList = function _sendToTransferList() {
    gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.BUTTON_PRESS, "Unassigned - Send Duplicates To Transfer List"), this.getView().setInteractionState(!1);
    var t = this._viewmodel.getTradeableDuplicates();
    if (0 === t.length) utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.ALL_NEED_TO_BE_CLAIMED), this.getView().setInteractionState(!0);
    else {
        var message = t.length > 1 ? utils.PopupManager.Confirmations.SEND_ALL_TO_TRANSFER_LIST : utils.PopupManager.Confirmations.SEND_TO_TRANSFER_LIST;
        utils.PopupManager.ShowConfirmation(message, null, function _sendToTransferListConfirmed() {
            services.Item.move(t, enums.FUTItemPile.TRANSFER).observe(this, this._onMoveToTransferListComplete)
        }.bind(this), this._confirmationCancelled.bind(this))
    }
}, controllers.items.UnassignedItems.prototype._getUnassignedItems = function _getUnassignedItems() {
    repositories.Item.getUnassignedItems().observe(this, function(t, i) {
        t.unobserve(this), this.getView().setInteractionState(!0), i.success ? i.items.length > 0 ? (this._updateViewModel(i.items), this._renderView(), this.onDataChange.notify()) : NavManager.requestGoBackScreen() : NetworkErrorManager.handle(i.error, !1, function() {
            services.Notification.queue([gLocalization.lText("newitems.loaderror"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen()
        })
    })
}, controllers.items.UnassignedItems.prototype._onMoveToClubComplete = function _onMoveToClubComplete(t, response) {
    if (t.unobserve(this), response.success) {
        var i = response.itemIds.length,
            s = i > 1 ? gLocalization.lPrint("notification.item.allToClub", [i]) : gLocalization.lText("notification.item.oneToClub");
        this._getUnassignedItems(), services.Notification.queue([s, enums.UINotificationType.NEUTRAL])
    } else services.Notification.queue([gLocalization.lText("notification.item.moveFailed"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen()
}, controllers.items.UnassignedItems.prototype._onMoveToTransferListComplete = function _onMoveToTransferListComplete(t, response) {
    if (t.unobserve(this), response.success) {
        var i = response.itemIds.length,
            s = i > 1 ? gLocalization.lPrint("notification.item.allToTradePile", [i]) : gLocalization.lText("notification.item.oneToTradePile");
        this._getUnassignedItems(), services.Notification.queue([s, enums.UINotificationType.NEUTRAL])
    } else services.Notification.queue([gLocalization.lText("notification.item.moveFailed"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen()
}, controllers.items.UnassignedItems.prototype._quickSell = function _quickSell(t, total) {
    function _quickSellComplete(t, response) {
        if (t.unobserve(this), response.success) {
            var s = "notification." + (i ? "duplicate" : "item") + (response.data.itemIds.length > 1 ? ".allQuickSold" : ".sold");
            services.Notification.queue([gLocalization.lText(s), enums.UINotificationType.POSITIVE]), this._getUnassignedItems()
        } else services.Notification.queue([gLocalization.lText("notification.item.quickSellFailed"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen()
    }
    var i = utils.JS.isValid(t[0]) && t[0].isDuplicate(),
        s = "Unassigned - Quick Sell " + (i ? "Duplicates" : "Items");
    gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.BUTTON_PRESS, s), this.getView().setInteractionState(!1), utils.PopupManager.ShowConfirmation(t.length > 1 ? utils.PopupManager.Confirmations.CONFIRM_DISCARD_ALL : utils.PopupManager.Confirmations.CONFIRM_DISCARD, [gLocalization.lNum(total)], function _quickSellConfirmed() {
        services.Item.discard(t).observe(this, _quickSellComplete)
    }.bind(this), this._confirmationCancelled.bind(this))
}, controllers.items.UnassignedItems.prototype._confirmationCancelled = function _confirmationCancelled() {
    this.getView().setInteractionState(!0)
}, NamespaceManager.Register("controllers.items"), controllers.items.UnassignedItemsLandscape = function UnassignedItemsLandscape() {
    FUIViewController.call(this), this._unassignedItemsController = new controllers.items.UnassignedItems, this._itemDetailsController = null
}, utils.JS.inherits(controllers.items.UnassignedItemsLandscape, FUISplitViewController), controllers.items.UnassignedItemsLandscape.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._unassignedItemsController.init(), this._unassignedItemsController.onItemSelect.observe(this, this._itemSelected), this._unassignedItemsController.onDataChange.observe(this, this._unassignedListChanged), this.addChildViewController(this._unassignedItemsController), this._setLeftController(this._unassignedItemsController);
        var t = getDefaultDispatcher();
        t.addObserver(enums.AppNotification.ITEM_ACTIVATE, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_DISCARD, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_LIST, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_MOVE, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_REDEEM, this, this._onItemDetailsUpdate)
    }
}, controllers.items.UnassignedItemsLandscape.prototype.initWithItems = function initWithItems(t) {
    this.initialized || (this._unassignedItemsController.initWithItems(t), t.length > 0 && (this._itemDetailController = new controllers.navigation.ItemDetails, this._itemDetailController.initWithIterator(this._unassignedItemsController.getViewModel()), this.addChildViewController(this._itemDetailController)), this.init())
}, controllers.items.UnassignedItemsLandscape.prototype.dealloc = function dealloc() {
    this._unassignedItemsController.dealloc(), this._unassignedItemsController = null, utils.JS.isValid(this._itemDetailController) && (this._itemDetailController.dealloc(), this._itemDetailController = null);
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.ITEM_ACTIVATE, this), t.removeObserver(enums.AppNotification.ITEM_DISCARD, this), t.removeObserver(enums.AppNotification.ITEM_LIST, this), t.removeObserver(enums.AppNotification.ITEM_MOVE, this), t.removeObserver(enums.AppNotification.ITEM_REDEEM, this), this.superclass()
}, controllers.items.UnassignedItemsLandscape.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.SplitView
}, controllers.items.UnassignedItemsLandscape.prototype.viewDidAppear = function viewDidAppear() {
    utils.JS.isValid(this._itemDetailController) && (this._setRightController(this._itemDetailController), this._itemDetailController.enableSwiping(!1))
}, controllers.items.UnassignedItemsLandscape.prototype._itemSelected = function _itemSelected(t, index) {
    this._itemDetailController.setIndex(index)
}, controllers.items.UnassignedItemsLandscape.prototype._unassignedListChanged = function _unassignedListChanged(t) {
    var i = this._unassignedItemsController.getViewModel();
    0 === i.length ? this._removeRightController() : this._itemDetailController.setIndex(i.getIndex())
}, controllers.items.UnassignedItemsLandscape.prototype._onItemDetailsUpdate = function _onItemDetailsUpdate(t, sender, data) {
    this._unassignedItemsController.removeItemsById(data.itemIds || [])
}, pages.controllers.UnassignedItemsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null
}, utils.JS.inherits(pages.controllers.UnassignedItemsController, pages.controllers.ScreenControllerBase), pages.controllers.UnassignedItemsController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.UnassignedItemsController.superClass_.destroy.call(this)
}, pages.controllers.UnassignedItemsController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.UnassignedItemsController.superClass_.onScreenInitialized.call(this, data, t), isPhone() ? this._controller = new controllers.items.UnassignedItems : this._controller = new controllers.items.UnassignedItemsLandscape, repositories.Item.getUnassignedItems().observe(this, function _onGetUnassignedItems(t, data) {
        data.success ? this._controller.initWithItems(data.items) : this._controller.init(), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
    }), gUserModel.isCurrencyDirty() && gUserModel.updateCredits()
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.UNASSIGNED, function(t) {
    NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("HOME")), NavManager.requestChildScreen(Screens.getView("UNASSIGNED_ITEMS"))
}), Screens.Register("TRADE_PILE", "TradePile", Screens.APP_SECTION.TRADE_PILE, "Transfer List - List View"), pages.TradePile = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.tradepile")), gTelemetryManager.trackPage(TelemetryManager.Sections.AUCTIONS, "Transfer List"), this._generate()
}, utils.JS.inherits(pages.TradePile, pages.ScreenBase), pages.TradePile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.TradePile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.TradePile.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.TradePile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.transfers"), views.transfers.TransferList = function TransferListView() {
    FUIView.call(this), this._sections = [], this._emptyListView = null, this._generate()
}, utils.JS.inherits(views.transfers.TransferList, FUIView), views.transfers.TransferList.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "TradePile"), t.classList.add("panel-list"), t.classList.add("layout-sectioned-list"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.transfers.TransferList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, views.transfers.TransferList.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.transfers.TransferList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.transfers.TransferList.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._emptyListView) && (this._emptyListView.destroy(), this._emptyListView = null), this.clearSections(), this.superclass()
}, views.transfers.TransferList.prototype.clearSections = function clearSections() {
    this._sections.forEach(function(t) {
        t.dealloc()
    }), this._sections = []
}, views.transfers.TransferList.prototype.renderSection = function renderSection(t, i, s) {
    var o = this._sections[i];
    return o ? o.clearList() : ((o = new views.lists.SectionedItemList).init(), this._sections[i] = o), o.addItems(t, s), o.render(), this.getRoot().empty().append(this._sections.map(function(t) {
        return t.getRoot()
    })), o
}, views.transfers.TransferList.prototype.getSection = function getSection(t) {
    return this._sections[t] || null
}, views.transfers.TransferList.prototype.renderEmptyView = function renderEmptyView(message, t, i) {
    this.clearSections(), this._emptyListView = new components.ListNoResults, this._emptyListView.init(), this._emptyListView.setText(message), this._emptyListView.setDescription(gLocalization.lText("popup.error.noresults.description")), this._emptyListView.setIcon(components.ListNoResults.ICON_TYPE.TRANSFER), utils.JS.isFunction(i) && this._emptyListView.setupButton(t, i), this.getRoot().append(this._emptyListView.getRoot())
}, views.transfers.TransferList.prototype.onTimedUpdate = function onTimedUpdate() {
    this._sections.forEach(function(t) {
        t.onTimedUpdate()
    })
}, views.transfers.TransferList.prototype.selectListRow = function selectListRow(id) {
    this._sections.forEach(function(t) {
        t.selectRowByItemId(id)
    })
}, views.transfers.TransferList.prototype.removeItemsById = function removeItemsById(t) {
    this._sections.forEach(function(i) {
        i.removeItemsById(t)
    })
}, viewmodels.TransferSectionList = function(t) {
    viewmodels.ItemSectionList.call(this, t), this.setSection(viewmodels.TransferSectionList.SECTION.SOLD, function(item) {
        return item.getAuctionData().isSold()
    }, viewmodels.TransferSectionList.SECTION.SOLD), this.setSection(viewmodels.TransferSectionList.SECTION.UNSOLD, function(item) {
        var t = item.getAuctionData();
        return t.isExpired() || t.isValid() && t.isInactive()
    }, viewmodels.TransferSectionList.SECTION.UNSOLD), this.setSection(viewmodels.TransferSectionList.SECTION.AVAILABLE, function(item) {
        return !item.getAuctionData().isValid()
    }, viewmodels.TransferSectionList.SECTION.AVAILABLE), this.setSection(viewmodels.TransferSectionList.SECTION.ACTIVE, function(item) {
        return item.getAuctionData().isActiveTrade()
    }, viewmodels.TransferSectionList.SECTION.ACTIVE), this._organizeItems()
}, utils.JS.inherits(viewmodels.TransferSectionList, viewmodels.ItemSectionList), viewmodels.TransferSectionList.SECTION = {
    SOLD: 0,
    UNSOLD: 1,
    AVAILABLE: 2,
    ACTIVE: 3
}, viewmodels.TransferSectionList.prototype.hasSoldItems = function() {
    return this.indexOf(function(item) {
        return item.getAuctionData().isSold()
    }) > -1
}, viewmodels.TransferSectionList.prototype.getSoldItems = function() {
    return this.values().filter(function(item) {
        return item.getAuctionData().isSold()
    })
}, viewmodels.TransferSectionList.prototype.hasUnsoldItems = function() {
    return this.indexOf(function(item) {
        var t = item.getAuctionData();
        return t.isExpired() || t.isValid() && t.isInactive()
    }) > -1
}, viewmodels.TransferSectionList.prototype.getUnsoldItems = function() {
    return this.values().filter(function(item) {
        var t = item.getAuctionData();
        return t.isExpired() || t.isValid() && t.isInactive()
    })
}, viewmodels.TransferSectionList.prototype.getActiveItems = function() {
    return this.values().filter(function(item) {
        return item.getAuctionData().isActiveTrade()
    })
}, NamespaceManager.Register("controllers.transfers"), controllers.transfers.TransferList = function TransferListViewController() {
    FUIViewController.call(this), this._viewmodel = null, this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1,
        enumerable: !0
    }), this.onItemSelected = new FUTObservable, Object.defineProperty(this, "onItemSelected", {
        writable: !1,
        enumerable: !0
    })
}, utils.JS.inherits(controllers.transfers.TransferList, FUIViewController), controllers.transfers.TransferList.prototype.init = function init() {
    this.initialized || (this.superclass(), this._viewmodel = new viewmodels.TransferSectionList([]), this._viewmodel.dataUpdated.observe(this, this._eViewmodelDataUpdated))
}, controllers.transfers.TransferList.prototype.dealloc = function dealloc() {
    this._viewmodel.stopAuctionUpdates(), this._viewmodel.dataUpdated.unobserve(this), this.onDataChange.dealloc(), this.onItemSelected.dealloc(), this.superclass(), this._viewmodel = null
}, controllers.transfers.TransferList.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.transfers.TransferList
}, controllers.transfers.TransferList.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._requestItems()
}, controllers.transfers.TransferList.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this._viewmodel && this._viewmodel.stopAuctionUpdates()
}, controllers.transfers.TransferList.prototype.getIterator = function getIterator() {
    return this._viewmodel
}, controllers.transfers.TransferList.prototype._requestItems = function _requestItems() {
    this._viewmodel.stopAuctionUpdates(), this.getView().setInteractionState(!1), repositories.Item.getTransferItems().observe(this, function _onRequestItemsComplete(t, data) {
        if (t.unobserve(this), data.success) {
            var i = this._viewmodel.getIndex();
            this._viewmodel.resetCollection([]), this._viewmodel.addArray(data.items), this._viewmodel.setIndex(Math.min(i, this._viewmodel.getLastIndex())), this.onDataChange.notify({
                items: this._viewmodel.values()
            }), this._renderView(), this._viewmodel.values().length > 0 && !isPhone() && this.getView().selectListRow(this._viewmodel.current().id), this.getView().setInteractionState(!0)
        } else services.Notification.queue([gLocalization.lText("notification.transferList.failedToLoad"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen() || setTimeout(function() {
            NavManager.requestGoBackScreen()
        }, 500);
        this._viewmodel.startAuctionUpdates()
    })
}, controllers.transfers.TransferList.prototype.removeItemsById = function removeItemsById(t) {
    if (this._viewmodel.length > 0) {
        var view = this.getView();
        view.removeItemsById(t), view.selectListRow(this._viewmodel.current().id), this._updateSectionHeaders()
    } else this._renderView()
}, controllers.transfers.TransferList.prototype.refreshList = function refreshList() {
    repositories.Item.setDirty(enums.FUTItemPile.TRANSFER), this._requestItems()
}, controllers.transfers.TransferList.prototype._updateSectionHeaders = function _updateSectionHeaders() {
    var view = this.getView(),
        t = view.getSection(viewmodels.TransferSectionList.SECTION.SOLD),
        i = view.getSection(viewmodels.TransferSectionList.SECTION.UNSOLD);
    if (t && t.setHeader(gLocalization.lText("tradepile.dock.categories.expired.sold"), gLocalization.lText("tradepile.label.clearsolditems"), this._viewmodel.hasSoldItems() ? this._clearSold.bind(this) : null), i) {
        var s = gSettingsModel.isTradingEnabled() && gUserModel.hasTradeAccess();
        i.setHeader(gLocalization.lText("tradepile.dock.categories.expired.notsold"), gLocalization.lText("tradepile.button.relistall"), s && this._viewmodel.hasUnsoldItems() ? this._relistAll.bind(this) : null)
    }
}, controllers.transfers.TransferList.prototype._renderView = function _renderView() {
    function _rowTapCallback(item) {
        var index = this._viewmodel.indexOf(function(a) {
            return a.id === item.id
        });
        if (this._viewmodel.setIndex(index), isPhone()) {
            var t = item.getAuctionData();
            if (!gSettingsModel.isTradingEnabled() && (t.isActiveTrade() || t.isClosedTrade())) return void utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.TRADING_DISABLED);
            NavManager.requestChildScreen(Screens.getView("ITEM_DETAILS"), {
                iterator: this._viewmodel
            })
        } else view.selectListRow(item.id), this.onItemSelected.notify(index)
    }
    var view = this.getView();
    view.clearSections(), view.renderSection(this._viewmodel.getSectionItems(viewmodels.TransferSectionList.SECTION.SOLD), viewmodels.TransferSectionList.SECTION.SOLD, _rowTapCallback.bind(this)).setEmptyMessage(gLocalization.lText("tradepile.sold.empty.header"), gLocalization.lText("tradepile.sold.empty.body")), view.renderSection(this._viewmodel.getSectionItems(viewmodels.TransferSectionList.SECTION.UNSOLD), viewmodels.TransferSectionList.SECTION.UNSOLD, _rowTapCallback.bind(this)).setEmptyMessage(gLocalization.lText("tradepile.unsold.empty.header"), gLocalization.lText("tradepile.unsold.empty.body"));
    var t = view.renderSection(this._viewmodel.getSectionItems(viewmodels.TransferSectionList.SECTION.AVAILABLE), viewmodels.TransferSectionList.SECTION.AVAILABLE, _rowTapCallback.bind(this));
    t.setHeader(gLocalization.lText("tradepile.dock.categories.available"), "", null), t.setEmptyMessage(gLocalization.lText("tradepile.availableitems.empty.header"), gLocalization.lText("tradepile.availableitems.empty.body"));
    var i = view.renderSection(this._viewmodel.getSectionItems(viewmodels.TransferSectionList.SECTION.ACTIVE), viewmodels.TransferSectionList.SECTION.ACTIVE, _rowTapCallback.bind(this));
    i.setHeader(gLocalization.lText("tradepile.dock.categories.current"), "", null), i.setEmptyMessage(gLocalization.lText("tradepile.availabletransfers.empty.header"), gLocalization.lText("tradepile.availabletransfers.empty.body")), this._updateSectionHeaders(), this._viewmodel.values().length > 0 && !isPhone() && view.selectListRow(this._viewmodel.current().id)
}, controllers.transfers.TransferList.prototype._clearSold = function _clearSold() {
    this.getView().setInteractionState(!1), services.Item.clearSoldItems().observe(this, function _clearSoldComplete(t, data) {
        t.unobserve(this), this.refreshList()
    })
}, controllers.transfers.TransferList.prototype._relistAll = function _relistAll() {
    function _relistAllComplete(t, data) {
        t.unobserve(this), this.refreshList()
    }
    TelemetryManager.trackEvent(TelemetryManager.Sections.AUCTIONS, TelemetryManager.Categories.BUTTON_PRESS, "Transfer List - Re-List All"), this.getView().setInteractionState(!1), utils.PopupManager.ShowConfirmation(gSettingsModel.isMarketDataEnabled() ? utils.PopupManager.Confirmations.CONFIRM_RELIST_ALL_PB : utils.PopupManager.Confirmations.CONFIRM_RELIST_ALL, null, function _relistAllConfirmed() {
        services.Item.relistExpiredAuctions().observe(this, _relistAllComplete)
    }.bind(this), function _relistAllCancelled() {
        this.getView().setInteractionState(!0)
    }.bind(this))
}, controllers.transfers.TransferList.prototype._eViewmodelDataUpdated = function _eViewmodelDataUpdated(t) {
    this.getView().onTimedUpdate()
}, NamespaceManager.Register("controllers.transfers"), controllers.transfers.TransferListLandscape = function TransferListLandscapeViewController() {
    FUISplitViewController.call(this), this._listController = new controllers.transfers.TransferList, this._itemDetailController = new controllers.navigation.ItemDetails
}, utils.JS.inherits(controllers.transfers.TransferListLandscape, FUISplitViewController), controllers.transfers.TransferListLandscape.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._listController.init(), this._listController.onDataChange.observe(this, this._eListDataChanged), this._listController.onItemSelected.observe(this, this._eItemSelected), this._itemDetailController.initWithIterator(this._listController.getIterator()), this.addChildViewController(this._listController), this.addChildViewController(this._itemDetailController);
        var t = getDefaultDispatcher();
        t.addObserver(enums.AppNotification.ITEM_ACTIVATE, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_DISCARD, this, this._nItemDiscarded), t.addObserver(enums.AppNotification.ITEM_LIST, this, this._nItemListed), t.addObserver(enums.AppNotification.ITEM_MOVE, this, this._nItemMoved), t.addObserver(enums.AppNotification.ITEM_CLEARSOLD, this, this._onItemDetailsUpdate)
    }
}, controllers.transfers.TransferListLandscape.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(), this._itemDetailController = null, this._listController.dealloc(), this._listController = null;
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.ITEM_ACTIVATE, this), t.removeObserver(enums.AppNotification.ITEM_DISCARD, this), t.removeObserver(enums.AppNotification.ITEM_LIST, this), t.removeObserver(enums.AppNotification.ITEM_MOVE, this), t.removeObserver(enums.AppNotification.ITEM_CLEARSOLD, this), this.superclass()
}, controllers.transfers.TransferListLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._setLeftController(this._listController)
}, controllers.transfers.TransferListLandscape.prototype._eItemSelected = function _eItemSelected(t, index) {
    this._itemDetailController.setIndex(index)
}, controllers.transfers.TransferListLandscape.prototype._eListDataChanged = function _eListDataChanged(t, data) {
    data.items && (data.items.length > 0 ? (this._setRightController(this._itemDetailController), this._itemDetailController.enableSwiping(!1), this._itemDetailController.setIndex(this._listController.getIterator().getIndex())) : this.hideRightController())
}, controllers.transfers.TransferListLandscape.prototype._onItemDetailsUpdate = function _onItemDetailsUpdate(t, sender, data) {
    this._listController.removeItemsById(data.itemIds || [])
}, controllers.transfers.TransferListLandscape.prototype._nItemDiscarded = function _nItemDiscarded(t, sender, data) {
    this._listController.removeItemsById(data.itemIds || [])
}, controllers.transfers.TransferListLandscape.prototype._nItemListed = function _nItemListed(t, sender, data) {
    this._listController.refreshList()
}, controllers.transfers.TransferListLandscape.prototype._nItemMoved = function _nItemMoved(t, sender, data) {
    this._listController.refreshList()
}, pages.controllers.TradePileController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null
}, utils.JS.inherits(pages.controllers.TradePileController, pages.controllers.ScreenControllerBase), pages.controllers.TradePileController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.TradePileController.superClass_.destroy.call(this)
}, pages.controllers.TradePileController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.TradePileController.superClass_.onScreenInitialized.call(this, data, t), isPhone() ? this._controller = new controllers.transfers.TransferList : this._controller = new controllers.transfers.TransferListLandscape, this._controller.init(), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.TRADE_PILE, function(t) {
    gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET) ? NavManager.requestRootScreen(Screens.getView("TRANSFERS_HUB")) : (NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("TRANSFERS_HUB")), NavManager.requestChildScreen(Screens.getView("TRADE_PILE")))
}), Screens.Register("SQUAD_OVERVIEW", "SquadOverview", Screens.APP_SECTION.SQUADS, "Squads - Squad Overview"), pages.SquadOverview = function SquadOverviewViewWrapper() {
    pages.ScreenBase.call(this);
    var t = isPhone() ? components.Header.DEFAULT_CHILD_PAGE | components.Header.HAMBURGER_BUTTON : components.Header.DEFAULT_CHILD_PAGE;
    this.updateHeader(t, ""), this._generate()
}, utils.JS.inherits(pages.SquadOverview, pages.ScreenBase), pages.SquadOverview.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SquadOverview.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.SquadOverview.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SquadOverview.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.squads"), views.squads.SquadActions = function SquadActionsView() {
    FUIView.call(this), this._generate(), this._imgLoaders = [], this._formationsAdded = !1
}, utils.JS.inherits(views.squads.SquadActions, FUIView), views.squads.SquadActions.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("squadDetailView");
        var i = document.createElement("section");
        i.classList.add("formation-carousel"), this.__tapAreaLeft = document.createElement("a"), this.$_tapAreaLeft = $(this.__tapAreaLeft), this.__tapAreaLeft.classList.add("tapLeft"), i.appendChild(this.__tapAreaLeft), this.__tapAreaRight = document.createElement("a"), this.$_tapAreaRight = $(this.__tapAreaRight), this.__tapAreaRight.classList.add("tapRight"), i.appendChild(this.__tapAreaRight), this._formationCarousel = new views.SlickContainer, i.appendChild(this._formationCarousel.getRootElement()), this._formationDropDown = new views.controls.DropDown, this._formationDropDown.getRootElement().classList.add("isolated-section"), i.appendChild(this._formationDropDown.getRootElement()), t.appendChild(i);
        var s = document.createElement("section");
        s.classList.add("panel-list"), this._makeActiveBtn = new views.buttons.DefaultButton, this._makeActiveBtn.getRootElement().classList.add("call-to-action"), s.appendChild(this._makeActiveBtn.getRootElement()), this._openBtn = new views.buttons.DefaultButton, s.appendChild(this._openBtn.getRootElement());
        var o = document.createElement("div");
        this._squadBuilderBtn = new views.buttons.ListButton, this._squadBuilderBtn.getRootElement().classList.add("more"), o.appendChild(this._squadBuilderBtn.getRootElement()), this._shareBtn = new views.buttons.ListButton, o.appendChild(this._shareBtn.getRootElement()), this._renameBtn = new views.buttons.ListButton, o.appendChild(this._renameBtn.getRootElement()), this._duplicateBtn = new views.buttons.ListButton, o.appendChild(this._duplicateBtn.getRootElement()), this._clearBtn = new views.buttons.ListButton, o.appendChild(this._clearBtn.getRootElement()), this._deleteBtn = new views.buttons.ListButton, o.appendChild(this._deleteBtn.getRootElement()), s.appendChild(o), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SquadActions.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tapAreaLeft = null, this.$_tapAreaLeft = null, this.__tapAreaRight = null, this.$_tapAreaRight = null, this._formationCarousel.destroy(), this._formationCarousel = null, this._formationDropDown.destroy(), this._formationDropDown = null, this._makeActiveBtn.destroy(), this._makeActiveBtn = null, this._openBtn.destroy(), this._openBtn = null, this._squadBuilderBtn.destroy(), this._squadBuilderBtn = null, this._shareBtn.destroy(), this._shareBtn = null, this._renameBtn.destroy(), this._renameBtn = null, this._duplicateBtn.destroy(), this._duplicateBtn = null, this._clearBtn.destroy(), this._clearBtn = null, this._deleteBtn.destroy(), this._deleteBtn = null
}, views.squads.SquadActions.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SquadActions.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SquadActions.prototype.init = function init() {
    this.superclass(), this._makeActiveBtn.init(), this._makeActiveBtn.setText(gLocalization.lText("infopanel.button.setActive")), this._openBtn.init(), this._openBtn.setText(gLocalization.lText("store.mypack.open")), this._squadBuilderBtn.init(), this._squadBuilderBtn.setText(gLocalization.lText("infopanel.button.squadbuilder")), this._shareBtn.init(), this._shareBtn.setText(gLocalization.lText("dock.button.share")), this._renameBtn.init(), this._renameBtn.setText(gLocalization.lText("infopanel.button.rename")), this._duplicateBtn.init(), this._duplicateBtn.setText(gLocalization.lText("infopanel.button.copy")), this._deleteBtn.init(), this._deleteBtn.setText(gLocalization.lText("infopanel.button.delete")), this._clearBtn.init(), this._clearBtn.setText(gLocalization.lText("infopanel.button.clear")), this._formationCarousel.afterChange(function(index) {
        this._formationDropDown.setIndex(index)
    }.bind(this)), this._formationCarousel.properties = new transferobjects.SlickProperties(!1, !0, !1, 0, 500), this._formationDropDown.init(), this._formationDropDown.addTarget(this, this._eFormationChanged, enums.Event.CHANGE), this.__tapAreaLeft.style.opacity = 1, this.__tapAreaRight.style.opacity = 1
}, views.squads.SquadActions.prototype.dealloc = function dealloc() {
    this.superclass(), this._imgLoaders.forEach(function(t) {
        t.dealloc()
    }), this._imgLoaders = []
}, views.squads.SquadActions.prototype.getFormationDropdown = function getFormationDropdown() {
    return this._formationDropDown
}, views.squads.SquadActions.prototype.getMakeActiveButton = function getMakeActiveButton() {
    return this._makeActiveBtn
}, views.squads.SquadActions.prototype.getOpenButton = function getOpenButton() {
    return this._openBtn
}, views.squads.SquadActions.prototype.getSquadBuilderButton = function getSquadBuilderButton() {
    return this._squadBuilderBtn
}, views.squads.SquadActions.prototype.getShareButton = function getShareButton() {
    return this._shareBtn
}, views.squads.SquadActions.prototype.getRenameButton = function getRenameButton() {
    return this._renameBtn
}, views.squads.SquadActions.prototype.getCopyButton = function getCopyButton() {
    return this._duplicateBtn
}, views.squads.SquadActions.prototype.getClearButton = function getClearButton() {
    return this._clearBtn
}, views.squads.SquadActions.prototype.getDeleteButton = function getDeleteButton() {
    return this._deleteBtn
}, views.squads.SquadActions.prototype.displayMakeActiveButton = function displayMakeActiveButton(t) {
    DOMKit.toggleDisplayStyle(this._makeActiveBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.displayOpenButton = function displayOpenButton(t) {
    DOMKit.toggleDisplayStyle(this._openBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.displaySquadBuilderButton = function displaySquadBuilderButton(t) {
    DOMKit.toggleDisplayStyle(this._squadBuilderBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.displayShareButton = function displayShareButton(t) {
    DOMKit.toggleDisplayStyle(this._shareBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.displayRenameButton = function displayRenameButton(t) {
    DOMKit.toggleDisplayStyle(this._renameBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.displayCopyButton = function displayCopyButton(t) {
    DOMKit.toggleDisplayStyle(this._duplicateBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.displayClearButton = function displayClearButton(t) {
    DOMKit.toggleDisplayStyle(this._clearBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.displayDeleteButton = function displayDeleteButton(t) {
    DOMKit.toggleDisplayStyle(this._deleteBtn.getRootElement(), t)
}, views.squads.SquadActions.prototype.setCurrentFormation = function setCurrentFormation(index) {
    this._formationDropDown.setIndex(index), this._formationCarousel.getCurrentSlide() !== index && this._formationCarousel.goTo(index), DOMKit.toggleDisplayStyle(this.__tapAreaLeft, index > 0), DOMKit.toggleDisplayStyle(this.__tapAreaRight, index < this._imgLoaders.length - 1)
}, views.squads.SquadActions.prototype.setFormations = function setFormations(t) {
    this._formationCarousel.isSlicked() || this._formationsAdded || (t.forEach(function _generateFormationImage(t) {
        var i = new components.ImageLoader;
        i.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_FORMATION, enums.Year.ASSET, t.id)), this._imgLoaders.push(i), this._formationCarousel.appendElem(i.getRoot())
    }, this), this._formationDropDown.setOptions(t), this._formationsAdded = !0)
}, views.squads.SquadActions.prototype.setupCarousel = function setupCarousel() {
    this._formationCarousel.isSlicked() || (this._formationCarousel.slick(), this._formationCarousel.attachArrows(this.$_tapAreaLeft, this.$_tapAreaRight))
}, views.squads.SquadActions.prototype.teardownCarousel = function teardownCarousel() {
    this._formationCarousel.unslick()
}, views.squads.SquadActions.prototype.toggleClearState = function toggleClearState(value) {
    this._clearBtn.setInteractionState(value)
}, views.squads.SquadActions.prototype.toggleCopyState = function toggleCopyState(t) {
    this._duplicateBtn.setInteractionState(!t)
}, views.squads.SquadActions.prototype.toggleMakeActiveState = function toggleMakeActiveState(t) {
    this._makeActiveBtn.setInteractionState(!t)
}, views.squads.SquadActions.prototype._eFormationChanged = function _eFormationChanged(sender, event) {
    this._formationCarousel.goTo(sender.getIndex())
}, NamespaceManager.Register("viewmodels"), viewmodels.Squad = function SquadViewModel(t) {
    this.squad = t, this._sections = new FUTHashTable({}), this._iterator = new FUTIterator(t.getPlayers().concat(t.getManager())), this._initSections()
}, viewmodels.Squad.SECTION = {
    PITCH: 0,
    SUBS: 1,
    RESERVES: 2,
    WORKBENCH: 3,
    MANAGER: 4
}, viewmodels.Squad.prototype._initSections = function _initSections() {
    this.setSection(viewmodels.Squad.SECTION.PITCH, function(t) {
        return t.getIndex() < entities.Squad.FIELD_PLAYERS
    }, 0), this.setSection(viewmodels.Squad.SECTION.SUBS, function(t) {
        return t.getIndex() >= entities.Squad.FIELD_PLAYERS && t.getIndex() < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS
    }, 1), this.setSection(viewmodels.Squad.SECTION.RESERVES, function(t) {
        return t.getIndex() >= entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS && t.getIndex() < entities.Squad.MANAGER_SLOT_INDEX
    }, 2), this.setSection(viewmodels.Squad.SECTION.MANAGER, function(t) {
        return t.getIndex() === entities.Squad.MANAGER_SLOT_INDEX
    }, 3)
}, viewmodels.Squad.prototype.setSection = function setSection(id, t, i) {
    this._sections.set(id, {
        filter: t,
        priority: i
    })
}, viewmodels.Squad.prototype.getItemList = function getItemList() {
    return this._iterator.values().slice().sort(function(a, b) {
        return utils.JS.sortCompare(a.getIndex(), b.getIndex())
    }).map(function(t) {
        return t.getItem()
    })
}, viewmodels.Squad.prototype.values = function values() {
    return this._iterator.values()
}, NamespaceManager.Register("transferobjects"), transferobjects.DataProviderEntry = function DataProviderEntryDTO(id, value, label) {
    this.id = id, Object.defineProperty(this, "id", {
        writable: !1,
        enumerable: !0
    }), this.value = value, Object.defineProperty(this, "value", {
        writable: !1,
        enumerable: !0
    }), this.label = label, Object.defineProperty(this, "label", {
        writable: !1,
        enumerable: !0
    })
}, NamespaceManager.Register("views.buttons"), views.buttons.SliderButton = function FUISliderButton() {
    views.buttons.ToggleButton.call(this), this._generate()
}, utils.JS.inherits(views.buttons.SliderButton, views.buttons.ToggleButton), views.buttons.SliderButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("clearfix"), t.classList.add("slider-button"), this.__title = document.createElement("span"), this.$_title = $(this.__title), this.__title.classList.add("slider-title"), t.appendChild(this.__title);
        var i = document.createElement("div");
        i.classList.add("slider-control");
        var s = document.createElement("div");
        s.classList.add("slider-button-track"), i.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("slider-button-grip"), i.appendChild(o), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.SliderButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null
}, views.buttons.SliderButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.SliderButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.buttons.SliderButton.prototype.setText = function setText(text) {
    this.__title.textContent = text
}, NamespaceManager.Register("views.controls"), views.controls.SortOptions = function SortOptionsControl() {
    FUIControl.call(this), this._sliders = new FUTHashTable({}), this._generate()
}, utils.JS.inherits(views.controls.SortOptions, FUIControl), views.controls.SortOptions.prototype._generate = function _generate() {
    this._generated || (this.__sortGroupContainer = document.createElement("div"), this.$_sortGroupContainer = $(this.__sortGroupContainer), this.__sortGroupContainer.classList.add("clearfix"), this.__sortGroupContainer.classList.add("sort-group-container"), this.__root = this.__sortGroupContainer, this.$_root = $(this.$_sortGroupContainer), this._generated = !0)
}, views.controls.SortOptions.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__sortGroupContainer = null, this.$_sortGroupContainer = null
}, views.controls.SortOptions.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.controls.SortOptions.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.controls.SortOptions.prototype.dealloc = function dealloc() {
    this._subviews.forEach(function(t) {
        t.view.dealloc()
    }), this._sliders.clear(), this._sliders = null, this.superclass()
}, views.controls.SortOptions.prototype.setInteractionState = function setInteractionState(t) {
    this.superclass(t), this._subviews.forEach(function(i) {
        i.view.setInteractionState(t)
    })
}, views.controls.SortOptions.prototype.addSlider = function addSlider(id, label) {
    if (this._sliders.has(id)) utils.Debug.Assert(!1, "views.controls.SortOptions::addSlider. This slider already exists. Each slider should be unique.");
    else {
        var t = new views.buttons.SliderButton;
        t.init(), t.setAllText(label), t.addTarget(this, this._eSliderToggled, enums.Event.TAP), this._sliders.set(id, t), this.addSubview(t)
    }
}, views.controls.SortOptions.prototype._eSliderToggled = function _eSliderToggled(sender, event, data) {
    var t = this._sliders.keys().filter(function(key) {
        return this._sliders.get(key) === sender
    }.bind(this))[0];
    this._triggerActions(enums.Event.CHANGE, {
        id: t,
        checked: sender.getChecked()
    })
}, views.squads.SquadBuilder = function SquadBuilderView() {
    FUIView.call(this), this.onFilterChange = new FUTObservable, Object.defineProperty(this, "onFilterChange", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.squads.SquadBuilder, FUIView), views.squads.SquadBuilder.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("nativeScrolling"), t.classList.add("SquadBuilder");
        var i = document.createElement("div");
        i.classList.add("topFilters"), this.__squadBuilderInfo = document.createElement("p"), this.$_squadBuilderInfo = $(this.__squadBuilderInfo), this.__squadBuilderInfo.classList.add("squadBuilderInfo"), i.appendChild(this.__squadBuilderInfo), this._sortOptions = new views.controls.SortOptions, i.appendChild(this._sortOptions.getRootElement()), t.appendChild(i), this._formationFilter = new views.controls.SearchCriteriaPickerRow, t.appendChild(this._formationFilter.getRootElement()), this._searchFilters = new views.items.ItemSearch, t.appendChild(this._searchFilters.getRootElement());
        var s = document.createElement("div");
        s.classList.add("buttonContainer"), this._btnReset = new views.buttons.DefaultButton, s.appendChild(this._btnReset.getRootElement()), this._btnBuild = new views.buttons.DefaultButton, this._btnBuild.getRootElement().classList.add("call-to-action"), s.appendChild(this._btnBuild.getRootElement()), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SquadBuilder.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__squadBuilderInfo = null, this.$_squadBuilderInfo = null, this._sortOptions.destroy(), this._sortOptions = null, this._formationFilter.destroy(), this._formationFilter = null, this._searchFilters.destroy(), this._searchFilters = null, this._btnReset.destroy(), this._btnReset = null, this._btnBuild.destroy(), this._btnBuild = null
}, views.squads.SquadBuilder.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SquadBuilder.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SquadBuilder.prototype.init = function init() {
    this._btnReset.init(), this._btnReset.setText(gLocalization.lText("search.pagination.reset")), this._btnBuild.init(), this._btnBuild.setText(gLocalization.lText("button.build")), this._formationFilter.init(), this._formationFilter.setOptions(factories.DataProvider.getFormationDP()), this._formationFilter.title = gLocalization.lText("search.pagination.formation"), this._setFormationFilterImage(this._formationFilter), this._formationFilter.addTarget(this, this._eFormationFilterChanged, enums.Event.CHANGE), this.__squadBuilderInfo.textContent = gLocalization.lText("squadbuilder.infoText"), this._searchFilters.init(), this._searchFilters.togglePlayerNameRow(!1), this._searchFilters.onFilterChange.observe(this, this._eFilterChanged)
}, views.squads.SquadBuilder.prototype.dealloc = function dealloc() {
    this._formationFilter.removeTarget(this, this._eFormationFilterChanged, enums.Event.CHANGE), this._searchFilters.onFilterChange.unobserve(this), this.onFilterChange.dealloc(), this.superclass()
}, views.squads.SquadBuilder.prototype.setupSortOptions = function setupSortOptions(t, i) {
    this._sortOptions.init(), this._sortOptions.addSlider(enums.UISortOptionType.CONCEPT, gLocalization.lText("squadbuilder.toggles.conceptSquad")), i && this._sortOptions.addSlider(enums.UISortOptionType.REPLACE, gLocalization.lText("squadbuilder.toggles.replacePlayersSquad")), t && this._sortOptions.addSlider(enums.UISortOptionType.UNTRADEABLE, gLocalization.lText("search.sort.header")), this._sortOptions.addSlider(enums.UISortOptionType.DISCARD, gLocalization.lText("search.sort.discardValue")), this._sortOptions.layoutSubviews()
}, views.squads.SquadBuilder.prototype.setFilters = function setFilters(t, i) {
    this._searchFilters.setFilters(t, i)
}, views.squads.SquadBuilder.prototype.setFilterLock = function setFilterValue(filter, t) {
    this._searchFilters.setFilterLock(filter, t)
}, views.squads.SquadBuilder.prototype.getFormationFilter = function getFormationFilter() {
    return this._formationFilter
}, views.squads.SquadBuilder.prototype.getSortOptions = function getSortOptions() {
    return this._sortOptions
}, views.squads.SquadBuilder.prototype.getResetButton = function getResetButton() {
    return this._btnReset
}, views.squads.SquadBuilder.prototype.getBuildButton = function getBuildButton() {
    return this._btnBuild
}, views.squads.SquadBuilder.prototype._setFormationFilterImage = function _setFormationFilterImage(filter) {
    filter.image = utils.AssetLocator.getFilterImage(utils.AssetLocator.FILTER.FORMATION, filter.getValue())
}, views.squads.SquadBuilder.prototype._eFormationFilterChanged = function _eFormationFilterChanged(sender, t) {
    this._setFormationFilterImage(sender)
}, views.squads.SquadBuilder.prototype._eFilterChanged = function _eFilterChanged(t, i, id, value) {
    this.onFilterChange.notify(i, id, value)
}, NamespaceManager.Register("factories"), factories.SquadBuilder = function SquadBuilderFactory() {
    this._preferredSubPositions = [enums.PlayerPositionsAsInts.GK, enums.PlayerZonesAsInts.DEFENSE, enums.PlayerZonesAsInts.DEFENSE, enums.PlayerZonesAsInts.MIDFIELD, enums.PlayerZonesAsInts.MIDFIELD, enums.PlayerZonesAsInts.ATTACKER, enums.PlayerZonesAsInts.ATTACKER], this._preferredResPositions = [enums.PlayerZonesAsInts.DEFENSE, enums.PlayerZonesAsInts.DEFENSE, enums.PlayerZonesAsInts.MIDFIELD, enums.PlayerZonesAsInts.MIDFIELD, enums.PlayerZonesAsInts.ATTACKER]
}, factories.SquadBuilder.prototype.buildSquad = function buildSquad(t, i, s) {
    var o = repositories.Squad.getFormation(t);
    if (utils.Debug.Assert(o, "Expected a valid formation."), utils.Debug.Assert(i.length > 0, "Expected a collection of players."), !o || 0 === i.length) return null;
    var l = o.generalPositions.concat(this._preferredSubPositions, this._preferredResPositions),
        u = this._filterDuplicates(i, s);
    return this._generatePlayerCollection(l, u, s)
}, factories.SquadBuilder.prototype._getBestPlayerForPos = function _getBestPlayerForPos(position, t) {
    var index = this._findBestFitByPosition(position, t);
    return index >= 0 ? t.splice(index, 1)[0] || null : null
}, factories.SquadBuilder.prototype._generatePlayerCollection = function _generatePlayerCollection(t, i, s) {
    return t.map(function _mapEntityToObj(t, o) {
        var l = s ? s.getSlot(o) : null;
        return l && (l.isValid() || l.isBrick()) ? l.getItem() : this._getBestPlayerForPos(t, i)
    }, this)
}, factories.SquadBuilder.prototype._filterDuplicates = function _filterDuplicates(t, i) {
    return t.reduce(function _generateFilteredPlayerCollection(t, s) {
        return this._containsVariationOfCard(s, t) || i && i.containsVariationOfCard(s) || t.push(s), t
    }.bind(this), [])
}, factories.SquadBuilder.prototype._containsVariationOfCard = function _containsVariationOfCard(t, i) {
    if (utils.JS.isValid(t))
        for (var s = i.length; s-- > 0;)
            if (i[s].compareResourceTo(t)) return !0;
    return !1
}, factories.SquadBuilder.prototype._findBestFitByPosition = function _findBestFitByPosition(position, t) {
    var i, s = t.length;
    if (0 === s) return -1;
    for (i = 0; i < s; i++) {
        var o = t[i];
        if (position === enums.PlayerZonesAsInts.DEFENSE && o.prefersDefensePosition() || position === enums.PlayerZonesAsInts.MIDFIELD && o.prefersMidfieldPosition() || position === enums.PlayerZonesAsInts.ATTACKER && o.prefersAttackerPosition() || position === o.preferredPosition) return i
    }
    return position === enums.PlayerPositionsAsInts.RWB ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.RB, t) : position === enums.PlayerPositionsAsInts.LWB ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.LB, t) : position === enums.PlayerPositionsAsInts.RF ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.RW, t) : position === enums.PlayerPositionsAsInts.LF ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.LW, t) : position === enums.PlayerPositionsAsInts.RW ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.RM, t) : position === enums.PlayerPositionsAsInts.LW ? this._findBestFitByPosition(enums.PlayerPositionsAsInts.LM, t) : -1
}, Screens.Register("SQUAD_BUILDER", "SquadBuilder", Screens.APP_SECTION.SQUADS), NamespaceManager.Register("controllers.squads"), controllers.squads.SquadBuilder = function SquadBuilderController() {
    FUIViewController.call(this), this._squadBuilder = null, this._viewmodel = null, this._formation = "", this._squad = null, this._challenge = null, this._useConceptPlayers = !1, this._replacePlayers = !1
}, utils.JS.inherits(controllers.squads.SquadBuilder, FUIViewController), controllers.squads.SquadBuilder.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._squadBuilder = new factories.SquadBuilder, this._viewmodel = new viewmodels.ItemSearch;
        var view = this.getView();
        view.getResetButton().addTarget(this, this._eResetSelected, enums.Event.TAP), view.getBuildButton().addTarget(this, this._eBuildSelected, enums.Event.TAP), view.getSortOptions().addTarget(this, this._eSortToggled, enums.Event.CHANGE), view.onFilterChange.observe(this, this._eFilterChanged);
        var t = !(this._challenge && !gSettingsModel.getConfigsByKey(models.SettingsModel.SBC_ALLOW_UNTRADEABLE)),
            i = this._squad && !this._squad.isSquadEmpty();
        view.setupSortOptions(t, i), this._challenge && this._updateCriteriaFromChallenge(this._challenge), t || (this._viewmodel.searchCriteria.untradeables = enums.SearchUntradeables.EXCLUDE), this._viewmodel.searchCriteria.count = 250
    }
}, controllers.squads.SquadBuilder.prototype.initWithSquad = function initWithSquad(t) {
    this.initialized || (utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a Squad entity."), this._squad = t, this.init())
}, controllers.squads.SquadBuilder.prototype.initWithChallenge = function initWithChallenge(challenge) {
    this.initialized || (utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected an SBC Challenge entity."), this._challenge = challenge, this.initWithSquad(this._challenge.squad))
}, controllers.squads.SquadBuilder.prototype.dealloc = function dealloc() {
    if (this.hasLoaded) {
        var view = this.getView();
        view.getResetButton().removeTarget(this, this._eResetSelected, enums.Event.TAP), view.getBuildButton().removeTarget(this, this._eBuildSelected, enums.Event.TAP)
    }
    this.superclass(), this._formation = "", this._squad = null, this._challenge = null, this._viewmodel = null, this._squadBuilder = null
}, controllers.squads.SquadBuilder.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SquadBuilder
}, controllers.squads.SquadBuilder.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("navbar.label.squadbuilder")
}, controllers.squads.SquadBuilder.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(), this.getNavigationController().setNavigationVisibility(!0, !0)
}, controllers.squads.SquadBuilder.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    view.setFilterLock(enums.UISearchFilters.POSITION, !0), view.setFilterLock(enums.UISearchFilters.PLAYSTYLE, !0), view.setFilters(this._viewmodel);
    var t = view.getFormationFilter();
    this._challenge && t.setDisplay(!1), this._squad && t.setDefaultIndexById(this._squad.getFormation().getId(), !0)
}, controllers.squads.SquadBuilder.prototype._updateCriteriaFromChallenge = function _updateCriteriaFromChallenge(challenge) {
    challenge.eligibilityRequirements.forEach(function(t) {
        var key = t.getFirstKey(),
            i = t.getFirstValue(key);
        switch (key) {
            case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
                this._viewmodel.defaultSearchCriteria.club = i, this._viewmodel.searchCriteria.club = i;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
                this._viewmodel.defaultSearchCriteria.league = i, this._viewmodel.searchCriteria.league = i;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
                this._viewmodel.defaultSearchCriteria.nation = i, this._viewmodel.searchCriteria.nation = i;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
                var level = enums.SearchLevel.ANY;
                i === enums.ItemRatingTier.BRONZE ? level = enums.SearchLevel.BRONZE : i === enums.ItemRatingTier.SILVER ? level = enums.SearchLevel.SILVER : i === enums.ItemRatingTier.GOLD && (level = enums.SearchLevel.GOLD), this._viewmodel.defaultSearchCriteria.level = level, this._viewmodel.searchCriteria.level = level
        }
    }, this)
}, controllers.squads.SquadBuilder.prototype._eResetSelected = function _eResetSelected(t) {
    this._viewmodel.resetSearch();
    var view = this.getView();
    if (view.setFilters(this._viewmodel), !this._squad.isSBC()) {
        var i = view.getFormationFilter();
        i.setIndex(i.getDefaultIndex())
    }
}, controllers.squads.SquadBuilder.prototype._eBuildSelected = function _eBuildSelected(t) {
    var view = this.getView();
    this._formation = view.getFormationFilter().value, this._useConceptPlayers ? repositories.Item.getConceptItems(this._viewmodel.searchCriteria).observe(this, this._onConceptSearchComplete) : repositories.Item.getClubItems(this._viewmodel.searchCriteria).observe(this, this._onClubSearchComplete)
}, controllers.squads.SquadBuilder.prototype._eFilterChanged = function _eFilterChanged(t, i, id, value) {
    this._viewmodel.updateFromFilterChange(i, id, value), this.getView().setFilters(this._viewmodel)
}, controllers.squads.SquadBuilder.prototype._eSortToggled = function _eSortToggled(sender, t, data) {
    switch (data.id) {
        case enums.UISortOptionType.DISCARD:
            this._viewmodel.sort = data.checked ? enums.SearchSort.ASCENDING : enums.SearchSort.DESCENDING;
            break;
        case enums.UISortOptionType.UNTRADEABLE:
            this._viewmodel.searchCriteria.untradeables = data.checked ? enums.SearchUntradeables.ONLY : enums.SearchUntradeables.DEFAULT;
            break;
        case enums.UISortOptionType.REPLACE:
            this._replacePlayers = data.checked;
            break;
        case enums.UISortOptionType.CONCEPT:
            this._useConceptPlayers = data.checked
    }
}, controllers.squads.SquadBuilder.prototype._onClubSearchComplete = function _onClubSearchComplete(t, data) {
    t.unobserve(this);
    var i = data.items;
    this._squad && this._squad.isSBC() && (i = i.filter(function(t) {
        return !t.isLoaned() && !entities.Item.isAlex(t.id) && !entities.Item.isDanny(t.id)
    })), data.success && 0 !== i.length ? this._buildSquad(i) : utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.SQUAD_BUILDER_NO_RESULTS)
}, controllers.squads.SquadBuilder.prototype._onConceptSearchComplete = function _onConceptSearchComplete(t, data) {
    t.unobserve(this);
    var i = data.items;
    if (data.success && 0 !== i.length) {
        var s = new transferobjects.SearchCriteria;
        s.type = enums.SearchType.PLAYER, s.defId = i.map(function(item) {
            return item.id
        }), s.isExactSearch = !0, repositories.Item.getClubItems(s).observe(this, function _replaceConcepts(t, data) {
            data.success ? i = i.map(function(item) {
                for (var t = data.items.length; t-- > 0;)
                    if (item.getMaskedResourceId() === data.items[t].getMaskedResourceId()) return data.items[t];
                return item
            }) : data.error && NetworkErrorManager.handle(data.error, !1), this._buildSquad(i)
        })
    } else utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.SQUAD_BUILDER_NO_RESULTS)
}, controllers.squads.SquadBuilder.prototype._buildSquad = function _buildSquad(t) {
    var i = new viewmodels.ItemList([]);
    i.sort = this._viewmodel.sort, i.addArray(t), t = i.getItemList();
    var s;
    this._squad ? (s = this._replacePlayers ? this._squadBuilder.buildSquad(this._formation, t) : this._squadBuilder.buildSquad(this._formation, t, this._squad), this._squad.setPlayers(s), this._squad.setFormation(repositories.Squad.getFormation(this._formation)), this._challenge ? this._challenge.save().observe(this, this._onSBCSaveComplete) : this._squad.save().observe(this, this._onSquadSaveComplete)) : (s = this._squadBuilder.buildSquad(this._formation, t), repositories.Squad.getSquads().observe(this, function(i, data) {
        i.unobserve(this);
        var s = gLocalization.lText("squad.builder.defaultname"),
            o = utils.TextUtils.squadNameExists(s, data) ? utils.TextUtils.createSquadName(s, data) : s;
        services.Squad.create(o, this._formation, t).observe(this, this._onSquadCreateComplete)
    }))
}, controllers.squads.SquadBuilder.prototype._onSquadCreateComplete = function _onSquadCreateComplete(t, data) {
    t.unobserve(this), data.success ? (this.getNavigationController().popViewController(!0), gTelemetryManager.trackEvent(TelemetryManager.Sections.SQUADS, TelemetryManager.Categories.SQUAD_BUILDING, "Squad Builder Create")) : NavManager.requestGoBackScreen()
}, controllers.squads.SquadBuilder.prototype._onSquadSaveComplete = function _onSquadSaveComplete(t, data) {
    t.unobserve(this), data.success ? (this.getNavigationController().popViewController(), services.Notification.queue([gLocalization.lText("notification.squad.updated"), enums.UINotificationType.NEUTRAL]), gTelemetryManager.trackEvent(TelemetryManager.Sections.SQUADS, TelemetryManager.Categories.SQUAD_BUILDING, "Squad Builder Update")) : NavManager.requestGoBackScreen()
}, controllers.squads.SquadBuilder.prototype._onSBCSaveComplete = function _onSBCSaveComplete(t, i) {
    t.unobserve(this), i ? (this.getNavigationController().popViewController(), services.Notification.queue([gLocalization.lText("notification.squad.updated"), enums.UINotificationType.NEUTRAL]), gTelemetryManager.trackEvent(TelemetryManager.Sections.SQUADS, TelemetryManager.Categories.SQUAD_BUILDING, "SBC Squad Builder Update")) : NavManager.requestGoBackScreen()
}, components.BaseButton = function() {
    components.BaseComponent.call(this), this._text = "", this._enabled = !0, this._touchHandler = new FUTTouchHandler
}, utils.JS.inherits(components.BaseButton, components.BaseComponent), components.BaseButton.TOUCHSTART = "components.BaseButton.TOUCHSTART", components.BaseButton.TOUCHEND = "components.BaseButton.TOUCHEND", components.BaseButton.CLICKED = "components.BaseButton.CLICKED", components.BaseButton.STATUS = {
    ACTIVE: "active",
    DISABLED: "disabled",
    BUSY: "busy"
}, components.BaseButton.prototype.init = function() {
    this._touchHandler.handleTouch(this.getRoot()), this._touchHandler.tap.observe(this, this.onTap.bind(this)), this._touchHandler.bubbleEvent = !1
}, components.BaseButton.prototype.destroy = function() {
    this._touchHandler.stopTouchHandling(), this.clearListeners(), this.destroyGeneratedElements()
}, components.BaseButton.prototype.setText = function(text) {
    utils.Debug.Assert(!1, "Abstract method not overridden: showText")
}, components.BaseButton.prototype.getText = function() {
    return this._text
}, components.BaseButton.prototype.showText = function() {
    utils.Debug.Assert(!1, "Abstract method not overridden: showText")
}, components.BaseButton.prototype.hideText = function() {
    utils.Debug.Assert(!1, "Abstract method not overridden: hideText")
}, components.BaseButton.prototype.setSubText = function(text) {
    utils.Debug.Assert(!1, "Abstract method not overridden: setSubText")
}, components.BaseButton.prototype.hideSubText = function(t) {
    utils.Debug.Assert(!1, "Abstract method not overridden: hideSubText")
};
components.BaseButton.prototype.showSubText = function() {
    utils.Debug.Assert(!1, "Abstract method not overridden: showSubText")
}, components.BaseButton.prototype.enable = function() {
    this.setEnabled(!0)
}, components.BaseButton.prototype.disable = function() {
    this.setEnabled(!1)
}, components.BaseButton.prototype.setEnabled = function(enabled) {
    this._enabled !== enabled && (this._enabled = enabled, this.getRoot().removeClass(components.BaseButton.STATUS.ACTIVE).toggleClass(components.BaseButton.STATUS.DISABLED, !this._enabled))
}, components.BaseButton.prototype.getEnabled = function() {
    return this._enabled
}, components.BaseButton.prototype.onTouchStart = function(t, e) {
    this._enabled && (this.getRoot().addClass("active"), this.dispatch(components.BaseButton.TOUCHSTART))
}, components.BaseButton.prototype.onTouchEnd = function(t, e) {
    this.getRoot().removeClass("active"), this._enabled && this.dispatch(components.BaseButton.TOUCHEND)
}, components.BaseButton.prototype.onTap = function(t, e) {
    this._enabled && this.dispatch(components.BaseButton.CLICKED)
}, components.BaseButton.prototype.toggle = function(t) {
    utils.Debug.Assert(utils.JS.isBoolean(t), "Invalid parameter for Base Button:toggle. Expected a boolean."), this.getRoot().toggle(t)
}, components.BaseButton.prototype.hide = function() {
    this.getRoot().hide()
}, components.BaseButton.prototype.show = function() {
    this.getRoot().show()
}, components.BaseButton.prototype.remove = function() {
    this.getRoot().remove()
}, components.FlatButton = function() {
    components.BaseButton.call(this), this._generate()
}, utils.JS.inherits(components.FlatButton, components.BaseButton), components.FlatButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("role", "button"), t.classList.add("btn"), t.classList.add("btn-flat"), this.__text = document.createElement("span"), this.$_text = $(this.__text), this.__text.classList.add("btn-text"), t.appendChild(this.__text), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.FlatButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__text = null, this.$_text = null
}, components.FlatButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.FlatButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.FlatButton.prototype.setText = function(text) {
    this._text = text, this.$_text.html(this._text)
}, NamespaceManager.Register("views.popups"), views.popups.SquadLinkCopy = function SquadLinkCopy() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.popups.SquadLinkCopy, FUIView), views.popups.SquadLinkCopy.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("SquadLinkCopy");
        var i = document.createElement("header");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), i.appendChild(this.__title), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("bodySection"), this.__msg = document.createElement("p"), this.$_msg = $(this.__msg), this.__msg.classList.add("secondary"), s.appendChild(this.__msg);
        var o = document.createElement("div");
        o.classList.add("input-group"), this._url = new views.TextInput, this._url.getRootElement().classList.add("round"), this._url.getRootElement().classList.add("form-control"), o.appendChild(this._url.getRootElement()), this._copyBtn = new views.buttons.DefaultButton, this._copyBtn.getRootElement().classList.add("fut_icon"), this._copyBtn.getRootElement().classList.add("round"), this._copyBtn.getRootElement().classList.add("input-group-btn"), this._copyBtn.getRootElement().classList.add("call-to-action"), o.appendChild(this._copyBtn.getRootElement()), s.appendChild(o), this.__btnContainer = document.createElement("footer"), this.$_btnContainer = $(this.__btnContainer), this._closeBtn = new views.buttons.FlatButton, this.__btnContainer.appendChild(this._closeBtn.getRootElement()), s.appendChild(this.__btnContainer), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.SquadLinkCopy.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__msg = null, this.$_msg = null, this._url.destroy(), this._url = null, this._copyBtn.destroy(), this._copyBtn = null, this.__btnContainer = null, this.$_btnContainer = null, this._closeBtn.destroy(), this._closeBtn = null
}, views.popups.SquadLinkCopy.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.SquadLinkCopy.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.SquadLinkCopy.prototype.init = function init() {
    this._closeBtn.init(), this._copyBtn.init()
}, views.popups.SquadLinkCopy.prototype.render = function render(url) {
    this._url.value = url, this._url.highlightOnFocus = !0, this._url.init(), this.$_title.text(gLocalization.lText("popups.copylink.title")), this._closeBtn.setText(gLocalization.lText("infopanel.label.close")), this.$_msg.text(gLocalization.lText("popups.copylink.msg")), this._copyBtn.addClass("icon_link")
}, views.popups.SquadLinkCopy.prototype.getCloseBtn = function getCloseBtn() {
    return this._closeBtn
}, views.popups.SquadLinkCopy.prototype.getCopyBtn = function getCopyBtn() {
    return this._copyBtn
}, views.popups.SquadLinkCopy.prototype.getUrlInput = function getUrlInput() {
    return this._url
}, NamespaceManager.Register("views.popups"), views.popups.LiveMessage = function LiveMessage() {
    FUIView.call(this), this._isRendered = !1, this._generate()
}, utils.JS.inherits(views.popups.LiveMessage, FUIView), views.popups.LiveMessage.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "LiveMessageOverlay"), t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-liveMessage"), i.classList.add("l-liveMessage"), i.classList.add("boot-box");
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content"), this.__image = document.createElement("div"), this.$_image = $(this.__image), this.__image.classList.add("boot-content"), this.__image.classList.add("img-tablet"), this.__image.classList.add("img-container"), this._image = new components.ImageLoader, this.__image.appendChild(this._image.getRootElement()), o.appendChild(this.__image), s.appendChild(o);
        var l = document.createElement("div");
        l.classList.add("boot-primary-content"), l.classList.add("flush-top");
        var u = document.createElement("div");
        u.classList.add("boot-content"), this.__header = document.createElement("header"), this.$_header = $(this.__header), this._date = new components.TextField, this._date.getRootElement().classList.add("secondary"), this._date.getRootElement().classList.add("left"), this.__header.appendChild(this._date.getRootElement()), this.__title = document.createElement("h2"), this.$_title = $(this.__title), this.__header.appendChild(this.__title), this._numMessages = new components.TextField, this._numMessages.getRootElement().classList.add("secondary"), this._numMessages.getRootElement().classList.add("right"), this.__header.appendChild(this._numMessages.getRootElement()), u.appendChild(this.__header), this.__image2 = document.createElement("div"), this.$_image2 = $(this.__image2), this.__image2.classList.add("img-mobile"), this.__image2.classList.add("img-container"), this._image2 = new components.ImageLoader, this.__image2.appendChild(this._image2.getRootElement()), u.appendChild(this.__image2), this.__content = document.createElement("div"), this.$_content = $(this.__content), this.__content.classList.add("scrollable"), this.__content.classList.add("message-content"), u.appendChild(this.__content), this._continueBtn = new views.buttons.DefaultButton, this._continueBtn.getRootElement().classList.add("call-to-action"), u.appendChild(this._continueBtn.getRootElement()), l.appendChild(u), s.appendChild(l), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.LiveMessage.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__image = null, this.$_image = null, this._image.destroy(), this._image = null, this.__header = null, this.$_header = null, this._date.destroy(), this._date = null, this.__title = null, this.$_title = null, this._numMessages.destroy(), this._numMessages = null, this.__image2 = null, this.$_image2 = null, this._image2.destroy(), this._image2 = null, this.__content = null, this.$_content = null, this._continueBtn.destroy(), this._continueBtn = null
}, views.popups.LiveMessage.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.LiveMessage.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.LiveMessage.prototype.init = function init() {
    this.superclass(), this._continueBtn.init(), this._continueBtn.setText(gLocalization.lText("common.dialog.continue")), this.setInteractionState(!0)
}, views.popups.LiveMessage.prototype.setInteractionState = function setInteractionState(t) {
    this._setInteractionStateFlag(t), this._continueBtn.setInteractionState(t)
}, views.popups.LiveMessage.prototype._renderHeader = function _renderHeader(title, t, i) {
    this.$_title.html(title), this._numMessages.setText(i)
}, views.popups.LiveMessage.prototype._renderImage = function _renderImage(src) {
    this._image.setExternalResource(src, !0).observe(this, this._imageLoad), this._image2.setExternalResource(src, !0).observe(this, this._imageLoad)
}, views.popups.LiveMessage.prototype._imageLoad = function _imageLoad(t, i, s, path) {
    t.unobserve(this), i || s.setLocalResource("images/liveMessageDefault.png")
}, views.popups.LiveMessage.prototype._renderContent = function _renderContent(content) {
    this.$_content.html(utils.TextUtils.nltobr(content))
}, views.popups.LiveMessage.prototype.render = function render(t, i) {
    this._isRendered ? (this.$_header.fadeOut(200, function() {
        this._renderHeader(t.title, t.startDateTime, i), this.$_header.fadeIn(200)
    }.bind(this)), this.$_content.fadeOut(200, function() {
        this._renderContent(t.text), this.$_content.fadeIn(200)
    }.bind(this)), this._image.getRoot().fadeOut(200, function() {
        this._renderImage(t.imageSrc), this._image.getRoot().fadeIn(200)
    }.bind(this))) : (this._renderHeader(t.title, t.startDateTime, i), this._renderImage(t.imageSrc), this._renderContent(t.text), this._isRendered = !0)
}, views.popups.LiveMessage.prototype.getContinueButton = function getContinueButton() {
    return this._continueBtn
}, NamespaceManager.Register("views.popups"), views.popups.Dialog = function UTDialogPopupView() {
    FUIView.call(this), this._optionBtns = [], this._generate()
}, utils.JS.inherits(views.popups.Dialog, FUIView), views.popups.Dialog.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("Dialog");
        var i = document.createElement("header");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), i.appendChild(this.__title), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("body"), this.__msg = document.createElement("p"), this.$_msg = $(this.__msg), s.appendChild(this.__msg), this.__btnContainer = document.createElement("footer"), this.$_btnContainer = $(this.__btnContainer), s.appendChild(this.__btnContainer), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.Dialog.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__msg = null, this.$_msg = null, this.__btnContainer = null, this.$_btnContainer = null
}, views.popups.Dialog.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.Dialog.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.Dialog.prototype.dealloc = function dealloc() {
    this._optionBtns.forEach(function(t) {
        t.dealloc()
    }), this._optionBtns = [], this.superclass()
}, views.popups.Dialog.prototype.render = function render(t, title, type, i) {
    var message = utils.JS.isValid(i) ? gLocalization.lPrint(t, i) : gLocalization.lText(t);
    this.__msg.textContent = message, this.__title.textContent = gLocalization.lText(title), this.addClass(type), this.layoutSubviews()
}, views.popups.Dialog.prototype.createOption = function createOption(label) {
    var t = new views.buttons.FlatButton;
    return t.setText(label), t.init(), this._optionBtns.push(t), this.addSubview(t, this.$_btnContainer), t
}, controllers.views.popups.Dialog = function UTDialogPopupViewController(t, title, type, i, options) {
    controllers.views.popups.BasePopup.call(this), this._msg = t, this._title = title, this._options = Array.isArray(options) ? options : [], this._messageParameters = i || [], this._type = utils.JS.isValid(type) ? type : enums.UIDialogTypes.MESSAGE, this.animate = !0
}, utils.JS.inherits(controllers.views.popups.Dialog, controllers.views.popups.BasePopup), controllers.views.popups.Dialog.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.Dialog
}, controllers.views.popups.Dialog.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    this._options.forEach(function(t, i) {
        view.createOption(utils.PopupManager.getLocalizedDialogOption(t)).addTarget(this, this._eOptionSelected.bind(this, t), enums.Event.TAP)
    }, this), view.render(this._msg, this._title, this._type, this._messageParameters)
}, controllers.views.popups.Dialog.prototype.handleKeyUpEvent = function handleKeyUpEvent(e) {
    this._options.length < 1 || (e.key === enums.KeyboardKey.ESCAPE || e.key === enums.KeyboardKey.MS_ESCAPE ? this.onExit.notify(utils.JS.isNumber(this._options[0]) ? this._options[0] : enums.UIDialogOptions.CANCEL) : e.key === enums.KeyboardKey.ENTER && this.onExit.notify(utils.JS.isNumber(this._options[1]) ? this._options[1] : enums.UIDialogOptions.OK))
}, controllers.views.popups.Dialog.prototype._eOptionSelected = function _eOptionSelected(t) {
    this.onExit.notify(t)
}, NamespaceManager.Register("utils"), utils.PopupManager = {}, utils.PopupManager.displayingNativePopup = !1, utils.PopupManager.ShowAlert = function showAlert(t, i, s) {
    var o = new controllers.views.popups.Dialog(t.message, t.title, enums.UIDialogTypes.ALERT, s, t.buttonLabels.slice(0, 1));
    o.init(), gPopupClickShield.setActivePopup(o, enums.UIShieldStyles.TRANSPARENT, !0), o.onExit.observe(this, function(t, data) {
        i && i()
    })
}, utils.PopupManager.displayNetworkError = function(t, i) {
    var alert = new UTPopupDTO(t.getTitle(), t.getMessage(), [enums.UIDialogOptions.OK]);
    utils.PopupManager.ShowAlert(alert, i)
}, utils.PopupManager.ShowConfirmation = function showConfirmation(t, i, s, o) {
    utils.JS.isFunction(o) || (o = function() {});
    var l = new controllers.views.popups.Dialog(t.message, t.title, enums.UIDialogTypes.MESSAGE, i, t.buttonLabels);
    l.init(), gPopupClickShield.setActivePopup(l), l.onExit.observe(this, function(t, data) {
        data !== enums.UIDialogOptions.CANCEL && data !== enums.UIDialogOptions.NO && s ? s() : o && o()
    })
}, utils.PopupManager.showNoInternetConnectionPopup = function showNoInternetConnectionPopup() {
    gPinManager.sendDisconnectEvent(), utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.NO_INTERNET_CONNECTION, gAuthenticationModel.errorLogout.bind(gAuthenticationModel))
}, utils.PopupManager.getLocalizedDialogOption = function getLocalizedDialogOption(t) {
    var key = "";
    switch (t) {
        case enums.UIDialogOptions.RETRY:
            key = "easfcdown.retry";
            break;
        case enums.UIDialogOptions.OK:
            key = "common.dialog.ok";
            break;
        case enums.UIDialogOptions.CANCEL:
            key = "common.dialog.cancel";
            break;
        case enums.UIDialogOptions.YES:
            key = "popup.yes";
            break;
        case enums.UIDialogOptions.NO:
            key = "popup.no";
            break;
        case enums.UIDialogOptions.SIGN_OUT:
            key = "more.signout.button";
            break;
        case enums.UIDialogOptions.TAKE_ME:
            key = "popup.takeMeThere"
    }
    return gLocalization.lText(key)
}, utils.PopupManager.Alerts = {}, utils.PopupManager.Alerts.ORIGIN_UNAVAILABLE = new UTPopupDTO("popup.originUnavailableTitle", "popup.originUnavailable", [enums.UIDialogOptions.RETRY]), utils.PopupManager.Alerts.ACCOUNT_BANNED = new UTPopupDTO("error.banneduser.header", "error.banneduser.body", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.BID_TOO_LOW = new UTPopupDTO("popup.errorLowBidTitle", "popup.bidTooLow", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.CANT_UNWATCH_ACTIVE_BID = new UTPopupDTO("popup.cantUnwatchCardPlayerBidTitle", "popup.cantUnwatchCardPlayerBidText", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.BID_VALUE_CHANGED = new UTPopupDTO("list.bid.valueschanged.title", "list.bid.valueschanged.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.BUY_VALUE_CHANGED = new UTPopupDTO("list.buy.valueschanged.title", "list.buy.valueschanged.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.WATCH_LIST_FULL = new UTPopupDTO("popup.watchlist.full.title", "popup.watchlist.full.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.TRANSFER_LIST_FULL = new UTPopupDTO("popup.error.tradetoken.SellItemTradePileFullTitle", "popup.error.tradetoken.SellItemTradePileFull", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DESTINATION_FULL = new UTPopupDTO("popup.error.item.DestinationFullTitle", "popup.error.item.DestinationFull", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DUPLICATE_SQUAD_NAME = new UTPopupDTO("popup.error.duplicateSquadNameTitle", "popup.error.duplicateSquadName", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.SQUADS_FULL = new UTPopupDTO("popup.error.squadsFullTitle", "popup.error.squadsFull", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.CANNOT_COPY_SQUAD = new UTPopupDTO("popup.cannotcopysquad.title", "popup.cannotcopysquad.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.CANNOT_DELETE_SQUAD = new UTPopupDTO("popup.cannotdeletesquad.title", "popup.cannotdeletesquad.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.CANNOT_RELIST_ALL = new UTPopupDTO("popup.error.relistall.title", "popup.error.relistall", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.RATE_LIMIT = new UTPopupDTO("popup.error.RateLimitHeader", "popup.error.RateLimitBody", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DID_CREATE_EXCEEDED = new UTPopupDTO("popup.error.DID.CreateExceededHeader", "popup.error.DID.CreateExceededBody", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DID_LOGIN_EXCEEDED = new UTPopupDTO("popup.error.DID.LoginExceededHeader", "popup.error.DID.LoginExceededBody", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DEVICE_SUSPENDED = new UTPopupDTO("popup.error.DeviceSuspendedHeader", "popup.error.DeviceSuspendedBody", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.NO_INTERNET_CONNECTION = new UTPopupDTO("popup.error.NoInternetConnectionTitle", "popup.error.NoInternetConnection", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.LOW_MEMORY = new UTPopupDTO("popup.warningLowMemoryTitle", "popup.warningLowMemory", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.SERVER_DOWN = new UTPopupDTO("popup.error.serverdownTitle", "popup.error.serverdown", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.CONCURRENT_LOGIN = new UTPopupDTO("popup.error.concurrentLoginTitle", "popup.error.concurrentLogin", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DUPLICATE_ITEM = new UTPopupDTO("popup.error.item.DuplicatedItemTypeTitle", "popup.error.squadManagement.DuplicateItem", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.STORE_INSUFFICIENT_COINS = new UTPopupDTO("popup.error.storeInsufficientCoinsTitle", "popup.error.storeInsufficientCoins", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.STORE_INSUFFICIENT_POINTS = new UTPopupDTO("popup.error.insufficientfifapointsTitle", "popup.error.insufficientfifapoints", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.CANNOT_QUICKSELL_ALL = new UTPopupDTO("popup.error.itemDiscard.InvalidStateTitle", "tooltip.newitems.cannotquicksellall", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.SERVICE_IS_DISABLED = new UTPopupDTO("popup.error.ServiceIsDisabledTitle", "popup.error.ServiceIsDisabled", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.ALL_NEED_TO_BE_CLAIMED = new UTPopupDTO("popup.error.autoassign.cannotAutoAssign", "popup.error.autoassign.allFreePack", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.REAUTH_FAIL = new UTPopupDTO("popup.error.cannotcontinueTitle", "popup.error.cannotcontinue", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.CANNOT_TRADE_UNTRADEABLE = new UTPopupDTO("infopanel.context.untradeable", "popup.error.item.untradeable", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.UNTRADEABLE_DUPLICATE = new UTPopupDTO("infopanel.context.untradeable", "popup.error.tradepile.untradeableduplicate", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.HIT_MAX_LISTING = new UTPopupDTO("popup.error.list.forbidden.title", "popup.error.list.forbidden.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.INJURED_OR_SUSPENDED = new UTPopupDTO("popup.error.item.PermissionDeniedTitle", "popup.error.item.InjuredOrSuspended", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.TRADING_DISABLED = new UTPopupDTO("tile.disabled.transfersunavailable", "popup.error.auctioninfo.tradingdisabled", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DRAFT_INSUFFICIENT_TOKENS = new UTPopupDTO("popup.error.storeInsufficientTokensTitle", "draft.popup.insufficientTokens", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DRAFT_INSUFFICIENT_COINS = new UTPopupDTO("popup.error.storeInsufficientCoinsTitle", "draft.popup.insufficientCoins", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DRAFT_INSUFFICIENT_POINTS = new UTPopupDTO("popup.error.insufficientfifapointsTitle", "draft.popup.insufficientFifapoints", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.DRAFT_SQUAD_CHANGES = new UTPopupDTO("draft.popup.draftSquadChanges.title", "draft.popup.draftSquadChanges.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.SBC_GRACE_PERIOD = new UTPopupDTO("popup.sbcgraceperiod.title", "popup.sbcgraceperiod.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.SBC_INELIGIBLE_SQUAD = new UTPopupDTO("popup.sbcineligiblesquad.title", "popup.sbcineligiblesquad.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.SBC_UNTRADEABLE_NOT_ALLOWED = new UTPopupDTO("popup.sbcineligiblesquad.title", "popup.sbcUntradeableNotAllowed.message", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.SQUAD_BUILDER_NO_RESULTS = new UTPopupDTO("popup.title.noSquadBuilderResults", "popup.error.squad.builder.noresults", [enums.UIDialogOptions.OK]), utils.PopupManager.Alerts.ONBOARDING_INTRO = new UTPopupDTO("onboarding.popup.loanswap.title", "onboarding.popup.loanswap.body", [enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations = {}, utils.PopupManager.Confirmations.CONFIRM_COPY_SQUAD = new UTPopupDTO("manage.copy.message.title", "manage.copy.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CONFIRM_RELIST_ALL = new UTPopupDTO("popup.tradepile.relistAllTitle", "popup.tradepile.relistAllText", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.CONFIRM_RELIST_ALL_PB = new UTPopupDTO("popup.tradepile.relistAllTitle", "popup.tradepile.relistAllPriceBandingText", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.BID_WHEN_HIGHEST_BIDDER = new UTPopupDTO("popup.confirmHighestBidderTitle", "popup.confirmHighestBidder", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.CONFIRM_BID = new UTPopupDTO("popup.bidConfirmationTitle", "popup.bidConfirmationText", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CONFIRM_BUY_NOW = new UTPopupDTO("popup.buyNowConfirmationTitle", "popup.buyNowConfirmationText", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.UNASSIGNED_ENTITLEMENT = new UTPopupDTO("popup.error.unassignedItemsEntitlementTitle", "popup.error.fifacredits.unassignedItemsEntitlement", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.TAKE_ME]), utils.PopupManager.Confirmations.NEW_ITEMS_FULL = new UTPopupDTO("popup.newItemsFullTitle", "popup.newItemsFullText", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.TAKE_ME]), utils.PopupManager.Confirmations.CONFIRM_DISCARD = new UTPopupDTO("infopanel.label.discard", "popup.confirmItemDiscard", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CONFIRM_DISCARD_ALL = new UTPopupDTO("infopanel.label.discardall", "popup.confirmDiscardAll", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.TRANSFER_PLAYER = new UTPopupDTO("infopanel.button.transfer", "popup.squads.transfer.player", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.REMOVE_PLAYER = new UTPopupDTO("infopanel.button.remove", "popup.squads.remove.player", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.REMOVE_MANAGER = new UTPopupDTO("infopanel.button.remove", "popup.squads.remove.manager", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SAVE_SQUAD_RESUME = new UTPopupDTO("savesquad.title", "savesquad.resumemessage", [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.DELETE_SQUAD = new UTPopupDTO("popup.deletesquad.title", "popup.deletesquad.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.MAKE_SQUAD_CONCEPT = new UTPopupDTO("popup.makesquadconcept.title", "popup.makesquadconcept.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SBC_CONCEPT_SQUAD = new UTPopupDTO("popup.sbcconceptsquad.title", "popup.sbcconceptsquad.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.PERSISTENT_SIGNON = new UTPopupDTO("more.persistent.on.title", "more.persistent.on.body", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.UPDATE_FUT = new UTPopupDTO("popup.updateFUTTitle", "popup.update.FUTText", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.ENABLE_USAGE_SHARING = new UTPopupDTO("more.usagesharing.title", "more.usagesharing.enablebody", [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.DISABLE_USAGE_SHARING = new UTPopupDTO("more.usagesharing.title", "more.usagesharing.disablebody", [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.OPEN_PACK = new UTPopupDTO("store.confirmation.questionopenTitle", "store.confirmation.questionopen", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.BUY_PACK = new UTPopupDTO("store.confirmation.questionTitle", "popup.confirmPurchase", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.BUY_PACK_FIFAPOINTS = new UTPopupDTO("store.confirmation.questionTitle", "popup.confirmPointsPurchase", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SEND_ALL_TO_CLUB = new UTPopupDTO("infopanel.label.storeAllInClub", "popup.confirmSendToClubAll", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SEND_ALL_TO_TRANSFER_LIST = new UTPopupDTO("popup.confirmation.sendAllToTransferListTitle", "popup.confirmation.sendAllToTransferList", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SEND_TO_CLUB = new UTPopupDTO("infopanel.label.club", "popup.confirmSendToClub", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SEND_TO_TRANSFER_LIST = new UTPopupDTO("infopanel.label.sendTradePile", "popup.confirmSendToTransferList", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.APPLY_CONSUMABLE = new UTPopupDTO("panel.applyitem.button", "popup.confirmApplyConsumable", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SPEND_DRAFT_TOKEN = new UTPopupDTO("draft.popup.useToken.title", "draft.popup.useToken.message", [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.DRAFT_PAY_WITH_POINTS = new UTPopupDTO("draft.popup.usePoints.title", "draft.popup.usePoints.message", [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.DRAFT_PAY_WITH_COINS = new UTPopupDTO("draft.popup.useCoins.title", "draft.popup.useCoins.message", [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.CONFIRM_AUTOFILL = new UTPopupDTO("draft.popup.confirmAutofill.title", "draft.popup.confirmAutofill.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CONFIRM_FORMATION = new UTPopupDTO("draft.popup.confirmFormation.title", "draft.popup.confirmFormation.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CONFIRM_CAPTAIN = new UTPopupDTO("draft.popup.confirmCaptain.title", "draft.popup.confirmCaptain.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CONFIRM_DIFFICULTY = new UTPopupDTO("draft.popup.confirmDifficulty.title", "draft.popup.confirmDifficulty.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SUBMIT_CHALLENGE = new UTPopupDTO("sbc.overlay.btn.submitChallenge", "sbc.popup.submitChallenge.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.SEND_REPORT = new UTPopupDTO("popup.confirmSendReportTitle", "popup.confirmSendReport", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CANCEL_MESSAGE = new UTPopupDTO("popup.cancelMessage.title", "popup.cancelMessage", [enums.UIDialogOptions.NO, enums.UIDialogOptions.YES]), utils.PopupManager.Confirmations.SIGN_OUT = new UTPopupDTO("more.signout.title", "more.signout.body", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.SIGN_OUT]), utils.PopupManager.Confirmations.CHANGE_PERSONA = new UTPopupDTO("personaselector.title", "personaselector.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.CLEAR_SQUAD = new UTPopupDTO("clearSquad.title", "clearSquad.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), utils.PopupManager.Confirmations.EXIT_APP = new UTPopupDTO("popup.exitapp.title", "popup.exitapp.message", [enums.UIDialogOptions.CANCEL, enums.UIDialogOptions.OK]), NamespaceManager.Register("controllers.views.popups"), controllers.views.popups.SquadLinkCopy = function SquadLinkCopy(url) {
    controllers.views.popups.BasePopup.call(this), this._url = url, this.animate = !0
}, utils.JS.inherits(controllers.views.popups.SquadLinkCopy, controllers.views.popups.BasePopup), controllers.views.popups.SquadLinkCopy.prototype.init = function init() {
    var view = this.getView();
    view.getCloseBtn().addTarget(this, this._eCloseTap, enums.Event.TAP), view.getCopyBtn().addTarget(this, this._eCopyTap, enums.Event.TAP), view.render(this._url), view.getUrlInput().onChange.observe(this, this._eOnInputChange), this.superclass()
}, controllers.views.popups.SquadLinkCopy.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.SquadLinkCopy
}, controllers.views.popups.SquadLinkCopy.prototype._gotoLink = function _gotoLink() {
    services.URL.process(this._url)
}, controllers.views.popups.SquadLinkCopy.prototype._copyToClipboard = function _copyToClipboard() {
    if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
        var t = document.createElement("textarea");
        t.textContent = this._url, t.style.position = "fixed", document.body.appendChild(t), t.select();
        try {
            return document.execCommand("copy"), services.Notification.queue([gLocalization.lText("notification.linkcopy.success"), enums.UINotificationType.POSITIVE])
        } catch (t) {
            return services.Notification.queue([gLocalization.lText("notification.linkcopy.fail"), enums.UINotificationType.NEGATIVE])
        } finally {
            document.body.removeChild(t)
        }
    }
}, controllers.views.popups.SquadLinkCopy.prototype.handleKeyUpEvent = function handleKeyUpEvent(e) {
    e.key !== enums.KeyboardKey.ESCAPE && e.key !== enums.KeyboardKey.MS_ESCAPE && e.key !== enums.KeyboardKey.ENTER || this.onExit.notify()
}, controllers.views.popups.SquadLinkCopy.prototype._eCloseTap = function _eCloseTap(sender, t) {
    this.onExit.notify()
}, controllers.views.popups.SquadLinkCopy.prototype._eOnInputChange = function _eOnInputChange(t) {
    var input = this.getView().getUrlInput();
    input.value !== this._url && (input.value = this._url)
}, controllers.views.popups.SquadLinkCopy.prototype._eCopyTap = function _eCopyTap(sender, t) {
    this._copyToClipboard()
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SquadActions = function(t) {
    FUIViewController.call(this), this._withSquadView = t, Object.defineProperty(this, "withSquadView", {
        writable: !1
    }), this._squad = null, Object.defineProperty(this, "_squad", {
        writable: !0
    }), this._formations = factories.DataProvider.getFormationDP(), Object.defineProperty(this, "_formations", {
        writable: !1
    }), this._wasModified = !1, Object.defineProperty(this, "_wasModified", {
        writable: !0
    }), this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1
    })
}, utils.JS.inherits(controllers.squads.SquadActions, FUIViewController), controllers.squads.SquadActions.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.getMakeActiveButton().addTarget(this, this._onMakeActive, enums.Event.TAP), view.getOpenButton().addTarget(this, this._onOpen, enums.Event.TAP), view.getSquadBuilderButton().addTarget(this, this._onSquadBuilder, enums.Event.TAP), view.getShareButton().addTarget(this, this._onShare, enums.Event.TAP), view.getRenameButton().addTarget(this, this._onRename, enums.Event.TAP), view.getCopyButton().addTarget(this, this._onDuplicate, enums.Event.TAP), view.getClearButton().addTarget(this, this._onClear, enums.Event.TAP), view.getDeleteButton().addTarget(this, this._onDelete, enums.Event.TAP), view.getFormationDropdown().addTarget(this, this._onFormationChange, enums.Event.CHANGE)
    }
}, controllers.squads.SquadActions.prototype.dealloc = function dealloc() {
    this.saveDetails(), this.onDataChange.dealloc(), this.onDataChange = null, this._squad && (this._squad.onDataUpdated.unobserve(this), this._squad = null), this.superclass()
}, controllers.squads.SquadActions.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SquadActions
}, controllers.squads.SquadActions.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    view.setFormations(this._formations), view.setupCarousel(), view.setCurrentFormation(this._getFormationDPIndex()), this._setViewButtonStates();
    var t = this.getNavigationController();
    t && t.setNavigationVisibility(!1, !0)
}, controllers.squads.SquadActions.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this.getView().teardownCarousel()
}, controllers.squads.SquadActions.prototype.saveDetails = function saveDetails() {
    var event = new FUTObservable;
    return utils.JS.isValid(this._squad) && this._wasModified ? (this._squad.save().observe(this, function(t, data) {
        t.unobserve(this), data.success ? this._wasModified = !1 : services.Notification.queue([gLocalization.lText("popup.error.activesquad.SaveFailed"), enums.UINotificationType.NEGATIVE]), event.notify(data)
    }), event) : (event.notify({
        success: !0
    }), event)
}, controllers.squads.SquadActions.prototype.setSquad = function setSquad(t) {
    this._squad && (this._squad.onDataUpdated.unobserve(this), this.saveDetails()), this._squad = t, this._squad.onDataUpdated.observe(this, this._eSquadUpdate), this._setViewButtonStates(), this._checkSquadListFull(), this.getView().setCurrentFormation(this._getFormationDPIndex())
}, controllers.squads.SquadActions.prototype._setViewButtonStates = function _setViewButtonStates() {
    var view = this.getView(),
        t = utils.JS.isValid(this._squad),
        i = t && this._squad.isGenerations(),
        s = t && !i && this._squad.getId() === repositories.Squad.getActiveSquadId();
    view.displayMakeActiveButton(t && !i), view.displayDeleteButton(t && !this._withSquadView && !i), view.displayRenameButton(t && !i), view.displayCopyButton(t && !i), view.displayShareButton(t && !i), view.displaySquadBuilderButton(t && (isPhone() || this._withSquadView) && !i), view.displayClearButton(t && (isPhone() || this._withSquadView)), view.displayOpenButton(t && !this._withSquadView && !isPhone()), view.toggleMakeActiveState(s), view.toggleClearState(t && !this._squad.isSquadEmpty())
}, controllers.squads.SquadActions.prototype._getFormationDPIndex = function _getFormationDPIndex() {
    if (this._squad)
        for (var name = this._squad.getFormation().getName(), index = this._formations.length; index-- > 0;)
            if (this._formations[index].value === name) return index;
    return 0
}, controllers.squads.SquadActions.prototype._checkSquadListFull = function _checkSquadListFull() {
    repositories.Squad.isSquadListFull().observe(this, function(t, i) {
        t.unobserve(this), this.getView().toggleCopyState(i)
    })
}, controllers.squads.SquadActions.prototype._onMakeActive = function _onMakeActive(t) {
    function _onActiveSquadSet(t, data) {
        t.unobserve(this), this.onDataChange.notify(), this._setViewButtonStates(), this.getView().setCurrentFormation(this._getFormationDPIndex())
    }
    gTelemetryManager.trackEvent(TelemetryManager.Sections.SQUADS, TelemetryManager.Categories.BUTTON_PRESS, "Squads - Set Active"), isPhone() ? (services.Notification.queue([gLocalization.lText("notification.squad.setActive"), enums.UINotificationType.NEUTRAL]), NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("SQUADS_HUB")), NavManager.requestChildScreen(Screens.getView("SQUAD_OVERVIEW"), {
        squad: this._squad.getId(),
        setActive: !0
    })) : this.saveDetails().observe(this, function(t, data) {
        t.unobserve(this), data.success && services.Squad.setActiveSquad(this._squad.getId()).observe(this, _onActiveSquadSet)
    })
}, controllers.squads.SquadActions.prototype._onSquadBuilder = function _onSquadBuilder(t) {
    var i = new controllers.squads.SquadBuilder;
    this._squad ? i.initWithSquad(this._squad) : i.init(), this.getNavigationController().pushViewController(i, !0), gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
        type: PinManager.PAGEVIEW_EVT_TYPE,
        pgid: "Squad Builder"
    })), TelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "Squad Builder")
}, controllers.squads.SquadActions.prototype._onShare = function _onShare(t) {
    services.Squad.addShowOff(this._squad.getId()).observe(this, function(t, data) {
        if (data.success) {
            var i = new controllers.views.popups.SquadLinkCopy(data.url);
            gPopupClickShield.setActivePopup(i)
        }
    })
}, controllers.squads.SquadActions.prototype._onRename = function _onRename(t) {
    var i = new controllers.views.popups.NameSquad(this._squad.getName(), gLocalization.lPrint("renamesquad.title", [this._squad.getName()]), gLocalization.lText("common.dialog.ok"));
    i.onConfirm.observe(this, this._onRenameConfirm), gPopupClickShield.setActivePopup(i)
}, controllers.squads.SquadActions.prototype._onRenameConfirm = function _onRenameConfirm(t, i) {
    services.Squad.rename(this._squad.getId(), i).observe(this, function(t, data) {
        t.unobserve(this), this.getView().setInteractionState(!0), data.success && this._squad.setName(data.squad.getName(), [])
    })
}, controllers.squads.SquadActions.prototype._onDuplicate = function _onDuplicate(t) {
    gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "Squad List - Copy Squad"), repositories.Squad.getSquads().observe(this, function(t, data) {
        t.unobserve(this);
        var i = new controllers.views.popups.NameSquad(utils.TextUtils.createSquadNameCopy(this._squad.getName(), data));
        i.onConfirm.observe(this, this._onDuplicateSquadConfirm), gPopupClickShield.setActivePopup(i)
    })
}, controllers.squads.SquadActions.prototype._onNewSquadConfirm = function _onNewSquadConfirm(t, name) {
    services.Squad.create(name, DEFAULT_FORMATION).observe(this, this._onSquadCreated)
}, controllers.squads.SquadActions.prototype._onDuplicateSquadConfirm = function _onDuplicateSquadConfirm(t, name) {
    services.Squad.copy(this._squad.getId(), name).observe(this, this._onSquadCreated)
}, controllers.squads.SquadActions.prototype._onSquadCreated = function _onSquadCreated(t) {
    t.unobserve(this), this._checkSquadListFull()
}, controllers.squads.SquadActions.prototype._onClear = function _onClear(t) {
    utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.CLEAR_SQUAD, null, function _onClearConfirm() {
        var t = this._squad.removeAllItems();
        this._squad.save().observe(this, function(i) {
            i.unobserve(this), t && (this.getView().toggleClearState(!1), this._wasModified = !1, services.Notification.queue([gLocalization.lText("notification.squad.cleared"), enums.UINotificationType.NEUTRAL]))
        })
    }.bind(this))
}, controllers.squads.SquadActions.prototype._onDelete = function _onDelete(t) {
    function _completeSquadDelete(t, i) {
        t.unobserve(this), i ? (services.Notification.queue([gLocalization.lText("notification.squad.deleted"), enums.UINotificationType.NEUTRAL]), isPhone() && (NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("SQUADS_HUB")), NavManager.requestChildScreen(Screens.getView("SQUAD_LIST")))) : view.setInteractionState(!0)
    }
    var view = this.getView();
    gTelemetryManager.trackEvent(TelemetryManager.Sections.SQUADS, TelemetryManager.Categories.BUTTON_PRESS, "Squads - Delete Squad"), this._squad.getId() === repositories.Squad.getActiveSquadId() ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.CANNOT_DELETE_SQUAD), view.setInteractionState(!0)) : utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.DELETE_SQUAD, [this._squad.getName()], function _confirmSquadDelete() {
        services.Squad.remove(this._squad.getId()).observe(this, _completeSquadDelete)
    }.bind(this), function _cancelSquadDelete() {
        view.setInteractionState(!0)
    }.bind(this))
}, controllers.squads.SquadActions.prototype._onOpen = function _onOpen(t) {
    NavManager.requestChildScreen(Screens.getView("SQUAD_OVERVIEW"), {
        squad: this._squad.getId(),
        setActive: !1
    })
}, controllers.squads.SquadActions.prototype._onFormationChange = function _onFormationChange(sender, event, data) {
    function triggerFormationChange() {
        var index = sender.getIndex();
        view.setCurrentFormation(index), this._squad.setFormation(repositories.Squad.getFormation(this._formations[index].value))
    }
    var view = this.getView();
    this._squad.isSquadEmpty() && !this._withSquadView ? (view.setInteractionState(!1), repositories.Squad.getSquadById(this._squad.getId()).observe(this, function(t, i) {
        t.unobserve(this), this._squad = i, triggerFormationChange.call(this), view.toggleClearState(this._squad && !this._squad.isSquadEmpty()), view.setInteractionState(!0)
    })) : triggerFormationChange.call(this)
}, controllers.squads.SquadActions.prototype._eSquadUpdate = function _eSquadUpdate(t, data) {
    if (data) {
        var view = this.getView(),
            i = this.isViewDisplayed();
        this._wasModified = !0, data.slots && i && view.toggleClearState(this._squad && !this._squad.isSquadEmpty()), data.formation && i && view.setCurrentFormation(this._getFormationDPIndex())
    }
}, NamespaceManager.Register("controllers.navigation"), controllers.navigation.SquadDetails = function SquadDetailsNavController(t, i, toolbar) {
    FUINavigationController.call(this, i, toolbar), this._withSquadView = t, Object.defineProperty(this, "withSquadView", {
        writable: !1
    }), this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1
    })
}, utils.JS.inherits(controllers.navigation.SquadDetails, FUINavigationController), controllers.navigation.SquadDetails.prototype.init = function init() {
    this.initialized || (this.superclass(), this.getRootController().onDataChange.observe(this, this.onDataChange.notify.bind(this.onDataChange)))
}, controllers.navigation.SquadDetails.prototype.dealloc = function dealloc() {
    this.onDataChange.dealloc(), this.onDataChange = null, this.superclass()
}, controllers.navigation.SquadDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new controllers.squads.SquadActions(this._withSquadView)
}, controllers.navigation.SquadDetails.prototype.setSquad = function setSquad(t) {
    utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity."), this.popToRootViewController(), this.getRootController().setSquad(t)
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SquadOverview = function SquadOverviewViewController() {
    FUIViewController.call(this), this._squad = null, this.onItemMove = new FUTObservable, Object.defineProperty(this, "onItemMove", {
        writable: !1,
        enumerable: !0
    }), this.onItemSwap = new FUTObservable, Object.defineProperty(this, "onItemSwap", {
        writable: !1,
        enumerable: !0
    }), this.onDragEnd = new FUTObservable, Object.defineProperty(this, "onDragEnd", {
        writable: !1,
        enumerable: !0
    })
}, utils.JS.inherits(controllers.squads.SquadOverview, FUIViewController), controllers.squads.SquadOverview.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_WINTER_THEME) && view.setTheme(enums.SquadPitchThemes.WINTER), view.getPitch().addTarget(this, this._ePitchTapped, enums.Event.TAP), view.addTarget(this, this._eItemTap, enums.UISquadPitchEvent.SLOT_SELECT), view.addTarget(this, this._eItemSwap, enums.UISquadPitchEvent.ITEM_SWAP), view.addTarget(this, this._eDragStart, enums.UISquadPitchEvent.DRAG_START), view.addTarget(this, this._eDragEnd, enums.UISquadPitchEvent.DRAG_END), view.addTarget(this, this._eItemMouseEnter, enums.Event.MOUSEENTER), view.addTarget(this, this._eItemMouseLeave, enums.Event.MOUSELEAVE)
    }
}, controllers.squads.SquadOverview.prototype.initWithSquad = function initWithSquad(t) {
    this.initialized || (utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity."), this._squad = t, this._squad.onDataUpdated.observe(this, this._eSquadDataChange), this.init())
}, controllers.squads.SquadOverview.prototype.dealloc = function dealloc() {
    this.onItemMove.dealloc(), this.onItemSwap.dealloc(), this.onDragEnd.dealloc(), this.onItemMove = null, this.onItemSwap = null, this.onDragEnd = null, this._squad && (this._squad.onDataUpdated.unobserve(this), this._squad = null), this.superclass()
}, controllers.squads.SquadOverview.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SquadOverview
}, controllers.squads.SquadOverview.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), utils.Debug.Assert(this._squad instanceof entities.Squad, "View appearing on screen without a squad to display."), this._squad && (this._pushSquadToView(this._squad), gHeader.setTitle(this._squad.getName()))
}, controllers.squads.SquadOverview.prototype.onWindowSizeChange = function onWindowSizeChange() {
    this.getView().closeDocks()
}, controllers.squads.SquadOverview.prototype._updateDragDrop = function _updateDragDrop() {
    var t = this._squad ? this._squad.getNonBrickSlots(!0) : [];
    this.getView().initDragDrop(t.reduce(function _reduceSlotToValidIndex(t, i) {
        return i.getItem().isValid() && t.push(i.getIndex()), t
    }, []), t.map(function _mapSlotToIndex(t) {
        return t.getIndex()
    }))
}, controllers.squads.SquadOverview.prototype._pushSquadToView = function _pushSquadToView(t) {
    var view = this.getView();
    view.setType(t.isDream() ? enums.SquadPitchTypes.CONCEPT : enums.SquadPitchTypes.REGULAR), view.setSquad(t), this._updateDragDrop()
}, controllers.squads.SquadOverview.prototype.setSquadById = function setSquadById(id) {
    repositories.Squad.getSquadById(id).observe(this, function _onGetSquad(t, data) {
        t.unobserve(this);
        var i = data instanceof entities.Squad;
        utils.Debug.Assert(i, "Missing squad entity."), i && this.setSquad(data)
    })
}, controllers.squads.SquadOverview.prototype.setSquad = function setSquad(t) {
    this._squad && this._squad.onDataUpdated.unobserve(this), this._squad = t, this._squad.onDataUpdated.observe(this, this._eSquadDataChange), this._pushSquadToView(this._squad)
}, controllers.squads.SquadOverview.prototype.selectSlot = function selectSlot(index) {
    this.getView().selectSlot(index)
}, controllers.squads.SquadOverview.prototype.updateSlot = function updateSlot(t) {
    this.getView().updateSlot(t)
}, controllers.squads.SquadOverview.prototype._gotoDetailsView = function _gotoDetailsView(index) {
    var t = this.getNavigationController();
    if (t) {
        var i = new controllers.navigation.SquadItemDetails;
        this._squad ? i.initWithSquad(this._squad, index) : i.init(), i.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), t.pushViewController(i)
    } else this.getParentViewController() || NavManager.requestChildScreen(Screens.getView("DETAIL_SLOT_VIEW"), {
        squad: this._squad,
        slot: index
    })
}, controllers.squads.SquadOverview.prototype.applyDataChange = function applyDataChange() {
    this._pushSquadToView(this._squad)
}, controllers.squads.SquadOverview.prototype._eSquadDataChange = function _eSquadDataChange(t, data) {
    if (this._squad) {
        var view = this.getView();
        if (data.type) {
            var i = data.type === enums.SquadType.DREAM ? enums.SquadPitchTypes.CONCEPT : enums.SquadPitchTypes.REGULAR;
            view.setType(i)
        }
        utils.JS.isNumber(data.chemistry) && view.setChemistry(data.chemistry, !0), utils.JS.isNumber(data.rating) && view.setRating(data.rating, !0), Array.isArray(data.slots) && (data.slots.forEach(this.updateSlot, this), this._updateDragDrop(), data.formation || view.updatePitchChemistry(this._squad.getFieldPlayers(), this._squad.getChemistryLinks())), data.formation && view.setFormation(data.formation, this._squad.getChemistryLinks()), data.name && gHeader.setTitle(data.name)
    }
}, controllers.squads.SquadOverview.prototype._eItemTap = function _eItemTap(sender, event, data) {
    var index = data && utils.JS.isNumber(data.slotIndex) ? data.slotIndex : 0;
    this._squad && this._squad.simpleBrickIndices.indexOf(index) >= 0 || (isPhone() || this.selectSlot(index), this._gotoDetailsView(index))
}, controllers.squads.SquadOverview.prototype._eItemSwap = function _eItemSwap(sender, event, data) {
    var a = utils.JS.isNumber(data.swapFrom) ? data.swapFrom : -1,
        b = utils.JS.isNumber(data.swapTo) ? data.swapTo : -1;
    this._squad.swapPlayersByIndex(a, b), this._squad.save(), this.onItemSwap.notify(a, b), this.getView().updatePitchChemistry(this._squad.getFieldPlayers(), this._squad.getChemistryLinks())
}, controllers.squads.SquadOverview.prototype._eDragStart = function _eDragStart(sender, event, data) {
    this.onItemMove.notify(data.item)
}, controllers.squads.SquadOverview.prototype._eDragEnd = function _eDragEnd(sender, event, data) {
    this.onDragEnd.notify(data.item)
}, controllers.squads.SquadOverview.prototype._ePitchTapped = function _ePitchTapped(sender, e) {
    var view = this.getView();
    view.clearSlotInteractionState(enums.UISlotInteractionState.SELECTED), view.closeDocks()
}, controllers.squads.SquadOverview.prototype._eItemMouseEnter = function _eItemMouseEnter(sender, e, data) {
    this.getView().addSlotInteractionState(data.slotIndex, enums.UISlotInteractionState.HOVER)
}, controllers.squads.SquadOverview.prototype._eItemMouseLeave = function _eItemMouseLeave(sender, e, data) {
    this.getView().removeSlotInteractionState(data.slotIndex, enums.UISlotInteractionState.HOVER)
}, NamespaceManager.Register("views.items"), views.items.CompareDetails = function() {
    FUIView.call(this), this._item = null, this._otherItem = null, this._generate()
}, utils.JS.inherits(views.items.CompareDetails, FUIView), views.items.CompareDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("CompareDetails"), t.classList.add("DetailView");
        var i = document.createElement("section");
        i.classList.add("detail-carousel"), i.classList.add("panelContainer"), this.__itemContainer = document.createElement("div"), this.$_itemContainer = $(this.__itemContainer), this.__itemContainer.classList.add("item-container"), i.appendChild(this.__itemContainer), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.CompareDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__itemContainer = null, this.$_itemContainer = null
}, views.items.CompareDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.CompareDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.CompareDetails.prototype.render = function render(item, t) {
    this._item && !this._item.canRender(item) && (this._item.dealloc(), this._item = null), this._otherItem && !this._otherItem.canRender(t) && (this._otherItem.dealloc(), this._otherItem = null), utils.JS.isValid(this._item) ? this._item.render(utils.JS.isValid(item) ? item : new entities.NullItem) : (this._item = this._generateItemView(utils.JS.isValid(item) ? item : new factories.Item.createItem), this.__itemContainer.insertBefore(this._item.getRootElement(), this.__itemContainer.firstChild)), utils.JS.isValid(this._otherItem) ? this._otherItem.render(utils.JS.isValid(t) ? t : new factories.Item.createItem) : (this._otherItem = this._generateItemView(utils.JS.isValid(t) ? t : new factories.Item.createItem), this.__itemContainer.appendChild(this._otherItem.getRootElement()))
}, views.items.CompareDetails.prototype.dealloc = function dealloc() {
    utils.JS.isValid(this._item) && (this._item.destroy(), this._item = null), utils.JS.isValid(this._otherItem) && (this._otherItem.destroy(), this._otherItem = null), this.superclass()
}, views.items.CompareDetails.prototype._generateItemView = function _generateItemView(item) {
    var view = factories.ItemView.createLargeItem(item);
    return view.init(), view.render(item), view.getRoot().addClass("sm"), view
}, views.items.CompareDetails.prototype.appendPanel = function appendPanel(t) {
    this.addSubview(t)
}, NamespaceManager.Register("views.items"), views.items.CompareActionPanel = function CompareActionPanelView() {
    FUIView.call(this), this._progressBars = [], this._progressBarsOther = [], this._stats = [], this._statsOther = [], this._labels = [], this._generate()
}, utils.JS.inherits(views.items.CompareActionPanel, FUIView), views.items.CompareActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("DetailPanel"), this.__infoContainer = document.createElement("div"), this.$_infoContainer = $(this.__infoContainer), this.__infoContainer.classList.add("layout-article"), this.__infoContainer.classList.add("extended");
        var i = document.createElement("div");
        i.classList.add("layout-flex-bar"), i.classList.add("compare-positions");
        var s = document.createElement("div");
        this.__positionLabel = document.createElement("span"), this.$_positionLabel = $(this.__positionLabel), s.appendChild(this.__positionLabel), this.__position = document.createElement("span"), this.$_position = $(this.__position), this.__position.classList.add("feedback-green"), s.appendChild(this.__position), i.appendChild(s);
        var o = document.createElement("div");
        this.__positionLabelOther = document.createElement("span"), this.$_positionLabelOther = $(this.__positionLabelOther), o.appendChild(this.__positionLabelOther), this.__positionOther = document.createElement("span"), this.$_positionOther = $(this.__positionOther), this.__positionOther.classList.add("feedback-green"), o.appendChild(this.__positionOther), i.appendChild(o), this.__infoContainer.appendChild(i), t.appendChild(this.__infoContainer);
        var l = document.createElement("div");
        l.classList.add("layout-article"), this._table = new views.Table, this._table.getRootElement().classList.add("panel-table"), this._table.getRootElement().classList.add("stats-table"), l.appendChild(this._table.getRootElement()), t.appendChild(l), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.CompareActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__infoContainer = null, this.$_infoContainer = null, this.__positionLabel = null, this.$_positionLabel = null, this.__position = null, this.$_position = null, this.__positionLabelOther = null, this.$_positionLabelOther = null, this.__positionOther = null, this.$_positionOther = null, this._table.destroy(), this._table = null
}, views.items.CompareActionPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.CompareActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.CompareActionPanel.prototype.init = function init() {
    var t = [enums.UIText.SECONDARY, null, null, null, enums.UIText.SECONDARY];
    enums.Localization.STATS_LABELS_PLAYER.forEach(function(item, i) {
        this._progressBars.push(new views.ProgressBar), this._progressBars[i].getRoot().addClass(enums.UIProgressBar.STATS).addClass(enums.UIProgressBar.REVERSE), this._progressBarsOther.push(new views.ProgressBar), this._progressBarsOther[i].getRoot().addClass(enums.UIProgressBar.STATS), this._labels.push($(document.createElement("span"))), this._stats.push($(document.createElement("span"))), this._statsOther.push($(document.createElement("span"))), this._table.addRowData([this._stats[i], this._progressBars[i].getRoot(), this._labels[i], this._progressBarsOther[i].getRoot(), this._statsOther[i]], t)
    }, this), this.layoutSubviews(), this.superclass()
}, views.items.CompareActionPanel.prototype._canCompare = function _canCompare(item, t) {
    return utils.JS.isValid(item) && utils.JS.isValid(t) && item.compareType(t) && item.isGK() === t.isGK()
}, views.items.CompareActionPanel.prototype.render = function render(item, t) {
    this.$_positionLabel.text(gLocalization.lText("card.title.position")), this.$_positionLabelOther.text(gLocalization.lText("card.title.position")), this.$_position.text(""), this.$_positionOther.text("");
    item.getStaticData();
    var i = item.getAttributes(),
        s = this._canCompare(item, t),
        o = null,
        position = "",
        l = 0,
        u = !(utils.JS.isValid(item) && item.isManager() || utils.JS.isValid(t) && t.isManager());
    if (this._table.setDisplay(u), utils.JS.isValid(t)) {
        o = t.isGK() ? enums.Localization.STATS_LABELS_GK : enums.Localization.STATS_LABELS_PLAYER, position = t.isManager() ? gLocalization.lText("extendedPlayerInfo.positions.manager") : utils.FUTLocalization.getLocalizedPositionStringById(t.preferredPosition), position = t.isValid() ? position : "", this.$_positionOther.text(position);
        var h = t.getAttributes();
        for (l = 0; l < h.length; l++) this._labels[l].text(gLocalization.lText(o[l])), this._progressBarsOther[l].getRoot().removeClass(enums.UIFeedbackState.STAT_INCREASE), this._progressBars[l].getRoot().removeClass(enums.UIFeedbackState.STAT_INCREASE), this._progressBarsOther[l].getRoot().toggleClass(enums.UIFeedbackState.STAT_INCREASE, i[l] < h[l] && s), this._progressBars[l].getRoot().toggleClass(enums.UIFeedbackState.STAT_INCREASE, i[l] > h[l] && s), this._progressBarsOther[l].setProgress(h[l]), this._progressBarsOther[l].render(), this._statsOther[l].text(h[l]), this._statsOther[l].toggleClass(enums.UIFeedbackState.STAT_INCREASE, i[l] < h[l] && s), this._stats[l].toggleClass(enums.UIFeedbackState.STAT_INCREASE, i[l] > h[l] && s)
    } else
        for (l = 0; l < i.length; l++) this._progressBarsOther[l].setProgress(0), this._progressBarsOther[l].render(), this._statsOther[l].text("--");
    if (item.isValid())
        for (o = item.isGK() ? enums.Localization.STATS_LABELS_GK : enums.Localization.STATS_LABELS_PLAYER, position = item.isManager() ? gLocalization.lText("extendedPlayerInfo.positions.manager") : utils.FUTLocalization.getLocalizedPositionStringById(item.preferredPosition), position = item.isValid() ? position : "", this.$_position.text(position), l = 0; l < i.length; l++) this._labels[l].text(gLocalization.lText(o[l])), this._progressBars[l].setProgress(i[l]), this._progressBars[l].render(), this._stats[l].text(i[l]);
    else
        for (l = 0; l < i.length; l++) this._progressBars[l].setProgress(0), this._progressBars[l].render(), this._stats[l].text("--")
}, views.items.CompareActionPanel.prototype.appendSwapButton = function appendSwapButton(button) {
    this.addSubview(button, this.$_infoContainer)
}, NamespaceManager.Register("controllers.squads"), controllers.squads.CompareActionPanel = function() {
    FUIViewController.call(this), this._btnSwap = null, this.onSwap = new FUTObservable
}, utils.JS.inherits(controllers.squads.CompareActionPanel, FUIViewController), controllers.squads.CompareActionPanel.prototype.initWithSwapButton = function initWithSwapButton() {
    this._btnSwap = new views.buttons.DefaultButton, this._btnSwap.addTarget(this, this._eSwapPlayers, enums.Event.TAP), this._btnSwap.init(), this.init()
}, controllers.squads.CompareActionPanel.prototype.dealloc = function dealloc() {
    this.superclass(), utils.JS.isValid(this._btnSwap) && (this._btnSwap.dealloc(), this._btnSwap = null)
}, controllers.squads.CompareActionPanel.prototype.setItems = function setItems(item, t) {
    if (this.getView().render(item, t), utils.JS.isValid(this._btnSwap) && utils.JS.isValid(t)) {
        var i = !(t.isValid() && item.isValid() && !item.compareType(t));
        this._btnSwap.setInteractionState(i), this._btnSwap.setText(item.isManager() ? gLocalization.lText("search.pagination.header.manager") : gLocalization.lText("search.pagination.header"))
    }
}, controllers.squads.CompareActionPanel.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.CompareActionPanel
}, controllers.squads.CompareActionPanel.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    this._btnSwap && !this._btnSwap.isSubview(view) && (this._btnSwap.getRoot().addClass(enums.UIButtonState.CALL_TO_ACTION), view.appendSwapButton(this._btnSwap), view.layoutSubviews())
}, controllers.squads.CompareActionPanel.prototype._eSwapPlayers = function _eSwapPlayers(sender, t) {
    this.onSwap.notify()
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SquadComparePlayers = function() {
    FUIViewController.call(this), this._panel = new controllers.squads.CompareActionPanel
}, utils.JS.inherits(controllers.squads.SquadComparePlayers, FUIViewController), controllers.squads.SquadComparePlayers.prototype.init = function init() {
    this.superclass(), this._panel.init(), this.addChildViewController(this._panel), this.initialized
}, controllers.squads.SquadComparePlayers.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.CompareDetails
}, controllers.squads.SquadComparePlayers.prototype.setItemData = function setItemData(item, t) {
    this.getView().render(item, t), this._panel.setItems(item, t)
}, controllers.squads.SquadComparePlayers.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    this._panel && !this._panel.getView().isSubview(view) && (view.appendPanel(this._panel.getView()), view.layoutSubviews(), this._panel.viewDidAppear())
}, NamespaceManager.Register("controllers.squads"), controllers.squads.BaseSquadLandscape = function SquadSplitViewController() {
    FUISplitViewController.call(this), this._overviewController = null, this._itemDetailController = null, this._compareItemsController = null, this._squad = null, this._slotA = null, this._slotB = null, this._slotHovered = null
}, utils.JS.inherits(controllers.squads.BaseSquadLandscape, FUISplitViewController), controllers.squads.BaseSquadLandscape.prototype.init = function init() {
    this.initialized || (this.superclass(), this._overviewController = this._generateSquadOverview(), this.addChildViewController(this._overviewController), this._setupSquadOverview())
}, controllers.squads.BaseSquadLandscape.prototype.initWithSquad = function initWithSquad(t) {
    this.initialized || (utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected to receive a squad entity."), this._squad = t, this.init())
}, controllers.squads.BaseSquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._overviewController && this._overviewController.dealloc(), this._itemDetailController && this._itemDetailController.dealloc(), this._compareItemsController && this._compareItemsController.dealloc(), this._overviewController = null, this._itemDetailController = null, this._compareItemsController = null, this._squad = null
}, controllers.squads.BaseSquadLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._setRightController(this.getDefaultPanel()), this._setLeftController(this._overviewController)
}, controllers.squads.BaseSquadLandscape.prototype.getDefaultPanel = function getDefaultPanel() {
    return utils.Debug.Assert(!1, "getDefaultPanel needs to be overrided by child classes"), null
}, controllers.squads.BaseSquadLandscape.prototype._setupSquadOverview = function _setupSquadOverview() {
    if (this._squad) {
        var t = this._overviewController.getView();
        t.setHoverCallback(this._eItemHovered.bind(this)), t.getPitch().addTarget(this, this._ePitchTapped, enums.Event.TAP), t.addTarget(this, this._eSlotSelected, enums.UISquadPitchEvent.SLOT_SELECT), this._overviewController.onItemMove.observe(this, this._eItemMoved), this._overviewController.onItemSwap.observe(this, this._eItemSwap), this._overviewController.onDragEnd.observe(this, this._eDragEnd)
    }
}, controllers.squads.BaseSquadLandscape.prototype._generateSquadOverview = function _generateSquadOverview() {
    var t = new controllers.squads.SquadOverview;
    return this._squad ? t.initWithSquad(this._squad) : t.init(), t
}, controllers.squads.BaseSquadLandscape.prototype._generateItemDetails = function _generateItemDetails(index) {
    var t = new controllers.navigation.SquadItemDetails;
    return this._squad ? t.initWithSquad(this._squad, index) : t.init(), t
}, controllers.squads.BaseSquadLandscape.prototype._generateCompareDetails = function _generateCompareDetails() {
    var t = new controllers.squads.SquadComparePlayers;
    return t.init(), t
}, controllers.squads.BaseSquadLandscape.prototype._showSlotDetails = function _showSlotDetails(index) {
    this._itemDetailController || (this._itemDetailController = this._generateItemDetails(index), this._itemDetailController.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), this._itemDetailController.onSlotChange.observe(this, this._eDetailSlotChange), this._itemDetailController.getExitNavigationButton().addTarget(this, this._eDetailsExit, enums.Event.TAP), this.addChildViewController(this._itemDetailController)), this._setRightController(this._itemDetailController), this._itemDetailController.setSlot(index)
}, controllers.squads.BaseSquadLandscape.prototype._showDefaultPanel = function _showDefaultPanel() {
    var t = this.getDefaultPanel();
    t instanceof FUINavigationController && t.popToRootViewController(), this._setRightController(t), this._overviewController.getView().clearSlotInteractionState(enums.UISlotInteractionState.SELECTED)
}, controllers.squads.BaseSquadLandscape.prototype._showComparePlayersPanel = function _showComparePlayersPanel(t, i) {
    this._compareItemsController || (this._compareItemsController = this._generateCompareDetails(), this.addChildViewController(this._compareItemsController)), this._setRightController(this._compareItemsController), this._compareItemsController.setItemData(t, i)
}, controllers.squads.BaseSquadLandscape.prototype._eDetailSlotChange = function _eDetailSlotChange(t, data) {
    if (utils.Debug.Assert(this._squad instanceof entities.Squad, "Squad entity has gone missing."), data.slot) {
        var index = data.slot.getIndex();
        this._overviewController.selectSlot(index), utils.JS.isValid(data.showSlotDetails) && !data.showSlotDetails || this._showSlotDetails(index)
    }
}, controllers.squads.BaseSquadLandscape.prototype._eSlotSelected = function _eSlotSelected(sender, event, data) {
    utils.Debug.Assert(this._squad instanceof entities.Squad, "Squad entity has gone missing.");
    var index = data && utils.JS.isNumber(data.slotIndex) ? data.slotIndex : 0;
    this._squad.simpleBrickIndices.indexOf(index) < 0 && this._showSlotDetails(index)
}, controllers.squads.BaseSquadLandscape.prototype._eItemSwap = function _eItemSwap(t, a, b) {
    this._showDefaultPanel()
}, controllers.squads.BaseSquadLandscape.prototype._eDragEnd = function _eDragEnd(t, item) {
    this._showSlotDetails(this._squad.getSlot(item).getIndex())
}, controllers.squads.BaseSquadLandscape.prototype._eItemMoved = function _eItemMoved(t, item) {
    this._showComparePlayersPanel(item)
}, controllers.squads.BaseSquadLandscape.prototype._eDetailsExit = function _eDetailsExit(sender, event) {
    this._showDefaultPanel()
}, controllers.squads.BaseSquadLandscape.prototype._eItemHovered = function _eItemHovered(t, i) {
    this._showComparePlayersPanel(t, i)
}, controllers.squads.BaseSquadLandscape.prototype._ePitchTapped = function _ePitchTapped(sender, e) {
    this._showDefaultPanel()
}, controllers.squads.SquadLandscape = function SquadSplitViewController() {
    controllers.squads.BaseSquadLandscape.call(this), this._panelController = new controllers.navigation.SquadDetails(!0, new views.NavigationBar)
}, utils.JS.inherits(controllers.squads.SquadLandscape, controllers.squads.BaseSquadLandscape), controllers.squads.SquadLandscape.prototype.init = function init() {
    this.initialized || (this.superclass(), this._panelController.init(), this._panelController.onDataChange.observe(this, this._overviewController.applyDataChange.bind(this._overviewController)), this.addChildViewController(this._panelController))
}, controllers.squads.SquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._panelController.dealloc(), this._panelController = null
}, controllers.squads.SquadLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._squad && this._panelController.setSquad(this._squad)
}, controllers.squads.SquadLandscape.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._panelController
}, pages.controllers.SquadOverviewController = function SquadOverviewViewControllerWrapper(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null, this._squad = null, this._squadId = -1, this._pid = -1, this._setActive = !1
}, utils.JS.inherits(pages.controllers.SquadOverviewController, pages.controllers.ScreenControllerBase), pages.controllers.SquadOverviewController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.SquadOverviewController.superClass_.destroy.call(this), this._squad = null, this._controller = null
}, pages.controllers.SquadOverviewController.prototype.getDataCache = function getDataCache() {
    return {
        squad: this._squad
    }
}, pages.controllers.SquadOverviewController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.SquadOverviewController.superClass_.onScreenInitialized.call(this, data, t), gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "Squad Overview"), isPhone() ? this._controller = new controllers.squads.SquadOverview : this._controller = new controllers.squads.SquadLandscape, data && (this._setActive = !!data.setActive, this._squadId = utils.JS.isNumber(data.squad) ? data.squad : -1, this._pid = utils.JS.isNumber(data.pid) ? data.pid : -1), t && t.squad && (this._squad = t.squad)
}, pages.controllers.SquadOverviewController.prototype.onScreenStarted = function onScreenStarted() {
    if (pages.controllers.SquadOverviewController.superClass_.onScreenStarted.call(this), gHeader.onHamburgerPress.observe(this, this._onHamburgerPressed), this._squad) this._initController(this._squad);
    else {
        var t;
        this._setActive ? t = 0 : this._pid >= 0 && (t = this._pid), repositories.Squad.getSquadById(this._squadId, t).observe(this, function _onSquadLoadComplete(t, i) {
            t.unobserve(this), i ? (this._squad = i, this._initController(i)) : NavManager.requestGoBackScreen()
        })
    }
}, pages.controllers.SquadOverviewController.prototype.onScreenStopped = function onScreenStopped() {
    pages.controllers.SquadOverviewController.superClass_.onScreenStopped.call(this), gHeader.onHamburgerPress.unobserve(this)
}, pages.controllers.SquadOverviewController.prototype._initController = function _initController(t) {
    this._controller.initWithSquad(this._squad), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.SquadOverviewController.prototype._onHamburgerPressed = function _onHamburgerPressed() {
    NavManager.requestChildScreen(Screens.getView("SQUAD_DETAILS"), {
        squad: this._squad
    })
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.ACTIVE_SQUAD, function(t) {
    NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("SQUADS_HUB")), NavManager.requestChildScreen(Screens.getView("SQUAD_OVERVIEW"))
}), Screens.Register("GENERATIONS_SQUAD", "GenerationsSquad", Screens.APP_SECTION.SQUADS, "Generations Squad"), pages.GenerationsSquad = function() {
    pages.ScreenBase.call(this);
    var t = isPhone() ? components.Header.DEFAULT_CHILD_PAGE | components.Header.HAMBURGER_BUTTON : components.Header.DEFAULT_CHILD_PAGE;
    this.updateHeader(t, gLocalization.lText("navbar.label.generations")), this._generate()
}, utils.JS.inherits(pages.GenerationsSquad, pages.ScreenBase), pages.GenerationsSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.GenerationsSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.GenerationsSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.GenerationsSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("controllers.squads"), controllers.squads.GenerationsSquadOverview = function UTGenerationsSquadOverviewViewController() {
    controllers.squads.SquadOverview.call(this)
}, utils.JS.inherits(controllers.squads.GenerationsSquadOverview, controllers.squads.SquadOverview), controllers.squads.GenerationsSquadOverview.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        DOMKit.addClass(view.getLeftDock().getRootElement(), "generations"), DOMKit.addClass(view.getRightDock().getRootElement(), "generations"), view.renderManager = !1, view.setMode(enums.SquadPitchModes.GENERATIONS)
    }
}, NamespaceManager.Register("controllers.squads"), controllers.squads.GenerationsSquadLandscape = function UTGenerationsSquadSplitViewController() {
    controllers.squads.BaseSquadLandscape.call(this), this._panelController = new controllers.navigation.SquadDetails(!0)
}, utils.JS.inherits(controllers.squads.GenerationsSquadLandscape, controllers.squads.BaseSquadLandscape), controllers.squads.GenerationsSquadLandscape.prototype.init = function init() {
    this.initialized || (this.superclass(), this._panelController.init(), this._panelController.getView().addClass("generations"), this._panelController.onDataChange.observe(this, this._overviewController.applyDataChange.bind(this._overviewController)), this.addChildViewController(this._panelController))
}, controllers.squads.GenerationsSquadLandscape.prototype._showComparePlayersPanel = function _showComparePlayersPanel(t, i) {
    this._compareItemsController || (this._compareItemsController = this._generateCompareDetails(), this._compareItemsController.getView().addClass("generations"), this.addChildViewController(this._compareItemsController)), this._setRightController(this._compareItemsController), this._compareItemsController.setItemData(t, i)
}, controllers.squads.GenerationsSquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._panelController.dealloc(), this._panelController = null
}, controllers.squads.GenerationsSquadLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._squad && this._panelController.setSquad(this._squad)
}, controllers.squads.GenerationsSquadLandscape.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._panelController
}, controllers.squads.GenerationsSquadLandscape.prototype._generateSquadOverview = function _generateSquadOverview() {
    var t = new controllers.squads.GenerationsSquadOverview;
    return this._squad ? t.initWithSquad(this._squad) : t.init(), t
}, controllers.squads.GenerationsSquadLandscape.prototype._showSlotDetails = function _showSlotDetails(index) {
    this.superclass(index), this._itemDetailController.getView().addClass("generations")
}, pages.controllers.GenerationsSquadController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null, this._viewmodel = null
}, utils.JS.inherits(pages.controllers.GenerationsSquadController, pages.controllers.ScreenControllerBase), pages.controllers.GenerationsSquadController.prototype.init = function() {
    gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "Generations Squad")
}, pages.controllers.GenerationsSquadController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.GenerationsSquadController.superClass_.destroy.call(this)
}, pages.controllers.GenerationsSquadController.prototype.getDataCache = function getDataCache() {
    return {
        viewmodel: this._viewmodel
    }
}, pages.controllers.GenerationsSquadController.prototype.onScreenInitialized = function(data, t) {
    var i = data.squad;
    utils.Debug.Assert(utils.JS.isValid(i), "Expected a squad entity in page data"), isPhone() ? this._controller = new controllers.squads.GenerationsSquadOverview : this._controller = new controllers.squads.GenerationsSquadLandscape, t && t.viewmodel ? (this._viewmodel = t.viewmodel, this._controller.initWithSquad(t.viewmodel.squad)) : i ? (this._viewmodel = new viewmodels.Squad(i), this._controller.initWithSquad(i)) : (services.Notification.queue([gLocalization.lText("squads.generations.error.load"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen() || setTimeout(function() {
        NavManager.requestGoBackScreen()
    }, 500)), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.GenerationsSquadController.prototype.onScreenStarted = function onScreenStarted() {
    pages.controllers.SquadOverviewController.superClass_.onScreenStarted.call(this), gHeader.onHamburgerPress.observe(this, this._onHamburgerPressed)
}, pages.controllers.GenerationsSquadController.prototype.onScreenStopped = function onScreenStopped() {
    pages.controllers.SquadOverviewController.superClass_.onScreenStopped.call(this), gHeader.onHamburgerPress.unobserve(this)
}, pages.controllers.GenerationsSquadController.prototype._onHamburgerPressed = function _onHamburgerPressed() {
    NavManager.requestChildScreen(Screens.getView("SQUAD_DETAILS"), {
        squad: this._viewmodel.squad
    })
}, Screens.Register("TOTW_PREVIEW_SQUAD", "TOTWPreviewSquad", Screens.APP_SECTION.TOTW, "TOTW"), pages.TOTWPreviewSquad = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.TOTWPreviewSquad")), this._generate()
}, utils.JS.inherits(pages.TOTWPreviewSquad, pages.ScreenBase), pages.TOTWPreviewSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.TOTWPreviewSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.TOTWPreviewSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.TOTWPreviewSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("components"), components.SquadRating = function() {
    this._generate(), this.__labelRating.textContent = gLocalization.lText("squads.rating")
}, components.SquadRating.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("squadRating"), t.classList.add("squadSummaryStatsRow");
        var i = document.createElement("div");
        i.classList.add("rating"), this.__labelRating = document.createElement("span"), this.$_labelRating = $(this.__labelRating), this.__labelRating.classList.add("secondary"), this.__labelRating.classList.add("squadRatingLbl"), i.appendChild(this.__labelRating), this._ratingStars = new components.RatingStars, i.appendChild(this._ratingStars.getRootElement()), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SquadRating.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__labelRating = null, this.$_labelRating = null, this._ratingStars.destroy(), this._ratingStars = null
}, components.SquadRating.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SquadRating.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SquadRating.prototype.destroy = function destroy() {
    this.destroyGeneratedElements()
}, components.SquadRating.prototype.setRating = function setRating(value, t) {
    t ? this._ratingStars.updateRating(value) : this._ratingStars.setRating(value)
}, NamespaceManager.Register("views.squads"), views.squads.TOTWSummaryBanner = function TOTWSquadSummaryBannerView() {
    views.squads.SummaryBanner.call(this), this._generate()
}, utils.JS.inherits(views.squads.TOTWSummaryBanner, views.squads.SummaryBanner), views.squads.TOTWSummaryBanner.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("totw"), t.classList.add("SquadSummaryPanel");
        var i = document.createElement("div");
        i.classList.add("formationContainer"), this.__formationTitle = document.createElement("span"), this.$_formationTitle = $(this.__formationTitle), this.__formationTitle.classList.add("secondary"), this.__formationTitle.classList.add("formationHeader"), i.appendChild(this.__formationTitle), this.__formationValue = document.createElement("span"), this.$_formationValue = $(this.__formationValue), this.__formationValue.classList.add("formationValue"), i.appendChild(this.__formationValue), t.appendChild(i), this._historyBtn = new views.buttons.FlatButton, this._historyBtn.getRootElement().classList.add("totwHistoryIcon"), t.appendChild(this._historyBtn.getRootElement()), this._copySquadIcon = new views.buttons.FlatButton, this._copySquadIcon.getRootElement().classList.add("copySquadIcon"), t.appendChild(this._copySquadIcon.getRootElement()), this._squadStats = new components.SquadRating, t.appendChild(this._squadStats.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.TOTWSummaryBanner.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__formationTitle = null, this.$_formationTitle = null, this.__formationValue = null, this.$_formationValue = null, this._historyBtn.destroy(), this._historyBtn = null, this._copySquadIcon.destroy(), this._copySquadIcon = null, this._squadStats.destroy(), this._squadStats = null
}, views.squads.TOTWSummaryBanner.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.TOTWSummaryBanner.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.TOTWSummaryBanner.prototype.init = function init() {
    this.superclass(), this._historyBtn.init(), this._copySquadIcon.init()
}, views.squads.TOTWSummaryBanner.prototype.setChemistry = function setChemistry(value, t) {}, views.squads.TOTWSummaryBanner.prototype.setCanCopySquad = function setCanCopySquad(value) {
    this._copySquadIcon.setInteractionState(value)
}, views.squads.TOTWSummaryBanner.prototype.getHistoryButton = function getHistoryButton() {
    return this._historyBtn
}, views.squads.TOTWSummaryBanner.prototype.getCopyButton = function getCopyButton() {
    return this._copySquadIcon
}, views.squads.TOTWSquadOverview = function TOTWSquadOverviewView() {
    views.squads.SquadOverview.call(this)
}, utils.JS.inherits(views.squads.TOTWSquadOverview, views.squads.SquadOverview), views.squads.TOTWSquadOverview.prototype.init = function init() {
    this.superclass(), this.renderManager = !1, this.renderChemistry = !1, this.renderConcepts = !1
}, views.squads.TOTWSquadOverview.prototype.getSummaryPanel = function getSummaryPanel() {
    return this._summaryPanel || (this._summaryPanel = new views.squads.TOTWSummaryBanner), this._summaryPanel
}, NamespaceManager.Register("controllers.squads"), controllers.squads.TOTWSquadOverview = function TOTWSquadOverviewViewController() {
    controllers.squads.SquadOverview.call(this)
}, utils.JS.inherits(controllers.squads.TOTWSquadOverview, controllers.squads.SquadOverview), controllers.squads.TOTWSquadOverview.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var t = this.getView().getSummaryPanel();
        t.getHistoryButton().addTarget(this, this._eHistorySelected, enums.Event.TAP), t.getCopyButton().addTarget(this, this._eCopySquadSelected, enums.Event.TAP), t.setCanCopySquad(!1), this._checkSquadListFull(), gTOTWHistoryModel.addListener(models.TOTWHistoryModel.EVENT_SQUAD_SELECTED, this, this._eTOTWSquadSelected)
    }
}, controllers.squads.TOTWSquadOverview.prototype.dealloc = function dealloc() {
    this.superclass(), gTOTWHistoryModel.clearListenersByScope(this)
}, controllers.squads.TOTWSquadOverview.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.TOTWSquadOverview
}, controllers.squads.TOTWSquadOverview.prototype._pushSquadToView = function _pushSquadToView(t) {
    var view = this.getView();
    view.setType(t.isDream() ? enums.SquadPitchTypes.CONCEPT : enums.SquadPitchTypes.REGULAR), view.setSquad(t)
}, controllers.squads.TOTWSquadOverview.prototype._checkSquadListFull = function _checkSquadListFull() {
    repositories.Squad.isSquadListFull().observe(this, function(t, i) {
        t.unobserve(this), this.getView().getSummaryPanel().setCanCopySquad(!i)
    })
}, controllers.squads.TOTWSquadOverview.prototype._eHistorySelected = function _eHistorySelected(sender, event, data) {
    this.getView().clearSlotInteractionState(enums.UISlotInteractionState.SELECTED);
    var parent = this.getParentViewController();
    parent && parent.conforms(controllers.squads.TOTWSquadLandscape) ? parent.showHistory() : NavManager.requestChildScreen(Screens.getView("TOTW_SQUAD_LIST"))
}, controllers.squads.TOTWSquadOverview.prototype._eCopySquadSelected = function _eCopySquadSelected(sender, event, data) {
    function _duplicateSquadComplete(t, data) {
        t.unobserve(this), this._checkSquadListFull()
    }
    utils.Debug.Assert(this._squad instanceof entities.Squad, "No squad present for copying."), gTelemetryManager.trackEvent(TelemetryManager.Sections.SQUADS, TelemetryManager.Categories.BUTTON_PRESS, "TOTW - Copy Squad"), utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.CONFIRM_COPY_SQUAD, null, function _duplicateSquad() {
        this._squad && services.Squad.duplicate(this._squad).observe(this, _duplicateSquadComplete)
    }.bind(this), null)
}, controllers.squads.TOTWSquadOverview.prototype._eItemTap = function _eItemTap(sender, event, data) {
    var index = utils.JS.isNumber(data.slotIndex) ? data.slotIndex : -1;
    this._squad.getSlot(index).isValid() && this.superclass(sender, event, data)
}, controllers.squads.TOTWSquadOverview.prototype._eTOTWSquadSelected = function _eTOTWSquadSelected(sender, data) {
    var t = sender.getSelectedSquad();
    t && this.setSquad(t)
}, NamespaceManager.Register("models"), models.BaseModel = function() {
    utils.EventDispatcher.call(this), this._dirty = !0, this._timestamp = 0
}, utils.JS.inherits(models.BaseModel, utils.EventDispatcher), models.BaseModel.EVENT = {
    DATA_UPDATED: "models.BaseModel.EVENT.DATA_UPDATED"
}, models.BaseModel.prototype.isDirty = function(t) {
    return utils.JS.isBoolean(t) ? (this._dirty = t, this._dirty && this.dispatch(models.BaseModel.EVENT.DATA_UPDATED)) : this.checkDataExpiry(), this._dirty
}, models.BaseModel.prototype.getTimestamp = function() {
    return this._timestamp
}, models.BaseModel.prototype.setTimestamp = function() {
    this._timestamp = (new Date).getTime()
}, models.BaseModel.prototype.init = function() {}, models.BaseModel.prototype.destroy = function() {}, models.BaseModel.prototype.reset = function() {}, models.BaseModel.prototype.checkDataExpiry = function() {}, models.TOTWHistoryModel = function() {
    models.BaseModel.call(this), this._hasNext = !1, this._hasPrevious = !1, this._squadHistoryPreview = null, this._iterator = new utils.Iterator([], models.TOTWHistoryModel.SQUADS_PER_PAGE)
}, utils.JS.inherits(models.TOTWHistoryModel, models.BaseModel), models.TOTWHistoryModel.SQUADS_PER_PAGE = 15, models.TOTWHistoryModel.GENERAL_REFRESH_INTERVAL = 36e5, models.TOTWHistoryModel.SERVICE_DOWN_REFRESH_INTERVAL = 3e5, models.TOTWHistoryModel.EVENT_SQUAD_SELECTED = "models.TOTWHistoryModel.EVENT_SQUAD_SELECTED", models.TOTWHistoryModel.prototype.reset = function() {
    this.setSelectedSquad(null), this.isDirty(!0), this.getIterator().setData([], !1)
}, models.TOTWHistoryModel.prototype.checkDataExpiry = function() {
    var timestamp = this.getTimestamp();
    (new Date).getTime() > timestamp + (gSettingsModel.isTOTWHistoryEnabled() ? models.TOTWHistoryModel.GENERAL_REFRESH_INTERVAL : models.TOTWHistoryModel.SERVICE_DOWN_REFRESH_INTERVAL) && (this._dirty = !0)
}, models.TOTWHistoryModel.prototype.getIterator = function() {
    return this._iterator
}, models.TOTWHistoryModel.prototype.hasNext = function(t) {
    return utils.JS.isBoolean(t) && (this._hasNext = t), this._hasNext
}, models.TOTWHistoryModel.prototype.hasPrevious = function(t) {
    return utils.JS.isBoolean(t) && (this._hasPrevious = t), this._hasPrevious
}, models.TOTWHistoryModel.prototype.hasValidTOTW = function hasValidTOTW() {
    return this._iterator.getNumItems() > 0
}, models.TOTWHistoryModel.prototype.updateData = function(data) {
    !this.isDirty() || this.getIterator().getCurrentPage() > 1 ? data = this.getIterator().data().concat(data) : this.getIterator().setCurrentIndex(0), this.getIterator().setData(data, !1), this.setTimestamp(), this.isDirty(!1), this.dispatch(models.BaseModel.EVENT.DATA_UPDATED)
}, models.TOTWHistoryModel.prototype.getSelectedSquad = function() {
    return this._squadHistoryPreview || this._iterator.first()
}, models.TOTWHistoryModel.prototype.setSelectedSquad = function(t) {
    this.getSelectedSquad() !== t && (this._squadHistoryPreview = t, this.dispatch(models.TOTWHistoryModel.EVENT_SQUAD_SELECTED))
};
var gTOTWHistoryModel = new models.TOTWHistoryModel;
NamespaceManager.Register("views.squads"), views.squads.ViewListTOTWSquads = function TOTWSquadListView() {
    FUIView.call(this), this._listRows = [], this._noResultsView = null, this.onNext = new FUTObservable, Object.defineProperty(this, "onNext", {
        writable: !1,
        enumerable: !0
    }), this.onPrev = new FUTObservable, Object.defineProperty(this, "onPrev", {
        writable: !1,
        enumerable: !0
    }), this.onRowSelected = new FUTObservable, Object.defineProperty(this, "onItemSelected", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.squads.ViewListTOTWSquads, FUIView), views.squads.ViewListTOTWSquads.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("paginated-squad-list"), t.classList.add("SquadSelector"), this.__topPagination = document.createElement("div"), this.$_topPagination = $(this.__topPagination), this.__topPagination.classList.add("pagingContainer"), this._topPrev = new views.buttons.FlatButton, this._topPrev.getRootElement().classList.add("pagination"), this._topPrev.getRootElement().classList.add("prev"), this.__topPagination.appendChild(this._topPrev.getRootElement()), this._topNext = new views.buttons.FlatButton, this._topNext.getRootElement().classList.add("pagination"), this._topNext.getRootElement().classList.add("next"), this.__topPagination.appendChild(this._topNext.getRootElement()), t.appendChild(this.__topPagination), this.__squadList = document.createElement("ul"), this.$_squadList = $(this.__squadList), t.appendChild(this.__squadList), this.__botPagination = document.createElement("div"), this.$_botPagination = $(this.__botPagination), this.__botPagination.classList.add("pagingContainer"), this._botPrev = new views.buttons.FlatButton, this._botPrev.getRootElement().classList.add("pagination"), this._botPrev.getRootElement().classList.add("prev"), this.__botPagination.appendChild(this._botPrev.getRootElement()), this._botNext = new views.buttons.FlatButton, this._botNext.getRootElement().classList.add("pagination"), this._botNext.getRootElement().classList.add("next"), this.__botPagination.appendChild(this._botNext.getRootElement()), t.appendChild(this.__botPagination), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.ViewListTOTWSquads.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__topPagination = null, this.$_topPagination = null, this._topPrev.destroy(), this._topPrev = null, this._topNext.destroy(), this._topNext = null, this.__squadList = null, this.$_squadList = null, this.__botPagination = null, this.$_botPagination = null, this._botPrev.destroy(), this._botPrev = null, this._botNext.destroy(), this._botNext = null
}, views.squads.ViewListTOTWSquads.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.ViewListTOTWSquads.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.ViewListTOTWSquads.prototype.init = function init() {
    this.superclass(), this._topPrev.addTarget(this, this._ePreviousPage, enums.Event.TAP), this._topPrev.setText(gLocalization.lText("label.prev")), this._topPrev.init(), this._botPrev.addTarget(this, this._ePreviousPage, enums.Event.TAP), this._botPrev.setText(gLocalization.lText("label.prev")), this._botPrev.init(), this._topNext.addTarget(this, this._eNextPage, enums.Event.TAP), this._topNext.setText(gLocalization.lText("label.next")), this._topNext.init(), this._botNext.addTarget(this, this._eNextPage, enums.Event.TAP), this._botNext.setText(gLocalization.lText("label.next")), this._botNext.init(), this.setPaginationState(!1, !1), this.setInteractionState(!0)
}, views.squads.ViewListTOTWSquads.prototype.dealloc = function dealloc() {
    this._removeListRows(), this._noResultsView && (this._noResultsView.destroy(), this._noResultsView = null), this.onNext.dealloc(), this.onPrev.dealloc(), this.onRowSelected.dealloc(), this.superclass()
}, views.squads.ViewListTOTWSquads.prototype._removeListRows = function _removeListRows() {
    this._listRows.length > 0 && (this._listRows.forEach(function(t) {
        t.destroy()
    }), this._listRows = [])
}, views.squads.ViewListTOTWSquads.prototype._addListRow = function _addListRow(t) {
    if (t instanceof entities.Squad) {
        var i = new components.ListRowSquad;
        i.init(), i.setData(t), i.setTapCallback(this._eRowSelected.bind(this)), i.render();
        var s = i.getRootElement();
        s.classList.add("no-scaling"), s.classList.add("hide-arrow"), this._listRows.push(i), this.__squadList.appendChild(s)
    } else utils.Debug.Assert(!1, "Expected a squad entity")
}, views.squads.ViewListTOTWSquads.prototype.setPaginationState = function setPaginationState(t, i) {
    this._topPrev.setDisplay(t), this._botPrev.setDisplay(t), this._topNext.setDisplay(i), this._botNext.setDisplay(i), this.$_topPagination.toggle(t || i), this.$_botPagination.toggle(t || i)
}, views.squads.ViewListTOTWSquads.prototype.setSquads = function(t) {
    this._removeListRows(), t.forEach(this._addListRow, this)
}, views.squads.ViewListTOTWSquads.prototype.appendEmptyListMessage = function appendEmptyListMessage(t, i, s) {
    this._removeListRows(), this._noResultsView && this._noResultsView.destroy(), this._noResultsView = new components.ListNoResults, this._noResultsView.init(), this._noResultsView.setText(t), this._noResultsView.setDescription(gLocalization.lText("popup.error.noresults.description")), this._noResultsView.setupButton(i, s), this._noResultsView.setIcon(components.ListNoResults.ICON_TYPE.SEARCH), this.getRoot().append(this._noResultsView.getRoot())
}, views.squads.ViewListTOTWSquads.prototype._eRowSelected = function _eRowSelected(data) {
    this.isInteractionEnabled() && (this.selectListRow(data), this.onRowSelected.notify(data))
}, views.squads.ViewListTOTWSquads.prototype._ePreviousPage = function _ePreviousPage(sender, event, data) {
    this.isInteractionEnabled() && this.onPrev.notify()
}, views.squads.ViewListTOTWSquads.prototype._eNextPage = function _eNextPage(sender, event, data) {
    this.isInteractionEnabled() && this.onNext.notify()
}, views.squads.ViewListTOTWSquads.prototype.selectListRow = function selectListRow(data) {
    this._listRows.forEach(function(t, i) {
        t.setSelected(t.getData() === data)
    }, this)
}, communication.TOTWHistoryDelegate = function(start, count) {
    communication.BaseFUTDelegate.call(this), this._start = start, this._count = count
}, utils.JS.inherits(communication.TOTWHistoryDelegate, communication.BaseFUTDelegate), communication.TOTWHistoryDelegate.prototype.execute = function() {
    var t = {};
    t.start = this._start, t.count = this._count, this.setURLVariables(t), this.useClickShield(!0);
    var url = communication.BaseFUTDelegate.REQUEST_ROOT + "totw";
    this.setRequest(url, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), this.send()
}, communication.TOTWHistoryDelegate.prototype.onSuccess = function(t) {
    if (gSettingsModel.enableService(models.SettingsModel.TOTW_HISTORY_ENABLED), !utils.JS.isValid(t.user)) return gTOTWHistoryModel.hasNext(t.hasNext || !1), gTOTWHistoryModel.hasPrevious(t.hasPrevious || !1), void this.dispatch(communication.BaseDelegate.SUCCESS);
    var i = [];
    t.user.forEach(function(t) {
        t.squadList.forEach(function(data) {
            var t = factories.Squad.createSquad(data);
            t.isValidForTOTW() && (t.setTOTW(!0), i.push(t))
        })
    }), gTOTWHistoryModel.hasNext(t.hasNext), gTOTWHistoryModel.hasPrevious(t.hasPrevious), gTOTWHistoryModel.updateData(i), this.dispatch(communication.BaseDelegate.SUCCESS)
}, communication.TOTWHistoryDelegate.prototype.onFail = function(errorCode) {
    errorCode === enums.NetworkError.SERVICE_IS_DISABLED && (gSettingsModel.disableService(models.SettingsModel.TOTW_HISTORY_ENABLED), gTOTWHistoryModel.hasNext(!1), gTOTWHistoryModel.hasPrevious(!1)), communication.TOTWHistoryDelegate.superClass_.onFail.call(this, errorCode)
}, NamespaceManager.Register("controllers.squads"), controllers.squads.ViewListTOTWSquads = function TOTWSquadsListViewController() {
    FUIViewController.call(this), this._model = gTOTWHistoryModel
}, utils.JS.inherits(controllers.squads.ViewListTOTWSquads, FUIViewController), controllers.squads.ViewListTOTWSquads.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), TelemetryManager.trackPage(TelemetryManager.Sections.TOTW, "TOTW List");
        var view = this.getView();
        view.onNext.observe(this, this._eNextPage), view.onPrev.observe(this, this._ePrevPage), view.onRowSelected.observe(this, this._eRowSelected)
    }
}, controllers.squads.ViewListTOTWSquads.prototype.dealloc = function dealloc() {
    this.superclass(), this._model = null
}, controllers.squads.ViewListTOTWSquads.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.ViewListTOTWSquads
}, controllers.squads.ViewListTOTWSquads.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._model.isDirty() ? this._requestTOTWHistory(0) : (this._model.getIterator().setCurrentIndex(0), this._showSquads())
}, controllers.squads.ViewListTOTWSquads.prototype._showSquads = function _showSquads() {
    var view = this.getView(),
        iterator = this._model.getIterator();
    if (0 === iterator.getNumItems()) {
        var t = gSettingsModel.isTOTWHistoryEnabled() ? "totw.squadlist.empty" : "totw.squadlist.unavailable";
        view.appendEmptyListMessage(gLocalization.lText(t))
    } else {
        var i = iterator.getCurrentIndex(),
            s = iterator.data().slice(i, i + models.TOTWHistoryModel.SQUADS_PER_PAGE),
            o = iterator.hasNextPage() || this._model.hasNext();
        view.setSquads(s), view.selectListRow(iterator.current()), view.setPaginationState(iterator.hasPrev(), o)
    }
}, controllers.squads.ViewListTOTWSquads.prototype._checkIteratorDataBounds = function() {
    var iterator = this._model.getIterator();
    iterator.getCurrentPage() > iterator.getMaxPage() && iterator.setCurrentIndex(iterator.getFirstIndexOfPage(iterator.getMaxPage()))
}, controllers.squads.ViewListTOTWSquads.prototype._requestTOTWHistory = function _requestTOTWHistory(index) {
    var t = new communication.TOTWHistoryDelegate(index, models.TOTWHistoryModel.SQUADS_PER_PAGE);
    t.addListener(communication.BaseDelegate.SUCCESS, this, this._onDataLoaded), t.addListener(communication.BaseDelegate.FAIL, this, this._onFail), t.addListener(communication.BaseDelegate.CANCEL, this, this._onCancel), t.execute()
}, controllers.squads.ViewListTOTWSquads.prototype._onDataLoaded = function _onDataLoaded(sender) {
    sender.clearListenersByScope(this), this._checkIteratorDataBounds(), this._showSquads()
}, controllers.squads.ViewListTOTWSquads.prototype._onFail = function _onFail(sender, error) {
    sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !0, function() {
        this._checkIteratorDataBounds(), this._showSquads()
    }.bind(this))
}, controllers.squads.ViewListTOTWSquads.prototype._onCancel = function _onCancel(sender) {
    sender.clearListenersByScope(this), this._checkIteratorDataBounds(), this._showSquads()
}, controllers.squads.ViewListTOTWSquads.prototype._eNextPage = function _eNextPage(t, data) {
    var i = this._model.getIterator(),
        index = i.getFirstIndexOfPage(i.getCurrentPage() + 1);
    i.setCurrentIndex(index), i.getCurrentPage() > i.getMaxPage() ? this._requestTOTWHistory(index) : this._showSquads()
}, controllers.squads.ViewListTOTWSquads.prototype._ePrevPage = function _ePrevPage(t, data) {
    var i = this._model.getIterator(),
        index = i.getFirstIndexOfPage(i.getCurrentPage() - 1);
    i.setCurrentIndex(index), this._showSquads()
}, controllers.squads.ViewListTOTWSquads.prototype._eRowSelected = function _eRowSelected(t, data) {
    if (this._model.setSelectedSquad(data), this.getParentViewController()) {
        var view = this.getView();
        view.setInteractionState(!1), setTimeout(function() {
            view && view.setInteractionState(!0)
        }.bind(this), 600)
    } else NavManager.requestGoBackScreen()
}, controllers.squads.TOTWSquadLandscape = function TOTWquadSplitViewController() {
    controllers.squads.BaseSquadLandscape.call(this), this._historyController = null
}, utils.JS.inherits(controllers.squads.TOTWSquadLandscape, controllers.squads.BaseSquadLandscape), controllers.squads.TOTWSquadLandscape.prototype.init = function init() {
    this.initialized || (this.superclass(), this._historyController = new controllers.squads.ViewListTOTWSquads, this._historyController.init(), this.addChildViewController(this._historyController), gTOTWHistoryModel.addListener(models.TOTWHistoryModel.EVENT_SQUAD_SELECTED, this, this._eTOTWSquadSelected))
}, controllers.squads.TOTWSquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._historyController.dealloc(), this._historyController = null, gTOTWHistoryModel.clearListenersByScope(this)
}, controllers.squads.TOTWSquadLandscape.prototype._generateSquadOverview = function _generateSquadOverview() {
    var t = new controllers.squads.TOTWSquadOverview;
    return this._squad ? t.initWithSquad(this._squad) : t.init(), t
}, controllers.squads.TOTWSquadLandscape.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._historyController
}, controllers.squads.TOTWSquadLandscape.prototype.showHistory = function showHistory() {
    this._showDefaultPanel()
}, controllers.squads.TOTWSquadLandscape.prototype._eTOTWSquadSelected = function _eTOTWSquadSelected(sender, data) {
    this._squad = sender.getSelectedSquad(), this._squad && this._itemDetailController && this._itemDetailController.setSquad(this._squad)
}, controllers.squads.TOTWSquadLandscape.prototype._eSlotSelected = function _eSlotSelected(sender, event, data) {
    utils.Debug.Assert(this._squad instanceof entities.Squad, "Squad entity has gone missing.");
    var index = data && utils.JS.isNumber(data.slotIndex) ? data.slotIndex : 0;
    this._squad.getSlot(index).isValid() && this._showSlotDetails(index)
}, pages.controllers.TOTWPreviewSquadController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null, this._viewmodel = null
}, utils.JS.inherits(pages.controllers.TOTWPreviewSquadController, pages.controllers.ScreenControllerBase), pages.controllers.TOTWPreviewSquadController.prototype.destroy = function destroy() {
    this._controller && (this._controller.dealloc(), this._controller = null), pages.controllers.TOTWPreviewSquadController.superClass_.destroy.call(this)
}, pages.controllers.TOTWPreviewSquadController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    gTelemetryManager.trackPage(TelemetryManager.Sections.TOTW, NavManager.getCurrentScreen().getScreenId());
    var i = gTOTWHistoryModel.getSelectedSquad();
    this._viewmodel = new viewmodels.Squad(i), isPhone() ? (this._controller = new controllers.squads.TOTWSquadOverview, this._controller.initWithSquad(i)) : (this._controller = new controllers.squads.TOTWSquadLandscape, this._controller.initWithSquad(i)), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.TOTWPreviewSquadController.prototype.onRequestBack = function onRequestBack() {
    return gTOTWHistoryModel.setSelectedSquad(null), !0
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.TOTW, function(t) {
    NavManager.clearScreenStack(), gTOTWHistoryModel.hasValidTOTW() ? (NavManager.pushScreenOntoStack(null, Screens.getView("SQUADS_HUB")), NavManager.requestChildScreen(Screens.getView("TOTW_PREVIEW_SQUAD"), {
        copySquadEnabled: !0
    })) : (NavManager.requestRootScreen(Screens.getView("SQUADS_HUB")), services.Notification.queue([gLocalization.lText("notification.TOTW.loadfail"), enums.UINotificationType.NEGATIVE]))
}), views.squads.ShowOffSquadOverview = function ShowOffSquadOverviewView() {
    views.squads.SquadOverview.call(this)
}, utils.JS.inherits(views.squads.ShowOffSquadOverview, views.squads.SquadOverview), controllers.squads.ShowOffSquadOverview = function ShowOffSquadOverviewViewController() {
    controllers.squads.SquadOverview.call(this)
}, utils.JS.inherits(controllers.squads.ShowOffSquadOverview, controllers.squads.SquadOverview), controllers.squads.ShowOffSquadOverview.prototype.init = function init() {
    this.initialized || (this.superclass(), this.getView().addTarget(this, this._eItemTap, enums.UISquadPitchEvent.SLOT_SELECT))
}, controllers.squads.ShowOffSquadOverview.prototype.initWithSquad = function initWithSquad(t) {
    this.initialized || (this.superclass(t), gHeader.setTitle(t.getName()))
}, controllers.squads.ShowOffSquadOverview.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.ShowOffSquadOverview
}, controllers.squads.ShowOffSquadOverview.prototype._pushSquadToView = function _pushSquadToView(t) {
    var view = this.getView();
    view.setType(t.isDream() ? enums.SquadPitchTypes.CONCEPT : enums.SquadPitchTypes.REGULAR), view.setSquad(t)
}, controllers.squads.ShowOffSquadOverview.prototype._eItemTap = function _eItemTap(sender, event, data) {
    this._squad.getSlot(data.slotIndex).isValid() && this.superclass(sender, event, data)
}, NamespaceManager.Register("views.squads"), views.squads.SquadShowOff = function SquadShowOffView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.squads.SquadShowOff, FUIView), views.squads.SquadShowOff.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("SquadShowOffDetails");
        var i = document.createElement("section");
        i.classList.add("layout-article"), i.classList.add("detail-carousel"), this._formationImg = new components.ImageLoader, i.appendChild(this._formationImg.getRootElement()), this.__formationTxt = document.createElement("span"), this.$_formationTxt = $(this.__formationTxt), i.appendChild(this.__formationTxt), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("desc"), this.__showOffDesc = document.createElement("p"), this.$_showOffDesc = $(this.__showOffDesc), s.appendChild(this.__showOffDesc), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("button-container"), this._btnStarted = new views.buttons.DefaultButton, this._btnStarted.getRootElement().classList.add("call-to-action"), o.appendChild(this._btnStarted.getRootElement()), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SquadShowOff.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._formationImg.destroy(), this._formationImg = null, this.__formationTxt = null, this.$_formationTxt = null, this.__showOffDesc = null, this.$_showOffDesc = null, this._btnStarted.destroy(), this._btnStarted = null
}, views.squads.SquadShowOff.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SquadShowOff.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SquadShowOff.prototype.init = function init() {
    this.superclass(), this._btnStarted.init(), this._btnStarted.setText(gLocalization.lText("infopanel.showOff.getStarted")), this.$_showOffDesc.text(gLocalization.lText("infopanel.showOff.description"))
}, views.squads.SquadShowOff.prototype.dealloc = function dealloc() {
    this.superclass()
}, views.squads.SquadShowOff.prototype.renderFormation = function renderFormation(t) {
    var uri = utils.AssetLocator.IMAGE_TYPE_FORMATION;
    this.$_formationTxt.text(t.getDisplayName()), this._formationImg.setResource(utils.AssetLocator.getImage(uri, enums.Year.ASSET, t.getId()))
}, views.squads.SquadShowOff.prototype.getStartedButton = function getStartedButton() {
    return this._btnStarted
}, NamespaceManager.Register("controllers.squads"), controllers.squads.ShowOffSquadActions = function ShowOffShowOffSquadActionsController() {
    FUIViewController.call(this)
}, utils.JS.inherits(controllers.squads.ShowOffSquadActions, FUIViewController), controllers.squads.ShowOffSquadActions.prototype.init = function init() {
    this.superclass(), this.getView().getStartedButton().addTarget(this, this._eGetStartedButtonPressed, enums.Event.TAP)
}, controllers.squads.ShowOffSquadActions.prototype.initWithSquad = function initWithSquad(t) {
    this.getView().renderFormation(t.getFormation()), this.init()
}, controllers.squads.ShowOffSquadActions.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SquadShowOff
}, controllers.squads.ShowOffSquadActions.prototype._eGetStartedButtonPressed = function _eGetStartedButtonPressed() {
    gAuthenticationModel.logout()
}, NamespaceManager.Register("views.items"), views.items.ApplicableConsumableList = function ApplicableConsumableListView() {
    FUIView.call(this), this._pinnedRow = null, Object.defineProperty(this, "_pinnedRow", {
        writable: !0,
        enumerable: !1
    }), this._consumableRows = [], Object.defineProperty(this, "_consumableRows", {
        writable: !0,
        enumerable: !1
    }), this.onApply = new FUTObservable, Object.defineProperty(this, "onApply", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.items.ApplicableConsumableList, FUIView), views.items.ApplicableConsumableList.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("SquadConsumablesSection"), this.__pinnedDiv = document.createElement("ul"), this.$_pinnedDiv = $(this.__pinnedDiv), this.__pinnedDiv.classList.add("pinnedDiv"), t.appendChild(this.__pinnedDiv), this.__consumableList = document.createElement("ul"), this.$_consumableList = $(this.__consumableList), this.__consumableList.classList.add("nativeScrolling"), this.__consumableList.classList.add("searchResults"), t.appendChild(this.__consumableList), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.ApplicableConsumableList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__pinnedDiv = null, this.$_pinnedDiv = null, this.__consumableList = null, this.$_consumableList = null
}, views.items.ApplicableConsumableList.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.ApplicableConsumableList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.ApplicableConsumableList.prototype.dealloc = function dealloc() {
    this.onApply.clearObservers(), this._removeListRows(), this._pinnedRow && (this._pinnedRow.destroy(), this._pinnedRow = null), this.superclass()
}, views.items.ApplicableConsumableList.prototype._generateItemRow = function _generateItemRow(item) {
    var t = new components.ListRowItem;
    return t.setData(item), t.render(), this._consumableRows.push(t), this.$_consumableList.append(t.getRoot()), t
}, views.items.ApplicableConsumableList.prototype._removeListRows = function _removeListRows() {
    this._consumableRows.length > 0 && (this._consumableRows.forEach(function(t) {
        t.destroy()
    }), this._consumableRows = [])
}, views.items.ApplicableConsumableList.prototype._setItemRowAction = function _setItemRowAction(t, i) {
    t.setAction(enums.UIRowActionClass.ADD, i)
}, views.items.ApplicableConsumableList.prototype._setItemRowTapCB = function _setItemRowTapCB(t, i) {
    t.setTapCallback(i)
}, views.items.ApplicableConsumableList.prototype.setItems = function setItems(t) {
    this.$_consumableList.empty(), this._removeListRows(), t.forEach(function(item) {
        var t = this._generateItemRow(item);
        this._setItemRowAction(t, this.onApply.notify.bind(this.onApply, item)), t.setActionState(this._pinnedRow && item.canApplyTo(this._pinnedRow.getData()))
    }, this)
}, views.items.ApplicableConsumableList.prototype.setPinnedItem = function setPinnedItem(item) {
    this.$_pinnedDiv.empty(), this._pinnedRow && this._pinnedRow.destroy(), this._pinnedRow = new components.ListRowItem, this._pinnedRow.setData(item), this._pinnedRow.render(), this.$_pinnedDiv.append(this._pinnedRow.getRoot()), this.$_consumableList.css("top", parseInt(this.$_pinnedDiv.height(), 10))
}, NamespaceManager.Register("controllers.items"), controllers.items.ApplicableConsumableList = function ApplicableConsumableListViewController() {
    FUIViewController.call(this), this._items = [], this._pinnedItem = null, this._squad = null
}, utils.JS.inherits(controllers.items.ApplicableConsumableList, FUIViewController), controllers.items.ApplicableConsumableList.prototype.init = function init() {
    this.initialized || (this.superclass(), gTelemetryManager.trackPage(this._squad && this._squad.isSBC() ? TelemetryManager.Sections.SBC : TelemetryManager.Sections.SQUADS, "Squad Consumables"), this.getView().onApply.observe(this, this._eApplyConsumable))
}, controllers.items.ApplicableConsumableList.prototype.initWithItems = function initWithItems(t, i) {
    this.initialized || (utils.Debug.Assert(Array.isArray(t), "Initialization expected an array of item entities."), utils.Debug.Assert(i instanceof entities.Item, "Initialization expected an item entity."), this._squad || (t = t.filter(function(c) {
        return !c.isTeamFitness()
    })), this._items = t, this._pinnedItem = i, this.init())
}, controllers.items.ApplicableConsumableList.prototype.initWithItemsAndSquad = function initWithItemsAndSquad(t, i, s) {
    this.initialized || (utils.Debug.Assert(s instanceof entities.Squad, "Initialization expected a squad entity."), this._squad = s, this.initWithItems(t, i))
}, controllers.items.ApplicableConsumableList.prototype.initWithItemsAndSBCChallenge = function initWithItemsAndSBCChallenge(t, i, challenge) {
    this.initialized || (utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected a challenge entity."), this._challenge = challenge, this.initWithItemsAndSquad(t, i, this._challenge.squad))
}, controllers.items.ApplicableConsumableList.prototype.dealloc = function dealloc() {
    this.superclass(), this._items = [], this._pinnedItem = null, this._squad = null, this._challenge = null
}, controllers.items.ApplicableConsumableList.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ApplicableConsumableList
}, controllers.items.ApplicableConsumableList.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("panel.applyitem.button")
}, controllers.items.ApplicableConsumableList.prototype.viewDidAppear = function viewDidAppear() {
    this.getNavigationController().setNavigationVisibility(!0, !0), this._refreshView(), this.superclass()
}, controllers.items.ApplicableConsumableList.prototype._refreshView = function _refreshView() {
    var view = this.getView();
    this._pinnedItem && view.setPinnedItem(this._pinnedItem), view.setItems(this._items)
}, controllers.items.ApplicableConsumableList.prototype._eApplyConsumable = function(t, i) {
    function _onApplyConsumableComplete(t, data) {
        if (t.unobserve(this), data.success) {
            var s = this._challenge ? this._challenge.squad : this._squad;
            (i.isPlayerPositionModifier() || i.isManagerLeagueModifier()) && s.updateChemistry(), this._challenge ? services.SBC.saveChallenge(this._challenge) : this._squad && this._squad.save(), this._items = this._items.filter(function(c) {
                return c.stackCount > 0
            }), this._items.length > 0 ? this._refreshView() : this.getNavigationController().popViewController(!0), this.getView().setInteractionState(!0)
        }
    }
    if (this.getView().setInteractionState(!1), i.isTeamFitness()) {
        if (utils.Debug.Assert(this._squad instanceof entities.Squad, "Attempted to apply team fitness when no target squad set."), this._squad) {
            var s = this._squad.getPlayers().reduce(function(t, i) {
                return i.isValid() && t.push(i.getItem()), t
            }, []);
            s.length > 0 && services.Item.applyTo(i, s).observe(this, _onApplyConsumableComplete)
        }
    } else this._pinnedItem ? services.Item.applyTo(i, this._pinnedItem).observe(this, _onApplyConsumableComplete) : (utils.Debug.Assert(!1, "Attempted to apply consumable when no target set."), this.getView().setInteractionState(!0), this.getNavigationController().popToRootViewController(!0))
}, NamespaceManager.Register("components"), views.lists.ClubCategoryRow = function ListRowClubCategoryView() {
    FUITargetActionView.call(this), this._generate()
}, utils.JS.inherits(views.lists.ClubCategoryRow, FUITargetActionView), views.lists.ClubCategoryRow.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("has-tap-callback"), t.classList.add("rowContent"), t.classList.add("ListRowClubCategory"), this.__imageContainer = document.createElement("div"), this.$_imageContainer = $(this.__imageContainer), this.__imageContainer.classList.add("icon"), t.appendChild(this.__imageContainer);
        var i = document.createElement("header");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), this.__title.classList.add("categoryTitle"), i.appendChild(this.__title), this.__stack = document.createElement("h2"), this.$_stack = $(this.__stack), this.__stack.classList.add("stackValue"), i.appendChild(this.__stack), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.lists.ClubCategoryRow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__imageContainer = null, this.$_imageContainer = null, this.__title = null, this.$_title = null, this.__stack = null, this.$_stack = null
}, views.lists.ClubCategoryRow.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.lists.ClubCategoryRow.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.lists.ClubCategoryRow.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, views.lists.ClubCategoryRow.prototype.show = function show() {
    this.setDisplay(!0)
}, views.lists.ClubCategoryRow.prototype.hide = function hide() {
    this.setDisplay(!1)
}, views.lists.ClubCategoryRow.prototype.setTitle = function setTitle(title) {
    this.__title.textContent = title
}, views.lists.ClubCategoryRow.prototype.setStackCount = function setStackCount(count) {
    if (0 === count) this.__stack.textContent = gLocalization.lText("club.consumables.NA");
    else {
        var t = 1 === count ? gLocalization.lText("dock.label.item") : gLocalization.lText("dock.label.items");
        this.__stack.textContent = count.toString() + " " + t
    }
}, views.lists.ClubCategoryRow.prototype.showStackCount = function showStackCount(show) {
    DOMKit.toggleDisplayStyle(this.__stack, show)
}, views.lists.ClubCategoryRow.prototype._mouseLeave = function _mouseLeave(e) {
    this.removeClass([enums.UIState.ACTIVE, enums.UIButtonState.HOVER].join(" "))
}, views.lists.ClubCategoryRow.prototype._mouseEnter = function _mouseEnter(e) {
    this.addClass(enums.UIButtonState.HOVER)
}, views.lists.ClubCategoryRow.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), this.addClass(enums.UIState.ACTIVE)
}, views.lists.ClubCategoryRow.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.lists.ClubCategoryRow.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.lists.ClubCategoryRow.prototype._touchCancelled = function _touchCancelled(e) {
    this.superclass(), this.removeClass(enums.UIState.ACTIVE)
}, views.lists.ClubCategoryRow.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), this._triggerActions(enums.Event.TAP)
}, NamespaceManager.Register("views.items"), views.items.ConsumableCategories = function ConsumableCategoriesView() {
    FUITargetActionView.call(this), this._pinnedRow = null, Object.defineProperty(this, "_pinnedRow", {
        writable: !0,
        enumerable: !1
    }), this._noResultsView = null, this._generate()
}, utils.JS.inherits(views.items.ConsumableCategories, FUITargetActionView), views.items.ConsumableCategories.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("SquadConsumables"), this.__pinnedDiv = document.createElement("ul"), this.$_pinnedDiv = $(this.__pinnedDiv), this.__pinnedDiv.classList.add("pinnedDiv"), t.appendChild(this.__pinnedDiv), this.__categoryList = document.createElement("div"), this.$_categoryList = $(this.__categoryList), this.__categoryList.classList.add("nativeScrolling"), this.__categoryList.classList.add("consumablesFilterOptions"), this.__categoryList.classList.add("searchFilterOptions"), this._training = new views.lists.ClubCategoryRow, this._training.getRootElement().classList.add("consumable"), this._training.getRootElement().classList.add("training"), this.__categoryList.appendChild(this._training.getRootElement()), this._contract = new views.lists.ClubCategoryRow, this._contract.getRootElement().classList.add("consumable"), this._contract.getRootElement().classList.add("contracts"), this.__categoryList.appendChild(this._contract.getRootElement()), this._fitness = new views.lists.ClubCategoryRow, this._fitness.getRootElement().classList.add("consumable"), this._fitness.getRootElement().classList.add("fitness"), this.__categoryList.appendChild(this._fitness.getRootElement()), this._healing = new views.lists.ClubCategoryRow, this._healing.getRootElement().classList.add("consumable"), this._healing.getRootElement().classList.add("healing"), this.__categoryList.appendChild(this._healing.getRootElement()), this._positioning = new views.lists.ClubCategoryRow, this._positioning.getRootElement().classList.add("consumable"), this._positioning.getRootElement().classList.add("positioning"), this.__categoryList.appendChild(this._positioning.getRootElement()), this._leaguemod = new views.lists.ClubCategoryRow, this._leaguemod.getRootElement().classList.add("consumable"), this._leaguemod.getRootElement().classList.add("leaguemodifier"), this.__categoryList.appendChild(this._leaguemod.getRootElement()), this._chemstyle = new views.lists.ClubCategoryRow, this._chemstyle.getRootElement().classList.add("consumable"), this._chemstyle.getRootElement().classList.add("chemstyles"), this.__categoryList.appendChild(this._chemstyle.getRootElement()), t.appendChild(this.__categoryList), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.ConsumableCategories.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__pinnedDiv = null, this.$_pinnedDiv = null, this.__categoryList = null, this.$_categoryList = null, this._training.destroy(), this._training = null, this._contract.destroy(), this._contract = null, this._fitness.destroy(), this._fitness = null, this._healing.destroy(), this._healing = null, this._positioning.destroy(), this._positioning = null, this._leaguemod.destroy(), this._leaguemod = null, this._chemstyle.destroy(), this._chemstyle = null
}, views.items.ConsumableCategories.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.ConsumableCategories.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.ConsumableCategories.prototype.init = function init() {
    this.superclass(), this._training.init(), this._training.setTitle(gLocalization.lText("search.filters.training")), this._training.setDisplay(!1), this._contract.init(), this._contract.setTitle(gLocalization.lText("card.title.contract")), this._contract.setDisplay(!1), this._fitness.init(), this._fitness.setTitle(gLocalization.lText("devtype.fitness")), this._fitness.setDisplay(!1), this._healing.init(), this._healing.setTitle(gLocalization.lText("card.title.healing")), this._healing.setDisplay(!1), this._positioning.init(), this._positioning.setTitle(gLocalization.lText("card.title.advtraining")), this._positioning.setDisplay(!1), this._chemstyle.init(), this._chemstyle.setTitle(gLocalization.lText("trainingtype.playStyle")), this._chemstyle.setDisplay(!1), this._leaguemod.init(), this._leaguemod.setTitle(gLocalization.lText("card.title.leagueModifier")), this._leaguemod.setDisplay(!1)
}, views.items.ConsumableCategories.prototype.dealloc = function dealloc() {
    this._pinnedRow && (this._pinnedRow.destroy(), this._pinnedRow = null), this._noResultsView && (this._noResultsView.destroy(), this._noResultsView = null), this.superclass()
}, views.items.ConsumableCategories.prototype.setCategoryValues = function setCategoryValues(data, t) {
    function _setupCategoryRow(t, i) {
        0 !== i ? (t.setStackCount(i), t.setDisplay(!0), t.addTarget(this, this._eCategorySelected, enums.Event.TAP)) : t.setDisplay(!1)
    }
    data.total > 0 ? (_setupCategoryRow.call(this, this._contract, data.contracts), _setupCategoryRow.call(this, this._fitness, data.fitness), _setupCategoryRow.call(this, this._healing, data.healing), _setupCategoryRow.call(this, this._leaguemod, data.managerLeagueModifier), _setupCategoryRow.call(this, this._chemstyle, data.playStyle), _setupCategoryRow.call(this, this._positioning, data.position), _setupCategoryRow.call(this, this._training, data.training)) : (this._noResultsView = new components.ListNoResults, this._noResultsView.init(), this._noResultsView.setText(gLocalization.lText("consumables.empty")), this._noResultsView.setupButton(gLocalization.lText("newitems.gotostore"), t), this._noResultsView.setIcon(components.ListNoResults.ICON_TYPE.ITEM), this.$_categoryList.empty(), this.$_categoryList.append(this._noResultsView.getRoot()))
}, views.items.ConsumableCategories.prototype.setPinnedItem = function setPinnedItem(item) {
    this.$_pinnedDiv.empty(), this._pinnedRow && this._pinnedRow.destroy(), this._pinnedRow = new components.ListRowItem, this._pinnedRow.setData(item), this._pinnedRow.render(), this.$_pinnedDiv.append(this._pinnedRow.getRoot()), this.$_categoryList.css("top", parseInt(this.$_pinnedDiv.height(), 10)), item.isLoaned() && this._contract.setDisplay(!1)
}, views.items.ConsumableCategories.prototype._eCategorySelected = function _eCategorySelected(sender, event, data) {
    var id;
    sender === this._contract ? id = enums.UIConsumableCategory.CONTRACTS : sender === this._fitness ? id = enums.UIConsumableCategory.FITNESS : sender === this._healing ? id = enums.UIConsumableCategory.HEALING : sender === this._leaguemod ? id = enums.UIConsumableCategory.LEAGUEMOD : sender === this._chemstyle ? id = enums.UIConsumableCategory.PLAYSTYLE : sender === this._positioning ? id = enums.UIConsumableCategory.POSITION : sender === this._training && (id = enums.UIConsumableCategory.TRAINING), this._triggerActions(event, {
        category: id
    })
}, NamespaceManager.Register("transferobjects"), transferobjects.ConsumablesStats = function(data) {
    var t = new valueobjects.NumberVO;
    Object.defineProperty(this, "contracts", {
        get: t.get.bind(t),
        set: t.set.bind(t),
        enumerable: !0
    });
    var i = new valueobjects.NumberVO;
    Object.defineProperty(this, "fitness", {
        get: i.get.bind(i),
        set: i.set.bind(i),
        enumerable: !0
    });
    var s = new valueobjects.NumberVO;
    Object.defineProperty(this, "healing", {
        get: s.get.bind(s),
        set: s.set.bind(s),
        enumerable: !0
    });
    var o = new valueobjects.NumberVO;
    Object.defineProperty(this, "managerLeagueModifier", {
        get: o.get.bind(o),
        set: o.set.bind(o),
        enumerable: !0
    });
    var l = new valueobjects.NumberVO;
    Object.defineProperty(this, "playStyle", {
        get: l.get.bind(l),
        set: l.set.bind(l),
        enumerable: !0
    });
    var position = new valueobjects.NumberVO;
    Object.defineProperty(this, "position", {
        get: position.get.bind(position),
        set: position.set.bind(position),
        enumerable: !0
    });
    var u = new valueobjects.NumberVO;
    Object.defineProperty(this, "training", {
        get: u.get.bind(u),
        set: u.set.bind(u),
        enumerable: !0
    }), this.contracts = data ? data.contracts || 0 : 0, this.fitness = data ? data.fitness || 0 : 0, this.healing = data ? data.healing || 0 : 0, this.managerLeagueModifier = data ? data.managerLeagueModifier || 0 : 0, this.playStyle = data ? data.playStyle || 0 : 0, this.position = data ? data.position || 0 : 0, this.training = data ? data.training || 0 : 0, this.total = 0, Object.defineProperty(this, "total", {
        get: function() {
            return this.contracts + this.fitness + this.healing + this.managerLeagueModifier + this.playStyle + this.position + this.training
        }
    })
}, viewmodels.ConsumableCategories = function ConsumableCategoriesViewModel(t) {
    viewmodels.Club.call(this, t)
}, utils.JS.inherits(viewmodels.ConsumableCategories, viewmodels.Club), viewmodels.ConsumableCategories.prototype.getTotals = function getTotals(t) {
    var i = new transferobjects.ConsumablesStats;
    return this.values().forEach(function(c) {
        utils.JS.isValid(t) && !c.canApplyTo(t) || (c.isContract() ? i.contracts += c.stackCount : c.isFitness() ? i.fitness += c.stackCount : c.isInjuryHealing() ? i.healing += c.stackCount : c.isManagerLeagueModifier() ? i.managerLeagueModifier += c.stackCount : c.isStyleModifier() ? i.playStyle += c.stackCount : c.isPlayerPositionModifier() ? i.position += c.stackCount : (c.isPlayerTraining() || c.isGKTraining()) && (i.training += c.stackCount))
    }, this), i
}, viewmodels.ConsumableCategories.prototype.getItems = function getItems(t, i) {
    function _checkItemFilter(c) {
        return !i || c.canApplyTo(i)
    }
    if (utils.JS.isNumber(t)) switch (t) {
        case enums.UIConsumableCategory.CONTRACTS:
            return this.values().filter(function(c) {
                return c.isContract() && _checkItemFilter(c)
            });
        case enums.UIConsumableCategory.FITNESS:
            return this.values().filter(function(c) {
                return c.isFitness() && _checkItemFilter(c)
            });
        case enums.UIConsumableCategory.HEALING:
            return this.values().filter(function(c) {
                return c.isInjuryHealing() && _checkItemFilter(c)
            });
        case enums.UIConsumableCategory.LEAGUEMOD:
            return this.values().filter(function(c) {
                return c.isManagerLeagueModifier() && _checkItemFilter(c)
            });
        case enums.UIConsumableCategory.PLAYSTYLE:
            return this.values().filter(function(c) {
                return c.isStyleModifier() && _checkItemFilter(c)
            });
        case enums.UIConsumableCategory.POSITION:
            return this.values().filter(function(c) {
                return c.isPlayerPositionModifier() && _checkItemFilter(c)
            });
        case enums.UIConsumableCategory.TRAINING:
            return this.values().filter(function(c) {
                return (c.isPlayerTraining() || c.isGKTraining()) && _checkItemFilter(c)
            })
    }
    return i ? this.values().filter(_checkItemFilter) : this.values()
}, NamespaceManager.Register("controllers.items"), controllers.items.ConsumableCategories = function ConsumableCategoriesController() {
    FUIViewController.call(this), this._item = null, this._squad = null, this._challenge = null, this._viewmodel = null
}, utils.JS.inherits(controllers.items.ConsumableCategories, FUIViewController), controllers.items.ConsumableCategories.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var t = this._challenge ? TelemetryManager.Sections.SBC : TelemetryManager.Sections.SQUADS,
            title = (this._challenge ? "SBC" : "Active") + " Squad - Apply Consumables";
        TelemetryManager.trackPage(t, title), gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: title
        }));
        var i = new transferobjects.SearchCriteria;
        i.type = enums.SearchType.CONSUMABLES_DEVELOPMENT, repositories.Item.getClubItems(i).observe(this, function _onGetConsumables(t, data) {
            if (t.unobserve(this), !data.success) return services.Notification.queue([gLocalization.lText("notification.error.loadConsumables"), enums.UINotificationType.NEGATIVE]), void(NavManager.requestGoBackScreen() || setTimeout(function() {
                NavManager.requestGoBackScreen()
            }, 500));
            this._viewmodel = new viewmodels.ConsumableCategories(data.items);
            var view = this.getView();
            view.setCategoryValues(this._viewmodel.getTotals(this._item), this._goToStore.bind(this)), view.addTarget(this, this._eCategorySelected, enums.Event.TAP)
        })
    }
}, controllers.items.ConsumableCategories.prototype.initWithItem = function initWithItem(item) {
    this.initialized || (utils.Debug.Assert(item instanceof entities.Item, "Initialization expected an item entity."), this._item = item, this.init())
}, controllers.items.ConsumableCategories.prototype.initWithSquad = function initWithSquad(t, i) {
    if (!this.initialized) {
        utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity."), utils.Debug.Assert(utils.JS.isNumber(i), "Initialization expected a number for current squad slot."), this._squad = t;
        var item = t.getSlot(i).getItem();
        utils.Debug.Assert(item.isValid(), "Initialization expected a valid item in the current squad slot."), this.initWithItem(item)
    }
}, controllers.items.ConsumableCategories.prototype.initWithSBCChallenge = function initWithSBCChallenge(challenge, t) {
    this.initialized || (utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected a challenge entity."), utils.Debug.Assert(utils.JS.isNumber(t), "Initialization expected a number for current squad slot."), this._challenge = challenge, this.initWithSquad(this._challenge.squad, t))
}, controllers.items.ConsumableCategories.prototype.dealloc = function dealloc() {
    this.superclass(), this._item = null, this._squad = null, this._challenge = null, this._viewmodel = null
}, controllers.items.ConsumableCategories.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ConsumableCategories
}, controllers.items.ConsumableCategories.prototype.viewDidAppear = function viewDidAppear() {
    this.getNavigationController().setNavigationVisibility(!0, !0), this._refreshView(), this.superclass()
}, controllers.items.ConsumableCategories.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("panel.applyitem.button")
}, controllers.items.ConsumableCategories.prototype._refreshView = function _refreshView() {
    var view = this.getView();
    this._item && view.setPinnedItem(this._item), this._viewmodel && view.setCategoryValues(this._viewmodel.getTotals(this._item), this._goToStore.bind(this))
}, controllers.items.ConsumableCategories.prototype._eCategorySelected = function _eCategorySelected(sender, event, data) {
    if (data && utils.JS.isNumber(data.category)) {
        var t = this._viewmodel.getItems(data.category, this._item),
            i = new controllers.items.ApplicableConsumableList;
        this._challenge ? i.initWithItemsAndSBCChallenge(t, this._item, this._challenge) : this._squad ? i.initWithItemsAndSquad(t, this._item, this._squad) : this._item ? i.initWithItems(t, this._item) : i.init(), this.getNavigationController().pushViewController(i, !0)
    }
}, controllers.items.ConsumableCategories.prototype._goToStore = function _goToStore() {
    NavManager.requestChildScreen(Screens.getView("STORE_HUB"))
}, NamespaceManager.Register("views.lists"), views.lists.PaginatedItemList = function PaginatedItemList() {
    FUITargetActionView.call(this), this._listRows = [], this._noResultsView = null, this._paginationDirection = !0, this._generate()
}, utils.JS.inherits(views.lists.PaginatedItemList, FUITargetActionView), views.lists.PaginatedItemList.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("paginated-item-list"), this.__topPagination = document.createElement("div"), this.$_topPagination = $(this.__topPagination), this.__topPagination.classList.add("pagingContainer"), this._topPrev = new views.buttons.FlatButton, this._topPrev.getRootElement().classList.add("pagination"), this._topPrev.getRootElement().classList.add("prev"), this.__topPagination.appendChild(this._topPrev.getRootElement()), this._topNext = new views.buttons.FlatButton, this._topNext.getRootElement().classList.add("pagination"), this._topNext.getRootElement().classList.add("next"), this.__topPagination.appendChild(this._topNext.getRootElement()), t.appendChild(this.__topPagination), this.__itemList = document.createElement("ul"), this.$_itemList = $(this.__itemList), t.appendChild(this.__itemList), this.__botPagination = document.createElement("div"), this.$_botPagination = $(this.__botPagination), this.__botPagination.classList.add("pagingContainer"), this._botPrev = new views.buttons.FlatButton, this._botPrev.getRootElement().classList.add("pagination"), this._botPrev.getRootElement().classList.add("prev"), this.__botPagination.appendChild(this._botPrev.getRootElement()), this._botNext = new views.buttons.FlatButton, this._botNext.getRootElement().classList.add("pagination"), this._botNext.getRootElement().classList.add("next"), this.__botPagination.appendChild(this._botNext.getRootElement()), t.appendChild(this.__botPagination), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.lists.PaginatedItemList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__topPagination = null, this.$_topPagination = null, this._topPrev.destroy(), this._topPrev = null, this._topNext.destroy(), this._topNext = null, this.__itemList = null, this.$_itemList = null, this.__botPagination = null, this.$_botPagination = null, this._botPrev.destroy(), this._botPrev = null, this._botNext.destroy(), this._botNext = null
}, views.lists.PaginatedItemList.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.lists.PaginatedItemList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.lists.PaginatedItemList.prototype.init = function init() {
    this.superclass(), this._topPrev.addTarget(this, this._ePreviousPage, enums.Event.TAP), this._topPrev.setText(gLocalization.lText("label.prev")), this._topPrev.init(), this._botPrev.addTarget(this, this._ePreviousPage, enums.Event.TAP), this._botPrev.setText(gLocalization.lText("label.prev")), this._botPrev.init(), this._topNext.addTarget(this, this._eNextPage, enums.Event.TAP), this._topNext.setText(gLocalization.lText("label.next")), this._topNext.init(), this._botNext.addTarget(this, this._eNextPage, enums.Event.TAP), this._botNext.setText(gLocalization.lText("label.next")), this._botNext.init(), this.setPaginationState(!1, !1), this.setInteractionState(!0)
}, views.lists.PaginatedItemList.prototype.dealloc = function dealloc() {
    this._removeListRows(), this._noResultsView && (this._noResultsView.destroy(), this._noResultsView = null), this.superclass()
}, views.lists.PaginatedItemList.prototype._removeListRows = function _removeListRows() {
    this._listRows.length > 0 && (this._listRows.forEach(function(t) {
        t.destroy()
    }), this._listRows = [])
}, views.lists.PaginatedItemList.prototype.setItems = function setItems(t) {
    return this._removeListRows(), t.forEach(function(item) {
        var t = new components.ListRowItem;
        t.setData(item), this._listRows.push(t)
    }, this), this._listRows
}, views.lists.PaginatedItemList.prototype.removeItemsById = function removeItemsById(t) {
    t.forEach(function _removeItemById(id) {
        var t = utils.JS.find(this._listRows, function(t) {
            return t.getData().id === id
        });
        t && (t.destroy(), this._listRows.splice(this._listRows.indexOf(t), 1))
    }, this), this._renderItems()
}, views.lists.PaginatedItemList.prototype._renderItems = function _renderItems() {
    this._listRows.forEach(function(t) {
        t.render(), this.__itemList.appendChild(t.getRootElement())
    }, this)
}, views.lists.PaginatedItemList.prototype.renderItems = function renderItems() {
    this._renderItems(), this.__root.scrollTop = this._paginationDirection ? 0 : this.__root.scrollHeight
}, views.lists.PaginatedItemList.prototype.getRows = function getRows() {
    return this._listRows
}, views.lists.PaginatedItemList.prototype.setRowTapCallback = function setRowTapCallback(t) {
    t = utils.JS.isFunction(t) ? t : this._eItemSelected.bind(this), this._listRows.forEach(function _setTapCallback(i) {
        i.setTapCallback(t)
    }, this)
}, views.lists.PaginatedItemList.prototype.setRowActionCallback = function setRowActionCallback(t) {
    this._listRows.forEach(function _setActionCallback(i) {
        var s = utils.JS.isFunction(t) ? t : this._eItemActionSelected.bind(this, i.getData());
        i.setAction(enums.UIRowActionClass.ADD, s)
    }, this)
}, views.lists.PaginatedItemList.prototype.setComparisonData = function setComparisonData(item) {
    this._listRows.forEach(function(t) {
        t.setComparisonData(item), t.render()
    }, this)
}, views.lists.PaginatedItemList.prototype.setPaginationState = function setPaginationState(t, i) {
    this._topPrev.setDisplay(t), this._botPrev.setDisplay(t), this._topNext.setDisplay(i), this._botNext.setDisplay(i), DOMKit.toggleDisplayStyle(this.__topPagination, t || i), DOMKit.toggleDisplayStyle(this.__botPagination, t || i)
}, views.lists.PaginatedItemList.prototype.render = function render(t, i, s) {
    this.setPaginationState(i, s), this.setItems(t).forEach(function(t) {
        this.setItemRowToTap(t)
    }, this), this.renderItems()
}, views.lists.PaginatedItemList.prototype.appendEmptyListMessage = function appendEmptyListMessage(t, i, s, o) {
    this._removeListRows(), this._noResultsView && this._noResultsView.destroy(), this._noResultsView = new components.ListNoResults, this._noResultsView.init(), this._noResultsView.setText(t), this._noResultsView.setDescription(gLocalization.lText("popup.error.noresults.description")), this._noResultsView.setupButton(i, o), this._noResultsView.setIcon(components.ListNoResults.ICON_TYPE.ITEM), this._noResultsView.setContext(s), this.getRoot().append(this._noResultsView.getRoot())
}, views.lists.PaginatedItemList.prototype.setEmptyListIcon = function setEmptyListIcon(t) {
    this._noResultsView && this._noResultsView.setIcon(t)
}, views.lists.PaginatedItemList.prototype.selectRow = function selectRow(id) {
    this._listRows.forEach(function(t) {
        t.setSelected(t.getData().id === id)
    }, this)
}, views.lists.PaginatedItemList.prototype.onTimedUpdate = function() {
    this._listRows.forEach(function(t) {
        t instanceof components.ListRowItem && t.onTimedUpdate()
    })
}, views.lists.PaginatedItemList.prototype._ePreviousPage = function _ePreviousPage(sender, event, data) {
    this.isInteractionEnabled() && (this._paginationDirection = !1, this._triggerActions(enums.UIPaginationEvent.PREVIOUS))
}, views.lists.PaginatedItemList.prototype._eNextPage = function _eNextPage(sender, event, data) {
    this.isInteractionEnabled() && (this._paginationDirection = !0, this._triggerActions(enums.UIPaginationEvent.NEXT))
}, views.lists.PaginatedItemList.prototype._eItemSelected = function _eItemSelected(data) {
    this.isInteractionEnabled() && this._triggerActions(enums.UIListEvent.ROW_SELECT, {
        item: data
    })
}, views.lists.PaginatedItemList.prototype._eItemActionSelected = function _eItemActionSelected(data) {
    this.isInteractionEnabled() && this._triggerActions(enums.UIListEvent.ROW_ACTION, {
        item: data
    })
}, NamespaceManager.Register("views.club"), views.club.ClubHeader = function ClubItemsSearchHeader() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.club.ClubHeader, FUIView), views.club.ClubHeader.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("MyClubItemsSearchHeader"), this.__title = document.createElement("span"), this.$_title = $(this.__title), this.__title.classList.add("title"), t.appendChild(this.__title), this.__imageContainer = document.createElement("span"), this.$_imageContainer = $(this.__imageContainer), this.__imageContainer.classList.add("type"), t.appendChild(this.__imageContainer), this.__searchContainer = document.createElement("span"), this.$_searchContainer = $(this.__searchContainer), this.__searchContainer.classList.add("searchAction"), this._btnSearch = new views.buttons.DefaultButton, this._btnSearch.getRootElement().classList.add("mini"), this._btnSearch.getRootElement().classList.add("call-to-action"), this.__searchContainer.appendChild(this._btnSearch.getRootElement()), t.appendChild(this.__searchContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.club.ClubHeader.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__imageContainer = null, this.$_imageContainer = null, this.__searchContainer = null, this.$_searchContainer = null, this._btnSearch.destroy(), this._btnSearch = null
}, views.club.ClubHeader.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.club.ClubHeader.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.club.ClubHeader.prototype.init = function init() {
    this.superclass(), this._btnSearch.init(), this._btnSearch.setText(gLocalization.lText("button.search"))
}, views.club.ClubHeader.prototype.getButton = function getButton() {
    return this._btnSearch
}, views.club.ClubHeader.prototype.setTitle = function setTitle(t) {
    this.$_title.html(t)
}, views.club.ClubHeader.prototype.getTitle = function getTitle() {
    return this.$_title.html()
}, views.club.ClubHeader.prototype.setImagesFromImgLoader = function setImagesFromImgLoader(images) {
    this.$_imageContainer.empty(), images.forEach(function(t) {
        this.$_imageContainer.append(t.getRoot())
    }, this)
}, views.club.ClubHeader.prototype.setImagesFromData = function setImagesFromData(images) {
    this.$_imageContainer.empty(), images.forEach(function(t) {
        var i = new components.ImageLoader;
        i.setLocalResource(t.src), i.getRoot().addClass(t.cssClass), this.$_imageContainer.append(i.getRoot())
    }, this)
}, views.club.ClubHeader.prototype.getImageData = function getImageData() {
    var images = [];
    return this.$_imageContainer.find("img").each(function() {
        images.push({
            src: this.src,
            cssClass: this.getAttribute("class") || ""
        })
    }), images
}, views.club.ClubHeader.prototype.toggleSearch = function toggleSearch(t) {
    utils.JS.isValid(this.$_searchContainer) && this.$_searchContainer.toggle(t)
}, NamespaceManager.Register("views.club"), views.club.ClubSearchResults = function ClubSearchResultsView() {
    FUITargetActionView.call(this), this._pinnedItem = null, Object.defineProperty(this, "_pinnedItem", {
        writable: !0,
        enumerable: !1
    }), this._pinnedItemView = null, Object.defineProperty(this, "_pinnedItemView", {
        writable: !0,
        enumerable: !1
    }), this._header = null, Object.defineProperty(this, "_header", {
        writable: !0,
        enumerable: !1
    }), this.onSearch = new FUTObservable, Object.defineProperty(this, "onSearch", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.club.ClubSearchResults, FUITargetActionView), views.club.ClubSearchResults.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("MyClubResults"), this._list = new views.lists.PaginatedItemList, this._list.getRootElement().classList.add("nativeScrolling"), t.appendChild(this._list.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.club.ClubSearchResults.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._list.destroy(), this._list = null
}, views.club.ClubSearchResults.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.club.ClubSearchResults.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.club.ClubSearchResults.prototype.init = function init() {
    this.superclass(), this._list.init(), this._list.addTarget(this, this._bubbleEvent, enums.UIListEvent.ROW_SELECT), this._list.addTarget(this, this._bubbleEvent, enums.UIListEvent.ROW_ACTION), this._list.addTarget(this, this._bubbleEvent, enums.UIPaginationEvent.NEXT), this._list.addTarget(this, this._bubbleEvent, enums.UIPaginationEvent.PREVIOUS), this.setInteractionState(!0)
}, views.club.ClubSearchResults.prototype.dealloc = function dealloc() {
    this._header && (this._header.getButton().removeTarget(this.onSearch, this.onSearch.notify, enums.Event.TAP), this._header.dealloc(), this._header = null), this.onSearch.dealloc(), this.onSearch = null, this._pinnedItem = null, this._pinnedItemView = null, this.superclass()
}, views.club.ClubSearchResults.prototype.updateListTopPosition = function updateListTopPosition() {
    var height = 0;
    this._header && (height += this._header.getRoot().outerHeight()), this._pinnedItemView && (height += this._pinnedItemView.getRoot().outerHeight()), this._list.getRoot().css("top", height)
}, views.club.ClubSearchResults.prototype.setItems = function setItems(t, i) {
    if (t.length > 0) {
        var rows = this._list.setItems(t);
        utils.JS.isValid(this._pinnedItem) && this._pinnedItem.isValid() && rows.forEach(function(t, s) {
            t.setComparisonData(this._pinnedItem), t.setActionState(i ? i[s] : this._pinnedItem.compareType(t.getData()))
        }, this), this._list.renderItems()
    } else this.setEmptyListMessage(!0)
}, views.club.ClubSearchResults.prototype.setEmptyListMessage = function setEmptyListMessage(t) {
    t ? this._list.appendEmptyListMessage(gLocalization.lText("popup.error.searchauctions.retrysearch"), gLocalization.lText("button.searchagain"), this.onSearch.notify.bind(this.onSearch)) : (this._list.appendEmptyListMessage(gLocalization.lText("clubitems.categoryempty"), gLocalization.lText("newitems.gotostore"), function() {
        NavManager.requestChildScreen(Screens.getView("STORE_HUB"))
    }), this._header && this._header.toggleSearch(!1))
}, views.club.ClubSearchResults.prototype.setRowTapCallback = function setRowTapCallback(t) {
    this._list.setRowTapCallback(t)
}, views.club.ClubSearchResults.prototype.setRowActionCallback = function setRowActionCallback(t) {
    this._list.setRowActionCallback(t)
}, views.club.ClubSearchResults.prototype.setPaginationState = function setPaginationState(t, i) {
    this._list.setPaginationState(t, i)
}, views.club.ClubSearchResults.prototype.appendPinnedItemView = function appendPinnedItemView(view) {
    this._pinnedItemView = view;
    var root = this.getRootElement();
    root.insertBefore(view.getRootElement(), root.firstChild), this.updateListTopPosition()
}, views.club.ClubSearchResults.prototype.selectListRow = function selectListRow(id) {
    this._list.selectRow(id)
}, views.club.ClubSearchResults.prototype._bubbleEvent = function _bubbleEvent(sender, event, data) {
    this.isInteractionEnabled() && this._triggerActions(event, data)
}, views.club.ClubSearchResults.prototype.setPinnedItemData = function setPinnedItemData(item) {
    this._pinnedItem = item, this._list.setComparisonData(item)
}, views.club.ClubSearchResults.prototype.setItemTypeHeader = function setItemTypeHeader(itemType, images, t) {
    this._header || (this._header = new views.club.ClubHeader, this._header.init(), this._header.toggleSearch(!1), this._header.getButton().addTarget(this.onSearch, this.onSearch.notify, enums.Event.TAP), this.getRootElement().appendChild(this._header.getRootElement()));
    var text = "";
    switch (itemType) {
        case enums.ItemType.PLAYER:
            text = gLocalization.lText("search.filters.players"), images[0].setLocalResource("images/icon_club_categories_player.png");
            break;
        case enums.ItemType.MANAGER:
            text = gLocalization.lText("search.filters.staff"), images[0].setLocalResource("images/icon_club_categories_staff.png");
            break;
        case enums.ItemType.KIT:
            text = gLocalization.lText("clubtype.kit"), images[0].addClass("kitHome"), images[1].addClass("kitAway");
            break;
        case enums.ItemType.BADGE:
            text = gLocalization.lText("clubtype.badge");
            break;
        case enums.ItemType.BALL:
            text = gLocalization.lText("clubtype.ball"), !1;
            break;
        case enums.ItemType.STADIUM:
            text = gLocalization.lText("clubtype.stadium"), images[0].addClass("activeStadium")
    }
    this._header.setTitle(text), this._header.setImagesFromImgLoader(images), this._header.getRoot().show(), this.updateListTopPosition()
}, views.club.ClubSearchResults.prototype.toggleHeaderSearchBtn = function toggleHeaderSearchBtn(t) {
    this._header && this._header.toggleSearch(t)
}, views.club.ClubSearchResults.prototype.getHeaderTitle = function getHeaderTitle() {
    return this._header ? this._header.getTitle() : ""
}, views.club.ClubSearchResults.prototype.getHeaderImageData = function getHeaderImageData() {
    return this._header ? this._header.getImageData() : []
}, NamespaceManager.Register("controllers.club"), controllers.club.SwapComparePlayers = function SwapComparePlayersController() {
    FUIViewController.call(this), this._panel = new controllers.squads.CompareActionPanel, this.eOnAccept = new FUTObservable
}, utils.JS.inherits(controllers.club.SwapComparePlayers, FUIViewController), controllers.club.SwapComparePlayers.prototype.init = function init() {
    this.initialized || (this._panel.initWithSwapButton(), this.addChildViewController(this._panel), this._panel.onSwap.observe(this, this._eSwapSelected), this.superclass())
}, controllers.club.SwapComparePlayers.prototype.dealloc = function dealloc() {
    this.superclass(), this._panel.dealloc(), this.eOnAccept.dealloc(), this._panel = null, this.eOnAccept = null
}, controllers.club.SwapComparePlayers.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.CompareDetails
}, controllers.club.SwapComparePlayers.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("leaderboard.compare.Title")
}, controllers.club.SwapComparePlayers.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    this._panel && !this._panel.getView().isSubview(view) && (view.appendPanel(this._panel.getView()), view.layoutSubviews(), this._panel.viewDidAppear())
}, controllers.club.SwapComparePlayers.prototype.setItemData = function setItemData(item, t) {
    this.getView().render(item, t), this._panel.setItems(item, t)
}, controllers.club.SwapComparePlayers.prototype._eSwapSelected = function _eSwapSelected(t) {
    this.eOnAccept.notify()
}, NamespaceManager.Register("controllers.club"), controllers.club.SelectItemFromClub = function SelectItemFromClubViewController() {
    FUIViewController.call(this), this._searchCriteria = null, this._squad = null, this._challenge = null, this._slotIndex = 0, this._iterator = null, this._viewmodel = new viewmodels.Club([]), this._pinnedListItem = null, this._clubSearchType = enums.ItemSearchFeature.CLUB, this.onItemChange = new FUTObservable, Object.defineProperty(this, "onItemChange", {
        writable: !1
    })
}, utils.JS.inherits(controllers.club.SelectItemFromClub, FUIViewController), controllers.club.SelectItemFromClub.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), gTelemetryManager.trackPage(TelemetryManager.Sections.CLUB, "Swap Club Results");
        var view = this.getView();
        view.onSearch.observe(this, this._eModifySearchSelected), view.addTarget(this, this._eRowSelected, enums.UIListEvent.ROW_SELECT), view.addTarget(this, this._eRowActionSelected, enums.UIListEvent.ROW_ACTION), view.addTarget(this, this._eNextPage, enums.UIPaginationEvent.NEXT), view.addTarget(this, this._ePrevPage, enums.UIPaginationEvent.PREVIOUS)
    }
}, controllers.club.SelectItemFromClub.prototype.initWithSearchCriteria = function initWithSearchCriteria(t) {
    this.initialized || (utils.Debug.Assert(t instanceof transferobjects.SearchCriteria, "Expected a search criteria DTO during initialization."), this._searchCriteria = t, this._searchCriteria.count = this._viewmodel.numItemsPerPage + 1, this._viewmodel.sort = this._searchCriteria.sort, this.init())
}, controllers.club.SelectItemFromClub.prototype.initWithCriteriaAndSquad = function initWithCriteriaAndSquad(t, i, s) {
    this.initialized || (utils.Debug.Assert(i instanceof entities.Squad, "Expected a squad entity during initialization."), utils.Debug.Assert(utils.JS.isNumber(s), "Expected a numeric slot index during initialization."), this._squad = i, this._slotIndex = s, this._pinnedListItem = new controllers.views.PinnedListItem, utils.JS.isValid(this._iterator) ? (this._pinnedListItem.initWithItem(this._iterator.current().getItem()), this._pinnedListItem.onItemChange.observe(this, this._eOnItemChange)) : this._pinnedListItem.initWithItem(this._squad.getSlot(this._slotIndex).getItem()), this.addChildViewController(this._pinnedListItem), this.initWithSearchCriteria(t))
}, controllers.club.SelectItemFromClub.prototype.initWithCriteriaAndSBCChallenge = function initWithCriteriaAndSBCChallenge(t, challenge, i) {
    this.initialized || (utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Expected a challenge entity during initialization."), this._challenge = challenge, this.initWithCriteriaAndSquad(t, this._challenge.squad, i))
}, controllers.club.SelectItemFromClub.prototype.dealloc = function dealloc() {
    this.superclass(), this._searchCriteria = null, this._squad = null, this._challenge = null, this._viewmodel = null, utils.JS.isValid(this._pinnedListItem) && (this._pinnedListItem.dealloc(), this._pinnedListItem = null), this.onItemChange.dealloc(), this.onItemChange = null
}, controllers.club.SelectItemFromClub.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchResults
}, controllers.club.SelectItemFromClub.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("navbar.label.clubsearch")
}, controllers.club.SelectItemFromClub.prototype.viewWillAppear = function viewWillAppear() {
    this.superclass(), this._requestItems()
}, controllers.club.SelectItemFromClub.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    this._pinnedListItem && (view.appendPinnedItemView(this._pinnedListItem.getView()), view.setPinnedItemData(this._pinnedListItem.getItem()), this._pinnedListItem.viewDidAppear()), view.updateListTopPosition()
}, controllers.club.SelectItemFromClub.prototype.setIterator = function setIterator(iterator) {
    this._iterator = iterator
}, controllers.club.SelectItemFromClub.prototype.setItemSearchType = function setItemSearchType(type) {
    this._clubSearchType = type
}, controllers.club.SelectItemFromClub.prototype._updateItemList = function _updateItemList(t) {
    var view = this.getView();
    t.length > 0 ? view.setItems(t) : view.setEmptyListMessage(this._searchCriteria.isModified()), view.setPaginationState(this._viewmodel.hasPreviousPage(), this._viewmodel.hasNextPage()), view.setRowActionCallback(null), view.setRowTapCallback(null)
}, controllers.club.SelectItemFromClub.prototype._onClubItemRetrievalComplete = function _onClubItemRetrievalComplete(t, data) {
    if (t.unobserve(this), data.success) {
        var index = this._viewmodel.getIndex(),
            i = data.items,
            s = gSettingsModel.getConfigsByKey(models.SettingsModel.SBC_ALLOW_UNTRADEABLE);
        if (this._squad) {
            var o = this._iterator.current().getItem();
            i = i.filter(function(item) {
                var t = !this._squad.isSBC() || !item.isLoaned() && !entities.Item.isAlex(item.resourceId) && !entities.Item.isDanny(item.resourceId) && (s || !item.untradeable),
                    i = !0;
                if (this._squad.containsItem(item)) {
                    var l = item.compareResourceTo(o),
                        u = item.compareResourceTo(o, !0);
                    i = l && !u
                }
                return t && i
            }, this)
        }
        this._viewmodel.addArray(i), this._viewmodel.isFull = data.retrievedAll, this._viewmodel.setIndex(index), !this._viewmodel.canShowPage(this._viewmodel.getCurrentPage()) || this._viewmodel.shouldRequestItems() ? (this._searchCriteria.offset += this._searchCriteria.count, this._requestItems()) : this._updateItemList(this._viewmodel.getPageItems())
    } else data.error && NetworkErrorManager.handle(data.error, !1)
}, controllers.club.SelectItemFromClub.prototype._requestItems = function _requestItems() {
    this._viewmodel.canShowPage() && !this._viewmodel.shouldRequestItems() ? this._updateItemList(this._viewmodel.getPageItems()) : this._searchCriteria && (this._clubSearchType === enums.ItemSearchFeature.CONCEPT ? repositories.Item.getConceptItems(this._searchCriteria).observe(this, this._onClubItemRetrievalComplete) : repositories.Item.getClubItems(this._searchCriteria).observe(this, this._onClubItemRetrievalComplete))
}, controllers.club.SelectItemFromClub.prototype._addItemToSlot = function _addItemToSlot(item) {
    var t = this._challenge ? this._challenge.squad : this._squad;
    t.addItemToSlot(this._slotIndex, item), this._challenge ? services.SBC.saveChallenge(this._challenge) : t.save(), services.Notification.queue([gLocalization.lText("infopanel.label.swapped"), enums.UINotificationType.POSITIVE])
}, controllers.club.SelectItemFromClub.prototype._eRowSelected = function _eRowSelected(sender, event, data) {
    var item = data.item || null;
    if (!(!item || item.isManager() && this._slotIndex !== entities.Squad.MANAGER_SLOT_INDEX || item.isPlayer() && this._slotIndex === entities.Squad.MANAGER_SLOT_INDEX)) {
        var t = this.getNavigationController(),
            i = new controllers.club.SwapComparePlayers;
        i.init(), i.setItemData(this._squad.getSlot(this._slotIndex).getItem(), item), i.eOnAccept.observe(this, function _onCompareSwap() {
            this._addItemToSlot(item), this._pinnedListItem && this._pinnedListItem.setSlot(this._iterator.current()), t.popViewController(!0)
        }), t.pushViewController(i, !0)
    }
}, controllers.club.SelectItemFromClub.prototype._eRowActionSelected = function _eRowActionSelected(sender, event, data) {
    function _addToSlot(t) {
        this._addItemToSlot(t), this._searchCriteria.defId = [], this.getNavigationController().popViewController(!0)
    }
    var item = data.item || null;
    if (utils.Debug.Assert(item instanceof entities.Item, "Expected to receive an item entity."), item)
        if (item.concept) {
            var t = new transferobjects.SearchCriteria;
            t.type = enums.SearchType.PLAYER, t.defId = [item.getDefId()], repositories.Item.getClubItems(t).observe(this, function(t, i) {
                t.unobserve(this);
                var s = i.items.length > 0 ? i.items[0] : null;
                _addToSlot.call(this, null === s || s.isLoaned() && this._squad.isSBC() ? item : s)
            })
        } else _addToSlot.call(this, item)
}, controllers.club.SelectItemFromClub.prototype._eModifySearchSelected = function _eModifySearchSelected(t) {
    this.getNavigationController().popViewController(!0)
}, controllers.club.SelectItemFromClub.prototype._eNextPage = function _eNextPage(sender, event, data) {
    this._viewmodel.hasNextPage() && (this._viewmodel.canShowPage(this._viewmodel.getCurrentPage() + 1) ? this._updateItemList(this._viewmodel.nextPage()) : (this._searchCriteria.offset += this._searchCriteria.count, this._viewmodel.nextPage(), this._requestItems()))
}, controllers.club.SelectItemFromClub.prototype._ePrevPage = function _ePrevPage(sender, event, data) {
    this._viewmodel.hasPreviousPage() && this._updateItemList(this._viewmodel.previousPage())
}, controllers.club.SelectItemFromClub.prototype._eOnItemChange = function _eOnItemChange(sender, t) {
    this.getView().setPinnedItemData(t.getItem()), this._slotIndex = t.getIndex(), this.onItemChange.notify(t)
}, NamespaceManager.Register("views.club"), views.club.ClubSearchFilters = function ClubSearchFiltersView() {
    FUIView.call(this), this.onSearchModeChange = new FUTObservable, Object.defineProperty(this, "onSearchModeChange", {
        writable: !1,
        enumerable: !0
    }), this.onFilterChange = new FUTObservable, Object.defineProperty(this, "onFilterChange", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.club.ClubSearchFilters, FUIView), views.club.ClubSearchFilters.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("ClubSearchFilters"), this.__btnContainer = document.createElement("div"), this.$_btnContainer = $(this.__btnContainer), this.__btnContainer.classList.add("button-container"), this._btnReset = new views.buttons.DefaultButton, this.__btnContainer.appendChild(this._btnReset.getRootElement()), this._btnSearch = new views.buttons.DefaultButton, this._btnSearch.getRootElement().classList.add("call-to-action"), this.__btnContainer.appendChild(this._btnSearch.getRootElement()), t.appendChild(this.__btnContainer), this.__searchContainer = document.createElement("div"), this.$_searchContainer = $(this.__searchContainer), this.__searchContainer.classList.add("nativeScrolling"), this._sortOptions = new views.controls.SortOptions, this.__searchContainer.appendChild(this._sortOptions.getRootElement()), this._filterContainer = new views.items.ItemSearch, this.__searchContainer.appendChild(this._filterContainer.getRootElement()), t.appendChild(this.__searchContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.club.ClubSearchFilters.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__btnContainer = null, this.$_btnContainer = null, this._btnReset.destroy(), this._btnReset = null, this._btnSearch.destroy(), this._btnSearch = null, this.__searchContainer = null, this.$_searchContainer = null, this._sortOptions.destroy(), this._sortOptions = null, this._filterContainer.destroy(), this._filterContainer = null
}, views.club.ClubSearchFilters.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.club.ClubSearchFilters.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.club.ClubSearchFilters.prototype.init = function init() {
    this.superclass(), this._btnReset.init(), this._btnReset.setText(gLocalization.lText("search.pagination.reset")), this._btnSearch.init(), this._btnSearch.setText(gLocalization.lText("button.search")), this._filterContainer.init(), this._filterContainer.onSearchModeChange.observe(this, this._eSearchModeChanged), this._filterContainer.onFilterChange.observe(this, this._eFilterChanged)
}, views.club.ClubSearchFilters.prototype.dealloc = function dealloc() {
    this.onSearchModeChange.dealloc(), this.onFilterChange.dealloc(), this._filterContainer.onSearchModeChange.unobserve(this), this._filterContainer.onFilterChange.unobserve(this), this.superclass()
}, views.club.ClubSearchFilters.prototype.setupSortOptions = function setupSortOptions(t) {
    t ? (this._sortOptions.init(), this._sortOptions.addSlider(enums.UISortOptionType.UNTRADEABLE, gLocalization.lText("search.sort.header")), this._sortOptions.addSlider(enums.UISortOptionType.DISCARD, gLocalization.lText("search.sort.discardValue")), this._sortOptions.layoutSubviews()) : this._sortOptions.setDisplay(!1)
}, views.club.ClubSearchFilters.prototype.togglePileFilter = function togglePileFilter(display) {
    this._filterContainer.togglePileFilter(display)
}, views.club.ClubSearchFilters.prototype.setPileFilter = function setPileFilter(t, value) {
    this._filterContainer.setPileFilter(t, value)
}, views.club.ClubSearchFilters.prototype.setSearchTypeImage = function setSearchTypeImage(t) {
    this._filterContainer.setPileFilterImage(t)
}, views.club.ClubSearchFilters.prototype.appendPinnedItemView = function appendPinnedItemView(view) {
    var t = view.getRoot();
    this.getRoot().prepend(t);
    var i = t.outerHeight(),
        s = this.$_btnContainer.outerHeight() + i;
    this.$_btnContainer.css("top", i), this.$_searchContainer.css("top", s)
}, views.club.ClubSearchFilters.prototype.setPlayerSearch = function setPlayerSearch(t) {
    this._filterContainer.setPlayerSearch(t)
}, views.club.ClubSearchFilters.prototype.resetPlayerName = function resetPlayerName() {
    this._filterContainer.resetPlayerName()
}, views.club.ClubSearchFilters.prototype.togglePlayerNameRow = function togglePlayerNameRow(t) {
    this._filterContainer.togglePlayerNameRow(t)
}, views.club.ClubSearchFilters.prototype.setInteractionState = function setInteractionState(t) {
    this._btnSearch.setInteractionState(t), this._btnReset.setInteractionState(t), this._filterContainer.setInteractionState(t), this._sortOptions.setInteractionState(t), this.superclass(t)
}, views.club.ClubSearchFilters.prototype.setFilters = function setFilters(t, i) {
    this._filterContainer.setFilters(t, i), this._filterContainer.togglePlayerNameRow(t.searchCriteria.type === enums.SearchType.PLAYER && !t.isGenerationsSearch && !t.isMarketSearch)
}, views.club.ClubSearchFilters.prototype.setFilterValue = function setFilterValue(filter, value) {
    this._filterContainer.setFilterValue(filter, value)
}, views.club.ClubSearchFilters.prototype.setFilterDefaultValue = function setFilterValue(filter, value) {
    this._filterContainer.setFilterDefaultValue(filter, value)
}, views.club.ClubSearchFilters.prototype.setFilterLock = function setFilterValue(filter, t) {
    this._filterContainer.setFilterLock(filter, t)
}, views.club.ClubSearchFilters.prototype.getSortOptions = function getSortOptions() {
    return this._sortOptions
}, views.club.ClubSearchFilters.prototype.getSearchButton = function getSearchButton() {
    return this._btnSearch
}, views.club.ClubSearchFilters.prototype.getResetButton = function getResetButton() {
    return this._btnReset
}, views.club.ClubSearchFilters.prototype.getPlayerNameSearch = function getPlayerNameSearch() {
    return this._filterContainer.getPlayerNameSearch()
}, views.club.ClubSearchFilters.prototype._eSearchModeChanged = function _eSearchModeChanged(t, value) {
    this.onSearchModeChange.notify(value)
}, views.club.ClubSearchFilters.prototype._eFilterChanged = function _eFilterChanged(t, i, id, value) {
    this.onFilterChange.notify(i, id, value)
}, NamespaceManager.Register("controllers.club"), controllers.club.ClubSearchFilters = function ClubSearchFiltersViewController() {
    FUIViewController.call(this), this._item = null, this._squad = null, this._challenge = null, this._iterator = null, this._viewmodel = new viewmodels.ItemSearch, this._pinnedListItem = null, this._clubSearchType = enums.ItemSearchFeature.CLUB, this.displayAsDetails = !1, this.onItemChange = new FUTObservable, Object.defineProperty(this, "onItemChange", {
        writable: !1
    })
}, utils.JS.inherits(controllers.club.ClubSearchFilters, FUIViewController), controllers.club.ClubSearchFilters.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), gTelemetryManager.trackPage(TelemetryManager.Sections.CLUB, "Club Search Filters");
        var view = this.getView();
        view.getSearchButton().addTarget(this, this._eSearchSelected, enums.Event.TAP), view.getResetButton().addTarget(this, this._eResetSelected, enums.Event.TAP), view.getPlayerNameSearch().addTarget(this, this._ePlayerNameChange, enums.Event.CHANGE), view.getSortOptions().addTarget(this, this._eSortToggled, enums.Event.CHANGE), view.onSearchModeChange.observe(this, this._eSearchModeChanged), view.onFilterChange.observe(this, this._eFilterChanged);
        var t = !(this._challenge && !gSettingsModel.getConfigsByKey(models.SettingsModel.SBC_ALLOW_UNTRADEABLE));
        view.setupSortOptions(t), t || (this._viewmodel.searchCriteria.untradeables = enums.SearchUntradeables.EXCLUDE)
    }
}, controllers.club.ClubSearchFilters.prototype.initWithItem = function initWithItem(item) {
    this.initialized || (this._setItem(item), this._pinnedListItem = new controllers.views.PinnedListItem, this._pinnedListItem.initWithItem(item), this.addChildViewController(this._pinnedListItem), this.init())
}, controllers.club.ClubSearchFilters.prototype.initWithSquad = function initWithSquad(t, iterator) {
    if (!this.initialized) {
        utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity."), this._squad = t;
        var i = this._viewmodel.defaultSearchCriteria;
        i.position = iterator.current().getGeneralPositionName(), this._viewmodel.isGenerationsSearch = this._squad.isGenerations(), this._viewmodel.updateSearchCriteria(i), this.initWithItem(iterator.current().getItem()), this._pinnedListItem = new controllers.views.PinnedListItem, this._iterator = iterator, utils.JS.isValid(iterator) ? (this._pinnedListItem.initWithIterator(iterator), this._pinnedListItem.onItemChange.observe(this, this._eOnItemChange)) : this._pinnedListItem.init(), this.addChildViewController(this._pinnedListItem), this._adaptFiltersToItem()
    }
}, controllers.club.ClubSearchFilters.prototype.initWithSBCChallenge = function initWithSBCChallenge(challenge, iterator) {
    this.initialized || (utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected a challenge entity"), this._challenge = challenge, this.initWithSquad(this._challenge.squad, iterator))
}, controllers.club.ClubSearchFilters.prototype.dealloc = function dealloc() {
    this.superclass(), this._item = null, this._squad = null, this._challenge = null, this._iterator = null, this._viewmodel = null, utils.JS.isValid(this._pinnedListItem) && (this._pinnedListItem.dealloc(), this._pinnedListItem = null), this.onItemChange.dealloc(), this.onItemChange = null
}, controllers.club.ClubSearchFilters.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchFilters
}, controllers.club.ClubSearchFilters.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass();
    var view = this.getView();
    this.getNavigationController().setNavigationVisibility(!0, !0), this._iterator && this._setItem(this._iterator.current().getItem()), this._viewmodel.updateSearchCriteria(this._viewmodel.searchCriteria), view.setFilters(this._viewmodel), this._adaptFiltersToItem(), this._pinnedListItem && (utils.JS.isValid(this._iterator) && this._pinnedListItem.setSlot(this._iterator.current()), view.appendPinnedItemView(this._pinnedListItem.getView()), this._pinnedListItem.viewDidAppear())
}, controllers.club.ClubSearchFilters.prototype._adaptFiltersToItem = function _adaptFiltersToItem() {
    var view = this.getView();
    view.togglePileFilter(this._item.isPlayer() && !this._viewmodel.isGenerationsSearch), this._item.isPlayer() && !this._viewmodel.isGenerationsSearch ? (view.setPileFilter(factories.DataProvider.getSearchPileDP(), this._clubSearchType), this._item.isCustomBrick() && view.setInteractionState(!1)) : this._item.isManager() || this._item.isManagerConsumable() ? (view.setFilterDefaultValue(enums.UISearchFilters.TYPE, enums.SearchCategory.MANAGER), view.setFilterValue(enums.UISearchFilters.TYPE, enums.SearchCategory.MANAGER), view.setFilterLock(enums.UISearchFilters.TYPE, !0)) : this._item.isGKTraining() ? (view.setFilterDefaultValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterLock(enums.UISearchFilters.POSITION, !0)) : this._item.isPlayerPositionModifier() ? (view.setFilterDefaultValue(enums.UISearchFilters.POSITION, this._item.getStaticData().trainPosFrom), view.setFilterValue(enums.UISearchFilters.POSITION, this._item.getStaticData().trainPosFrom), view.setFilterLock(enums.UISearchFilters.POSITION, !0)) : this._item.isGKStyleModifier() && (view.setFilterDefaultValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterLock(enums.UISearchFilters.POSITION, !0))
}, controllers.club.ClubSearchFilters.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("navbar.label.clubsearch")
}, controllers.club.ClubSearchFilters.prototype.setSearchCriteria = function setSearchCriteria(t) {
    this._viewmodel.updateSearchCriteria(t)
}, controllers.club.ClubSearchFilters.prototype._setItem = function _setItem(item) {
    utils.Debug.Assert(item instanceof entities.Item, "Initialization expected an item entity.");
    var t = !utils.JS.isValid(this._item) || this._item.type !== item.type;
    if (this._item = item, !t) return !1;
    var i = this._viewmodel.defaultSearchCriteria,
        s = item.isManager() || item.isManagerConsumable();
    return i.type = enums.SearchType.PLAYER, s ? (i.type = enums.SearchType.STAFF, i.category = enums.SearchCategory.MANAGER) : this._item.isPlayerTraining() || this._item.isPlayerStyleModifier() ? i.zone = ZONE_NO_GK_VALUE : this._item.isGKTraining() || this._item.isGKStyleModifier() ? i.position = enums.PlayerPositions.GK : this._item.isPlayerPositionModifier() && (i.position = this._item.getStaticData().trainPosFrom), this._viewmodel.updateSearchCriteria(i), !0
}, controllers.club.ClubSearchFilters.prototype._eSearchModeChanged = function _eSearchModeChanged(t, value) {
    this._clubSearchType = value;
    var view = this.getView();
    value === enums.ItemSearchFeature.CONCEPT ? (view.setFilterValue(enums.UISearchFilters.PLAYSTYLE, -1), view.setFilterDefaultValue(enums.UISearchFilters.PLAYSTYLE, -1), view.setFilterLock(enums.UISearchFilters.PLAYSTYLE, !0)) : (view.setFilterLock(enums.UISearchFilters.PLAYSTYLE, !1), view.setFilterLock(enums.UISearchFilters.POSITION, !1))
}, controllers.club.ClubSearchFilters.prototype._eSortToggled = function _eSortToggled(sender, t, data) {
    switch (data.id) {
        case enums.UISortOptionType.DISCARD:
            this._viewmodel.sort = data.checked ? enums.SearchSort.ASCENDING : enums.SearchSort.DESCENDING;
            break;
        case enums.UISortOptionType.UNTRADEABLE:
            this._viewmodel.searchCriteria.untradeables = data.checked ? enums.SearchUntradeables.ONLY : enums.SearchUntradeables.DEFAULT
    }
}, controllers.club.ClubSearchFilters.prototype._eFilterChanged = function _eFilterChanged(t, i, id, value) {
    this._viewmodel.updateFromFilterChange(i, id, value), this.getView().setFilters(this._viewmodel)
}, controllers.club.ClubSearchFilters.prototype._eResetSelected = function _eResetSelected(sender, t) {
    this._viewmodel.resetSearch(), this.getView().setFilters(this._viewmodel), repositories.User.getCurrent().squadSearchCriteria.reset()
}, controllers.club.ClubSearchFilters.prototype._ePlayerNameChange = function _ePlayerNameChange(sender, t) {
    var i = this.getView().getPlayerNameSearch().getSelected(),
        view = this.getView();
    utils.JS.isValid(i) ? this._viewmodel.setPlayerData(i) : this._viewmodel.clearPlayerData(), view.setFilters(this._viewmodel), this._adaptFiltersToItem(), utils.JS.isValid(i) && (view.setFilterValue(enums.UISearchFilters.NATION, -1), view.setFilterValue(enums.UISearchFilters.LEAGUE, -1), view.setFilterValue(enums.UISearchFilters.CLUB, -1))
}, controllers.club.ClubSearchFilters.prototype._eSearchSelected = function _eSearchSelected(sender, event, data) {
    if (hasConnection()) {
        var t = this._item && this._item.isConsumable(),
            i = t ? new controllers.club.ClubSearchResults : new controllers.club.SelectItemFromClub,
            s = this._viewmodel.searchCriteria;
        s.offset = 0, t ? (i.setConsumableToApply(this._item), i.initWithSearchCriteria(s), i.displayAsDetails = this.displayAsDetails) : (i.setItemSearchType(this._clubSearchType), i.setIterator(this._iterator), i.onItemChange.observe(this, this._eOnItemChange), this._challenge ? i.initWithCriteriaAndSBCChallenge(s, this._challenge, this._iterator.current().getIndex()) : this._squad ? i.initWithCriteriaAndSquad(s, this._squad, this._iterator.current().getIndex()) : i.initWithSearchCriteria(s));
        var o = repositories.User.getCurrent().squadSearchCriteria;
        o.update(s), o.defId = [], o.sort = enums.SearchSort.DESCENDING, o.untradeables = enums.SearchUntradeables.DEFAULT, this.getNavigationController().pushViewController(i, !0)
    } else utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.NO_INTERNET_CONNECTION)
}, controllers.club.ClubSearchFilters.prototype._eOnItemChange = function _eOnItemChange(sender, t) {
    var i = this._setItem(t.getItem()),
        s = this._viewmodel.searchCriteria;
    s.position = t.getGeneralPositionName() || enums.SearchType.ANY, i ? this.getView().setFilters(this._viewmodel) : this.getView().setFilterValue(enums.UISearchFilters.POSITION, s.position), this._adaptFiltersToItem(), this.onItemChange.notify(t)
}, NamespaceManager.Register("views.items"), views.items.SlotActionPanel = function SlotActionPanelView() {
    FUITargetActionView.call(this), this._generate()
}, utils.JS.inherits(views.items.SlotActionPanel, FUITargetActionView), views.items.SlotActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("DetailPanel"), this.__auctionInfo = document.createElement("div"), this.$_auctionInfo = $(this.__auctionInfo), this.__auctionInfo.classList.add("auctionInfo");
        var i = document.createElement("div");
        i.classList.add("column"), this.__textInfo = document.createElement("span"), this.$_textInfo = $(this.__textInfo), this.__textInfo.classList.add("subHeading"), i.appendChild(this.__textInfo), this.__valueInfo = document.createElement("span"), this.$_valueInfo = $(this.__valueInfo), this.__valueInfo.classList.add("coins"), this.__valueInfo.classList.add("subContent"), i.appendChild(this.__valueInfo), this.__auctionInfo.appendChild(i), t.appendChild(this.__auctionInfo), this.__itemActions = document.createElement("ul"), this.$_itemActions = $(this.__itemActions), this._btnPlayerBio = new views.buttons.ListButton, this._btnPlayerBio.getRootElement().classList.add("more"), this.__itemActions.appendChild(this._btnPlayerBio.getRootElement()), this._btnApplyConsumable = new views.buttons.ListButton, this.__itemActions.appendChild(this._btnApplyConsumable.getRootElement()), this._btnAddSwap = new views.buttons.ListButton, this.__itemActions.appendChild(this._btnAddSwap.getRootElement()), this._btnTransfer = new views.buttons.ListButton, this.__itemActions.appendChild(this._btnTransfer.getRootElement()), this._btnSearchMarket = new views.buttons.ListButton, this.__itemActions.appendChild(this._btnSearchMarket.getRootElement()), this._btnRemove = new views.buttons.ListButton, this.__itemActions.appendChild(this._btnRemove.getRootElement()), this._btnDiscard = new views.buttons.ListButton, this.__itemActions.appendChild(this._btnDiscard.getRootElement()), t.appendChild(this.__itemActions), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.SlotActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__auctionInfo = null, this.$_auctionInfo = null, this.__textInfo = null, this.$_textInfo = null, this.__valueInfo = null, this.$_valueInfo = null, this.__itemActions = null, this.$_itemActions = null, this._btnPlayerBio.destroy(), this._btnPlayerBio = null, this._btnApplyConsumable.destroy(), this._btnApplyConsumable = null, this._btnAddSwap.destroy(), this._btnAddSwap = null, this._btnTransfer.destroy(), this._btnTransfer = null, this._btnSearchMarket.destroy(), this._btnSearchMarket = null, this._btnRemove.destroy(), this._btnRemove = null, this._btnDiscard.destroy(), this._btnDiscard = null
}, views.items.SlotActionPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.SlotActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.SlotActionPanel.prototype.init = function init() {
    this.superclass(), this._btnPlayerBio.init(), this._btnApplyConsumable.init(), this._btnAddSwap.init(), this._btnTransfer.init(), this._btnSearchMarket.init(), this._btnRemove.init(), this._btnDiscard.init(), this._btnPlayerBio.setText(gLocalization.lText("extendedPlayerInfo.general.playerBio")), this._btnApplyConsumable.setText(gLocalization.lText("panel.applyitem.button")), this._btnTransfer.setText(gLocalization.lText("infopanel.label.sendTradePile")), this._btnSearchMarket.setText(gLocalization.lText("infopanel.button.searchmarket")), this._btnRemove.setText(gLocalization.lText("infopanel.button.removefromsquad")), this._btnDiscard.setText(gLocalization.lText("infopanel.label.quickSell")), this._btnPlayerBio.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._btnApplyConsumable.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._btnAddSwap.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._btnTransfer.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._btnSearchMarket.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._btnRemove.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._btnDiscard.addTarget(this, this._eButtonSelected, enums.Event.TAP), this._btnDiscard.displayCurrencyIcon(!0), this.setInteractionState(!0)
}, views.items.SlotActionPanel.prototype.setInteractionState = function setInteractionState(t) {
    this.superclass(t), this._btnPlayerBio.setInteractionState(t), this._btnApplyConsumable.setInteractionState(t), this._btnAddSwap.setInteractionState(t), this._btnTransfer.setInteractionState(t), this._btnSearchMarket.setInteractionState(t), this._btnRemove.setInteractionState(t), this._btnDiscard.setInteractionState(t)
}, views.items.SlotActionPanel.prototype.setItem = function setItem(item, t) {
    this._btnAddSwap.setText(function _generateAddSwapText() {
        var action = item.isValid() ? "swap" : "add",
            type = item.isManager() ? "manager" : "player";
        return gLocalization.lText("infopanel.label." + action + type)
    }()), this._btnDiscard.setSubtext(gLocalization.lNum(item.discardValue));
    var i = item.isValid(),
        s = item.getYear() >= enums.Year.ASSET,
        o = item.concept,
        l = item.lastSalePrice > 0;
    this._btnApplyConsumable.setDisplay(i && !o && s), this._btnDiscard.setDisplay(i && !o && s), this._btnRemove.setDisplay(i), this._btnPlayerBio.setDisplay(i && item.isPlayer() && s), this._btnTransfer.setDisplay(i), this._btnSearchMarket.setDisplay(i && s), this._btnTransfer.setText(gLocalization.lText("infopanel.label.sendTradePile")), item.untradeable || item.isLoaned() ? (this._btnTransfer.setText(gLocalization.lText("infopanel.label.untradeable")), this._btnTransfer.setInteractionState(!1)) : t && (this._btnTransfer.setText(gLocalization.lText("popup.error.tradetoken.SellItemTradePileFullTitle")), this._btnTransfer.setInteractionState(!1)), o || item.isLoaned() || this._btnSearchMarket.setText(gLocalization.lText("infopanel.label.findallitems")), this.__textInfo.textContent = l ? gLocalization.lText("infopanel.label.prevBoughtPrice") : "", this.__valueInfo.textContent = l ? gLocalization.lNum(item.lastSalePrice) : "", DOMKit.toggleDisplayStyle(this.__auctionInfo, l && s)
}, views.items.SlotActionPanel.prototype.setShowOffItem = function setShowOffItem(item) {
    this._setPreviewableOnlyItem(item, !1)
}, views.items.SlotActionPanel.prototype.setTOTWItem = function setTOTWItem(item) {
    this._setPreviewableOnlyItem(item, !0)
}, views.items.SlotActionPanel.prototype._setPreviewableOnlyItem = function _setPreviewableOnlyItem(item, t) {
    this._btnPlayerBio.setDisplay(item.isValid() && item.isPlayer()), this._btnAddSwap.setDisplay(!1), this._btnApplyConsumable.setDisplay(!1), this._btnDiscard.setDisplay(!1), this._btnSearchMarket.setDisplay(item.isValid() && t), this._btnRemove.setDisplay(!1), this._btnTransfer.setDisplay(!1), DOMKit.toggleDisplayStyle(this.__auctionInfo, !1)
}, views.items.SlotActionPanel.prototype.setNonCurrentYearItem = function setNonCurrentYearItem() {
    this._btnApplyConsumable.setDisplay(!1), this._btnTransfer.setDisplay(!1), this._btnSearchMarket.setDisplay(!1), this._btnDiscard.setDisplay(!1)
}, views.items.SlotActionPanel.prototype.appendQuickList = function appendQuickList(t) {
    this.$_auctionInfo.after(t)
}, views.items.SlotActionPanel.prototype._eButtonSelected = function _eButtonSelected(sender, event, data) {
    var t = enums.UIItemActionEvent.BIO;
    sender === this._btnPlayerBio ? t = enums.UIItemActionEvent.BIO : sender === this._btnApplyConsumable ? t = enums.UIItemActionEvent.APPLY_CONSUMABLE : sender === this._btnAddSwap ? t = enums.UIItemActionEvent.ADD_SWAP : sender === this._btnTransfer ? t = enums.UIItemActionEvent.SEND_TO_TRANSFERS : sender === this._btnSearchMarket ? t = enums.UIItemActionEvent.SEARCH_ON_MARKET : sender === this._btnRemove ? t = enums.UIItemActionEvent.REMOVE_FROM_SQUAD : sender === this._btnDiscard && (t = enums.UIItemActionEvent.DISCARD), this._triggerActions(t)
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SlotActionPanel = function SlotActionPanelViewController() {
    FUIViewController.call(this), this._quickListPanel = new controllers.views.QuickListPanel, this._item = null, this._squad = null, this._challenge = null, this._slot = 0, this._iterator = null, this.onDiscard = new FUTObservable, Object.defineProperty(this, "onDiscard", {
        writable: !1,
        enumerable: !0
    }), this.onMove = new FUTObservable, Object.defineProperty(this, "onMove", {
        writable: !1,
        enumerable: !0
    }), this.onRemove = new FUTObservable, Object.defineProperty(this, "onRemove", {
        writable: !1,
        enumerable: !0
    }), this.onPlayerBio = new FUTObservable, Object.defineProperty(this, "onPlayerBio", {
        writable: !1,
        enumerable: !0
    }), this.onItemChange = new FUTObservable, Object.defineProperty(this, "onItemChange", {
        writable: !1,
        enumerable: !0
    })
}, utils.JS.inherits(controllers.squads.SlotActionPanel, FUIViewController), controllers.squads.SlotActionPanel.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._quickListPanel.init(), this._quickListPanel.onList.observe(this, this._onRemove);
        var view = this.getView();
        view.addTarget(this, this._onDiscard, enums.UIItemActionEvent.DISCARD), view.addTarget(this, this._onMove, enums.UIItemActionEvent.SEND_TO_TRANSFERS), view.addTarget(this, this._onApply, enums.UIItemActionEvent.APPLY_CONSUMABLE), view.addTarget(this, this._onAddSwap, enums.UIItemActionEvent.ADD_SWAP), view.addTarget(this, this._eSearchMarket, enums.UIItemActionEvent.SEARCH_ON_MARKET), view.addTarget(this, this._onRemove, enums.UIItemActionEvent.REMOVE_FROM_SQUAD), view.addTarget(this, this._eBioSelected, enums.UIItemActionEvent.BIO)
    }
}, controllers.squads.SlotActionPanel.prototype.initWithItem = function initWithItem(item) {
    this.initialized || (this.setItem(item), this.init())
}, controllers.squads.SlotActionPanel.prototype.initWithSquad = function initWithSquad(t, i) {
    if (!this.initialized) {
        utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity"), utils.Debug.Assert(utils.JS.isNumber(i), "Initialization expected a number"), this._squad = t;
        var s = t.getSlot(i);
        s.getIndex() >= 0 ? (this._slot = i, this.initWithItem(s.getItem())) : this.init()
    }
}, controllers.squads.SlotActionPanel.prototype.initWithSBCChallenge = function initWithSBCChallenge(challenge, t) {
    this.initialized || (utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected a challenge entity"), this._challenge = challenge, this.initWithSquad(this._challenge.squad, t))
}, controllers.squads.SlotActionPanel.prototype.dealloc = function dealloc() {
    this.onDiscard.dealloc(), this.onMove.dealloc(), this.onRemove.dealloc(), this.onPlayerBio.dealloc(), this.onItemChange.dealloc(), this.onDiscard = null, this.onMove = null, this.onRemove = null, this.onPlayerBio = null, this.onItemChange = null, this.superclass(), this._quickListPanel.dealloc(), this._item = null, this._squad = null, this._challenge = null, this._slot = 0
}, controllers.squads.SlotActionPanel.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.SlotActionPanel
}, controllers.squads.SlotActionPanel.prototype.setSlotIndex = function setSlotIndex(index) {
    this._slot !== index && (this._slot = index, this._squad && this.setItem(this._squad.getSlot(index).getItem()))
}, controllers.squads.SlotActionPanel.prototype.setItem = function setItem(item) {
    if (this._item !== item) {
        this._item = item;
        var view = this.getView(),
            t = this._squad && this._squad.isShowOff(),
            i = repositories.Item.isPileFull(enums.FUTItemPile.TRANSFER);
        this._squad && this._squad.isTOTW() ? view.setTOTWItem(this._item) : t ? view.setShowOffItem(this._item) : view.setItem(this._item, i), this._item.getYear() < enums.Year.ASSET && view.setNonCurrentYearItem();
        var s = gSettingsModel.isTradingEnabled() && !gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET) && gUserModel.hasTradeAccess() && !i && this._item.isValid() && !this._item.untradeable && !t;
        this._quickListPanel.setItem(this._item);
        var o = this._quickListPanel.getView();
        s && (view.appendQuickList(o.getRoot()), o.setTitle(gLocalization.lText("infopanel.label.quickList"))), this._quickListPanel.getView().toggleDisplay(s)
    }
}, controllers.squads.SlotActionPanel.prototype.setIterator = function setIterator(iterator) {
    this._iterator = iterator
}, controllers.squads.SlotActionPanel.prototype._removeItemFromSquad = function _removeItemFromSquad() {
    var t = this._challenge ? this._challenge.squad : this._squad;
    t.removeItemFromSlot(this._squad.getSlot(this._item).getIndex()), this._challenge ? services.SBC.saveChallenge(this._challenge) : t.save()
}, controllers.squads.SlotActionPanel.prototype._onDiscard = function _onDiscard(sender, event, data) {
    var view = this.getView();
    view.setInteractionState(!1), utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.CONFIRM_DISCARD, [gLocalization.lNum(this._item.discardValue)], function _onDiscardConfirm() {
        services.Item.discard(this._item).observe(this, function(t, data) {
            t.unobserve(this), data.success ? (this._removeItemFromSquad(), this.onDiscard.notify(this._item)) : services.Notification.queue([gLocalization.lText("notification.error.item.discard"), enums.UINotificationType.NEGATIVE]), view.setInteractionState(!0)
        })
    }.bind(this), view.setInteractionState.bind(view, !0))
}, controllers.squads.SlotActionPanel.prototype._onMove = function _onMove(sender, event, data) {
    var t = event === enums.UIItemActionEvent.SEND_TO_TRANSFERS ? enums.FUTItemPile.TRANSFER : enums.FUTItemPile.CLUB;
    services.Item.move(this._item, t).observe(this, function(i, data) {
        if (i.unobserve(this), data.success) {
            var s = "";
            s = t === enums.FUTItemPile.TRANSFER ? this._item.isManager() ? gLocalization.lText("notification.manager.toTradePile") : this._item.isPlayer() ? gLocalization.lText("notification.player.toTradePile") : gLocalization.lText("notification.item.oneToTradePile") : gLocalization.lText("notification.item.oneToClub"), services.Notification.queue([s, enums.UINotificationType.NEUTRAL]), this._removeItemFromSquad(), this.onMove.notify(this._item)
        } else services.Notification.queue([gLocalization.lText("notification.item.moveFailed"), enums.UINotificationType.NEGATIVE])
    })
}, controllers.squads.SlotActionPanel.prototype._onRemove = function _onRemove(sender, event, data) {
    this._removeItemFromSquad(), this.onRemove.notify(this._item)
}, controllers.squads.SlotActionPanel.prototype._onApply = function _onApply(sender, event, data) {
    var t = new controllers.items.ConsumableCategories;
    this._challenge ? t.initWithSBCChallenge(this._challenge, this._slot) : this._squad ? t.initWithSquad(this._squad, this._slot) : this._item ? t.initWithItem(this._item) : t.init(), this.getNavigationController().pushViewController(t, !0)
}, controllers.squads.SlotActionPanel.prototype._onAddSwap = function _onAddSwap(sender, event, data) {
    var t = new controllers.club.ClubSearchFilters,
        i = this.getNavigationController();
    if (i) {
        if (this._challenge ? t.initWithSBCChallenge(this._challenge, this._iterator) : this._squad ? t.initWithSquad(this._squad, this._iterator) : this._item ? t.initWithItem(this._item) : t.init(), this._squad) {
            var s = repositories.User.getCurrent().squadSearchCriteria,
                o = this._squad.getSlot(this._slot);
            if (s && o.getIndex() >= 0) {
                var l = o.getItem().isManager();
                s.type = l ? enums.SearchType.STAFF : enums.SearchType.PLAYER, s.position = o.getGeneralPositionName() || enums.SearchType.ANY, this._squad.isGenerations() || (s.year = enums.SearchType.ANY), t.setSearchCriteria(s)
            }
        }
        t.onItemChange.observe(this, this._eOnItemChange), i.pushViewController(t, !0)
    }
}, controllers.squads.SlotActionPanel.prototype._eSearchMarket = function _eSearchMarket(sender, event, data) {
    var t = {
        itemData: this._item,
        searchCriteria: new transferobjects.SearchCriteria
    };
    t.searchCriteria.type = this._item.getSearchType(), t.searchCriteria.defId = this._item.getDefId(), NavManager.requestChildScreen(Screens.getView("COMPARE_PRICE"), t)
}, controllers.squads.SlotActionPanel.prototype._eBioSelected = function _eBioSelected(sender, event, data) {
    this.onPlayerBio.notify()
}, controllers.squads.SlotActionPanel.prototype._eOnItemChange = function _eOnItemChange(sender, t) {
    this.onItemChange.notify(t)
}, NamespaceManager.Register("views.items"), views.items.SBCBrickActionPanel = function SlotActionPanelView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.items.SBCBrickActionPanel, FUIView), views.items.SBCBrickActionPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("flat"), t.classList.add("layout-article"), t.classList.add("SBCBrickActionPanel"), this.__list = document.createElement("ul"), this.$_list = $(this.__list), this.__list.classList.add("l-standard"), this.__list.classList.add("l-list"), this.__list.classList.add("panel-list-alternating"), t.appendChild(this.__list), this.__help = document.createElement("p"), this.$_help = $(this.__help), this.__help.classList.add("secondary"), t.appendChild(this.__help), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.items.SBCBrickActionPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__list = null, this.$_list = null, this.__help = null, this.$_help = null
}, views.items.SBCBrickActionPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.items.SBCBrickActionPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.items.SBCBrickActionPanel.prototype.render = function render(t) {
    this.$_help.text(gLocalization.lText("sbc.custombrick.help"));
    var item = t.getItem();
    this._generateRow(enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID, item.leagueId, this.$_list), this._generateRow(enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID, item.teamId, this.$_list), this._generateRow(enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID, item.nationId, this.$_list)
}, views.items.SBCBrickActionPanel.prototype._generateRow = function _generateImageLoader(key, value, parent) {
    var t, valueText;
    switch (key) {
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
            t = "controlbar.cardview.Nationality", valueText = 0 === value ? gLocalization.lText("roles.defaultRole") : utils.FUTLocalization.getNationNameById(value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
            t = "controlbar.cardview.League", valueText = 0 === value ? gLocalization.lText("roles.defaultRole") : utils.FUTLocalization.getLeagueNameByID(value, enums.Year.ASSET);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
            t = "controlbar.cardview.Club", valueText = 0 === value ? gLocalization.lText("roles.defaultRole") : utils.FUTLocalization.getTeamAbb15ByID(value, enums.Year.ASSET);
            break;
        default:
            utils.Debug.Assert(!1, "[views.squads.Slot] | Reached default case: " + key)
    }
    var i = $(document.createElement("li")),
        s = $(document.createElement("h1")).addClass(enums.UIText.SECONDARY),
        o = $(document.createElement("h2"));
    s.text(gLocalization.lText(t)), o.text(valueText), i.append(s), i.append(o), parent.append(i)
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SlotDetails = function SlotDetailsController() {
    FUIViewController.call(this), this._panel = null, this._panelView = null, this._secondaryNavigationButton = new views.buttons.NavigationButton, this._viewmodel = null, this._squad = null, this._challenge = null, this.onSlotChange = new FUTObservable, Object.defineProperty(this, "onSlotChange", {
        writable: !1
    })
}, utils.JS.inherits(controllers.squads.SlotDetails, FUIViewController), controllers.squads.SlotDetails.prototype.init = function init() {
    this.initialized || (this.superclass(), this._renderPanel(), this._secondaryNavigationButton.init())
}, controllers.squads.SlotDetails.prototype.initWithItemIterator = function initWithItemIterator(iterator) {
    if (!this.initialized) {
        utils.Debug.Assert(iterator instanceof FUTIterator, "Initialization expected an instance of FUTIterator"), this._viewmodel = iterator, this.init();
        var view = this.getView();
        view.addTarget(this, this._ePrevItem, enums.UIItemNavigationEvent.PREV), view.addTarget(this, this._eNextItem, enums.UIItemNavigationEvent.NEXT)
    }
}, controllers.squads.SlotDetails.prototype.initWithSquad = function initWithSquad(t, i) {
    if (!this.initialized) {
        utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity"), this._squad = t, this._squad.isShowOff() && isPhone() && gHeader.setViewState(components.Header.BACK_BUTTON);
        var s = this._createIterator(i);
        this.initWithItemIterator(s)
    }
}, controllers.squads.SlotDetails.prototype.initWithSBCChallenge = function initWithSBCChallenge(challenge, t) {
    if (!this.initialized) {
        utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected a challenge entity"), utils.Debug.Assert(utils.JS.isNumber(t), "Initialization expected a numeric slot index"), this._challenge = challenge, this._squad = this._challenge.squad;
        var i = this._createIterator(t);
        this.initWithItemIterator(i), this.getView().getRoot().addClass("sbc")
    }
}, controllers.squads.SlotDetails.prototype.getNavigationTitle = function getNavigationTitle() {
    return gLocalization.lText("extendedPlayerInfo.header")
}, controllers.squads.SlotDetails.prototype.getNavigationItem = function getNavigationItem() {
    return this._secondaryNavigationButton
}, controllers.squads.SlotDetails.prototype._createIterator = function _createIterator(index) {
    var t = new FUTIterator(this._getSlots());
    return utils.JS.isNumber(index) && t.setIndex(t.indexOf(function(t) {
        return t.getIndex() === index
    })), t
}, controllers.squads.SlotDetails.prototype._getSlots = function _getSlots() {
    function _generateSlotArray(t, i, s, o) {
        var l = t.getFieldPlayers().reverse().concat(t.getSubPlayers(), t.getReservePlayers());
        return i && l.unshift(t.getManager()), s && (l = l.filter(function(t) {
            return t.isValid()
        })), o && (l = l.filter(function(i) {
            return -1 === t.simpleBrickIndices.indexOf(i.getIndex())
        })), l
    }
    return this._squad.isTOTW() ? _generateSlotArray(this._squad, !1, !0, !1) : this._squad.isShowOff() ? _generateSlotArray(this._squad, !0, !0, !1) : this._squad.isGenerations() ? _generateSlotArray(this._squad, !1, !1, !1) : this._squad.isSBC() ? _generateSlotArray(this._squad, !1, !1, !0) : _generateSlotArray(this._squad, !0, !1, !1)
}, controllers.squads.SlotDetails.prototype.dealloc = function dealloc() {
    this.superclass(), this._panel ? (this._panel.dealloc(), this._panel = null) : this._panelView && (this._panelView.dealloc(), this._panelView = null), this.onSlotChange.dealloc(), this._secondaryNavigationButton.dealloc(), this.onSlotChange = null, this._viewmodel = null, this._squad = null, this._challenge = null, this._secondaryNavigationButton = null
}, controllers.squads.SlotDetails.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._renderView(), this.getNavigationController().setNavigationVisibility(!isPhone())
}, controllers.squads.SlotDetails.prototype.viewWillDisappear = function viewWillDisappear() {
    this.superclass(), this.getView().teardownCarousel()
}, controllers.squads.SlotDetails.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.items.ItemDetails
}, controllers.squads.SlotDetails.prototype._getViewIteratorData = function _getViewIteratorData() {
    var index = this._viewmodel.getIndex(),
        t = this._viewmodel.get(index - 1),
        i = this._viewmodel.current(),
        next = this._viewmodel.get(index + 1);
    return {
        slots: {
            current: i || null,
            prev: t || null,
            next: next || null
        },
        items: {
            current: i.getItem(),
            prev: t ? t.getItem() : null,
            next: next ? next.getItem() : null
        }
    }
}, controllers.squads.SlotDetails.prototype._renderView = function _renderView() {
    var view = this.getView(),
        data = this._getViewIteratorData();
    this._renderPanel(), view.render(data.items.current, data.items.prev, data.items.next), view.setSlotName(this._getSlotName(data.slots.current)), view.setSlotChemistry(data.slots.current, data.slots.prev, data.slots.next)
}, controllers.squads.SlotDetails.prototype._renderPanel = function _renderPanel() {
    this._panel ? (this.removeChildViewController(this._panel), this._panel.dealloc(), this._panel = null, this._panelView = null) : this._panelView && (this._panelView.dealloc(), this._panelView = null);
    var t = this._viewmodel.current();
    if (utils.JS.isValid(t) && t.isCustomBrick()) this._panelView = new views.items.SBCBrickActionPanel, this._panelView.render(this._viewmodel.current());
    else {
        var index = utils.JS.isValid(t) ? t.getIndex() : 0;
        this._panel = new controllers.squads.SlotActionPanel, this._panelView = this._panel.getView(), this.addChildViewController(this._panel), this._challenge ? this._panel.initWithSBCChallenge(this._challenge, index) : this._squad ? this._panel.initWithSquad(this._squad, index) : this._panel.init(), this._panel.setIterator(this._viewmodel), this._panel.onDiscard.observe(this, this._eItemRemoved), this._panel.onMove.observe(this, this._eItemRemoved), this._panel.onRemove.observe(this, this._eItemRemoved), this._panel.onPlayerBio.observe(this, this._onPlayerBio), this._panel.onItemChange.observe(this, this._eSlotChange)
    }
    this.getView().appendPanel(this._panelView)
}, controllers.squads.SlotDetails.prototype.setSquad = function setSquad(t) {
    this._challenge || (this._squad = t, this._viewmodel = this._createIterator(0))
}, controllers.squads.SlotDetails.prototype.setSlot = function setSlot(index) {
    utils.Debug.Assert(this._viewmodel instanceof FUTIterator, "Attempted to update iterator index when iterator doesn't exist."), this._viewmodel && (this._viewmodel.current().getIndex() !== index && (this._viewmodel.setIndex(this._viewmodel.indexOf(function(t) {
        return t.getIndex() === index
    })), this._renderPanel()), this._renderView())
}, controllers.squads.SlotDetails.prototype._getSlotName = function _getSlotName(t) {
    var i = t.getIndex();
    if (i < entities.Squad.FIELD_PLAYERS) return utils.FUTLocalization.getLocalizedPositionStringById(t.getGeneralPosition());
    if (this._challenge) return i >= entities.Squad.FIELD_PLAYERS ? gLocalization.lText("dock.label.workArea") : "";
    if (this._squad) {
        if (i === entities.Squad.MANAGER_SLOT_INDEX) return gLocalization.lText("cards.cardfront.manager");
        if (i >= entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS) return gLocalization.lText("dock.label.reserves");
        if (i >= entities.Squad.FIELD_PLAYERS) return gLocalization.lText("dock.label.substitutes")
    }
    return ""
}, controllers.squads.SlotDetails.prototype._eItemRemoved = function _eItemRemoved(t) {
    if (this._squad) {
        var index = this._viewmodel.getIndex();
        this._viewmodel.resetCollection(this._getSlots()), this._viewmodel.setIndex(index), this._renderView()
    } else if (this._viewmodel.remove(this._viewmodel.getIndex()), this._viewmodel.length > 0) {
        var view = this.getView(),
            data = this._getViewIteratorData();
        view.removeCurrent(data.items.current, data.items.prev, data.items.next), view.setSlotName(this._getSlotName(data.slots.current)), view.setSlotChemistry(data.slots.current, data.slots.prev, data.slots.next)
    } else this.getNavigationController().popViewController(!0)
}, controllers.squads.SlotDetails.prototype._eSlotChange = function _eSlotChange(sender, t) {
    this._viewmodel.setIndex(this._viewmodel.indexOf(function(i) {
        return i.getIndex() === t.getIndex()
    })), this.onSlotChange.notify({
        slot: this._viewmodel.current(),
        showSlotDetails: !1
    })
}, controllers.squads.SlotDetails.prototype._ePrevItem = function _ePrevItem(sender, event) {
    if (!this._viewmodel.startOfList) {
        var view = this.getView(),
            t = this._viewmodel.previous(),
            i = this._viewmodel.get(this._viewmodel.getIndex() - 1),
            next = this._viewmodel.get(this._viewmodel.getIndex() + 1);
        this._renderPanel(), this.onSlotChange.notify({
            slot: t
        }), view.showPrev(i ? i.getItem() : null), view.setSlotName(this._getSlotName(t)), view.setSlotChemistry(t, i, next)
    }
}, controllers.squads.SlotDetails.prototype._eNextItem = function _eNextItem(sender, event) {
    if (!this._viewmodel.endOfList) {
        var view = this.getView(),
            t = this._viewmodel.next(),
            i = this._viewmodel.get(this._viewmodel.getIndex() - 1),
            next = this._viewmodel.get(this._viewmodel.getIndex() + 1);
        this._renderPanel(), this.onSlotChange.notify({
            slot: t
        }), view.showNext(next ? next.getItem() : null), view.setSlotName(this._getSlotName(t)), view.setSlotChemistry(t, i, next)
    }
}, controllers.squads.SlotDetails.prototype._onPlayerBio = function _onPlayerBio(t) {
    var item = this._viewmodel.current().getItem();
    if (item.isValid() && item.isPlayer() && utils.JS.isValid(item.getMetaData())) {
        var i = new controllers.items.PlayerBio;
        i.initWithItem(item), this.getNavigationController().pushViewController(i, !0)
    } else utils.Debug.Assert(!1, "controllers.items.PlayerBio::init. Requires a player item with proper meta data to be initialized with."), services.Notification.queue([gLocalization.lText("playerbio.unavailable"), enums.UINotificationType.NEGATIVE])
}, NamespaceManager.Register("controllers.navigation"), controllers.navigation.SquadItemDetails = function SquadItemDetailNavigationController(t, toolbar) {
    FUINavigationController.call(this, t, toolbar), this._squad = null, this._challenge = null, this.onSlotChange = new FUTObservable, Object.defineProperty(this, "onSlotChange", {
        writable: !1
    }), this.onSearchStarted = new FUTObservable, Object.defineProperty(this, "onSearchStarted", {
        writable: !1
    }), this.onSearchEnded = new FUTObservable, Object.defineProperty(this, "onSearchEnded", {
        writable: !1
    })
}, utils.JS.inherits(controllers.navigation.SquadItemDetails, FUINavigationController), controllers.navigation.SquadItemDetails.prototype.initWithSquad = function initWithSquad(t, i) {
    utils.Debug.Assert(t instanceof entities.Squad, "Initialization expected a squad entity."), this._squad = t, this.getView().toggleClass("generations", this._squad.isGenerations());
    var s = this._getRootControllerInstance();
    s.initWithSquad(this._squad, i), s.onSlotChange.observe(this, function(t, data) {
        this.onSlotChange.notify(data)
    }), this.initWithRootController(s)
}, controllers.navigation.SquadItemDetails.prototype.initWithSBCChallenge = function initWithSBCChallenge(challenge, t) {
    utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected a challenge entity."), utils.Debug.Assert(utils.JS.isNumber(t), "Initialization expected a number for current squad slot."), this._challenge = challenge, this._squad = this._challenge.squad;
    var i = this._getRootControllerInstance();
    i.initWithSBCChallenge(this._challenge, t), i.onSlotChange.observe(this, function(t, data) {
        this.onSlotChange.notify(data)
    }), this.initWithRootController(i)
}, controllers.navigation.SquadItemDetails.prototype.dealloc = function dealloc() {
    this.superclass(), this.onSlotChange.dealloc(), this.onSearchStarted.dealloc(), this.onSearchEnded.dealloc(), this.onSlotChange = null, this._squad = null, this._challenge = null, this.onSearchStarted = null, this.onSearchEnded = null
}, controllers.navigation.SquadItemDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new controllers.squads.SlotDetails
}, controllers.navigation.SquadItemDetails.prototype.setSquad = function setSquad(t) {
    this._challenge || (this._squad = t, this.getRootController().setSquad(this._squad))
}, controllers.navigation.SquadItemDetails.prototype.setSlot = function setSlot(index) {
    this.popToRootViewController(), this.getRootController().setSlot(index)
}, controllers.navigation.SquadItemDetails.prototype.getExitNavigationButton = function getExitNavigationButton() {
    return this.getRootController().getNavigationItem()
}, controllers.navigation.SquadItemDetails.prototype._showController = function _showController(t, i) {
    this.superclass(t, i), t instanceof controllers.club.ClubSearchFilters ? this.onSearchStarted.notify() : t instanceof controllers.squads.SlotDetails && this.onSearchEnded.notify()
}, controllers.squads.ShowOffSquadLandscape = function ShowOffSquadViewController() {
    controllers.squads.BaseSquadLandscape.call(this), this._panelController = new controllers.squads.ShowOffSquadActions
}, utils.JS.inherits(controllers.squads.ShowOffSquadLandscape, controllers.squads.BaseSquadLandscape), controllers.squads.ShowOffSquadLandscape.prototype.init = function init() {
    this.superclass(), this._squad ? this._panelController.initWithSquad(this._squad) : this._panelController.init(), this.addChildViewController(this._panelController)
}, controllers.squads.ShowOffSquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._panelController && this._panelController.dealloc(), this._panelController = null
}, controllers.squads.ShowOffSquadLandscape.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._panelController
}, controllers.squads.ShowOffSquadLandscape.prototype._setupSquadOverview = function _setupSquadOverview() {
    if (this._squad) {
        var t = this._overviewController.getView();
        t.getPitch().addTarget(this, this._ePitchTapped, enums.Event.TAP), t.addTarget(this, this._eSlotSelected, enums.UISquadPitchEvent.SLOT_SELECT)
    }
}, controllers.squads.ShowOffSquadLandscape.prototype._generateSquadOverview = function _generateSquadOverview() {
    var t = new controllers.squads.ShowOffSquadOverview;
    return this._squad ? t.initWithSquad(this._squad) : t.init(), t
}, controllers.squads.ShowOffSquadLandscape.prototype._eSlotSelected = function _eSlotSelected(sender, event, data) {
    utils.Debug.Assert(this._squad instanceof entities.Squad, "Squad entity has gone missing.");
    var index = data && utils.JS.isNumber(data.slotIndex) ? data.slotIndex : 0;
    this._squad.getSlot(index).isValid() && this._showSlotDetails(index)
}, Screens.Register("SHOW_OFF_SQUAD", "ShowOffSquad", Screens.APP_SECTION.SQUADS), pages.ShowOffSquad = function() {
    pages.ScreenBase.call(this);
    var t = isPhone() ? components.Header.UNAUTHENTICATED | components.Header.HAMBURGER_BUTTON : components.Header.UNAUTHENTICATED | components.Header.CURRENCY;
    this.updateHeader(t, ""), this._generate()
}, utils.JS.inherits(pages.ShowOffSquad, pages.ScreenBase), pages.ShowOffSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("ShowOff"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ShowOffSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ShowOffSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ShowOffSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.ShowOffSquadController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null, this._viewmodel = null
}, utils.JS.inherits(pages.controllers.ShowOffSquadController, pages.controllers.ScreenControllerBase), pages.controllers.ShowOffSquadController.prototype.init = function init() {}, pages.controllers.ShowOffSquadController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.ShowOffSquadController.superClass_.destroy.call(this)
}, pages.controllers.ShowOffSquadController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    var i = data.showOffDTO;
    isPhone() ? this._controller = new controllers.squads.ShowOffSquadOverview : this._controller = new controllers.squads.ShowOffSquadLandscape;
    var s = i.squad;
    gHeader.setTitle(s.getName()), gHeader.renderUnauthenticatedPersona(i.clubName, i.estDate), gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, NavManager.getCurrentScreen().getScreenId()), this._viewmodel = new viewmodels.Squad(s), this._controller.initWithSquad(s), this.cleanupScreenStack(i), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.ShowOffSquadController.prototype.onScreenStarted = function onScreenStarted() {
    pages.controllers.ShowOffSquadController.superClass_.onScreenStarted.call(this), gHeader.onHamburgerPress.observe(this, this._onHamburgerPressed)
}, pages.controllers.ShowOffSquadController.prototype.onScreenStopped = function onScreenStopped() {
    gHeader.onHamburgerPress.unobserve(this)
}, pages.controllers.ShowOffSquadController.prototype.onAppResumed = function onAppResumed() {
    repositories.Squad.hasExternalShowOffSquad() && services.Squad.loadShowOffSquad().observe(this, function(t, i) {
        if (t.unobserve(this), i.success) {
            var s = i.showOffDTO.squad;
            this._controller.setSquad(s), this.cleanupScreenStack(i.showOffDTO)
        }
    })
}, pages.controllers.ShowOffSquadController.prototype.cleanupScreenStack = function cleanupScreenStack(t) {
    var i = gAuthenticationModel.isFullyAuthenticated() ? Screens.getView("HOME") : Screens.getView("LOGIN");
    NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, i), NavManager.pushScreenOntoStack(i, this.getView().getScreenId(), {
        showOffDTO: t
    })
}, pages.controllers.ShowOffSquadController.prototype._onHamburgerPressed = function _onHamburgerPressed() {
    NavManager.requestChildScreen(Screens.getView("SHOW_OFF_SQUAD_DETAILS"), {
        squad: this._viewmodel.squad
    })
}, Screens.Register("TOTW_SQUAD_LIST", "ViewListTOTWSquads", Screens.APP_SECTION.TOTW, "TOTW List"), pages.ViewListTOTWSquads = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.TOTWHistory")), this._generate()
}, utils.JS.inherits(pages.ViewListTOTWSquads, pages.ScreenBase), pages.ViewListTOTWSquads.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ViewListTOTWSquads.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ViewListTOTWSquads.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ViewListTOTWSquads.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.ViewListTOTWSquadsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.squads.ViewListTOTWSquads
}, utils.JS.inherits(pages.controllers.ViewListTOTWSquadsController, pages.controllers.ScreenControllerBase), pages.controllers.ViewListTOTWSquadsController.prototype.init = function init() {
    pages.controllers.ViewListTOTWSquadsController.superClass_.init.call(this), this._controller.init()
}, pages.controllers.ViewListTOTWSquadsController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.ViewListTOTWSquadsController.superClass_.destroy.call(this)
}, pages.controllers.ViewListTOTWSquadsController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.ViewListTOTWSquadsController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, NamespaceManager.Register("viewmodels"), viewmodels.SquadList = function(t) {
    FUTIterator.call(this, t)
}, utils.JS.inherits(viewmodels.SquadList, FUTIterator), viewmodels.SquadList.prototype.getSquads = function(type) {
    return this._collection.reduce(function(result, t) {
        return t.getType() === type && result.push(t), result
    }, [])
}, viewmodels.SquadList.prototype.getSquadNames = function() {
    return this._collection.map(function(t) {
        return t.getName()
    })
}, NamespaceManager.Register("components"), components.ListDataSquadStats = function() {
    this._generate(), this.$_labelChemistry.html(gLocalization.lText("squads.chemistry")), this.$_labelRating.html(gLocalization.lText("squads.rating"))
}, components.ListDataSquadStats.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("squadSummaryStatsRow");
        var i = document.createElement("div");
        i.classList.add("rating"), this.__labelRating = document.createElement("span"), this.$_labelRating = $(this.__labelRating), this.__labelRating.classList.add("secondary"), this.__labelRating.classList.add("squadRatingLbl"), i.appendChild(this.__labelRating), this._ratingStars = new components.RatingStars, i.appendChild(this._ratingStars.getRootElement()), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("chemistry"), this.__labelChemistry = document.createElement("span"), this.$_labelChemistry = $(this.__labelChemistry), this.__labelChemistry.classList.add("secondary"), this.__labelChemistry.classList.add("squadChemistryLbl"), s.appendChild(this.__labelChemistry), this._chemistryBar = new components.ChemistryBar, s.appendChild(this._chemistryBar.getRootElement()), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListDataSquadStats.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__labelRating = null, this.$_labelRating = null, this._ratingStars.destroy(), this._ratingStars = null, this.__labelChemistry = null, this.$_labelChemistry = null, this._chemistryBar.destroy(), this._chemistryBar = null
}, components.ListDataSquadStats.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListDataSquadStats.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListDataSquadStats.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.ListDataSquadStats.prototype.render = function(t) {
    this._chemistryBar.setChemistry(t.getChemistry()), this._ratingStars.setRating(t.getRating())
}, components.ListDataSquadStats.prototype.update = function(t) {
    this.render(t)
}, NamespaceManager.Register("components"), components.ListRowSquad = function UTSquadListRowView() {
    FUITargetActionView.call(this), this._data = null, this._dataComponent = null, this._hasAction = !1, this._tapCallback = null, this._generate()
}, utils.JS.inherits(components.ListRowSquad, FUITargetActionView), components.ListRowSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("li");
        t.classList.add("listFUTSquad"), this._btnAction = new components.ImageButton, this._btnAction.getRootElement().classList.add("btnAction"), t.appendChild(this._btnAction.getRootElement()), this.__content = document.createElement("div"), this.$_content = $(this.__content), this.__content.classList.add("rowContent");
        var i = document.createElement("div");
        i.classList.add("active-cap");
        var s = document.createElement("div");
        s.classList.add("label-container");
        var o = document.createElement("span");
        o.classList.add("icon_squad"), o.classList.add("fut_icon"), s.appendChild(o), this.__activeLabel = document.createElement("span"), this.$_activeLabel = $(this.__activeLabel), this.__activeLabel.classList.add("label"), s.appendChild(this.__activeLabel), i.appendChild(s), this.__content.appendChild(i);
        var l = document.createElement("header");
        this.__name = document.createElement("h1"), this.$_name = $(this.__name), this.__name.classList.add("name"), l.appendChild(this.__name), this.__content.appendChild(l), this.__dataContainer = document.createElement("div"), this.$_dataContainer = $(this.__dataContainer), this.__dataContainer.classList.add("data-container");
        var u = document.createElement("div");
        u.classList.add("formation-container"), this.__formationLabel = document.createElement("span"), this.$_formationLabel = $(this.__formationLabel), this.__formationLabel.classList.add("secondary"), this.__formationLabel.classList.add("formation-label"), u.appendChild(this.__formationLabel), this.__formation = document.createElement("span"), this.$_formation = $(this.__formation), this.__formation.classList.add("formation"), u.appendChild(this.__formation), this.__dataContainer.appendChild(u), this.__content.appendChild(this.__dataContainer), t.appendChild(this.__content), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListRowSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._btnAction.destroy(), this._btnAction = null, this.__content = null, this.$_content = null, this.__activeLabel = null, this.$_activeLabel = null, this.__name = null, this.$_name = null, this.__dataContainer = null, this.$_dataContainer = null, this.__formationLabel = null, this.$_formationLabel = null, this.__formation = null, this.$_formation = null
}, components.ListRowSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListRowSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListRowSquad.prototype.init = function init() {
    this.superclass(), this.setInteractionState(!0)
}, components.ListRowSquad.prototype.dealloc = function dealloc() {
    this._data = null, this.superclass()
}, components.ListRowSquad.prototype.setData = function(data) {
    this._data = data
}, components.ListRowSquad.prototype.getData = function() {
    return this._data
}, components.ListRowSquad.prototype.setDataComponent = function(t) {
    utils.JS.isValid(this._dataComponent) && this._dataComponent.getRoot().remove(), this._dataComponent = t, this.$_dataContainer.append(this._dataComponent.getRoot())
}, components.ListRowSquad.prototype.setAction = function(style, t) {
    utils.Debug.Assert(!this._hasAction, "[ListRowSquad::setAction] Action already set."), this._hasAction || (this.getRoot().addClass(enums.UIListRowState.HAS_ACTION), this._btnAction.addClass(style), this._btnAction.addTarget(this, t, enums.Event.TAP), this._btnAction.init(), this._hasAction = !0)
}, components.ListRowSquad.prototype.setSelected = function setSelected(value) {
    this.getRoot().toggleClass(enums.UIListRowState.SELECTED, value)
}, components.ListRowSquad.prototype.render = function render() {
    if (this.__name.textContent = this._data.getName(), this.__formation.textContent = this._data.getFormation().getDisplayName(), this.__activeLabel.textContent = gLocalization.lText("navbar.label.activesquad"), this.__formationLabel.textContent = gLocalization.lText("squads.formation"), !utils.JS.isValid(this._dataComponent)) {
        this._dataComponent = new components.ListDataSquadStats;
        var t = this._dataComponent.getRootElement();
        t.classList.add(enums.UIFlexible.LG), this.__dataContainer.appendChild(t)
    }
    var root = this.getRootElement();
    this._data.isTOTW() || repositories.Squad.getActiveSquadId() !== this._data.getId() ? root.classList.remove(enums.UIListRowState.IS_ACTIVE_SQUAD) : root.classList.add(enums.UIListRowState.IS_ACTIVE_SQUAD), this._dataComponent.render(this._data)
}, components.ListRowSquad.prototype.setTapCallback = function(t) {
    this._tapCallback = t, DOMKit.addClass(this.__content, enums.UIListRowState.HAS_TAP_CALLBACK)
}, components.ListRowSquad.prototype._touchStarted = function _touchStarted(e) {
    this.superclass(), e.target === this.__content && DOMKit.addClass(this.__content, enums.UIState.ACTIVE)
}, components.ListRowSquad.prototype._touchMoved = function _touchMoved(e) {
    this.superclass(), e.target === this.__content && DOMKit.removeClass(this.__content, enums.UIState.ACTIVE)
}, components.ListRowSquad.prototype._touchEnded = function _touchEnded(e) {
    this.superclass(), e.target === this.__content && DOMKit.removeClass(this.__content, enums.UIState.ACTIVE)
}, components.ListRowSquad.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), utils.JS.isFunction(this._tapCallback) && this._tapCallback(this._data)
}, NamespaceManager.Register("views.lists"), views.lists.SectionedSquadList = function SectionedSquadListView() {
    views.lists.SectionedItemList.call(this), this._generate()
}, utils.JS.inherits(views.lists.SectionedSquadList, views.lists.SectionedItemList), views.lists.SectionedSquadList.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("layout-article"), t.classList.add("sectioned-item-list"), this._header = new components.SectionHeader, t.appendChild(this._header.getRootElement()), this.__list = document.createElement("ul"), this.$_list = $(this.__list), this.__list.classList.add("flush-bottom"), this.__list.classList.add("itemList"), t.appendChild(this.__list), this.__footer = document.createElement("ul"), this.$_footer = $(this.__footer), this.__footer.classList.add("flush-top"), t.appendChild(this.__footer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.lists.SectionedSquadList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._header.destroy(), this._header = null, this.__list = null, this.$_list = null, this.__footer = null, this.$_footer = null
}, views.lists.SectionedSquadList.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.lists.SectionedSquadList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.lists.SectionedSquadList.prototype._generateListRow = function _generateListRow(data, t) {
    var i = new components.ListRowSquad;
    return i.init(), i.setData(data), utils.JS.isFunction(t) && i.setTapCallback(t), i
}, views.lists.SectionedSquadList.prototype.render = function render() {
    0 === this._listRows.length ? this._showEmptyMessage() : this._listRows.forEach(function(t) {
        t instanceof components.ListRowSquad && (t.render(), this.__list.appendChild(t.getRootElement()))
    }, this)
}, communication.SquadSaveDelegate = function(t) {
    communication.BaseFUTDelegate.call(this);
    var i = t.getType() === enums.SquadType.GENERATIONS ? enums.UserSquadId.GENERATIONS : t.getId(),
        s = t.getManager().getItem(),
        o = {
            id: t.getId(),
            squadName: t.getName(),
            chemistry: t.getChemistry(),
            manager: [{
                id: s.id,
                dream: s.concept
            }],
            formation: t.getFormation().getName(),
            players: t.getPlayers().map(function(t) {
                var item = t.getItem();
                return {
                    index: t.getIndex(),
                    kitNumber: t.getKitNumber(),
                    itemData: {
                        id: item.id,
                        dream: item.concept
                    }
                }
            })
        };
    this.setData(o), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "squad/" + i, models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.EMPTY, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SquadSaveDelegate, communication.BaseFUTDelegate), communication.SquadSaveDelegate.prototype.onFail = function(errorCode) {
    this._networkError = this.generateDefaultNetworkError(errorCode);
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    this._networkError.isCodeValid() || (this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.error.activesquad.SaveFailedTitle", "popup.error.activesquad.SaveFailed")), this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, NamespaceManager.Register("entities"), entities.NullSquadSlot = function FUTNullSquadSlot() {
    entities.SquadSlot.call(this, -1, null)
}, utils.JS.inherits(entities.NullSquadSlot, entities.SquadSlot), entities.NullSquadSlot.prototype.getIndex = function() {
    return -1
}, entities.NullSquadSlot.prototype.setItem = function(item) {}, entities.NullSquadSlot.prototype.getChemistry = function() {
    return 0
}, entities.NullSquadSlot.prototype.setChemistry = function(value) {}, entities.NullSquadSlot.prototype.setPosition = function(position) {}, entities.NullSquadSlot.prototype.getGeneralPosition = function() {
    return -1
}, entities.NullSquadSlot.prototype.getUniquePosition = function() {
    return -1
}, entities.NullSquadSlot.prototype.getManagerBonus = function() {
    return 0
}, entities.NullSquadSlot.prototype.setManagerBonus = function(t) {}, entities.NullSquadSlot.prototype.getPositionBonus = function() {
    return 0
}, entities.NullSquadSlot.prototype.hasChemistry = function() {
    return !1
}, entities.NullSquadSlot.prototype.compareTo = function(t) {
    return !1
}, NamespaceManager.Register("transferobjects"), transferobjects.SquadPosition = function(data, t) {
    this._id = data.uniqueId, this._typeId = data.typeId, this._name = data.uniqueName, this._typeName = data.typeName, this._bonusLookup = t
}, transferobjects.SquadPosition.prototype.getId = function() {
    return this._id
}, transferobjects.SquadPosition.prototype.getTypeId = function() {
    return this._typeId
}, transferobjects.SquadPosition.prototype.getName = function() {
    return this._name
}, transferobjects.SquadPosition.prototype.getTypeName = function() {
    return this._typeName
}, transferobjects.SquadPosition.prototype.getBonus = function(t) {
    return this._bonusLookup[t] || 0
}, NamespaceManager.Register("transferobjects"), transferobjects.SquadLink = function(data) {
    this._posA = data.a, this._posB = data.b
}, transferobjects.SquadLink.prototype.getPositionA = function() {
    return this._posA
}, transferobjects.SquadLink.prototype.getPositionB = function() {
    return this._posB
}, transferobjects.SquadLink.prototype.containsPosition = function(t) {
    return t === this._posA || t === this._posB
}, transferobjects.SquadLink.prototype.getLinkedPosition = function(t) {
    return utils.Debug.Assert(this.containsPosition(t), "[SquadLink::getLinkedPosition] Provided position not associated with chemistry link."), t === this._posA ? this._posB : this._posA
}, NamespaceManager.Register("transferobjects"), transferobjects.SquadFormation = function(t, i, s, o) {
    this._id = t.id, this._name = t.name, this._displayName = gLocalization.lText("global.formation." + t.name), this._teamBonus = i, this._positions = o, this.generalPositions = t.generalPositionSlots, Object.defineProperty(this, "generalPositions", {
        writable: !1
    }), this.uniquePositions = t.uniquePositionSlots, Object.defineProperty(this, "uniquePositions", {
        writable: !1
    }), this._links = s
}, transferobjects.SquadFormation.prototype.getId = function() {
    return this._id
}, transferobjects.SquadFormation.prototype.getName = function() {
    return this._name
}, transferobjects.SquadFormation.prototype.getDisplayName = function() {
    return this._displayName
}, transferobjects.SquadFormation.prototype.getPositions = function() {
    return this._positions
}, transferobjects.SquadFormation.prototype.getPosition = function(index) {
    return this._positions[index] || null
}, transferobjects.SquadFormation.prototype.getLinks = function() {
    return this._links
}, transferobjects.SquadFormation.prototype.getTeamBonus = function(index) {
    return this._teamBonus[index] || 0
}, NamespaceManager.Register("transferobjects"), transferobjects.SquadChemistryLink = function(t, i, s, o) {
    this._posA = t, this._posB = i, this._chemistry = s, this._isValid = o
}, transferobjects.SquadChemistryLink.prototype.getPositionA = function() {
    return this._posA
}, transferobjects.SquadChemistryLink.prototype.getPositionB = function() {
    return this._posB
}, transferobjects.SquadChemistryLink.prototype.getChemistry = function() {
    return this._chemistry
}, transferobjects.SquadChemistryLink.prototype.isValid = function() {
    return this._isValid
}, NamespaceManager.Register("valueobjects"), valueobjects.SquadName = function() {
    this._name = ""
}, valueobjects.SquadName.MIN_LENGTH = 3, valueobjects.SquadName.MAX_LENGTH = 15, valueobjects.SquadName.prototype.get = function() {
    return this._name
}, valueobjects.SquadName.prototype.set = function(name, t) {
    name = this._makeValidLength(name), t = Array.isArray(t) ? t : [], this._hasDuplicates(name, t) ? this._name = this.getDuplicateNameString(name, t) : this._name = name
}, valueobjects.SquadName.prototype.getDuplicateNameString = function(name, t) {
    var i = gLocalization.lText("squad.name.copy").toUpperCase(),
        s = 0,
        o = name,
        l = "";
    do {
        l = i, l += s > 0 ? s.toString() + " " : " ", (l += name).length > valueobjects.SquadName.MAX_LENGTH && (l = l.slice(0, -(l.length - valueobjects.SquadName.MAX_LENGTH))), o = l, s++
    } while (this._hasDuplicates(o, t));
    return o
}, valueobjects.SquadName.prototype._hasDuplicates = function(name, t) {
    for (var i = t.length; i > 0;)
        if (--i, t[i] === name) return !0;
    return !1
}, valueobjects.SquadName.prototype._makeValidLength = function(name) {
    var n = name.trim();
    if (n.length < valueobjects.SquadName.MIN_LENGTH)
        for (; n.length < valueobjects.SquadName.MIN_LENGTH;) n += "-";
    else n.length > valueobjects.SquadName.MAX_LENGTH && (n = n.slice(0, valueobjects.SquadName.MAX_LENGTH));
    return n
}, NamespaceManager.Register("valueobjects"), valueobjects.SquadRating = function() {
    this._rating = 0
}, valueobjects.SquadRating.MIN = 0, valueobjects.SquadRating.MAX = 99, valueobjects.SquadRating.prototype.get = function() {
    return this._rating
}, valueobjects.SquadRating.prototype.set = function(t) {
    t < valueobjects.SquadRating.MIN ? t = valueobjects.SquadRating.MIN : t > valueobjects.SquadRating.MAX && (t = valueobjects.SquadRating.MAX), this._rating = t
}, NamespaceManager.Register("valueobjects"), valueobjects.SquadChemistry = function() {
    this._chemistry = 0
}, valueobjects.SquadChemistry.MIN = 0, valueobjects.SquadChemistry.MAX = 100, valueobjects.SquadChemistry.prototype.get = function() {
    return this._chemistry
}, valueobjects.SquadChemistry.prototype.set = function(t) {
    t < valueobjects.SquadChemistry.MIN ? t = valueobjects.SquadChemistry.MIN : t > valueobjects.SquadChemistry.MAX && (t = valueobjects.SquadChemistry.MAX), this._chemistry = t
}, NamespaceManager.Register("entities"), entities.Squad = function FUTSquad() {
    this.onDataUpdated = new FUTObservable, Object.defineProperty(this, "onDataUpdated", {
        writable: !1,
        enumerable: !0
    }), this._owner = 0, this._id = -1, this._captain = 0, this._name = new valueobjects.SquadName, this._formation = null, this._rating = new valueobjects.SquadRating, this._chemistry = new valueobjects.SquadChemistry, this._manager = new entities.NullSquadSlot, this._players = [], this._chemistryLinks = [], this._type = enums.SquadType.REGULAR, this._valid = !1, this._isTOTW = !1, this._isSBC = !1, this._isShowOff = !1, this._timestamp = 0, this.simpleBrickIndices = [], this.customBrickIndices = []
}, entities.Squad.TOTAL_PLAYERS_AND_MANAGER = 24, entities.Squad.TOTAL_PLAYERS = 23, entities.Squad.FIELD_PLAYERS = 11, entities.Squad.SUB_PLAYERS = 7, entities.Squad.RESERVE_PLAYERS = 5, entities.Squad.MANAGER_SLOT_INDEX = 23, entities.Squad.NATION_BONUS = 3, entities.Squad.LEAGUE_BONUS = 3, entities.Squad.CLUB_BONUS = 3, entities.Squad.MANAGER_BONUS = 1, entities.Squad.GENERATIONS_ID = 100, entities.Squad.GENERATIONS_NAME = "Generations", entities.Squad.prototype.save = function save() {
    var event = new FUTObservable,
        t = {
            success: !1,
            error: null
        },
        i = new communication.SquadSaveDelegate(this);
    return i.setImportant(!0), i.addListener(communication.BaseDelegate.SUCCESS, this, function _onSaveSuccess(sender) {
        sender.clearListenersByScope(this), t.success = !0, event.notify(t), getDefaultDispatcher().notify(enums.AppNotification.SQUAD_SAVE, this)
    }), i.addListener(communication.BaseDelegate.FAIL, this, function _onSaveFail(sender, error) {
        sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
            t.error = error, event.notify(t)
        }.bind(this))
    }), i.send(), event
}, entities.Squad.prototype.setCacheTimestamp = function setCacheTimestamp(timestamp) {
    this._timestamp = timestamp
}, entities.Squad.prototype.getOwner = function getOwner() {
    return this._owner
}, entities.Squad.prototype.getId = function getId() {
    return this._id
}, entities.Squad.prototype.getCaptain = function getCaptain() {
    return this._captain
}, entities.Squad.prototype.getManager = function getManager() {
    return this._manager
}, entities.Squad.prototype.getPlayer = function getPlayer(t) {
    return utils.Debug.Assert(this._isValidPlayerSlot(t), "[Squad::getPlayer] Invalid slot value provided."), this.getSlot(t)
}, entities.Squad.prototype.getPlayers = function getPlayers() {
    return this._players
}, entities.Squad.prototype.getFieldPlayers = function getFieldPlayers() {
    return this._players.slice(0, entities.Squad.FIELD_PLAYERS)
}, entities.Squad.prototype.getSubPlayers = function getSubPlayers() {
    return this._players.slice(entities.Squad.FIELD_PLAYERS, entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS)
}, entities.Squad.prototype.getReservePlayers = function getReservePlayers() {
    return this._players.slice(entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS, entities.Squad.TOTAL_PLAYERS)
}, entities.Squad.prototype.getFieldAndSubPlayers = function getFieldAndSubPlayers() {
    return this._players.slice(0, entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS)
}, entities.Squad.prototype.getPlayersByZone = function getPlayersByZone() {
    var t = {};
    return this._players.forEach(function(i) {
        var s = enums.SquadPositionZones[i.getUniquePosition()];
        utils.JS.isValid(s) && (t.hasOwnProperty(s) || (t[s] = []), t[s].push(i))
    }, this), t
}, entities.Squad.prototype._getSlotByUniquePosition = function _getSlotByUniquePosition(position) {
    var t = utils.JS.find(this.getFieldPlayers(), function(t) {
        return t.getUniquePosition() === position
    });
    return t || (utils.Debug.Assert(!1, "[Squad::_getPlayerByUniqueSlotId] Unable to find a slot associated with the unique position: " + position), new entities.NullSquadSlot)
}, entities.Squad.prototype.getSlot = function getSlot(identifier) {
    return utils.JS.isNumber(identifier) ? this._getSlotByIndex(identifier) : identifier instanceof entities.Item ? this._getSlotByItem(identifier) : new entities.NullSquadSlot
}, entities.Squad.prototype._getSlotByIndex = function _getSlotByIndex(index) {
    return index === entities.Squad.MANAGER_SLOT_INDEX ? this._manager : this._isValidPlayerSlot(index) ? this._players[index] : new entities.NullSquadSlot
}, entities.Squad.prototype._getSlotByItem = function _getSlotByItem(item) {
    if (this._manager.getItem().id === item.id && item.isValid()) return this._manager;
    return (item.isValid() ? utils.JS.find(this._players, function(t) {
        return t.getItem().id === item.id
    }) : utils.JS.find(this._players, function(t) {
        return t.getItem() === item
    })) || new entities.NullSquadSlot
}, entities.Squad.prototype.getSlots = function getSlots() {
    var t = this._filterBrickIndices(this._players);
    return this._manager && !this.isSBC() && (t = t.concat(this._manager)), t
}, entities.Squad.prototype.getType = function getType() {
    return this._type
}, entities.Squad.prototype.getName = function getName() {
    return this._name.get()
}, entities.Squad.prototype.getCopyName = function getCopyName(t) {
    return this._name.getDuplicateNameString(this._name.get(), t)
}, entities.Squad.prototype.setName = function setName(name, t) {
    this._name.set(name, t), this.onDataUpdated.notify({
        name: this._name.get()
    })
}, entities.Squad.prototype.getFormation = function getFormation() {
    return this._formation
}, entities.Squad.prototype.setFormation = function setFormation(t) {
    this._formation.getId() !== t.getId() && (this._formation = t, this._players.forEach(function(t) {
        t.setPosition(this._formation.getPosition(t.getIndex()))
    }, this), this.updateChemistry(), this.onDataUpdated.notify({
        slots: this._players.slice(0, entities.Squad.FIELD_PLAYERS),
        chemistry: this.getChemistry(),
        formation: this._formation
    }))
}, entities.Squad.prototype.getStarRating = function getStarRating() {
    var t = this._rating.get(),
        value = 0;
    return t <= enums.TeamStarRanges.RATING_0_0 ? value : value = t <= enums.TeamStarRanges.RATING_0_5 ? .5 : t <= enums.TeamStarRanges.RATING_1_0 ? 1 : t <= enums.TeamStarRanges.RATING_1_5 ? 1.5 : t <= enums.TeamStarRanges.RATING_2_0 ? 2 : t <= enums.TeamStarRanges.RATING_2_5 ? 2.5 : t <= enums.TeamStarRanges.RATING_3_0 ? 3 : t <= enums.TeamStarRanges.RATING_3_5 ? 3.5 : t <= enums.TeamStarRanges.RATING_4_0 ? 4 : t <= enums.TeamStarRanges.RATING_4_5 ? 4.5 : 5
}, entities.Squad.prototype.getRating = function getRating() {
    return this._rating.get()
}, entities.Squad.prototype.getChemistry = function getChemistry() {
    return this._chemistry.get()
}, entities.Squad.prototype.getChemistryLinks = function getChemistryLinks() {
    return this._chemistryLinks
}, entities.Squad.prototype.getPositionBonus = function getPositionBonus(t) {}, entities.Squad.prototype.setTOTW = function setTOTW(t) {
    this._isTOTW = t
}, entities.Squad.prototype.setSBC = function setSBC(t) {
    this._isSBC = t
}, entities.Squad.prototype.setShowOff = function setShowOff(t) {
    this._isShowOff = t
}, entities.Squad.prototype.getSlotsLinkedToPosition = function getSlotsLinkedToPosition(t) {
    var self = this;
    this._formation.getName();
    return this._chemistryLinks.reduce(function(result, link) {
        return link.getPositionA() === t ? result.push(self._getSlotByUniquePosition(link.getPositionB())) : link.getPositionB() === t && result.push(self._getSlotByUniquePosition(link.getPositionA())), result
    }, [])
}, entities.Squad.prototype.getBestAvailableEmptySlotIndex = function getBestAvailableEmptySlotIndex(t, i) {
    i = !utils.JS.isBoolean(i) || i;
    var s, o, l = 0,
        u = 0,
        index = -1;
    this.getFormation().getName();
    return this.getPlayers().filter(function getEmptySlots(t) {
        return !t.isValid()
    }).forEach(function checkIfBestSlot(h) {
        if (!(h.getIndex() < entities.Squad.FIELD_PLAYERS)) return l > 0 ? index : h.getIndex();
        if (h.setItemData(t), o = h.getPositionBonus(), i) {
            s = 0;
            var p;
            for (p = 0; p < entities.Squad.FIELD_PLAYERS; ++p) {
                var m = this._players[p];
                s += this._calculateSlotChemistry(m)
            }(s > l || o > u) && (l = s, u = o, index = h.getIndex())
        } else o > l && (l = o, index = h.getIndex());
        h.setItemData(new entities.Item)
    }, this), index
}, entities.Squad.prototype.getManagerBonusImpact = function getManagerBonusImpact(t) {
    var i = [];
    return t.isManager() && this._players.forEach(function(s) {
        this._calculateManagerBonus(s.getItem(), t) > 0 && i.push(s.getIndex())
    }, this), i
}, entities.Squad.prototype._getPlayersForCounters = function _getPlayersForCounters(t) {
    return this.getNonBrickSlots(t).filter(function(t) {
        return t.isValid()
    })
}, entities.Squad.prototype._clubCounter = function _clubCounter(t) {
    var i = {};
    return this._getPlayersForCounters(t).forEach(function incrementClubCount(t) {
        var s = t.getItem().teamId;
        i[s] ? i[s].push(t.getIndex()) : i[s] = [t.getIndex()]
    }, this), i
}, entities.Squad.prototype._leagueCounter = function _leagueCounter(t) {
    var i = {};
    return this._getPlayersForCounters(t).forEach(function incrementLeagueCount(t) {
        var s = t.getItem().leagueId;
        i[s] ? i[s].push(t.getIndex()) : i[s] = [t.getIndex()]
    }, this), i
}, entities.Squad.prototype._nationCounter = function _nationCounter(t) {
    var i = {};
    return this._getPlayersForCounters(t).forEach(function incrementNationCount(t) {
        var s = t.getItem().nationId;
        i[s] ? i[s].push(t.getIndex()) : i[s] = [t.getIndex()]
    }, this), i
}, entities.Squad.prototype._qualityCounter = function _qualityCounter(t) {
    var i = {};
    return this._getPlayersForCounters(t).forEach(function incrementTierCount(t) {
        var s = t.getItem().getTier();
        i[s] ? i[s].push(t.getIndex()) : i[s] = [t.getIndex()]
    }, this), i
}, entities.Squad.prototype._playerCountHelper = function _playerCountHelper(t, i) {
    return Array.isArray(t) ? t.reduce(function(t, s) {
        return t + i.call(this, s)
    }.bind(this), 0) : i.call(this, t)
}, entities.Squad.prototype.getNumberOfPlayersByRarity = function getNumberOfPlayersByRarity(t, i) {
    return this._playerCountHelper(t, function(t) {
        return this.getNonBrickSlots(i).reduce(function(a, b) {
            return b.isValid() && b.getItem().rareflag === t ? ++a : a
        }.bind(this), 0)
    })
}, entities.Squad.prototype.getPlayersPerQualityTier = function getPlayersPerQualityTier() {
    var t = this._qualityCounter();
    return new FUTHashTable(Object.keys(t).reduce(function(a, b) {
        return a[b] = t[b].length, a
    }, {}))
}, entities.Squad.prototype.getSlotIndicesByQualityTier = function getSlotIndicesByQualityTier(t, i) {
    return this._qualityCounter(i)[t] || []
}, entities.Squad.prototype.getNumberOfPlayersByQualityTier = function getNumberOfPlayersByQualityTier(t, i) {
    return this._playerCountHelper(t, function(t) {
        return this.getNonBrickSlots(i).reduce(function(a, b) {
            return b.isValid() && b.getItem().getTier() === t ? ++a : a
        }.bind(this), 0)
    })
}, entities.Squad.prototype.getPlayersPerLeague = function getPlayersPerLeague() {
    var t = this._leagueCounter();
    return new FUTHashTable(Object.keys(t).reduce(function(a, b) {
        return a[b] = t[b].length, a
    }, {}))
}, entities.Squad.prototype.getPopularLeagues = function getPopularLeagues() {
    return utils.JS.getSortedKeys(this._leagueCounter())
}, entities.Squad.prototype.getSlotIndicesByLeague = function getSlotIndicesByLeague(t, i) {
    return this._leagueCounter(i)[t] || []
}, entities.Squad.prototype.getNumberOfPlayersByLeague = function getNumberOfPlayersByLeague(t, i) {
    return this._playerCountHelper(t, function(t) {
        return this.getNonBrickSlots(i).reduce(function(a, b) {
            return b.isValid() && b.getItem().leagueId === t ? ++a : a
        }.bind(this), 0)
    })
}, entities.Squad.prototype.getPopularClubs = function getPopularClubs() {
    return utils.JS.getSortedKeys(this._clubCounter())
}, entities.Squad.prototype.getPlayersPerClub = function getPlayersPerClub() {
    var t = this._clubCounter();
    return new FUTHashTable(Object.keys(t).reduce(function(a, b) {
        return a[b] = t[b].length, a
    }, {}))
}, entities.Squad.prototype.getSlotIndicesByClub = function getSlotIndicesByClub(t, i) {
    return this._clubCounter(i)[t] || []
}, entities.Squad.prototype.getNumberOfPlayersByClub = function getNumberOfPlayersByClub(t, i) {
    return this._playerCountHelper(t, function(t) {
        return this.getNonBrickSlots(i).reduce(function(a, b) {
            return b.isValid() && b.getItem().teamId === t ? ++a : a
        }.bind(this), 0)
    })
}, entities.Squad.prototype.getPopularNationalities = function getPopularNationalities() {
    return utils.JS.getSortedKeys(this._nationCounter())
}, entities.Squad.prototype.getPlayersPerNation = function getPlayersPerNation() {
    var t = this._nationCounter();
    return new FUTHashTable(Object.keys(t).reduce(function(a, b) {
        return a[b] = t[b].length, a
    }, {}))
}, entities.Squad.prototype.getSlotIndicesByNation = function getSlotIndicesByNation(t, i) {
    return this._nationCounter(i)[t] || []
}, entities.Squad.prototype.getNumberOfPlayersByNation = function getNumberOfPlayersByNation(t, i) {
    return this._playerCountHelper(t, function(t) {
        return this.getNonBrickSlots(i).reduce(function(a, b) {
            return b.isValid() && b.getItem().nationId === t ? ++a : a
        }.bind(this), 0)
    })
}, entities.Squad.prototype.getNumberOfLegends = function getNumberOfLegends() {
    return this.getNonBrickSlots().reduce(function(a, b) {
        return b.getItem().isLegend() ? ++a : a
    }, 0)
}, entities.Squad.prototype.getBestPlayerByZone = function getBestPlayerByZone(t) {
    var i = null;
    return this.getPlayersByZone()[t].forEach(function getBestPlayer(t) {
        (!i || i.getItem().rating < t.getItem().rating) && (i = t)
    }, this), i
}, entities.Squad.prototype.getAverageRatingByZone = function getAverageRatingByZone(t) {
    var i = this.getPlayersByZone()[t],
        s = 0;
    return i.length < 1 ? s : (i.forEach(function incrementRatingTotal(t) {
        s += t.getItem().rating
    }, this), Math.floor(s / i.length))
}, entities.Squad.prototype.replaceDreamItem = function replaceDreamItem(t) {
    var i = utils.JS.find(this.getPlayers(), function(i) {
        return i.getItem().compareDream(t)
    });
    i && this._addItemToSlot(i, t)
}, entities.Squad.prototype._calculateChemistry = function _calculateChemistry() {
    var total = 0;
    this.getFieldPlayers().forEach(function(t) {
        this._isSlotChemCalculable(t) && (total += t.getChemistry())
    }, this), this._chemistry.set(Math.round(total))
}, entities.Squad.prototype._calculateRating = function _calculateRating() {
    var t = this.isSBC() ? this.getFieldPlayers() : this.getFieldAndSubPlayers(),
        i = gSettingsModel.isSquadRatingFloatCalculationEnabled(),
        s = 0,
        o = entities.Squad.FIELD_PLAYERS;
    if (t.forEach(function(t, i) {
            var item = t.getItem();
            item.isValid() && (s += item.rating, i >= entities.Squad.FIELD_PLAYERS && o++)
        }), i) {
        var l = s,
            u = l;
        o > 0 && (l /= o), l = Math.min(l, 99), t.forEach(function(t, i) {
            var item = t.getItem();
            if (item.isValid()) {
                if (item.rating <= l) return;
                i < entities.Squad.FIELD_PLAYERS ? u += item.rating - l : u += .5 * (item.rating - l)
            }
        }), s = Math.round(u)
    } else {
        var h = Math.min(Math.floor(s / o), 99);
        t.forEach(function(t, i) {
            var item = t.getItem();
            if (item.isValid()) {
                if (item.rating <= h) return;
                i < entities.Squad.FIELD_PLAYERS ? s += item.rating - h : s += Math.floor(.5 * (item.rating - h))
            }
        })
    }
    this._rating.set(Math.min(Math.max(Math.floor(s / o), 0), 99))
}, entities.Squad.prototype._calculateLinkChemistry = function _calculateLinkChemistry(t, i) {
    var s = 0;
    if (this._isSlotChemCalculable(t) && this._isSlotChemCalculable(i)) {
        var o = t.getItem(),
            l = i.getItem(),
            u = o.isLegend() || o.isCharityItem() || l.isLegend() || l.isCharityItem();
        o.nationId > 0 && o.nationId === l.nationId && (s += entities.Squad.NATION_BONUS), o.teamId > 0 && o.teamId === l.teamId && (s += entities.Squad.CLUB_BONUS), (u || o.leagueId > 0 && o.leagueId === l.leagueId) && (s += entities.Squad.LEAGUE_BONUS)
    }
    return s
}, entities.Squad.prototype.updateChemistry = function updateChemistry() {
    this._updateChemistryLinks(), this._players.forEach(this._calculateSlotChemistry, this), this._calculateChemistry()
}, entities.Squad.prototype._updateChemistryLinks = function _updateChemistryLinks() {
    this._players.length < 1 || (this._chemistryLinks = [], this._formation.getLinks().forEach(function(link) {
        var t = link.getPositionA(),
            i = link.getPositionB(),
            s = this._getSlotByUniquePosition(t),
            o = this._getSlotByUniquePosition(i),
            l = 0,
            u = this._isSlotChemCalculable(s) && this._isSlotChemCalculable(o);
        u && (l = this._calculateLinkChemistry(s, o)), this._chemistryLinks.push(new transferobjects.SquadChemistryLink(t, i, l, u))
    }, this))
}, entities.Squad.prototype._calculateSlotChemistry = function _calculateSlotChemistry(t) {
    var i = 0;
    if (this._isSlotChemCalculable(t)) {
        var item = t.getItem();
        if (i += Math.round(t.getPositionBonus() * this._calculateConnectionBonus(t)), this.hasManager()) {
            var s = this._calculateManagerBonus(item, this._manager.getItem());
            i += s, t.setManagerBonus(s)
        }
        i += item.loyaltyBonus
    }
    t.setChemistry(i)
}, entities.Squad.prototype._calculateManagerBonus = function _calculateManagerBonus(t, i) {
    return utils.Debug.Assert(t.isPlayer(), "[Squad::_calculateManagerBonus] First parameter expected to be a player item."), utils.Debug.Assert(i.isManager(), "[Squad::_calculateManagerBonus] Second parameter expected to be a manager item."), t.nationId === i.nationId || t.leagueId === i.leagueId ? entities.Squad.MANAGER_BONUS : 0
}, entities.Squad.prototype._calculateConnectionBonus = function _calculateConnectionBonus(t) {
    if (t.getIndex() >= entities.Squad.FIELD_PLAYERS || !this._isSlotChemCalculable(t)) return 0;
    var i = 0,
        s = 0;
    this._chemistryLinks.forEach(function(link) {
        var o = t.getUniquePosition();
        !link.isValid() || link.getPositionA() !== o && link.getPositionB() !== o || (i += link.getChemistry(), ++s)
    }, this);
    var o = 0;
    return (i = s > 0 ? i / s : 0) >= 5 ? o = 3 : i >= 3 ? o = 2 : i >= 1 && (o = 1), this._formation.getTeamBonus(o)
}, entities.Squad.prototype.isCacheExpired = function isCacheExpired() {
    return Date.now() > this._timestamp + 3e5
}, entities.Squad.prototype.isDream = function isDream() {
    return this._type === enums.SquadType.DREAM
}, entities.Squad.prototype.isGenerations = function isGenerations() {
    return this._type === enums.SquadType.GENERATIONS
}, entities.Squad.prototype.isValid = function isValid() {
    return this._valid
}, entities.Squad.prototype.isTOTW = function isTOTW() {
    return this._isTOTW
}, entities.Squad.prototype.isSBC = function isSBC() {
    return this._isSBC
}, entities.Squad.prototype.isShowOff = function isShowOff() {
    return this._isShowOff
}, entities.Squad.prototype.isStartingElevenComplete = function isStartingElevenComplete() {
    return this._slotsHaveValidPlayers(0, entities.Squad.FIELD_PLAYERS)
}, entities.Squad.prototype.areSubsComplete = function areSubsComplete() {
    return this._slotsHaveValidPlayers(entities.Squad.FIELD_PLAYERS, entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS)
}, entities.Squad.prototype.areReservesComplete = function areReservesComplete() {
    return this._slotsHaveValidPlayers(entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS, entities.Squad.MANAGER_SLOT_INDEX)
}, entities.Squad.prototype.isValidForTOTW = function isValidForTOTW() {
    return this._slotsHaveValidPlayers(0, entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS)
}, entities.Squad.prototype.isSquadFull = function isSquadFull() {
    var empty = utils.JS.find(this.getNonBrickSlots(), function(t) {
        return !t.isValid()
    });
    return !utils.JS.isValid(empty)
}, entities.Squad.prototype.isSquadEmpty = function isSquadEmpty() {
    var t = utils.JS.find(this._players, function(t) {
        return t.isValid()
    });
    return !utils.JS.isValid(t)
}, entities.Squad.prototype._slotsHaveValidPlayers = function _slotsHaveValidPlayers(start, total) {
    var t;
    for (t = start; t < total; ++t)
        if (!this._getSlotByIndex(t).isValid()) return !1;
    return !0
}, entities.Squad.prototype._isValidPlayerSlot = function _isValidPlayerSlot(t) {
    return t >= 0 && t < entities.Squad.MANAGER_SLOT_INDEX
}, entities.Squad.prototype._isValidSlotIndex = function _isValidSlotIndex(index) {
    return index >= 0 && index <= entities.Squad.MANAGER_SLOT_INDEX
}, entities.Squad.prototype.containsDreamItem = function containsDreamItem(t) {
    if (this.isDream() && 0 !== t.getMaskedResourceId()) {
        var i, s = this._players.length;
        for (i = 0; i < s; i++) {
            var o = this._players[i];
            if (o.getItem().compareDream(t)) return o.getIndex()
        }
    }
    return -1
}, entities.Squad.prototype.containsVariationOfCard = function containsVariationOfCard(t) {
    if (0 !== t.getMaskedResourceId()) {
        var i, s = this._players.length;
        for (i = 0; i < s; i++)
            if (this._players[i].getItem().compareResourceTo(t)) return !0
    }
    return !1
}, entities.Squad.prototype.containsItem = function containsItem(item, t) {
    if (0 === item.resourceId) return !1;
    if (item.resourceId === this._manager.getItem().resourceId) return !0;
    for (var i = this._players.length; i-- > 0;)
        if (item.compareResourceTo(this._players[i].getItem(), t)) return !0;
    return !1
}, entities.Squad.prototype.hasManager = function hasManager() {
    return this._manager.isValid()
}, entities.Squad.prototype.swapPlayersByIndex = function swapPlayersByIndex(a, b) {
    utils.Debug.Assert(this._isValidPlayerSlot(a), "[Squad::swapPlayersByIndex] Invalid slot index provided for first parameter."), utils.Debug.Assert(this._isValidPlayerSlot(b), "[Squad::swapPlayersByIndex] Invalid slot index provided for second parameter.");
    var t = this.getSlot(a),
        i = this.getSlot(b),
        s = t.getItem(),
        o = i.getItem(),
        l = t.getKitNumber(),
        u = i.getKitNumber();
    t.setItem(o), i.setItem(s), t.setKitNumber(u), i.setKitNumber(l), this.updateChemistry(), this._calculateRating(), this.isSBC() && this._updateType(), this.onDataUpdated.notify({
        slots: [t, i],
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
    })
}, entities.Squad.prototype._addItemToSlot = function _addItemToSlot(t, item) {
    var i = t.getItem(),
        index = t.getIndex();
    return t.setItem(item), (index < entities.Squad.FIELD_PLAYERS || item.isManager()) && this.updateChemistry(), index < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS && this._calculateRating(), this._updateType(), i
}, entities.Squad.prototype.addItemToSlot = function addItemToSlot(index, item) {
    var t = null;
    if (utils.Debug.Assert(this._isValidSlotIndex(index), "Invalid squad slot index: " + index), this._isValidSlotIndex(index)) {
        var i = this.getSlot(index);
        t = this._addItemToSlot(i, item), this.onDataUpdated.notify({
            slots: [i],
            chemistry: this.getChemistry(),
            rating: this.getRating(),
            type: this.getType()
        })
    }
    return t
}, entities.Squad.prototype._removeItemFromSlot = function _removeItemFromSlot(t) {
    var i = t.getItem().isManager(),
        s = i ? new entities.Item(enums.ItemType.MANAGER) : new entities.Item;
    t.setItem(s);
    var index = t.getIndex();
    (index < entities.Squad.FIELD_PLAYERS || i) && this.updateChemistry(), index < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS && this._calculateRating(), this._updateType()
}, entities.Squad.prototype.removeItemFromSlot = function removeItemFromSlot(index) {
    if (this._isValidSlotIndex(index)) {
        var t = this.getSlot(index);
        this._removeItemFromSlot(t), this.onDataUpdated.notify({
            slots: [t],
            chemistry: this.getChemistry(),
            rating: this.getRating(),
            type: this.getType()
        })
    }
}, entities.Squad.prototype.removeItem = function removeItem(item) {
    var t = this.getSlot(item);
    t.isValid() && (this._removeItemFromSlot(t), this.onDataUpdated.notify({
        slots: [t],
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
    }))
}, entities.Squad.prototype.update = function update(t) {
    this._chemistry.set(t.getChemistry()), this._rating.set(t.getRating()), this._name.set(t.getName()), this._formation = t.getFormation(), this._type = t.getType(), this._valid = t.isValid(), this._captain = t.getCaptain(), this._manager && this._manager.onDataUpdated.unobserve(this), this._manager = t.getManager(), this._manager.onDataUpdated.observe(this, this._eSlotDataUpdated), this._players.length > 0 && this._players.forEach(function(t) {
        t.onDataUpdated.unobserve(this)
    }, this), this._players = t.getPlayers(), this._players.length > 0 && (this._updateChemistryLinks(), this._players.forEach(function(t) {
        this._calculateSlotChemistry(t), t.onDataUpdated.observe(this, this._eSlotDataUpdated)
    }, this)), this.onDataUpdated.notify({
        chemistry: this.getChemistry(),
        formation: this.getFormation(),
        name: this.getName(),
        rating: this.getRating(),
        slots: this.getPlayers().concat(this.getManager()),
        type: this.getType()
    })
}, entities.Squad.prototype.setPlayers = function setPlayers(t) {
    var i = [];
    t.slice(0, entities.Squad.TOTAL_PLAYERS).forEach(function(item, t) {
        var s = this.getSlot(t);
        item && item.isPlayer() && !s.isBrick() && !this.containsVariationOfCard(item) && (this._addItemToSlot(s, item), i.push(s))
    }, this), i.length > 0 && this.onDataUpdated.notify({
        slots: i,
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
    })
}, entities.Squad.prototype.removeAllItems = function removeAllItems() {
    var t = [];
    this.getNonBrickSlots(!0).forEach(function(i) {
        i.isValid() && (this._removeItemFromSlot(i), t.push(i))
    }, this);
    var i = t.length > 0;
    return this.hasManager() && (this._removeItemFromSlot(this._manager), t.push(this._manager), i = !0), i && this.onDataUpdated.notify({
        slots: t,
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
    }), i
}, entities.Squad.prototype._isSlotChemCalculable = function _isSlotChemCalculable(t) {
    return t.isValid() || this._isSlotCustomBrick(t.getIndex())
}, entities.Squad.prototype._updateType = function _updateType() {
    if (this._type !== enums.SquadType.GENERATIONS) {
        var t = this.isSBC() ? this.getFieldPlayers() : this.getPlayers(),
            type = enums.SquadType.REGULAR;
        utils.JS.isValid(utils.JS.find(t, function(t) {
            return t.getItem().concept
        })) && (type = enums.SquadType.DREAM), this._type = type
    }
}, entities.Squad.prototype.compareTo = function compareTo(t) {
    return this.getId() === t.getId()
}, entities.Squad.prototype._filterBrickIndices = function _filterBrickIndices(t) {
    return t.filter(function(item) {
        return -1 === this.getAllBrickIndices().indexOf(item.getIndex())
    }, this)
}, entities.Squad.prototype._filterSimpleBrickIndices = function _filterSimpleBrickIndices(t) {
    return t.filter(function(item) {
        return -1 === this.simpleBrickIndices.indexOf(item.getIndex())
    }, this)
}, entities.Squad.prototype.getAllBrickIndices = function getAllBrickIndices() {
    return this.simpleBrickIndices.concat(this.customBrickIndices).sort(function(a, b) {
        return a - b
    })
}, entities.Squad.prototype._isSlotBrick = function _isSlotBrick(index) {
    return -1 !== this.getAllBrickIndices().indexOf(index)
}, entities.Squad.prototype._isSlotSimpleBrick = function _isSlotSimpleBrick(index) {
    return -1 !== this.simpleBrickIndices.indexOf(index)
}, entities.Squad.prototype._isSlotCustomBrick = function _isSlotCustomBrick(index) {
    return -1 !== this.customBrickIndices.indexOf(index)
}, entities.Squad.prototype.isSBCSquadEligible = function isSBCSquadEligible() {
    var t = utils.JS.find(this.getNonBrickSlots(), function(t) {
        var i = t.getItemData();
        return i.isLoaned() || i.concept || entities.Item.isAlex(i.resourceId) || entities.Item.isDanny(i.resourceId)
    });
    return !utils.JS.isValid(t)
}, entities.Squad.prototype.getSBCSlots = function getSBCSlots(t) {
    return t ? this._players : this._filterSimpleBrickIndices(this._players)
}, entities.Squad.prototype.getNonBrickSlots = function getNonBrickSlots(t) {
    var i = t ? this._players : this.getFieldPlayers();
    return 0 === this.getAllBrickIndices().length ? i : this._filterBrickIndices(i)
}, entities.Squad.prototype.getNumOfRequiredPlayers = function getNumOfRequiredPlayers() {
    return entities.Squad.FIELD_PLAYERS - this.getAllBrickIndices().length
}, entities.Squad.prototype._eSlotDataUpdated = function _eSlotDataUpdated(t, sender, data) {
    var index = sender.getIndex();
    (index < entities.Squad.FIELD_PLAYERS || index === entities.Squad.MANAGER_SLOT_INDEX) && this.updateChemistry(), index < entities.Squad.FIELD_PLAYERS + entities.Squad.SUB_PLAYERS && this._calculateRating(), this._updateType(), this.onDataUpdated.notify({
        slots: [sender],
        chemistry: this.getChemistry(),
        rating: this.getRating(),
        type: this.getType()
    })
}, NamespaceManager.Register("views.squads"), views.squads.SquadList = function SquadListView() {
    FUIView.call(this), this._listRows = [], this.onCreateNewSquad = new FUTObservable, Object.defineProperty(this, "onCreateNewSquad", {
        writable: !1
    }), this.onItemTap = new FUTObservable, Object.defineProperty(this, "onItemTap", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.squads.SquadList, FUIView), views.squads.SquadList.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("flush"), t.classList.add("panel-list"), t.classList.add("layout-article"), t.classList.add("squad-list"), this.__totalLabel = document.createElement("p"), this.$_totalLabel = $(this.__totalLabel), this.__totalLabel.classList.add("total-label"), t.appendChild(this.__totalLabel), this._regularSquadSection = new views.lists.SectionedSquadList, this._regularSquadSection.getRootElement().classList.add("flush"), t.appendChild(this._regularSquadSection.getRootElement()), this._conceptSquadSection = new views.lists.SectionedSquadList, this._conceptSquadSection.getRootElement().classList.add("padded"), this._conceptSquadSection.getRootElement().classList.add("flush"), t.appendChild(this._conceptSquadSection.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SquadList.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__totalLabel = null, this.$_totalLabel = null, this._regularSquadSection.destroy(), this._regularSquadSection = null, this._conceptSquadSection.destroy(), this._conceptSquadSection = null
}, views.squads.SquadList.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SquadList.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SquadList.prototype.init = function init() {
    this.superclass(), this._regularSquadSection.init(), this._conceptSquadSection.init()
}, views.squads.SquadList.prototype.dealloc = function dealloc() {
    this.superclass(), this.onCreateNewSquad.dealloc(), this.onItemTap.dealloc(), this.onCreateNewSquad = null, this.onItemTap = null
}, views.squads.SquadList.prototype.render = function render(t, i, s) {
    var total = t.length + i.length,
        o = s <= total;
    this.$_totalLabel.text(gLocalization.lPrint("lineupList.squadSelector.total", [total, s])), this._regularSquadSection.setHeader(gLocalization.lPrint("squads.button.regularsquads", [t.length]), gLocalization.lText("infopanel.button.createnewsquad"), this.onCreateNewSquad.notify.bind(this.onCreateNewSquad)), this._regularSquadSection.setEmptyMessage(gLocalization.lText("squads.setEmptyMessage.regularHeader"), gLocalization.lText("squads.setEmptyMessage.regularMessage")), this._conceptSquadSection.setHeader(gLocalization.lPrint("squads.button.conceptsquads", [i.length]), gLocalization.lText("infopanel.button.createconceptsquad"), null), this._conceptSquadSection.setEmptyMessage(gLocalization.lText("squads.setEmptyMessage.conceptHeader"), gLocalization.lText("squads.setEmptyMessage.conceptMessage")), this._regularSquadSection.toggleHeaderButtonEnabled(!o), this._conceptSquadSection.toggleHeaderButtonEnabled(!o), this._listRows.length = 0, this._regularSquadSection.clearList(), this._conceptSquadSection.clearList(), this._listRows = this._regularSquadSection.addItems(t, function(item) {
        this.onItemTap.notify(item)
    }.bind(this)), this._regularSquadSection.render(), this._listRows = this._listRows.concat(this._conceptSquadSection.addItems(i, function(item) {
        this.onItemTap.notify(item)
    }.bind(this))), this._conceptSquadSection.render()
}, views.squads.SquadList.prototype.selectListRow = function selectListRow(id) {
    this._listRows.forEach(function(t, i) {
        t instanceof components.ListRowSquad && t.setSelected(t.getData().getId() === id)
    }, this)
}, views.squads.SquadList.prototype.applyDataChange = function applyDataChange() {
    this._regularSquadSection.render(), this._conceptSquadSection.render()
}, views.squads.SquadList.prototype.getRegularSquadSection = function getRegularSquadSection() {
    return this._regularSquadSection
}, NamespaceManager.Register("factories"), factories.Squad = function() {
    function SquadEntityFactory() {}

    function _normalizePayload(data) {
        return utils.JS.isNumber(data.starRating) && (data.rating = data.starRating, delete data.starRating), utils.JS.isString(data.squadName) || (data.squadName = ""), Array.isArray(data.manager) && (data.manager = data.manager.length > 0 ? data.manager[0] : null), data
    }

    function _parseSquadPayload(t, data) {
        t._owner = data.personaId, t._id = data.id, t._valid = data.valid, t._captain = data.captain, t._formation = repositories.Squad.getFormation(data.formation), t._chemistry.set(data.chemistry), t._rating.set(data.rating), t._name.set(data.squadName), utils.JS.isEmpty(data.squadType) ? t._id === entities.Squad.GENERATIONS_ID && t._name.get() === entities.Squad.GENERATIONS_NAME && (t._type = enums.SquadType.GENERATIONS) : t._type = data.squadType;
        for (var i = 0; i <= entities.Squad.MANAGER_SLOT_INDEX;) {
            var s = new entities.SquadSlot(i, t._formation.getPosition(i)),
                o = 0,
                item = null;
            if (i === entities.Squad.MANAGER_SLOT_INDEX && data.manager) item = factories.Item.createItem(data.manager);
            else if (data.players[i]) {
                var l = data.players[i];
                item = factories.Item.createItem(l.itemData), o = l.kitNumber || 0
            } else item = factories.Item.createItem();
            s.setItem(item), s.setKitNumber(o), s.onDataUpdated.observe(t, t._eSlotDataUpdated), i === entities.Squad.MANAGER_SLOT_INDEX ? t._manager = s : t._players.push(s), i++
        }
        t._updateChemistryLinks(), t._players.forEach(t._calculateSlotChemistry, t), t.isGenerations() && t._calculateRating()
    }

    function _parseSBCSquadPayload(t, data, i) {
        t._id = data.id, t._formation = repositories.Squad.getFormation(data.formation), t._chemistry.set(data.chemistry), t._rating.set(data.rating);
        for (var s = utils.JS.isValid(i), o = 0; o < entities.Squad.MANAGER_SLOT_INDEX;) {
            var l = new entities.SquadSlot(o, t._formation.getPosition(o)),
                u = o < entities.Squad.FIELD_PLAYERS,
                h = !1,
                item = null;
            if (s && u) {
                var p = i[o];
                p.playerType === enums.SBC.PLAYER_TYPE.BRICK ? t.simpleBrickIndices.push(p.index) : p.playerType === enums.SBC.PLAYER_TYPE.CUSTOM_BRICK && (t.customBrickIndices.push(p.index), h = !0), l.setRequirement(new transferobjects.SBCPlayerRequirement(p))
            }
            item = h && data.players[o] ? factories.Item.createCustomBrickItem(data.players[o].itemData) : data.players[o] ? factories.Item.createItem(data.players[o].itemData) : factories.Item.createItem(), l.setItem(item), l.onDataUpdated.observe(t, t._eSlotDataUpdated), t._players.push(l), item.concept && u && t._type === enums.SquadType.REGULAR && (t._type = enums.SquadType.DREAM), o++
        }
        t._updateChemistryLinks(), t._players.forEach(t._calculateSlotChemistry, t)
    }
    return SquadEntityFactory.prototype.createSquad = function createSquad(data) {
        data = _normalizePayload(data);
        var t = new entities.Squad;
        return _parseSquadPayload(t, data), t
    }, SquadEntityFactory.prototype.createSBCSquad = function createSquad(data, t) {
        data = _normalizePayload(data);
        var i = new entities.Squad;
        return i.setSBC(!0), _parseSBCSquadPayload(i, data, t), i
    }, new SquadEntityFactory
}(), communication.DreamTemplateDelegate = function() {
    communication.BaseDelegate.call(this)
}, utils.JS.inherits(communication.DreamTemplateDelegate, communication.BaseDelegate), communication.DreamTemplateDelegate.prototype.send = function send() {
    utils.ResourceManager.RequestResource(utils.AssetLocator.getDreamSquadTemplateURI(), function _onCacheSuccess(value) {
        this.setRequest(value.path, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON), communication.DreamTemplateDelegate.superClass_.send.call(this)
    }.bind(this), function _onCacheFail() {
        this.onFail(enums.NetworkError.NETWORK_ERROR)
    }.bind(this))
}, communication.GetShowOffSquadsDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "showoff", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.GetShowOffSquadsDelegate, communication.BaseFUTDelegate), communication.LoadShowOffSquadDelegate = function(t, i) {
    communication.BaseDelegate.call(this), this._shardPath = t, this.setRequest("/ut/showofflink/" + i, models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.LoadShowOffSquadDelegate, communication.BaseDelegate), communication.LoadShowOffSquadDelegate.prototype.generateURL = function() {
    return this._shardPath + this._url
}, communication.LoadShowOffSquadDelegate.prototype.onFail = function(errorCode) {
    var t = this.isImportant() ? enums.NetworkErrorLevel.IMPORTANT : enums.NetworkErrorLevel.UNIMPORTANT;
    switch (errorCode) {
        case enums.NetworkError.NO_USER:
            this._networkError = new valueobjects.NetworkErrorVO(errorCode, t, "popup.ineligibleshowoffsquad.title", "popup.ineligibleshowoffsquad.message");
            break;
        default:
            this._networkError = this.generateDefaultNetworkError(errorCode)
    }
    this.dispatch(communication.BaseDelegate.FAIL, this._networkError)
}, communication.ItemLookupDelegate = function(t) {
    communication.BaseFUTDelegate.call(this), utils.Debug.Assert(Array.isArray(t), "[ItemLookupDelegate::execute] Invalid property type for definition ID list; expected Array."), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "defid", this._requestType = models.CommunicationModel.METHOD.GET, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON;
    var i = {};
    i.filter = "exact", i.defId = t.join(","), this.setURLVariables(i), this.useClickShield(!0)
}, utils.JS.inherits(communication.ItemLookupDelegate, communication.BaseFUTDelegate), communication.ItemLookupDelegate.prototype.onSuccess = function(response) {
    var t = factories.Item.generateItemsFromItemData(response.itemData, null);
    this.dispatch(communication.BaseDelegate.SUCCESS, t)
}, communication.SquadsListDelegate = function() {
    communication.BaseFUTDelegate.call(this), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "squad/list", models.CommunicationModel.METHOD.GET, models.CommunicationModel.RESPONSE.TEXT_JSON, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SquadsListDelegate, communication.BaseFUTDelegate), NamespaceManager.Register("transferobjects"), transferobjects.ShowOffSquad = function(t, i) {
    this.squad = t, this.id = i.showoffid, this.url = gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_SHOW_OFF_URL) + i.url, this.timestamp = i.timestamp, this.viewcount = i.viewcount, this.persona = i.persona, this.platform = i.platform, this.clubName = utils.JS.isValid(this.squad) ? i.data.squad[0].clubName : "", this.clubAbbr = utils.JS.isValid(this.squad) ? i.data.squad[0].clubAbbr : "", this.estDate = utils.JS.isValid(this.squad) ? i.data.squad[0].estDate : ""
}, NamespaceManager.Register("repositories"), repositories.Squad = function() {
    function SquadRepository() {
        this._squads = new FUTHashTable({}), this._showOffSquads = new FUTHashTable({}), this._conceptTemplates = new FUTHashTable({}), this._formations = new FUTHashTable({}), this._positions = new FUTHashTable({}), this._activeSquad = 0, this._cacheExpiration = {}, this.unauthenticatedShowOffId = "", this.MAX_SQUADS = 15, this.MAX_SHOWOFF_SQUADS = 10
    }
    return SquadRepository.prototype.reset = function reset() {
        this._activeSquad = 0, this._cacheExpiration = {}, this._squads.clear(), this._showOffSquads.clear(), this._formations.clear(), this._positions.clear()
    }, SquadRepository.prototype.setDirty = function setDirty() {
        this._cacheExpiration = {}
    }, SquadRepository.prototype.isSquadListFull = function isSquadListFull() {
        var event = new FUTObservable;
        return this.getSquads(!1).observe(this, function(t, i) {
            t.unobserve(this), event.notify(i.length >= this.MAX_SQUADS)
        }), event
    }, SquadRepository.prototype.isShowOffListFull = function isShowOffListFull() {
        return this._showOffSquads.length >= this.MAX_SHOWOFF_SQUADS
    }, SquadRepository.prototype.hasExternalShowOffSquad = function hasExternalShowOffSquad() {
        return !utils.JS.isEmpty(this.unauthenticatedShowOffId)
    }, SquadRepository.prototype.getActiveSquadId = function getActiveSquadId() {
        return this._activeSquad
    }, SquadRepository.prototype.setActiveSquadId = function setActiveSquadId(id) {
        this._activeSquad = id
    }, SquadRepository.prototype._getSquads = function _getSquads(t, i) {
        var s = this._squads.get(t).values();
        return i || (s = s.filter(function(t) {
            return !t.isGenerations()
        })), s
    }, SquadRepository.prototype.getSquads = function getSquads(t) {
        var event = new FUTObservable,
            i = repositories.User.getCurrent().selectedPersona;
        if (t = !!utils.JS.isBoolean(t) && t, this._cacheExpiration.getSquads && this._cacheExpiration.getSquads > Date.now()) return event.notify(this._getSquads(i, t)), event;
        this._squads.has(i) && this._squads.get(i).clear();
        var s = new communication.SquadsListDelegate;
        return s.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetSquadSuccess(sender, result) {
            sender.clearListenersByScope(this), this._activeSquad = result.activeSquadId, this._cacheExpiration.getSquads = Date.now() + 3e5, result.squad.forEach(function(data) {
                this.storeSquad(i, data).observe(this, function(t, i) {
                    t.unobserve(this), i.setCacheTimestamp(0)
                })
            }, this), event.notify(this._getSquads(i, t))
        }), s.addListener(communication.BaseDelegate.FAIL, this, function _onGetSquadFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                event.notify([])
            }.bind(this))
        }), s.useClickShield(!0), s.send(), event
    }, SquadRepository.prototype.getSquadById = function getSquadById(id, t) {
        var event = new FUTObservable;
        if (t = utils.JS.isNumber(t) ? t : repositories.User.getCurrent().selectedPersona, this._squads.has(t) && this._squads.get(t).get(id) && !this._squads.get(t).get(id).isCacheExpired()) return event.notify(this._squads.get(t).get(id)), event;
        var i = new communication.SquadLoadDelegate(id, t);
        return i.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetSquadSuccess(sender, data) {
            sender.clearListenersByScope(this), this.storeSquad(data.personaId, data).observe(this, function(i, s) {
                i.unobserve(this), utils.JS.isNumber(t) && t < 1 && (this._activeSquad = s.getId()), s.setCacheTimestamp(Date.now()), event.notify(s, null)
            })
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onGetSquadFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                event.notify(null, error)
            }.bind(this))
        }), i.useClickShield(!0), i.send(), event
    }, SquadRepository.prototype.getSquadsByType = function getSquadsByType(type, t) {
        function isSameType(t) {
            return t.getType() === type
        }
        var event = new FUTObservable,
            i = {
                success: !1,
                squads: [],
                error: null
            };
        return t = utils.JS.isNumber(t) ? t : repositories.User.getCurrent().selectedPersona, this.getSquads().observe(this, function(t, data) {
            t.unobserve(this), i.success = !0, i.squads = data.filter(isSameType), event.notify(i)
        }), event
    }, SquadRepository.prototype.getShowOffSquads = function getShowOffSquads() {
        var event = new FUTObservable,
            t = {
                success: !1,
                showOffSquads: [],
                error: null
            };
        if (this._cacheExpiration.getShowOffSquads && this._cacheExpiration.getShowOffSquads > Date.now()) return t.success = !0, t.showOffSquads = this._showOffSquads.values(), event.notify(t), event;
        var i = new communication.GetShowOffSquadsDelegate;
        return i.addListener(communication.BaseDelegate.SUCCESS, this, function _onShowOffLoadSuccess(sender, data) {
            this._cacheExpiration.getShowOffSquads = Date.now() + 6e5, data["showoff-list"].showOff.forEach(function(t) {
                var i = new transferobjects.ShowOffSquad(factories.Squad.createSquad(t.data.squad[0]), t);
                this.addShowOffSquad(i)
            }, this), t.success = !0, t.showOffSquads = this._showOffSquads.values(), event.notify(t)
        }), i.addListener(communication.BaseDelegate.FAIL, this, function _onShowOffLoadFail(sender, error) {
            NetworkErrorManager.handle(error, !1, function() {
                t.error = error, event.notify(t)
            }.bind(this))
        }), i.useClickShield(!0), i.send(), event
    }, SquadRepository.prototype.addShowOffSquad = function addShowOffSquad(t) {
        this._showOffSquads.set(t.id, t)
    }, SquadRepository.prototype.removeShowOffSquad = function removeShowOffSquad(t) {
        this._showOffSquads.remove(t)
    }, SquadRepository.prototype.loadShowOffSquad = function loadShowOffSquad() {
        function _onShowOffLoadSuccess(sender, response) {
            sender.clearListenersByScope(this), this.unauthenticatedShowOffId = "";
            var i = factories.Squad.createSquad(response.data.squad[0]);
            i.setShowOff(!0), t.success = !0, t.showOffDTO = new transferobjects.ShowOffSquad(i, response), event.notify(t)
        }

        function _onShowOffFail(sender, error) {
            this.unauthenticatedShowOffId = "", NetworkErrorManager.handle(error, !1, function() {
                t.error = error, event.notify(t)
            }.bind(this))
        }

        function _showOffLoad(t) {
            var i = t.getClientProtocol() + "://" + t.getClientFacingIpPort().split(":")[0],
                o = new communication.LoadShowOffSquadDelegate(i, s);
            o.addListener(communication.BaseDelegate.SUCCESS, this, _onShowOffLoadSuccess), o.addListener(communication.BaseDelegate.FAIL, this, _onShowOffFail), o.addListener(communication.BaseDelegate.CANCEL, this, _onShowOffFail), o.useClickShield(!0), o.send()
        }
        var event = new FUTObservable,
            t = {
                success: !1,
                showOffDTO: null,
                error: null
            },
            i = this.unauthenticatedShowOffId.split(":");
        if (!this.hasExternalShowOffSquad() || 2 !== i.length) return event.notify(t), event;
        var s = i[0],
            o = i[1],
            l = gAuthenticationModel.getShardInfoList();
        if (utils.JS.isValid(l) && l.length > 0) {
            var u = gAuthenticationModel.getShardItemBySKU(o);
            utils.JS.isValid(u) && _showOffLoad.call(this, u)
        } else {
            var h = new communication.ShardInfoDelegate;
            h.addListener(communication.BaseDelegate.SUCCESS, this, function _onShardInfoSuccess(sender, data) {
                sender.clearListenersByScope(this);
                for (var t = data.length; t-- > 0;)
                    if (data[t].containsSku(o)) return void _showOffLoad.call(this, data[t])
            }), h.addListener(communication.BaseDelegate.FAIL, this, _onShowOffFail), h.addListener(communication.BaseDelegate.CANCEL, this, _onShowOffFail), h.useClickShield(!0), h.execute()
        }
        return event
    }, SquadRepository.prototype.getSquadTemplates = function getSquadTemplates() {
        function getRandomTemplates(t) {
            var i = [];
            for (t.forEach(function(group) {
                    var t = group[Math.floor(Math.random() * group.length)];
                    i.push(t)
                }, this); i.length > 5;) i.splice(Math.floor(Math.random() * i.length), 1);
            return i
        }
        var event = new FUTObservable;
        if (this._conceptTemplates.length > 0) return event.notify(getRandomTemplates(this._conceptTemplates)), event;
        var t = new communication.DreamTemplateDelegate;
        return t.addListener(communication.BaseDelegate.SUCCESS, this, function onTemplateLoadSuccess(sender, t) {
            t.packList.forEach(function(t) {
                this._conceptTemplates.has(t.rank) || this._conceptTemplates.set(t.rank, []), this._conceptTemplates.get(t.rank).push(t)
            }, this), event.notify(getRandomTemplates(this._conceptTemplates))
        }), t.addListener(communication.BaseDelegate.FAIL, this, function onTemplateLoadFail(sender, error) {
            event.notify([])
        }), t.useClickShield(!0), t.send(), event
    }, SquadRepository.prototype.getGenerationsSquad = function getGenerationsSquad(t) {
        function _loadSquadStaticData(t) {
            function _onStaticLoadComplete(o, data) {
                o.unobserve(this), ++s === i.length && event.notify(t)
            }
            var i = t.getSlots(),
                s = 0;
            i.forEach(function(t) {
                t.getItem().loadStaticData().observe(this, _onStaticLoadComplete)
            })
        }
        var event = new FUTObservable,
            i = repositories.User.getCurrent().selectedPersona,
            id = entities.Squad.GENERATIONS_ID;
        if (t = !utils.JS.isBoolean(t) || t, this._squads.has(i) && this._squads.get(i).get(id)) {
            var s = this._squads.get(i).get(id);
            return t ? _loadSquadStaticData.call(this, s) : event.notify(s), event
        }
        var o = new communication.SquadLoadDelegate(enums.UserSquadId.GENERATIONS);
        return o.addListener(communication.BaseDelegate.SUCCESS, this, function _onGetSquadSuccess(sender, data) {
            sender.clearListenersByScope(this), this.storeSquad(i, data).observe(this, function(i, s) {
                i.unobserve(this), t ? _loadSquadStaticData.call(this, s) : event.notify(s), s.setCacheTimestamp(Date.now())
            })
        }), o.addListener(communication.BaseDelegate.FAIL, this, function _onGetSquadFail(sender, error) {
            sender.clearListenersByScope(this), NetworkErrorManager.handle(error, !1, function() {
                event.notify(null)
            }.bind(this))
        }), o.useClickShield(!0), o.send(), event
    }, SquadRepository.prototype.storeSquad = function storeSquad(t, data) {
        var event = new FUTObservable,
            i = factories.Squad.createSquad(data),
            id = i.getId();
        if (this._squads.has(t)) this._squads.get(t).has(id) ? this._squads.get(t).get(id).update(i) : this._squads.get(t).set(id, i);
        else {
            var s = {};
            s[id] = i, this._squads.set(t, new FUTHashTable(s))
        }
        return event.notify(this._squads.get(t).get(id)), event
    }, SquadRepository.prototype.removeSquad = function removeSquad(t, i) {
        this._squads.has(t) && this._squads.get(t).remove(i)
    }, SquadRepository.prototype.getFormation = function getFormation(name) {
        return this._formations.get(name)
    }, SquadRepository.prototype.getFormations = function getFormations() {
        return this._formations.values()
    }, SquadRepository.prototype.getPosition = function getPosition(id) {
        return this._positions.get(id)
    }, SquadRepository.prototype.getPositionByUniqueName = function getPositionByUniqueName(t) {
        return utils.JS.find(this._positions.values(), function(position) {
            return position.getName() === t
        })
    }, SquadRepository.prototype.setSquadDataLookup = function setSquadDataLookup(data) {
        data.formationData.forEach(function(t) {
            var i = utils.JS.find(data.chemLinks, function(links) {
                    return links.formationName === t.name
                }),
                links = i ? i.linkData.map(function(link) {
                    return new transferobjects.SquadLink(link)
                }) : [],
                s = t.uniquePositionSlots.map(function(i, s) {
                    var o = t.generalPositionSlots[s],
                        l = data.positionBonusTable[o].map(function(t) {
                            return data.bonusValues.Position[t]
                        });
                    return new transferobjects.SquadPosition(data.positionData[i], l)
                }),
                o = new transferobjects.SquadFormation(t, data.bonusValues.Team, links, s);
            this._formations.set(o.getName(), o)
        }, this), data.positionData.forEach(function(position) {
            var t = new transferobjects.SquadPosition(position, []);
            this._positions.set(position.uniqueId, t)
        }, this)
    }, new SquadRepository
}(), NamespaceManager.Register("controllers.squads"), controllers.squads.SquadList = function SquadListController() {
    FUIViewController.call(this), this._viewmodel = null, this.onItemSelect = new FUTObservable, Object.defineProperty(this, "onItemSelect", {
        writable: !1
    })
}, utils.JS.inherits(controllers.squads.SquadList, FUIViewController), controllers.squads.SquadList.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.onItemTap.observe(this, this._onItemTap), view.onCreateNewSquad.observe(this, this._onNewSquad);
        var t = getDefaultDispatcher();
        t.addObserver(enums.AppNotification.SQUAD_CREATE, this, this._nSquadCreate), t.addObserver(enums.AppNotification.SQUAD_DELETE, this, this._nSquadDelete), t.addObserver(enums.AppNotification.SQUAD_SAVE, this, this._nSquadSave)
    }
}, controllers.squads.SquadList.prototype.dealloc = function dealloc() {
    this.superclass(), this.onItemSelect.dealloc();
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.SQUAD_CREATE, this), t.removeObserver(enums.AppNotification.SQUAD_DELETE, this), t.removeObserver(enums.AppNotification.SQUAD_SAVE, this), this._viewmodel = null
}, controllers.squads.SquadList.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SquadList
}, controllers.squads.SquadList.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().setInteractionState(!0), repositories.Squad.getSquads().observe(this, this._onGenerateSquadsList)
}, controllers.squads.SquadList.prototype._onGenerateSquadsList = function _onGenerateSquadsList(t, i) {
    t.unobserve(this), this._viewmodel = new viewmodels.SquadList(i);
    var s = repositories.Squad.getActiveSquadId(),
        o = utils.JS.find(i, function(t) {
            return t.getId() === s
        });
    this._renderView(), this._selectSquad(o, !0)
}, controllers.squads.SquadList.prototype._onSquadsReloaded = function _onSquadsReloaded(t) {
    var i = this._viewmodel.getIndex();
    this._viewmodel.resetCollection(t), i > 0 && i < t.length && this._viewmodel.setIndex(i), this._renderView()
}, controllers.squads.SquadList.prototype._renderView = function _renderView() {
    this.getView().render(this._viewmodel.getSquads(enums.SquadType.REGULAR), this._viewmodel.getSquads(enums.SquadType.DREAM), repositories.Squad.MAX_SQUADS)
}, controllers.squads.SquadList.prototype._onNewSquad = function onNewSquad(t) {
    var i = new controllers.views.popups.NameSquad("");
    i.onConfirm.observe(this, this._onNewSquadConfirm.bind(this)), gPopupClickShield.setActivePopup(i)
}, controllers.squads.SquadList.prototype._onNewSquadConfirm = function _onNewSquadConfirm(t, name) {
    t.unobserve(this), services.Squad.create(name, DEFAULT_FORMATION)
}, controllers.squads.SquadList.prototype.applyDataChange = function applyDataChange() {
    this.getView().applyDataChange()
}, controllers.squads.SquadList.prototype._selectSquad = function _selectSquad(t, i) {
    var s = t.getId();
    this._viewmodel.setIndex(this._viewmodel.indexOf(function(t) {
        return t.getId() === s
    })), this.getView().selectListRow(s), i && this.onItemSelect.notify(t)
}, controllers.squads.SquadList.prototype._onItemTap = function _onItemTap(t, i) {
    var s = i.getId();
    isPhone() ? NavManager.requestChildScreen(Screens.getView("SQUAD_OVERVIEW"), {
        squad: s
    }) : s !== this._viewmodel.current().getId() && this._selectSquad(i, !0)
}, controllers.squads.SquadList.prototype._nSquadCreate = function _nSquadCreate(t, sender, data) {
    repositories.Squad.getSquads().observe(this, function(t, i) {
        t.unobserve(this), this._onSquadsReloaded(i), this._selectSquad(data.squad, !1), NavManager.requestChildScreen(Screens.getView("SQUAD_OVERVIEW"), {
            squad: data.squad.getId()
        }) || this._selectSquad(data.squad, !0)
    })
}, controllers.squads.SquadList.prototype._nSquadDelete = function _nSquadDelete(t, sender) {
    repositories.Squad.getSquads().observe(this, function(t, i) {
        t.unobserve(this), this._onSquadsReloaded(i);
        var s = repositories.Squad.getActiveSquadId(),
            o = utils.JS.find(i, function(t) {
                return t.getId() === s
            });
        this._selectSquad(o, !0)
    })
}, controllers.squads.SquadList.prototype._nSquadSave = function _nSquadSave(t, sender) {
    if (this.getView().getRegularSquadSection().getNumOfRows() !== this._viewmodel.getSquads(enums.SquadType.REGULAR).length) {
        var i = this._viewmodel.current();
        repositories.Squad.getSquads().observe(this, function(t, s) {
            t.unobserve(this), this._onSquadsReloaded(s), this._selectSquad(i, !1)
        })
    } else this.applyDataChange()
}, Screens.Register("SQUAD_LIST", "ViewListMySquads", Screens.APP_SECTION.SQUADS, "Squad List - My Squads"), pages.ViewListMySquads = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.squadlist")), gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "Squad List - My Squads"), this._generate()
}, utils.JS.inherits(pages.ViewListMySquads, pages.ScreenBase), pages.ViewListMySquads.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("SquadSelector"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ViewListMySquads.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ViewListMySquads.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ViewListMySquads.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SquadListLandscape = function SquadListLandscape() {
    FUISplitViewController.call(this), this._details = new controllers.navigation.SquadDetails(!1), this._list = new controllers.squads.SquadList
}, utils.JS.inherits(controllers.squads.SquadListLandscape, FUISplitViewController), controllers.squads.SquadListLandscape.prototype.init = function init() {
    this.superclass(), this._list.init(), this._details.init(), this._details.onDataChange.observe(this._list, this._list.applyDataChange), this.addChildViewController(this._list), this.addChildViewController(this._details), this._list.onItemSelect.observe(this, this._onItemSelected)
}, controllers.squads.SquadListLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._details && (this._details.dealloc(), this._details = null), this._list && (this._list.dealloc(), this._list = null)
}, controllers.squads.SquadListLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._setLeftController(this._list), this._setRightController(this._details)
}, controllers.squads.SquadListLandscape.prototype._onItemSelected = function _onItemSelected(t, i) {
    this._details.setSquad(i)
}, pages.controllers.ViewListMySquadsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = isPhone() ? new controllers.squads.SquadList : new controllers.squads.SquadListLandscape
}, utils.JS.inherits(pages.controllers.ViewListMySquadsController, pages.controllers.ScreenControllerBase), pages.controllers.ViewListMySquadsController.prototype.init = function init() {
    pages.controllers.ViewListMySquadsController.superClass_.init.call(this), this._controller.init()
}, pages.controllers.ViewListMySquadsController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.ViewListMySquadsController.superClass_.destroy.call(this)
}, pages.controllers.ViewListMySquadsController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.ViewListMySquadsController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, NamespaceManager.Register("components"), components.Particle = function Particle(t, i) {
    this.ctx = i, this.x = 0, this.y = 0, this.vx = 0, this.vy = 0, this.friction = .95, this.minVelocity = 0, this.img = t, this.width = t.width, this.height = t.height, this.rotation = 0, this.rotationSpeed = 0, this.alpha = 1, this.decay = 0, this.size = this.random(20, 30), this.seed = Math.random()
}, components.Particle.prototype.destroy = function destroy() {
    this.img = null, this.ctx = null
}, components.Particle.prototype.update = function update() {}, components.Particle.prototype.draw = function draw() {
    this.ctx.save(), this.ctx.globalAlpha = this.alpha, this.ctx.translate(this.x, this.y), this.ctx.rotate(this.rotation), this.ctx.drawImage(this.img, 0, 0, this.width, this.height, 0, 0, this.size, this.size), this.ctx.restore()
}, components.Particle.prototype.random = function random(min, max) {
    return Math.random() * (max - min) + min
}, components.ConfettiParticle = function ConfettiParticle(t, frames, i) {
    components.Particle.call(this, t, i), this.frames = frames, this.frame = Math.random() * (this.frames - 1), this.rotation = this.random(0, 2 * Math.PI), this.rotationSpeed = this.random(-.2, .2), this.decay = 0, this.size = this.random(20, 30), this.width = t.width / frames, this.height = t.height
}, utils.JS.inherits(components.ConfettiParticle, components.Particle), components.ConfettiParticle.prototype.destroy = function destroy() {
    this.img = null, components.ConfettiParticle.superClass_.destroy.call(this)
}, components.ConfettiParticle.prototype.update = function update() {
    this.alpha -= this.decay, this.alpha < 0 && (this.alpha = 0), ++this.frame > this.frames - 1 && (this.frame = 0), this.rotation += this.rotationSpeed
}, components.ConfettiParticle.prototype.draw = function draw() {
    this.ctx.save(), this.ctx.globalAlpha = this.alpha, this.ctx.translate(this.x, this.y), this.ctx.rotate(this.rotation), this.ctx.drawImage(this.img, this.width * this.frame, 0, this.width, this.height, 0, 0, this.size, this.size), this.ctx.restore()
}, NamespaceManager.Register("components"), components.ParticleGenerator = function ParticleGenerator(t, x, y, width, height) {
    this.width = width, this.height = height, this.x = x, this.y = y, this.ctxList = Array.isArray(t) ? t : [t], this.ctx = this.ctxList[0], this.running = !1, this.gravity = 2, this.spawnRate = 100, this.timeStep = 100, this.t = 0, this.particles = [], this.timestamp = 0
}, components.ParticleGenerator.prototype.destroy = function destroy() {
    this.stop(), this.particles.forEach(function(t) {
        t.destroy()
    }), this.particles.length = 0, this.particles = null, this.ctx = null, this.ctxList = []
}, components.ParticleGenerator.prototype.update = function update() {
    if (this.particles.forEach(function(t) {
            this.updateParticle(t)
        }, this), this.running)
        for (this.t += this.timeStep; this.timestamp + this.spawnRate < this.t;) this.timestamp += this.spawnRate, this.spawnParticles(1)
}, components.ParticleGenerator.prototype.start = function start() {
    this.running = !0
}, components.ParticleGenerator.prototype.stop = function stop() {
    this.running = !1
}, components.ParticleGenerator.prototype.fetchContext = function fetchContext() {
    return this.ctxList[parseInt(Math.random() * this.ctxList.length, 10)]
}, components.ParticleGenerator.prototype.spawnParticles = function spawnParticles(count) {
    do {
        this.particles.push(this.createParticle())
    } while (--count > 0)
}, components.ParticleGenerator.prototype.createParticle = function createParticle() {
    var t = new components.Particle(new Image, this.ctx);
    return t.x = this.x + Math.random() * this.width, t.y = this.y + Math.random() * this.height, t
}, components.ParticleGenerator.prototype.updateParticle = function updateParticle(t) {
    t.x += t.vx, t.y += t.vy, Math.abs(t.vx) + Math.abs(t.vy) >= t.minVelocity && (t.vx *= t.friction, t.vy = t.vy * t.friction + this.gravity), t.update(), t.draw()
}, NamespaceManager.Register("components"), components.ConfettiGenerator = function(t, x, y, width, height) {
    components.ParticleGenerator.call(this, t, x, y, width, height), this._confettiImage = new Image, this._confettiImage.src = "images/PackAnimation/PackAnimationConfetti.png", this._isPhone = isPhone()
}, utils.JS.inherits(components.ConfettiGenerator, components.ParticleGenerator), components.ConfettiGenerator.prototype.destroy = function() {
    components.ConfettiGenerator.superClass_.destroy.call(this), this._confettiImage = null
}, components.ConfettiGenerator.prototype.createParticle = function() {
    var t = new components.ConfettiParticle(this._confettiImage, 6, this.fetchContext());
    return t.x = this.x + Math.random() * this.width, t.y = this.y + Math.random() * this.height, t.size = this._isPhone ? t.size : 1.3 * t.size, t
}, components.ConfettiCannon = function(t, x, y, width, height) {
    components.ParticleGenerator.call(this, t, x, y, width, height), this.angle = 0, this.strength = 5, this._confettiImage = new Image, this._confettiImage.src = "images/PackAnimation/PackAnimationConfetti.png", this._isPhone = isPhone()
}, utils.JS.inherits(components.ConfettiCannon, components.ParticleGenerator), components.ConfettiCannon.prototype.destroy = function() {
    components.ConfettiCannon.superClass_.destroy.call(this), this._confettiImage = null
}, components.ConfettiCannon.prototype.createParticle = function() {
    var t = new components.ConfettiParticle(this._confettiImage, 6, this.fetchContext()),
        i = this.angle + (10 * Math.random() - 10 * Math.random()),
        s = Math.random() * this.strength;
    return t.vx = Math.cos(i * (Math.PI / 180)) * s, t.vy = Math.sin(i * (Math.PI / 180)) * s, t.x = this.x + Math.random() * this.width, t.y = this.y + Math.random() * this.height, s = 400 * Math.random(), t.x += Math.cos((i + 180) * (Math.PI / 180)) * s, t.y += Math.sin((i + 180) * (Math.PI / 180)) * s, t.friction = .97, t.minVelocity = 4, t.size = this._isPhone ? t.size : 1.3 * t.size, t
}, components.LightParticleGenerator = function LightParticleGenerator(t, x, y, width, height) {
    components.ParticleGenerator.call(this, t, x, y, width, height), this.waveLength = 1, this.amplitude = 1, this.gravityDecay = .98, this._image = new Image, this._image.src = "images/PackAnimation/lightParticle.png"
}, utils.JS.inherits(components.LightParticleGenerator, components.ParticleGenerator), components.LightParticleGenerator.prototype.destroy = function destroy() {
    components.LightParticleGenerator.superClass_.destroy.call(this), this._image = null
}, components.LightParticleGenerator.prototype.createParticle = function createParticle() {
    var t = new components.Particle(this._image, this.ctx);
    return t.x = this.x + Math.random() * this.width, t.y = this.y + Math.random() * this.height, t.width = 54, t.height = 54, t.friction = 0, t.size = 10 * t.seed + 10, t
}, components.LightParticleGenerator.prototype.update = function update() {
    components.LightParticleGenerator.superClass_.update.call(this), this.gravity > 0 && (this.gravity *= this.gravityDecay)
}, components.LightParticleGenerator.prototype.updateParticle = function updateParticle(t) {
    components.LightParticleGenerator.superClass_.updateParticle.call(this, t), t.vx += Math.sin((t.y + 500 * t.seed) * this.waveLength) * (this.amplitude * t.seed)
}, components.FireworkParticle = function FireworkParticle(t, i) {
    components.Particle.call(this, t, i), this.oldX = 0, this.oldY = 0, this.lineWidth = 1, this.lVel = 0, this.lForce = .05, this.lineWidthApex = 4, this.isFalling = !1, this.culled = !1, this.strokeStyle = "#fff6ce", this.decay = .02
}, utils.JS.inherits(components.FireworkParticle, components.Particle), components.FireworkParticle.prototype.update = function update() {
    this.culled || (this.lVel += this.lForce, this.lineWidth += this.lVel, this.alpha -= this.decay, this.lineWidth > this.lineWidthApex && !this.isFalling ? (this.isFalling = !0, this.lForce *= -1) : this.isFalling && this.lineWidth < 0 && (this.culled = !0))
}, components.FireworkParticle.prototype.draw = function draw() {
    this.culled || (0 === this.oldX && 0 === this.oldY && (this.oldX = this.x, this.oldY = this.y), this.ctx.save(), this.ctx.globalAlpha = this.alpha, this.ctx.strokeStyle = this.strokeStyle, this.ctx.lineWidth = this.lineWidth, this.ctx.beginPath(), this.ctx.moveTo(this.oldX, this.oldY), this.ctx.lineTo(this.x, this.y), this.ctx.stroke(), this.ctx.restore(), this.oldX = this.x, this.oldY = this.y)
}, components.FireworksGenerator = function FireworksGenerator(t, x, y, width, height) {
    components.ParticleGenerator.call(this, t, x, y, width, height), this._image = new Image, this._image.src = "images/PackAnimation/FireworksParticle.png"
}, utils.JS.inherits(components.FireworksGenerator, components.ParticleGenerator), components.FireworksGenerator.prototype.destroy = function destroy() {
    components.FireworksGenerator.superClass_.destroy.call(this), this.confettiImage = null
}, components.FireworksGenerator.prototype.createParticle = function createParticle() {
    var t = new components.FireworkParticle(this._image, this.ctx);
    return t.x = this.x + Math.random() * this.width, t.y = this.y + Math.random() * this.height, t.vx = 15 * (Math.random() - Math.random()), t.vy = 15 * (Math.random() - Math.random()), t.friction = 1, t
}, NamespaceManager.Register("components"), components.AnimatedConfetti = function AnimatedConfetti() {
    this._generate(), this.running = !1, this._winterTheme = !1, this._confettiCtx = this.__confettiCanvas.getContext("2d"), this._confettiCtxAlt = this.__confettiCanvasAlt.getContext("2d"), this._fireworksCtx = this.__fireworksCanvas.getContext("2d"), this._tintBufferCanvas = document.createElement("canvas"), this._tintBufferCtx = this._tintBufferCanvas.getContext("2d"), this._tintBufferCanvasAlt = document.createElement("canvas"), this._tintBufferAltCtx = this._tintBufferCanvasAlt.getContext("2d"), this._confettiGenerator = new components.ConfettiGenerator([this._tintBufferCtx, this._tintBufferAltCtx], 0, 0, 0, 0), this._confettiCannon1 = new components.ConfettiCannon([this._tintBufferCtx, this._tintBufferAltCtx], 0, 0, 0, 0), this._confettiCannon2 = new components.ConfettiCannon([this._tintBufferCtx, this._tintBufferAltCtx], 0, 0, 0, 0), this._lightGenerator = new components.LightParticleGenerator(this._tintBufferCtx, 0, 0, 0, 0), this._fireworkGenerator = new components.FireworksGenerator(this._fireworksCtx, 0, 0, 0, 0), this._tint = enums.ItemTintValues[enums.ItemRareType.NONE][0]
}, components.AnimatedConfetti.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("ParticleAnimation"), this.__fireworksCanvas = document.createElement("canvas"), this.$_fireworksCanvas = $(this.__fireworksCanvas), this.__fireworksCanvas.classList.add("confettiCanvas"), t.appendChild(this.__fireworksCanvas), this.__confettiCanvas = document.createElement("canvas"), this.$_confettiCanvas = $(this.__confettiCanvas), this.__confettiCanvas.classList.add("confettiCanvas"), t.appendChild(this.__confettiCanvas), this.__confettiCanvasAlt = document.createElement("canvas"), this.$_confettiCanvasAlt = $(this.__confettiCanvasAlt), this.__confettiCanvasAlt.classList.add("confettiCanvas"), t.appendChild(this.__confettiCanvasAlt), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.AnimatedConfetti.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__fireworksCanvas = null, this.$_fireworksCanvas = null, this.__confettiCanvas = null, this.$_confettiCanvas = null, this.__confettiCanvasAlt = null, this.$_confettiCanvasAlt = null
}, components.AnimatedConfetti.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.AnimatedConfetti.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.AnimatedConfetti.prototype.initWithItem = function initWithItem(t) {
    this.running = !0, this._winterTheme = gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_WINTER_THEME), this._positionScene();
    var i = utils.JS.isValid(enums.ItemTintValues[t.rareflag]);
    if (t.hasQualityTiers() && i) {
        var s = enums.ItemRatingTier.NONE;
        s = t.isBronzeRating() ? enums.ItemRatingTier.BRONZE : s, s = t.isSilverRating() ? enums.ItemRatingTier.SILVER : s, s = t.isGoldRating() ? enums.ItemRatingTier.GOLD : s, this._tier = enums.ItemTintValues[t.rareflag][s - 1]
    } else i && (this._tier = enums.ItemTintValues[t.rareflag]);
    this._winterTheme || (this._confettiGenerator.start(), this._confettiGenerator.gravity = .2), this._confettiCannon1.strength = 55, this._confettiCannon1.gravity = 0, this._confettiCannon2.strength = 55, this._confettiCannon2.gravity = 0, this._lightGenerator.gravity = 10, this._lightGenerator.spawnParticles(15), this._lightGenerator.waveLength = .05, this._lightGenerator.amplitude = 5, this._fireworkGenerator.gravity = .15, this._requestAnimFrame(this, this.update), setTimeout(function() {
        this._confettiCannon2.spawnParticles(20), this._confettiCannon1.spawnParticles(20)
    }.bind(this), 2e3), setTimeout(function() {
        this._lightGenerator.gravity = -12, this._lightGenerator.waveLength = .008, this._lightGenerator.amplitude = 23
    }.bind(this), 1800), setTimeout(function() {
        this._fireworkGenerator.spawnParticles(20)
    }.bind(this), 800), setTimeout(function() {
        this._fireworkGenerator.x += 300, this._fireworkGenerator.y += 100, this._fireworkGenerator.spawnParticles(10)
    }.bind(this), 1600), setTimeout(function() {
        this._fireworkGenerator.x -= 400, this._fireworkGenerator.y += 300, this._fireworkGenerator.spawnParticles(10)
    }.bind(this), 1900), $(window).on("resize", this._onWindowResize.bind(this))
}, components.AnimatedConfetti.prototype.destroy = function destroy() {
    this.running = !1, this._confettiGenerator.destroy(), this._confettiCannon1.destroy(), this._confettiCannon2.destroy(), this._lightGenerator.destroy(), this._fireworkGenerator.destroy(), this._confettiGenerator = null, this._confettiCannon1 = null, this._confettiCannon2 = null, this._lightGenerator = null, this._fireworkGenerator = null, this._tintBufferCanvas = null, this._tintBufferCanvasAlt = null, this._confettiCtx = null, this._fireworksCtx = null, this._tintBufferCtx = null, this._tintBufferAltCtx = null, this._confettiCtxAlt = null, this._tint = null, this.destroyGeneratedElements(), $(window).off("resize")
}, components.AnimatedConfetti.prototype.update = function update() {
    this.running && (this._tintBufferCtx.clearRect(0, 0, this.__confettiCanvas.width, this.__confettiCanvas.height), this._tintBufferAltCtx.clearRect(0, 0, this.__confettiCanvasAlt.width, this.__confettiCanvasAlt.height), this._fireworksCtx.save(), this._fireworksCtx.globalCompositeOperation = "destination-out", this._fireworksCtx.fillStyle = "rgba(0, 0, 0, 0.05)", this._fireworksCtx.fillRect(0, 0, this.__fireworksCanvas.width, this.__fireworksCanvas.height), this._fireworksCtx.restore(), this._winterTheme || this._confettiGenerator.update(), this._confettiCannon1.update(), this._confettiCannon2.update(), this._lightGenerator.update(), this._fireworkGenerator.update(), utils.JS.isValid(this._tier) && (this._tintCanvas(this._tier[0], this.__confettiCanvas, this._tintBufferCanvas), this._tintCanvas(this._tier[1], this.__confettiCanvasAlt, this._tintBufferCanvasAlt)), this._requestAnimFrame(this, this.update))
}, components.AnimatedConfetti.prototype._onWindowResize = function _onWindowResize(e) {
    this._positionScene()
}, components.AnimatedConfetti.prototype._positionScene = function _positionScene() {
    var width = this.getRoot().width(),
        height = this.getRoot().height();
    this.__confettiCanvas.width = width, this.__confettiCanvas.height = height, this.__confettiCanvasAlt.width = width, this.__confettiCanvasAlt.height = height, this.__fireworksCanvas.width = width, this.__fireworksCanvas.height = height, this._tintBufferCanvas.width = width, this._tintBufferCanvas.height = height, this._tintBufferCanvasAlt.width = width, this._tintBufferCanvasAlt.height = height, this._positionConfetti(width, height), this._positionConfettiCannons(width, height), this._positionLightGenerator(width), this._positionFireworks(width)
}, components.AnimatedConfetti.prototype._positionConfetti = function _positionConfetti(width, height) {
    this._confettiGenerator.width = width, this._confettiGenerator.spawnRate = 400 + (width < 600 ? 800 : 0)
}, components.AnimatedConfetti.prototype._positionConfettiCannons = function _positionConfettiCannons(width, height) {
    var t = width / 2,
        i = height / 2;
    width < 600 ? (this._confettiCannon1.x = 0, this._confettiCannon2.x = width) : (this._confettiCannon1.x = t - 300, this._confettiCannon2.x = t + 300), this._confettiCannon1.y = height, this._confettiCannon2.y = height, this._confettiCannon1.angle = Math.atan2(i - this._confettiCannon1.y, t - this._confettiCannon1.x) / (Math.PI / 180), this._confettiCannon2.angle = Math.atan2(i - this._confettiCannon2.y, t - this._confettiCannon2.x) / (Math.PI / 180)
}, components.AnimatedConfetti.prototype._positionLightGenerator = function _positionLightGenerator(width) {
    this._lightGenerator.x = width / 2 - 50, this._lightGenerator.y = -200, this._lightGenerator.width = 100, this._lightGenerator.height = 300
}, components.AnimatedConfetti.prototype._positionFireworks = function _positionFireworks(width) {
    this._fireworkGenerator.x = width / 2 - 100, this._fireworkGenerator.y = 200
}, components.AnimatedConfetti.prototype._requestAnimFrame = function _requestAnimFrame(scope, t) {
    return requestAnimationFrame(t.bind(scope)) || webkitRequestAnimationFrame(t.bind(scope)) || setTimeout(t.bind(scope), 1e3 / 60)
}, components.AnimatedConfetti.prototype._tintCanvas = function _tintCanvas(color, canvas, buffer) {
    var t = canvas.getContext("2d");
    buffer.getContext("2d");
    t.fillStyle = color, t.fillRect(0, 0, canvas.width, canvas.height), t.globalCompositeOperation = "destination-atop", t.drawImage(buffer, 0, 0)
}, NamespaceManager.Register("components"), components.SnowParticle = function(t, i) {
    this.ctx = t, this.img = i, this.width = i.width, this.height = i.height, this.x = this.random(0, 1.3 * t.canvas.width), this.y = -10, this.size = isPhone() ? this.random(2, 5) : this.random(3, 6), this.angle = this.random(Math.PI / 180 * 210, Math.PI / 180 * 271), this.speed = this.random(1, 4), this.friction = 1, this.gravity = .4, this.alpha = 1, this.decay = this.random(1e-4, .01)
}, components.SnowParticle.prototype.destroy = function() {
    this.ctx = null, this.img = null
}, components.SnowParticle.prototype.update = function() {
    this.speed *= this.friction, this.x += Math.cos(this.angle) * this.speed, this.y += -Math.sin(this.angle) * this.speed + this.gravity, this.alpha -= this.decay
};
components.SnowParticle.prototype.draw = function() {
    this.ctx.save(), this.ctx.globalAlpha = this.alpha, this.ctx.beginPath(), this.ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI, !1), this.ctx.fillStyle = "white", this.ctx.fill(), this.ctx.restore()
}, components.SnowParticle.prototype.random = function(min, max) {
    return Math.random() * (max - min) + min
}, NamespaceManager.Register("components"), components.AnimatedSnow = function() {
    this._generate(), this.running = !1, this.refill = !0, this.canvas = this.getRoot().get(0), this.canvas.width = window.innerWidth, this.canvas.height = window.innerHeight, this.ctx = this.canvas.getContext("2d"), this.particles = [], this.snowImage = new Image, this.snowImage.src = "images/PackAnimation/PackAnimationSnow.png"
}, components.AnimatedSnow.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("canvas");
        t.classList.add("snowCanvas"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.AnimatedSnow.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.AnimatedSnow.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.AnimatedSnow.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.AnimatedSnow.prototype.init = function() {
    this.running = !0, this.activateSnow(0, 5), this._requestAnimFrame(this, this.draw)
}, components.AnimatedSnow.prototype.destroy = function() {
    this.running = !1, this.particles.forEach(function(t) {
        t.destroy()
    }), this.particles = [], this.canvas = null, this.ctx = null, this.snowImage = null, this.destroyGeneratedElements()
}, components.AnimatedSnow.prototype.random = function(min, max) {
    return Math.random() * (max - min) + min
}, components.AnimatedSnow.prototype.activateSnow = function(t, i) {
    setTimeout(function() {
        if (this.running) {
            for (; i-- > 0;) this.particles.push(new components.SnowParticle(this.ctx, this.snowImage));
            this.refill && this.activateSnow(250, isPhone() ? 5 : 10)
        }
    }.bind(this), t)
}, components.AnimatedSnow.prototype.draw = function() {
    if (this.running) {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        for (var t = this.particles.length; t--;) {
            var i = this.particles[t];
            i.update(), i.draw(), i.alpha <= i.decay && this.particles.splice(t, 1)
        }
        this._requestAnimFrame(this, this.draw)
    }
}, components.AnimatedSnow.prototype._requestAnimFrame = function(scope, t) {
    return requestAnimationFrame(t.bind(scope)) || webkitRequestAnimationFrame(t.bind(scope)) || setTimeout(t.bind(scope), 1e3 / 60)
}, Screens.Register("PACK_ANIMATION", "PackAnimation", Screens.APP_SECTION.FUT), pages.PackAnimation = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.NO_HEADER, ""), this._cardComponent = null, this.snowActive = gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_WINTER_THEME), this._generate()
}, utils.JS.inherits(pages.PackAnimation, pages.ScreenBase), pages.PackAnimation.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "PackAnimation");
        var i = document.createElement("div");
        i.classList.add("backgroundVignette"), t.appendChild(i), this._confettiCanvas = new components.AnimatedConfetti, t.appendChild(this._confettiCanvas.getRootElement()), this._snowCanvas = new components.AnimatedSnow, t.appendChild(this._snowCanvas.getRootElement()), this.__itemShell = document.createElement("div"), this.$_itemShell = $(this.__itemShell), this.__itemShell.classList.add("itemShell"), t.appendChild(this.__itemShell);
        var s = document.createElement("div");
        s.classList.add("packShell"), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.PackAnimation.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._confettiCanvas.destroy(), this._confettiCanvas = null, this._snowCanvas.destroy(), this._snowCanvas = null, this.__itemShell = null, this.$_itemShell = null
}, pages.PackAnimation.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.PackAnimation.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.PackAnimation.prototype.initWithItem = function(t) {
    this._confettiCanvas.initWithItem(t), !0 === this.snowActive && this._snowCanvas.init()
}, pages.PackAnimation.prototype.destroy = function() {
    utils.JS.isValid(this._cardComponent) && (this._cardComponent.destroy(), this._cardComponent = null), pages.PackAnimation.superClass_.destroy.call(this)
}, pages.PackAnimation.prototype.setPackTier = function(t) {
    var className = "";
    switch (t) {
        case enums.Purchase.PackTier.BRONZE:
            className = "bronze";
            break;
        case enums.Purchase.PackTier.SILVER:
            className = "silver";
            break;
        case enums.Purchase.PackTier.GOLD:
            className = "gold";
            break;
        case enums.Purchase.PackTier.SPECIAL:
            className = "special";
            break;
        case enums.Purchase.PackTier.LOAN:
            className = "loan";
            break;
        case enums.Purchase.PackTier.STARTER:
            className = "starter";
            break;
        case enums.Purchase.PackTier.LEGENDS:
            className = "legend";
            break;
        case enums.Purchase.PackTier.STORY:
            className = "story";
            break;
        case enums.Purchase.PackTier.SBC:
            className = "sbc";
            break;
        case enums.Purchase.PackTier.CHAMPION:
            className = "champion";
            break;
        default:
            className = "gold"
    }
    this.getRoot().addClass(className)
}, pages.PackAnimation.prototype.generateItem = function(t) {
    utils.JS.isValid(this._cardComponent) || (this._cardComponent = factories.ItemView.createLargeItem(t), this._cardComponent.init(), this._cardComponent.render(t), this.$_itemShell.append(this._cardComponent.getRoot()))
}, pages.controllers.PackAnimationController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._footerState = gFooter.isVisible(), this._animationTimeout = 0, this._callback = function() {
        NavManager.requestGoBackScreen()
    }
}, utils.JS.inherits(pages.controllers.PackAnimationController, pages.controllers.ScreenControllerBase), pages.controllers.PackAnimationController.prototype.onScreenInitialized = function(data, t) {
    var i = data.itemData,
        s = data.packTier;
    this._view.setPackTier(s), this._view.generateItem(i), this._footerState && gFooter.hide(), utils.JS.isFunction(data.callback) && (this._callback = data.callback), this._animationTimeout = setTimeout(this._runCallback.bind(this), 4500), this._view.initWithItem(i)
}, pages.controllers.PackAnimationController.prototype.onDailyGift = function(t, i, data) {
    t.unobserve(this)
}, pages.controllers.PackAnimationController.prototype.onAppPaused = function() {
    clearTimeout(this._animationTimeout)
}, pages.controllers.PackAnimationController.prototype.onAppResumed = function() {
    this._runCallback.call(this)
}, pages.controllers.PackAnimationController.prototype.onRequestBack = function() {
    return !1
}, pages.controllers.PackAnimationController.prototype._runCallback = function() {
    this._footerState && gFooter.show(), this._callback()
}, Screens.Register("SEARCH_RESULTS", "SearchResults", Screens.APP_SECTION.AUCTION_SEARCH, "Transfer Market Results - List View"), pages.SearchResults = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.searchresults")), gTelemetryManager.trackPage(TelemetryManager.Sections.AUCTIONS, "Transfer Market Search Results"), this._generate()
}, utils.JS.inherits(pages.SearchResults, pages.ScreenBase), pages.SearchResults.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("SearchResults"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SearchResults.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.SearchResults.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SearchResults.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.transfers"), views.transfers.MarketSearch = function MarketSearchView() {
    FUITargetActionView.call(this), this._pinnedItemView = null, Object.defineProperty(this, "_pinnedItemView", {
        writable: !0,
        enumerable: !1
    }), this._generate()
}, utils.JS.inherits(views.transfers.MarketSearch, FUITargetActionView), views.transfers.MarketSearch.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("SearchResults"), this.__pinnedDiv = document.createElement("ul"), this.$_pinnedDiv = $(this.__pinnedDiv), this.__pinnedDiv.classList.add("pinnedDiv"), t.appendChild(this.__pinnedDiv), this._list = new views.lists.PaginatedItemList, this._list.getRootElement().classList.add("nativeScrolling"), t.appendChild(this._list.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.transfers.MarketSearch.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__pinnedDiv = null, this.$_pinnedDiv = null, this._list.destroy(), this._list = null
}, views.transfers.MarketSearch.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.transfers.MarketSearch.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.transfers.MarketSearch.prototype.init = function init() {
    this.superclass(), this._list.init(), this._list.addTarget(this, this._bubbleEvent, enums.UIListEvent.ROW_SELECT), this._list.addTarget(this, this._bubbleEvent, enums.UIPaginationEvent.NEXT), this._list.addTarget(this, this._bubbleEvent, enums.UIPaginationEvent.PREVIOUS), this.setInteractionState(!0)
}, views.transfers.MarketSearch.prototype.dealloc = function dealloc() {
    this._pinnedItemView = null, this.superclass()
}, views.transfers.MarketSearch.prototype.updateListTopPosition = function updateListTopPosition() {
    var height = this._pinnedItemView ? this._pinnedItemView.getRoot().outerHeight() : 0;
    requestAnimationFrame(function() {
        this._list.getRoot().css("top", height)
    }.bind(this))
}, views.transfers.MarketSearch.prototype.setItems = function setItems(t) {
    t.length > 0 ? (this._list.setItems(t), this._list.renderItems(), this._list.setRowTapCallback()) : this.setEmptyListMessage(utils.JS.isValid(this._pinnedItemView))
}, views.transfers.MarketSearch.prototype.removeItemsById = function removeItemsById(t) {
    this._list.removeItemsById(t)
}, views.transfers.MarketSearch.prototype.setEmptyListMessage = function setEmptyListMessage(t) {
    var i = gLocalization.lText(t ? "popup.error.searchauctions.retrysearchfromsquad" : "popup.error.searchauctions.retrysearch"),
        s = gLocalization.lText(t ? "button.searchagainfromsquad" : "button.searchagain");
    this._list.appendEmptyListMessage(i, s, t, function() {
        NavManager.requestGoBackScreen()
    }), this._list.setEmptyListIcon(components.ListNoResults.ICON_TYPE.SEARCH)
}, views.transfers.MarketSearch.prototype.setRowTapCallback = function setRowTapCallback(t) {
    this._list.setRowTapCallback(t)
}, views.transfers.MarketSearch.prototype.setPaginationState = function setPaginationState(t, i) {
    this._list.setPaginationState(t, i)
}, views.transfers.MarketSearch.prototype.appendPinnedItemView = function appendPinnedItemView(view) {
    this._pinnedItemView = view;
    var root = this.getRootElement();
    root.insertBefore(view.getRootElement(), root.firstChild), this.updateListTopPosition()
}, views.transfers.MarketSearch.prototype.onTimedUpdate = function() {
    this._list.onTimedUpdate()
}, views.transfers.MarketSearch.prototype.selectListRow = function selectListRow(id) {
    this._list.selectRow(id)
}, views.transfers.MarketSearch.prototype._bubbleEvent = function _bubbleEvent(sender, event, data) {
    this.isInteractionEnabled() && this._triggerActions(event, data)
}, NamespaceManager.Register("controllers.transfers"), controllers.transfers.MarketSearch = function MarketSearchViewController() {
    FUIViewController.call(this), this._viewmodel = null, this._searchCriteria = null, this._compareItem = null, this._selectedItem = null, this._pinnedListItem = null, this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1,
        enumerable: !0
    }), this.onItemSelected = new FUTObservable, Object.defineProperty(this, "onItemSelected", {
        writable: !1,
        enumerable: !0
    }), this._arbitraryInterval = null
}, utils.JS.inherits(controllers.transfers.MarketSearch, FUIViewController), controllers.transfers.MarketSearch.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var t = gConfigurationModel.getConfigObject(models.ConfigurationModel.KEY_ITEMS_PER_PAGE),
            i = utils.JS.isValid(t) ? t[models.ConfigurationModel.ITEMS_PER_PAGE.TRANSFER_MARKET] : 15;
        this._viewmodel = new viewmodels.PaginatedItemList([], i), this._viewmodel.dataUpdated.observe(this, this._eViewmodelDataUpdated), this._searchCriteria && (this._searchCriteria.count = i + 1);
        var view = this.getView();
        view.addTarget(this, this._eRowSelected, enums.UIListEvent.ROW_SELECT), view.addTarget(this, this._eNextPage, enums.UIPaginationEvent.NEXT), view.addTarget(this, this._ePrevPage, enums.UIPaginationEvent.PREVIOUS), this._arbitraryInterval = setInterval(this._arbitraryViewUpdate.bind(this), 5e3)
    }
}, controllers.transfers.MarketSearch.prototype.initWithSearchCriteria = function initWithSearchCriteria(t) {
    this.initialized || (utils.Debug.Assert(t instanceof transferobjects.SearchCriteria, "Initialization expected a search criteria DTO."), this._searchCriteria = t, this.init())
}, controllers.transfers.MarketSearch.prototype.dealloc = function dealloc() {
    this.superclass(), this._viewmodel.stopAuctionUpdates(), this._viewmodel.dataUpdated.unobserve(this), this.onDataChange.dealloc(), this.onItemSelected.dealloc(), this._viewmodel = null, this._searchCriteria = null, this._compareItem = null, this._selectedItem = null, clearInterval(this._arbitraryInterval), utils.JS.isValid(this._pinnedListItem) && (this._pinnedListItem.dealloc(), this._pinnedListItem = null)
}, controllers.transfers.MarketSearch.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.transfers.MarketSearch
}, controllers.transfers.MarketSearch.prototype.viewDidAppear = function viewDidAppear() {
    this._requestItems(), this._compareItem && !this._pinnedListItem && this._generatePinnedItemView(), this._pinnedListItem && this._pinnedListItem.viewDidAppear()
}, controllers.transfers.MarketSearch.prototype.setPinnedItem = function setPinnedItem(item) {
    this._compareItem = item, this.hasLoaded && !this._pinnedListItem && this._generatePinnedItemView()
}, controllers.transfers.MarketSearch.prototype.setSelectedItem = function setSelectedItem(item) {
    this._selectedItem = item
}, controllers.transfers.MarketSearch.prototype.getSelectedItem = function getSelectedItem() {
    return this._viewmodel.current()
}, controllers.transfers.MarketSearch.prototype._generatePinnedItemView = function _generatePinnedItemView() {
    this._pinnedListItem = new controllers.views.PinnedListItem, this._pinnedListItem.initWithItem(this._compareItem), this.addChildViewController(this._pinnedListItem), this.getView().appendPinnedItemView(this._pinnedListItem.getView())
}, controllers.transfers.MarketSearch.prototype._requestItems = function _requestItems() {
    this._viewmodel.stopAuctionUpdates(), repositories.TransferMarket.search(this._searchCriteria).observe(this, function _onRequestItemsComplete(t, data) {
        if (t.unobserve(this), data.success)
            if (this._searchCriteria.offset > 0 && 0 === data.items.length) this._searchCriteria.offset = Math.max(this._searchCriteria.offset - this._viewmodel.numItemsPerPage, 0), this._requestItems();
            else {
                var i = data.items.slice();
                if (this.onDataChange.notify({
                        items: i
                    }), i.length > this._viewmodel.numItemsPerPage && (i = i.slice(0, this._viewmodel.numItemsPerPage)), this._viewmodel.resetCollection(i), this._selectedItem && i.length > 0) {
                    var index = this._viewmodel.indexOf(function(t) {
                        return t.id === this._selectedItem.id
                    }.bind(this));
                    index > 0 && this._viewmodel.setIndex(index), this._selectedItem = null
                }
                var view = this.getView();
                if (view.setItems(this._viewmodel.values()), !isPhone() && i.length > 0 && view.selectListRow(this._viewmodel.current().id), view.setPaginationState(this._searchCriteria.offset > 0, data.items.length > this._viewmodel.numItemsPerPage), utils.JS.isValid(this._compareItem)) {
                    var s = utils.JS.find(i, function(item) {
                        return item.getAuctionData().tradeId === this._compareItem.getAuctionData().tradeId
                    }.bind(this));
                    utils.JS.isValid(s) ? this._pinnedListItem.setItem(s) : this._viewmodel.add(this._compareItem, this._viewmodel.length)
                }
            }
        else services.Notification.queue([gLocalization.lText("popup.error.searcherror"), enums.UINotificationType.NEGATIVE]);
        this._viewmodel.startAuctionUpdates()
    })
}, controllers.transfers.MarketSearch.prototype.getIterator = function getIterator() {
    return this._viewmodel
}, controllers.transfers.MarketSearch.prototype.removeItemsById = function removeItemsById(t) {
    if (this._viewmodel.length > 0) {
        var view = this.getView();
        view.removeItemsById(t), view.selectListRow(this._viewmodel.current().id)
    } else this.refreshList()
}, controllers.transfers.MarketSearch.prototype.refreshList = function refreshList() {
    var view = this.getView();
    if (this._compareItem) {
        var t = this._compareItem.id;
        if (-1 === this._viewmodel.indexOf(function(a) {
                return a.id === t
            })) return void NavManager.requestGoBackToScreenId(Screens.getView("SEARCH_RESULTS"))
    }
    view.setItems(this._viewmodel.values()), view.selectListRow(this._viewmodel.current().id), utils.JS.isValid(this._pinnedListItem) && this._pinnedListItem.refresh()
}, controllers.transfers.MarketSearch.prototype._ePrevPage = function _ePrevPage(sender, event, data) {
    this._searchCriteria.offset = Math.max(this._searchCriteria.offset - this._viewmodel.numItemsPerPage, 0), this._requestItems()
}, controllers.transfers.MarketSearch.prototype._eNextPage = function _eNextPage(sender, event, data) {
    this._searchCriteria.offset += this._viewmodel.numItemsPerPage, this._requestItems()
}, controllers.transfers.MarketSearch.prototype._eRowSelected = function _eRowSelected(sender, event, data) {
    var item = data.item || null,
        index = this._viewmodel.indexOf(function(a) {
            return a.id === item.id
        });
    if (item) {
        var t = item.getAuctionData();
        if (!gSettingsModel.isTradingEnabled() && (t.isActiveTrade() || t.isClosedTrade())) return void utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.TRADING_DISABLED);
        var i = index !== this._viewmodel.getIndex();
        i && this._viewmodel.setIndex(index), this.getParentViewController() ? i && (this.onItemSelected.notify(item), this.getView().selectListRow(item.id)) : NavManager.requestChildScreen(Screens.getView("ITEM_DETAILS"), {
            iterator: this._viewmodel
        })
    }
}, controllers.transfers.MarketSearch.prototype._eViewmodelDataUpdated = function _eViewmodelDataUpdated(t) {
    this.getView().onTimedUpdate()
}, controllers.transfers.MarketSearch.prototype._arbitraryViewUpdate = function _arbitraryViewUpdate() {
    this.getView().onTimedUpdate()
}, NamespaceManager.Register("controllers.transfers"), controllers.transfers.MarketSearchLandscape = function MarketSearchLandscapeViewController() {
    FUISplitViewController.call(this), this._listController = new controllers.transfers.MarketSearch, this._itemDetailController = new controllers.navigation.ItemDetails
}, utils.JS.inherits(controllers.transfers.MarketSearchLandscape, FUISplitViewController), controllers.transfers.MarketSearchLandscape.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._listController.init(), this._listController.onDataChange.observe(this, this._eListDataChanged), this._listController.onItemSelected.observe(this, this._eItemSelected), this._itemDetailController.initWithIterator(this._listController.getIterator()), this.addChildViewController(this._listController), this.addChildViewController(this._itemDetailController);
        var t = getDefaultDispatcher();
        t.addObserver(enums.AppNotification.ITEM_DISCARD, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_LIST, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_MOVE, this, this._onItemDetailsUpdate)
    }
}, controllers.transfers.MarketSearchLandscape.prototype.initWithSearchCriteria = function initWithSearchCriteria(t) {
    this.initialized || (this._listController.initWithSearchCriteria(t), this.init())
}, controllers.transfers.MarketSearchLandscape.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(), this._itemDetailController = null, this._listController.dealloc(), this._listController = null;
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.ITEM_DISCARD, this), t.removeObserver(enums.AppNotification.ITEM_LIST, this), t.removeObserver(enums.AppNotification.ITEM_MOVE, this), this.superclass()
}, controllers.transfers.MarketSearchLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._setLeftController(this._listController)
}, controllers.transfers.MarketSearchLandscape.prototype.setPinnedItem = function setPinnedItem(item) {
    this._listController && this._listController.setPinnedItem(item)
}, controllers.transfers.MarketSearchLandscape.prototype.setSelectedItem = function setSelectedItem(item) {
    this._listController.setSelectedItem(item)
}, controllers.transfers.MarketSearchLandscape.prototype.getSelectedItem = function getSelectedItem() {
    return this._listController.getSelectedItem()
}, controllers.transfers.MarketSearchLandscape.prototype._eItemSelected = function _eItemSelected(t, index) {
    this._itemDetailController.setIndex(index)
}, controllers.transfers.MarketSearchLandscape.prototype._eListDataChanged = function _eListDataChanged(t, data) {
    data.items && (data.items.length > 0 ? (this._setRightController(this._itemDetailController), this._itemDetailController.enableSwiping(!1), this._itemDetailController.setIndex(this._listController.getIterator().getIndex())) : this.hideRightController())
}, controllers.transfers.MarketSearchLandscape.prototype._onItemDetailsUpdate = function _onItemDetailsUpdate(t, sender, data) {
    this._listController.removeItemsById(data.itemIds || [])
}, pages.controllers.SearchResultsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null
}, utils.JS.inherits(pages.controllers.SearchResultsController, pages.controllers.ScreenControllerBase), pages.controllers.SearchResultsController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.SearchResultsController.superClass_.destroy.call(this)
}, pages.controllers.SearchResultsController.prototype.getDataCache = function getDataCache() {
    return {
        selectedItem: this._controller.getSelectedItem()
    }
}, pages.controllers.SearchResultsController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.SearchResultsController.superClass_.onScreenInitialized.call(this, data, t);
    var i = data && data.searchCriteria ? data.searchCriteria : gAuthenticationModel.getUser().marketSearchCriteria;
    isPhone() ? (this._controller = new controllers.transfers.MarketSearch, this._controller.initWithSearchCriteria(i)) : (this._controller = new controllers.transfers.MarketSearchLandscape, this._controller.initWithSearchCriteria(i)), t && t.selectedItem && this._controller.setSelectedItem(t.selectedItem), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear(), data && data.itemData instanceof entities.Item && this._controller.setPinnedItem(data.itemData)
}, Screens.Register("COMPARE_PRICE", "ComparePrice", Screens.APP_SECTION.AUCTION_SEARCH, "Transfer Market Results - List View"), pages.ComparePrice = function ComparePriceScreen() {
    pages.SearchResults.call(this)
}, utils.JS.inherits(pages.ComparePrice, pages.SearchResults), pages.controllers.ComparePriceController = function(view) {
    pages.controllers.SearchResultsController.call(this, view)
}, utils.JS.inherits(pages.controllers.ComparePriceController, pages.controllers.SearchResultsController), Screens.Register("ITEM_DETAILS", "ItemDetails", Screens.APP_SECTION.FUT, "Item - Detail View"), pages.ItemDetails = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.detailView")), this._generate()
}, utils.JS.inherits(pages.ItemDetails, pages.ScreenBase), pages.ItemDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ItemDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ItemDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ItemDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.ItemDetailsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.navigation.ItemDetails
}, utils.JS.inherits(pages.controllers.ItemDetailsController, pages.controllers.ScreenControllerBase), pages.controllers.ItemDetailsController.prototype.destroy = function() {
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.ITEM_DISCARD, this), t.removeObserver(enums.AppNotification.ITEM_MOVE, this), t.removeObserver(enums.AppNotification.ITEM_REDEEM, this), this._controller.dealloc(), this._controller = null, pages.controllers.ItemDetailsController.superClass_.destroy.call(this)
}, pages.controllers.ItemDetailsController.prototype.onScreenInitialized = function(data, t) {
    function _onDataChange(t, object, data) {
        0 === iterator.length && _onLoadFail.call(this)
    }

    function _onLoadFail() {
        NavManager.requestGoBackScreen() || setTimeout(function() {
            NavManager.requestGoBackScreen()
        }, 500)
    }
    var iterator = data ? data.iterator : null;
    if (iterator && iterator instanceof FUTIterator) {
        this._controller.initWithIterator(iterator), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear();
        var i = getDefaultDispatcher();
        i.addObserver(enums.AppNotification.ITEM_DISCARD, this, _onDataChange), i.addObserver(enums.AppNotification.ITEM_MOVE, this, _onDataChange), i.addObserver(enums.AppNotification.ITEM_REDEEM, this, _onDataChange)
    } else utils.Debug.Assert(!1, "[pages.controllers.ItemDetailsController] Invalid view data; expected data.iterator to be an instance of FUTIterator"), _onLoadFail.call(this)
}, Screens.Register("DETAIL_SLOT_VIEW", "ViewDetailSquad", Screens.APP_SECTION.SQUADS), pages.ViewDetailSquad = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.detailView")), this._generate()
}, utils.JS.inherits(pages.ViewDetailSquad, pages.ScreenBase), pages.ViewDetailSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("DetailView"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ViewDetailSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ViewDetailSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ViewDetailSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.ViewDetailSquadController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.navigation.SquadItemDetails
}, utils.JS.inherits(pages.controllers.ViewDetailSquadController, pages.controllers.ScreenControllerBase), pages.controllers.ViewDetailSquadController.prototype.init = function() {}, pages.controllers.ViewDetailSquadController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.ViewDetailSquadController.superClass_.destroy.call(this)
}, pages.controllers.ViewDetailSquadController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.ViewDetailSquadController.superClass_.onScreenInitialized.call(this, data, t), utils.Debug.Assert(utils.JS.isNumber(data.slot), "Expected a slot number in screen data."), data.challenge ? (gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "SBC Squad - Player Details"), this._controller.initWithSBCChallenge(data.challenge, data.slot)) : data.squad ? (gTelemetryManager.trackPage(TelemetryManager.Sections.SQUADS, "Squad - Player Details"), this._controller.initWithSquad(data.squad, data.slot)) : utils.Debug.Assert(!1, "pages.controllers.ViewDetailSquadController::onScreenInitialized. Expected either a squad or an SBC challenge."), this._controller.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, Screens.Register("ACCOUNT_LOCKED", "AccountLocked", Screens.APP_SECTION.LOGIN), pages.AccountLocked = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.SETTINGS_BUTTON : components.Header.NO_HEADER, gLocalization.lText("title.accountlocked")), this._generate()
}, utils.JS.inherits(pages.AccountLocked, pages.ScreenBase), pages.AccountLocked.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.AccountLocked.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.AccountLocked.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.AccountLocked.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.AccountLocked = function() {
    views.bootFlow.BootFlow.call(this), this._generate()
}, utils.JS.inherits(views.bootFlow.AccountLocked, views.bootFlow.BootFlow), views.bootFlow.AccountLocked.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-accountlocked"), i.classList.add("l-accountlocked"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("layout-article"), l.classList.add("boot-content");
        var u = document.createElement("div");
        u.classList.add("page-controller-icon"), l.appendChild(u), o.appendChild(l), s.appendChild(o);
        var h = document.createElement("div");
        h.classList.add("boot-primary-content");
        var p = document.createElement("div");
        p.classList.add("boot-content"), p.classList.add("layout-article"), this.__title = document.createElement("h2"), this.$_title = $(this.__title), p.appendChild(this.__title), this.__message1 = document.createElement("p"), this.$_message1 = $(this.__message1), p.appendChild(this.__message1), this.__message2 = document.createElement("p"), this.$_message2 = $(this.__message2), p.appendChild(this.__message2), h.appendChild(p), s.appendChild(h), i.appendChild(s), t.appendChild(i), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.AccountLocked.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this.__title = null, this.$_title = null, this.__message1 = null, this.$_message1 = null, this.__message2 = null, this.$_message2 = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.AccountLocked.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.AccountLocked.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.AccountLocked.prototype.init = function init() {
    this.$_title.html(gLocalization.lText("title.accountlocked")), this.$_message1.html(gLocalization.lText("accountlocked.message1")), this.superclass()
}, views.bootFlow.AccountLocked.prototype.setHelpLink = function setHelpLink(link) {
    this.$_message2.html(gLocalization.lPrint("accountlocked.message2", [link])), gLocalization.replaceHtmlLinks(this.$_message2)
}, views.bootFlow.AccountLocked.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.AccountLocked = function AccountLockedViewController() {
    controllers.bootFlow.BootFlow.call(this), this._personaController = null
}, utils.JS.inherits(controllers.bootFlow.AccountLocked, controllers.bootFlow.BootFlow), controllers.bootFlow.AccountLocked.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews(), view.setHelpLink(this.getHelpLink())
}, controllers.bootFlow.AccountLocked.prototype.dealloc = function dealloc() {
    this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.bootFlow.AccountLocked.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.AccountLocked
}, controllers.bootFlow.AccountLocked.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear()
}, controllers.bootFlow.AccountLocked.prototype.getHelpLink = function getHelpLink() {
    var locale = gLocalization.getLocale(),
        link = gLocalization.lText("link.help." + locale);
    return -1 !== link.indexOf("link.help") && (link = gLocalization.lText("link.help.default")), -1 !== link.indexOf("link.help") && (link = "http://help.ea.com/"), link
}, pages.controllers.AccountLockedController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.AccountLocked
}, utils.JS.inherits(pages.controllers.AccountLockedController, pages.controllers.ScreenControllerBase), pages.controllers.AccountLockedController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.AccountLockedController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.AccountLockedController.superClass_.destroy.call(this)
}, pages.controllers.AccountLockedController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.AccountLockedController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.AccountLockedController.prototype.onDailyGift = function onDailyGift(t, i, data) {
    t.unobserve(this)
}, Screens.Register("OBJECTIVES", "ObjectivesHub", Screens.APP_SECTION.OBJECTIVES), pages.ObjectivesHub = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.objectives")), this._generate()
}, utils.JS.inherits(pages.ObjectivesHub, pages.ScreenBase), pages.ObjectivesHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ObjectivesHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ObjectivesHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ObjectivesHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.objectives"), views.objectives.ObjectiveDetails = function ObjectiveDetailsView() {
    FUITargetActionView.call(this), this.onCancel = new FUTObservable, Object.defineProperty(this, "onCancel", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.objectives.ObjectiveDetails, FUITargetActionView), views.objectives.ObjectiveDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "ObjectiveDetailsOverlay");
        var i = document.createElement("header");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), i.appendChild(this.__title), this._exitBtn = new components.ImageButton, this._exitBtn.getRootElement().classList.add("exit-btn"), i.appendChild(this._exitBtn.getRootElement()), t.appendChild(i), this._objectiveImage = new components.ImageLoader, t.appendChild(this._objectiveImage.getRootElement()), this.__detailsHeader = document.createElement("h2"), this.$_detailsHeader = $(this.__detailsHeader), this.__detailsHeader.classList.add("secondary"), t.appendChild(this.__detailsHeader), this.__description = document.createElement("p"), this.$_description = $(this.__description), t.appendChild(this.__description), this.__buttonContainer = document.createElement("footer"), this.$_buttonContainer = $(this.__buttonContainer), this._actionBtn = new views.buttons.DefaultButton, this._actionBtn.getRootElement().classList.add("call-to-action"), this.__buttonContainer.appendChild(this._actionBtn.getRootElement()), t.appendChild(this.__buttonContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.objectives.ObjectiveDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this._exitBtn.destroy(), this._exitBtn = null, this._objectiveImage.destroy(), this._objectiveImage = null, this.__detailsHeader = null, this.$_detailsHeader = null, this.__description = null, this.$_description = null, this.__buttonContainer = null, this.$_buttonContainer = null, this._actionBtn.destroy(), this._actionBtn = null
}, views.objectives.ObjectiveDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.objectives.ObjectiveDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.objectives.ObjectiveDetails.prototype.init = function init() {
    this.superclass(), this.__detailsHeader.textContent = gLocalization.lText("objectives.details.header"), this._exitBtn.init(), this._exitBtn.addTarget(this.onCancel, this.onCancel.notify, enums.Event.TAP), this._actionBtn.init(), this._actionBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP)
}, views.objectives.ObjectiveDetails.prototype.dealloc = function dealloc() {
    this.onCancel.dealloc(), this.onCancel = null, this.superclass()
}, views.objectives.ObjectiveDetails.prototype.setDetails = function setDetails(title, t, i, s) {
    function onResourceLoaded(t, l, u, path) {
        t.unobserve(this), l || (o || i === s ? this._objectiveImage.setLocalResource("images/dynamicObjectives/generic_fut18.png") : (o = !0, this._objectiveImage.setResource(utils.AssetLocator.getObjectiveImageURN(s, enums.Year.ASSET), !0).observe(this, onResourceLoaded)))
    }
    this.__title.textContent = title, this.__description.textContent = t, this._objectiveImage.setResource(utils.AssetLocator.getObjectiveImageURN(i, enums.Year.ASSET), !0).observe(this, onResourceLoaded);
    var o = !1
}, views.objectives.ObjectiveDetails.prototype.setGoToButton = function setGoToButton(t, text) {
    this.$_buttonContainer.toggle(t), this._actionBtn.setText(text)
}, views.objectives.ObjectiveDetails.prototype._eBtnTapped = function _eBtnTapped(sender, event, data) {
    this._triggerActions(enums.Event.TAP)
}, NamespaceManager.Register("controllers.objectives"), controllers.objectives.ObjectiveDetails = function ObjectiveDetailsController(t) {
    controllers.views.popups.BasePopup.call(this), this._objective = t, Object.defineProperty(this, "_objective", {
        writable: !1
    })
}, utils.JS.inherits(controllers.objectives.ObjectiveDetails, controllers.views.popups.BasePopup), controllers.objectives.ObjectiveDetails.prototype.init = function init() {
    var view = this.getView();
    view.setGoToButton(this._objective.hasWebLink(), this.getGoToLinkText()), view.setDetails(this._objective.name, this._objective.shortDescription, this._objective.getImageIdentifier(), this._objective.gameArea), view.onCancel.observe(this, this.closePopup.bind(this)), view.addTarget(this, this._eGoToBtnTapped, enums.Event.TAP), this.superclass()
}, controllers.objectives.ObjectiveDetails.prototype.dealloc = function dealloc() {
    this._objective = null, this.superclass()
}, controllers.objectives.ObjectiveDetails.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.objectives.ObjectiveDetails
}, controllers.objectives.ObjectiveDetails.prototype.getGoToLinkText = function getGoToLinkText() {
    switch (this._objective.link) {
        case enums.Objectives.GoToLink.AUCTION_SEARCH:
            return gLocalization.lText("watchlist.button.gotoauctionsearch");
        case enums.Objectives.GoToLink.SBC_SQUAD:
            return gLocalization.lText("button.gotosbc");
        case enums.Objectives.GoToLink.SQUAD:
            return gLocalization.lText("manage.squadlist.gotoactivequad");
        default:
            return ""
    }
}, controllers.objectives.ObjectiveDetails.prototype._eGoToBtnTapped = function _eGoToBtnTapped() {
    this.closePopup();
    var screen;
    switch (this._objective.link) {
        case enums.Objectives.GoToLink.AUCTION_SEARCH:
            screen = !gConfigurationModel.getConfigBoolean(models.ConfigurationModel.KEY_HIDE_TRANSFER_MARKET) && gUserModel.hasTradeAccess() && gSettingsModel.isTradingEnabled() ? Screens.getView("SEARCH") : Screens.getView("TRANSFERS_HUB");
            break;
        case enums.Objectives.GoToLink.SBC_SQUAD:
            if (!gSettingsModel.isSBCEnabled()) return services.Notification.queue([gLocalization.lText("sbc.notification.disabled"), enums.UINotificationType.NEGATIVE]), void NavManager.requestRootScreen(Screens.getView("HOME"), null, !0);
            screen = Screens.getView("SBC_HUB");
            break;
        case enums.Objectives.GoToLink.SQUAD:
            screen = Screens.getView("SQUAD_OVERVIEW");
            break;
        default:
            return void utils.Debug.Assert(!1, "controllers.objectives.ObjectiveDetails::_eGoToBtnTapped. Invalid link that should have not been pressed.")
    }
    NavManager.requestChildScreen(screen), TelemetryManager.trackEvent(TelemetryManager.Sections.OBJECTIVES, TelemetryManager.Categories.BUTTON_PRESS, "Take Me There - " + screen)
}, NamespaceManager.Register("views.objectives"), views.objectives.ObjectiveRewards = function ObjectiveRewardsView() {
    FUITargetActionView.call(this), this._generate()
}, utils.JS.inherits(views.objectives.ObjectiveRewards, FUITargetActionView), views.objectives.ObjectiveRewards.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "ObjectiveRewardsOverlay");
        var i = document.createElement("header"),
            s = document.createElement("strong");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), s.appendChild(this.__title), i.appendChild(s), t.appendChild(i);
        var o = document.createElement("div");
        o.classList.add("content-container"), this.__description = document.createElement("div"), this.$_description = $(this.__description), this.__description.classList.add("description"), o.appendChild(this.__description);
        var l = document.createElement("section");
        l.classList.add("rewards-container"), this._rewardsCarousel = new components.RewardsCarousel, l.appendChild(this._rewardsCarousel.getRootElement()), o.appendChild(l), t.appendChild(o);
        var u = document.createElement("footer");
        this._actionBtn = new views.buttons.DefaultButton, this._actionBtn.getRootElement().classList.add("call-to-action"), u.appendChild(this._actionBtn.getRootElement()), t.appendChild(u), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.objectives.ObjectiveRewards.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__description = null, this.$_description = null, this._rewardsCarousel.destroy(), this._rewardsCarousel = null, this._actionBtn.destroy(), this._actionBtn = null
}, views.objectives.ObjectiveRewards.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.objectives.ObjectiveRewards.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.objectives.ObjectiveRewards.prototype.init = function init() {
    this.superclass(), this.__title.textContent = gLocalization.lText("objective.rewards.title"), this._actionBtn.init(), this._actionBtn.setText(gLocalization.lText("objective.rewards.claim")), this._actionBtn.addTarget(this, this._eBtnTapped, enums.Event.TAP)
}, views.objectives.ObjectiveRewards.prototype.renderDetails = function renderDetails(name, t) {
    this.__description.textContent = gLocalization.lPrint("objective.rewards.description", [name]), this._setupRewardsCarousel(t)
}, views.objectives.ObjectiveRewards.prototype.renderAwards = function renderAwards(t) {
    this.__description.textContent = gLocalization.lText("objective.rewards.claimAlldescription"), this._setupRewardsCarousel(t)
}, views.objectives.ObjectiveRewards.prototype.renderAutoClaimed = function renderAutoClaimed() {
    this.__description.textContent = gLocalization.lText("objective.rewards.autoclaimed")
}, views.objectives.ObjectiveRewards.prototype._setupRewardsCarousel = function _setupRewardsCarousel(t) {
    t.length > 0 && (this._rewardsCarousel.setup(t), this._rewardsCarousel.slick())
}, views.objectives.ObjectiveRewards.prototype._eBtnTapped = function _eBtnTapped(sender, event, data) {
    this._triggerActions(enums.Event.TAP)
}, controllers.objectives.ObjectiveRewards = function ObjectiveRewardsController(t, i) {
    controllers.views.popups.BasePopup.call(this), this._objective = t || null, Object.defineProperty(this, "_objective", {
        writable: !1
    }), this._awards = i || [], Object.defineProperty(this, "_awards", {
        writable: !1
    })
}, utils.JS.inherits(controllers.objectives.ObjectiveRewards, controllers.views.popups.BasePopup), controllers.objectives.ObjectiveRewards.prototype.init = function init() {
    var view = this.getView();
    utils.JS.isValid(this._objective) ? view.renderDetails(this._objective.name, this._awards) : this._awards.length > 0 ? view.renderAwards(this._awards) : view.renderAutoClaimed(), view.addTarget(this, this._eBtnTapped, enums.Event.TAP), this.superclass()
}, controllers.objectives.ObjectiveRewards.prototype.dealloc = function dealloc() {
    this._objective = null, this._awards = [], this.superclass()
}, controllers.objectives.ObjectiveRewards.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.objectives.ObjectiveRewards
}, controllers.objectives.ObjectiveRewards.prototype._eBtnTapped = function _eBtnTapped() {
    this.closePopup()
}, NamespaceManager.Register("viewmodels"), viewmodels.Objectives = function(t) {
    FUTIterator.call(this, t)
}, utils.JS.inherits(viewmodels.Objectives, FUTIterator), viewmodels.Objectives.prototype._getValidObjectivesByType = function _getValidObjectivesByType(type) {
    return this._collection.filter(function(t) {
        return t.type === type && !t.isInvalid()
    })
}, viewmodels.Objectives.prototype.getObjectives = function getObjectives(type) {
    return this._getValidObjectivesByType(type).sort(function sortObjectives(a, b) {
        if (a.isUnclaimed() !== b.isUnclaimed()) {
            if (!b.isUnclaimed() && a.isUnclaimed()) return -1;
            if (!a.isUnclaimed() && b.isUnclaimed()) return 1
        }
        if (a.isInProgress() !== b.isInProgress()) {
            if (!b.isInProgress() && a.isInProgress()) return -1;
            if (!a.isInProgress() && b.isInProgress()) return 1
        }
        if (a.isWeb !== b.isWeb) {
            if (!b.isWeb && a.isWeb) return -1;
            if (!a.isWeb && b.isWeb) return 1
        }
        if (a.difficulty !== b.difficulty) {
            if (a.difficulty < b.difficulty) return -1;
            if (b.difficulty < a.difficulty) return 1
        }
        if (a.expiryTime !== b.expiryTime) {
            if (a.expiryTime < b.expiryTime) return -1;
            if (b.expiryTime < a.expiryTime) return 1
        }
        if (a.isRedeemed() !== b.isRedeemed()) {
            if (!b.isRedeemed() && a.isRedeemed()) return -1;
            if (!a.isRedeemed() && b.isRedeemed()) return 1
        }
        return 0
    })
}, viewmodels.Objectives.prototype.getCompletedObjectiveCount = function getCompletedObjectiveCount(type) {
    return this._collection.reduce(function(t, i) {
        return i.type === type && i.isCompleted() && t++, t
    }, 0)
}, viewmodels.Objectives.prototype.getExpiryTimestamp = function getExpiryTimestamp(type) {
    var t = this._getValidObjectivesByType(type);
    return t.length > 0 ? t[0].expiryTime : -1
}, viewmodels.Objectives.prototype.hasRedeemableRewards = function hasRedeemableRewards(type) {
    return utils.JS.isValid(utils.JS.find(this._getValidObjectivesByType(type), function(t) {
        return t.isUnclaimed()
    }))
}, NamespaceManager.Register("views.objectives"), views.objectives.ObjectivesProgress = function ObjectivesProgressView() {
    FUIView.call(this), this._intervalId = 0, this._generate()
}, utils.JS.inherits(views.objectives.ObjectivesProgress, FUIView), views.objectives.ObjectivesProgress.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("objectives-progress"), t.classList.add("objectives-tile");
        var i = document.createElement("div");
        i.classList.add("progress-container"), this.__header = document.createElement("h1"), this.$_header = $(this.__header), this.__header.classList.add("secondary"), this.__header.classList.add("progress-header"), i.appendChild(this.__header), this._progressBar = new views.ProgressBar, this._progressBar.getRootElement().classList.add("progress-bar-self-labeled"), i.appendChild(this._progressBar.getRootElement()), this.__refreshTime = document.createElement("h1"), this.$_refreshTime = $(this.__refreshTime), this.__refreshTime.classList.add("secondary"), this.__refreshTime.classList.add("refresh-header"), i.appendChild(this.__refreshTime), t.appendChild(i), this._claimAllBtn = new views.buttons.DefaultButton, this._claimAllBtn.getRootElement().classList.add("call-to-action"), this._claimAllBtn.getRootElement().classList.add("claim-button"), t.appendChild(this._claimAllBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.objectives.ObjectivesProgress.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__header = null, this.$_header = null, this._progressBar.destroy(), this._progressBar = null, this.__refreshTime = null, this.$_refreshTime = null, this._claimAllBtn.destroy(), this._claimAllBtn = null
}, views.objectives.ObjectivesProgress.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.objectives.ObjectivesProgress.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.objectives.ObjectivesProgress.prototype.init = function init() {
    this.__header.textContent = gLocalization.lText("objectives.progressTile.header"), this._claimAllBtn.hide(), this._claimAllBtn.init(), this._claimAllBtn.setText(gLocalization.lText("objectives.progressTile.claimAll"))
}, views.objectives.ObjectivesProgress.prototype.dealloc = function dealloc() {
    clearInterval(this._intervalId), this.superclass()
}, views.objectives.ObjectivesProgress.prototype.reset = function reset() {
    clearInterval(this._intervalId), this._claimAllBtn.hide()
}, views.objectives.ObjectivesProgress.prototype.getClaimButton = function getClaimButton() {
    return this._claimAllBtn
}, views.objectives.ObjectivesProgress.prototype.showClaimButton = function showClaimButton() {
    this._claimAllBtn.show()
}, views.objectives.ObjectivesProgress.prototype.setProgress = function setProgress(value, total) {
    this.reset(), this._progressBar.setProgress(0), this._progressBar.setProgressText(value + "/" + total + " " + gLocalization.lText("objectives.progressTile.completed")), this._progressBar.render();
    var t = total > 0 ? value / total * 100 : 0,
        width = 0;
    t > 0 && (this._intervalId = setInterval(function fillBar() {
        width >= t ? (this._progressBar.updateProgress(t), clearInterval(this._intervalId)) : this._progressBar.updateProgress(width++)
    }.bind(this), 20))
}, views.objectives.ObjectivesProgress.prototype.setRefreshTimer = function setRefreshTimer(t) {
    this.__refreshTime.textContent = gLocalization.lText("objectives.progressTile.refreshIn") + " " + gLocalization.lTimeRemainingCondensed(t)
}, NamespaceManager.Register("views.objectives"), views.objectives.ObjectiveTile = function ObjectiveTileView() {
    views.tiles.Tile.call(this), this._generate()
}, utils.JS.inherits(views.objectives.ObjectiveTile, views.tiles.Tile), views.objectives.ObjectiveTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("tile"), t.classList.add("objective"), t.classList.add("col-mobile-1-2"), t.classList.add("col-1-2");
        var i = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), i.appendChild(this.__tileTitle), t.appendChild(i), this.__progress = document.createElement("span"), this.$_progress = $(this.__progress), this.__progress.classList.add("secondary"), this.__progress.classList.add("progress"), t.appendChild(this.__progress), this.__tileContent = document.createElement("div"), this.$_tileContent = $(this.__tileContent), this.__tileContent.classList.add("secondary"), this.__tileContent.classList.add("tileContent"), t.appendChild(this.__tileContent);
        var s = document.createElement("div");
        s.classList.add("objective-state"), this.__state = document.createElement("span"), this.$_state = $(this.__state), s.appendChild(this.__state), t.appendChild(s), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.objectives.ObjectiveTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__progress = null, this.$_progress = null, this.__tileContent = null, this.$_tileContent = null, this.__state = null, this.$_state = null
}, views.objectives.ObjectiveTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.objectives.ObjectiveTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.objectives.ObjectiveTile.CLASSES = {
    INVALID: "invalid",
    IN_PROGRESS: "in-progress",
    COMPLETED: "completed",
    REDEEMED: "redeemed",
    LOCKED: "locked",
    EXPIRED: "expired"
}, views.objectives.ObjectiveTile.prototype.renderObjective = function renderObjective(title, description, state, t, i, s) {
    function onResourceLoaded(t, u, h, path) {
        t.unobserve(this), u ? (this.setBackgroundUrls(utils.AssetLocator.getObjectiveImageURL(id, enums.Year.ASSET), this.getRoot()), l.destroy()) : o || i === s ? (this.setBackgroundUrls("images/dynamicObjectives/generic_fut18.png", this.getRoot()), l.destroy()) : (o = !0, id = s, l.setResource(utils.AssetLocator.getObjectiveImageURN(id, enums.Year.ASSET), !0).observe(this, onResourceLoaded))
    }
    this.setTitle(title), this._setState(state), this.toggleClass("isWeekly", t);
    var id = i,
        o = !1,
        l = new components.ImageLoader;
    l.setResource(utils.AssetLocator.getObjectiveImageURN(id, enums.Year.ASSET), !0).observe(this, onResourceLoaded)
}, views.objectives.ObjectiveTile.prototype.renderProgress = function renderProgress(t, i) {
    this.__progress.textContent = t + " / " + i
}, views.objectives.ObjectiveTile.prototype._setState = function _setState(state) {
    var t = "";
    switch (state) {
        case enums.Objectives.State.INVALID:
            t = views.objectives.ObjectiveTile.CLASSES.INVALID, this.__state.textContent = gLocalization.lText("objectives.tile.invalid"), this.setInteractionState(!1);
            break;
        case enums.Objectives.State.IN_PROGRESS:
            t = views.objectives.ObjectiveTile.CLASSES.IN_PROGRESS, this.__state.textContent = gLocalization.lText("objectives.tile.inProgress");
            break;
        case enums.Objectives.State.COMPLETED:
            t = views.objectives.ObjectiveTile.CLASSES.COMPLETED, this.__state.textContent = gLocalization.lText("objectives.tile.completed");
            break;
        case enums.Objectives.State.REDEEMED:
            t = views.objectives.ObjectiveTile.CLASSES.REDEEMED, this.__state.textContent = gLocalization.lText("objectives.tile.redeemed"), this.setInteractionState(!1);
            break;
        case enums.Objectives.State.LOCKED:
            t = views.objectives.ObjectiveTile.CLASSES.LOCKED, this.__state.textContent = gLocalization.lText("objectives.tile.locked"), this.setInteractionState(!1);
            break;
        case enums.Objectives.State.EXPIRED:
            t = views.objectives.ObjectiveTile.CLASSES.EXPIRED, this.__state.textContent = gLocalization.lText("objectives.tile.expired"), this.setInteractionState(!1)
    }
    this.addClass(t)
}, NamespaceManager.Register("views.objectives"), views.objectives.ObjectivesHub = function ObjectivesHubView() {
    FUITargetActionView.call(this), this._tiles = [], Object.defineProperty(this, "_tiles", {
        writable: !0,
        enumerable: !0
    }), this.onTabSelect = new FUTObservable, Object.defineProperty(this, "onTabSelect", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.objectives.ObjectivesHub, FUITargetActionView), views.objectives.ObjectivesHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "ObjectivesHub"), this._objectivesTM = new components.TabMenu, t.appendChild(this._objectivesTM.getRootElement());
        var i = document.createElement("div");
        i.classList.add("tile-container"), this._progressView = new views.objectives.ObjectivesProgress, i.appendChild(this._progressView.getRootElement()), this.__objectives = document.createElement("div"), this.$_objectives = $(this.__objectives), this.__objectives.classList.add("objectives-hub"), this.__objectives.classList.add("TileSection"), i.appendChild(this.__objectives), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.objectives.ObjectivesHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._objectivesTM.destroy(), this._objectivesTM = null, this._progressView.destroy(), this._progressView = null, this.__objectives = null, this.$_objectives = null
}, views.objectives.ObjectivesHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.objectives.ObjectivesHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.objectives.ObjectivesHub.EVENT = {
    CLAIM_ALL: "CLAIM_ALL",
    TILE_TAP: "TILE_TAP"
}, views.objectives.ObjectivesHub.prototype.init = function init() {
    this._progressView.init()
}, views.objectives.ObjectivesHub.prototype.dealloc = function dealloc() {
    this._clearTiles(), this.superclass()
}, views.objectives.ObjectivesHub.prototype._clearTiles = function _clearTiles() {
    this._tiles.length > 0 && (this._tiles.forEach(function(t) {
        t.dealloc()
    }), this._tiles = [])
}, views.objectives.ObjectivesHub.prototype.setupNavigation = function setupNavigation(t, i) {
    t && this._objectivesTM.addTab(enums.Objectives.Type.DAILY, gLocalization.lText("dynamicObjective.tabs.daily")), i && this._objectivesTM.addTab(enums.Objectives.Type.WEEKLY, gLocalization.lText("dynamicObjective.tabs.weekly")), this._objectivesTM.addTarget(this, function(sender, event, data) {
        this.onTabSelect.notify(data.id)
    }, enums.Event.TAP), this._objectivesTM.layoutSubviews()
}, views.objectives.ObjectivesHub.prototype.setTab = function setTab(t) {
    this._objectivesTM.setActiveTab(t)
}, views.objectives.ObjectivesHub.prototype.setObjectives = function setObjectives(t, i, s) {
    this._progressView.setProgress(i, t.length), this._clearTiles(), this._tiles = t.map(function(t) {
        return this._generateObjectiveTile(t)
    }, this), this.layoutSubviews()
}, views.objectives.ObjectivesHub.prototype._generateObjectiveTile = function _generateObjectiveTile(t) {
    var i = new views.objectives.ObjectiveTile;
    return i.init(), i.renderObjective(t.name, t.description, t.state, t.isWeekly, t.getImageIdentifier(), t.gameArea), i.renderProgress(t.currentProgress, t.multiplier), i.addTarget(this, this._eTileSelected, enums.Event.TAP), this.addSubview(i, this.$_objectives), i
}, views.objectives.ObjectivesHub.prototype._eTileSelected = function _eTileSelected(sender, event, data) {
    this._triggerActions(views.objectives.ObjectivesHub.EVENT.TILE_TAP, {
        index: this._tiles.indexOf(sender)
    })
}, views.objectives.ObjectivesHub.prototype.showClaimButton = function showClaimButton() {
    this._progressView.showClaimButton()
}, views.objectives.ObjectivesHub.prototype.updateRemainingTime = function updateRemainingTime(t) {
    this._progressView.setRefreshTimer(t > 0 ? t : 0)
}, views.objectives.ObjectivesHub.prototype.getClaimAllButton = function getClaimAllButton() {
    return this._progressView.getClaimButton()
}, views.objectives.ObjectivesHub.prototype.resetProgressView = function resetProgressView() {
    this._progressView.reset()
}, NamespaceManager.Register("controllers.objectives"), controllers.objectives.ObjectivesHub = function ObjectivesHubViewController() {
    FUIViewController.call(this), this._viewmodel = null, this._currentType = gSettingsModel.isDailyObjectivesEnabled() ? enums.Objectives.Type.DAILY : enums.Objectives.Type.WEEKLY, this._expiryTimestamp = 0, this._intervalId = 0
}, utils.JS.inherits(controllers.objectives.ObjectivesHub, FUIViewController), controllers.objectives.ObjectivesHub.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.setTab(this._currentType), view.onTabSelect.observe(this, this._onTabSelected), view.addTarget(this, this._eTileSelected, views.objectives.ObjectivesHub.EVENT.TILE_TAP), view.getClaimAllButton().addTarget(this, this._eClaimAllBtnTapped, enums.Event.TAP), this._triggerTelemetryPage()
    }
}, controllers.objectives.ObjectivesHub.prototype.dealloc = function dealloc() {
    this._viewmodel = null, clearInterval(this._intervalId), this.superclass()
}, controllers.objectives.ObjectivesHub.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.objectives.ObjectivesHub
}, controllers.objectives.ObjectivesHub.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._getObjectives()
}, controllers.objectives.ObjectivesHub.prototype._renderView = function _renderView() {
    function _onLoadFail(t) {
        services.Notification.queue([t, enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen() || setTimeout(function() {
            NavManager.requestGoBackScreen()
        }, 500)
    }
    if (this._currentType === enums.Objectives.Type.DAILY && !gSettingsModel.isDailyObjectivesEnabled() || this._currentType === enums.Objectives.Type.WEEKLY && !gSettingsModel.isWeeklyObjectivesEnabled()) _onLoadFail.call(this, gLocalization.lText("notification.objectives.disabled"));
    else {
        var t = this._viewmodel.getObjectives(this._currentType);
        if (t.length <= 0) _onLoadFail.call(this, gLocalization.lText("notification.objectives.loadFailed"));
        else {
            var i = this._viewmodel.getCompletedObjectiveCount(this._currentType);
            this._expiryTimestamp = this._viewmodel.getExpiryTimestamp(this._currentType), clearInterval(this._intervalId), this._expiryTimestamp > 0 && (this._intervalId = setInterval(this.updateRemainingTime.bind(this), 1e3));
            var view = this.getView();
            view.updateRemainingTime(Math.round(this._expiryTimestamp - Date.now() / 1e3)), view.setObjectives(t, i), this._viewmodel.hasRedeemableRewards(this._currentType) && view.showClaimButton()
        }
    }
}, controllers.objectives.ObjectivesHub.prototype.setType = function setType(type) {
    var key;
    for (key in enums.Objectives.Type) enums.Objectives.Type.hasOwnProperty(key) && enums.Objectives.Type[key] === type && (this._currentType = type)
}, controllers.objectives.ObjectivesHub.prototype._getObjectives = function _getObjectives() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Objectives.getObjectives().observe(this, function _onGetObjectivesComplete(t, i) {
        if (t.unobserve(this), i.success) {
            this._viewmodel ? this._viewmodel.resetCollection(i.data.objectives) : this._viewmodel = new viewmodels.Objectives(i.data.objectives), i.data.autoClaimedRewards && gPopupClickShield.setActivePopup(new controllers.objectives.ObjectiveRewards);
            var s = this._viewmodel.getObjectives(enums.Objectives.Type.DAILY).length > 0,
                o = this._viewmodel.getObjectives(enums.Objectives.Type.WEEKLY).length > 0;
            this.getView().setupNavigation(s, o), this._renderView()
        } else NavManager.requestGoBackScreen();
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    })
}, controllers.objectives.ObjectivesHub.prototype.updateRemainingTime = function updateRemainingTime() {
    var t = Math.round(this._expiryTimestamp - Date.now() / 1e3);
    t <= 0 ? (clearInterval(this._intervalId), this._getObjectives()) : this.getView().updateRemainingTime(t)
}, controllers.objectives.ObjectivesHub.prototype._eTileSelected = function _eTileSelected(sender, event, data) {
    var t = this._viewmodel.getObjectives(this._currentType)[data.index];
    if (utils.JS.isValid(t))
        if (t.isInProgress()) gPopupClickShield.setActivePopup(new controllers.objectives.ObjectiveDetails(t));
        else {
            if (!t.isUnclaimed()) return void utils.Debug.Assert(!1, "Error: Tile shouldn't have been tappable as it is not an in progress or unclaimed objective.");
            services.Objectives.claimById(t.id).observe(this, function(i, s) {
                i.unobserve(this), s.success && (gPopupClickShield.setActivePopup(new controllers.objectives.ObjectiveRewards(t, s.data.awards)), this._renderView(), TelemetryManager.trackEvent(TelemetryManager.Sections.OBJECTIVES, TelemetryManager.Categories.OBJECTIVE_REWARDS_CLAIMED, "Claim Objective Rewards"))
            })
        }
    else utils.Debug.Assert(!1, "Error: Objectives viewmodel is no longer synced with the vc.")
}, controllers.objectives.ObjectivesHub.prototype._onTabSelected = function _onTabSelected(t, type) {
    type !== this._currentType && (clearInterval(this._intervalId), this.getView().resetProgressView(), this._currentType = type, this._renderView(), this._triggerTelemetryPage())
}, controllers.objectives.ObjectivesHub.prototype._eClaimAllBtnTapped = function _eClaimAllBtnTapped(sender, event, data) {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING), services.Objectives.claimAll().observe(this, function(t, i) {
        t.unobserve(this), gClickShield.hideShield(components.ClickShield.SHIELD.LOADING), gPopupClickShield.setActivePopup(new controllers.objectives.ObjectiveRewards(null, i.data.awards)), this._renderView(), TelemetryManager.trackEvent(TelemetryManager.Sections.OBJECTIVES, TelemetryManager.Categories.OBJECTIVE_REWARDS_CLAIMED, "Claim All")
    })
}, controllers.objectives.ObjectivesHub.prototype._triggerTelemetryPage = function _triggerTelemetryPage() {
    var page = "Objectives Hub - " + (this._currentType === enums.Objectives.Type.DAILY ? "Daily" : "Weekly");
    gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
        type: PinManager.PAGEVIEW_EVT_TYPE,
        pgid: page
    })), TelemetryManager.trackPage(TelemetryManager.Sections.OBJECTIVES, page)
}, pages.controllers.ObjectivesHubController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.objectives.ObjectivesHub
}, utils.JS.inherits(pages.controllers.ObjectivesHubController, pages.controllers.ScreenControllerBase), pages.controllers.ObjectivesHubController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.ObjectivesHubController.superClass_.destroy.call(this)
}, pages.controllers.ObjectivesHubController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.ObjectivesHubController.superClass_.onScreenInitialized.call(this, data, t), data && data.type && this._controller.setType(data.type), this._controller.init(), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.OBJECTIVES, function(t) {
    if (gSettingsModel.isObjectivesEnabled()) {
        NavManager.clearScreenStack(), NavManager.pushScreenOntoStack(null, Screens.getView("HOME"));
        var data = {};
        if (t.length > 0) {
            var key, type = t[0];
            for (key in enums.Objectives.Type) enums.Objectives.Type.hasOwnProperty(key) && enums.Objectives.Type[key] === type.toUpperCase() && (data.type = enums.Objectives.Type[key])
        }
        NavManager.requestChildScreen(Screens.getView("OBJECTIVES"), data)
    } else NavManager.requestRootScreen(Screens.getView("HOME"))
}), NamespaceManager.Register("components"), components.SBCReward = function(data) {
    this.data = data, Object.defineProperty(this, "data", {
        writable: !1
    }), this._generate()
}, components.SBCReward.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("li");
        t.classList.add("sbc-reward"), this.__image = document.createElement("div"), this.$_image = $(this.__image), this.__image.classList.add("image"), t.appendChild(this.__image);
        var i = document.createElement("div");
        i.classList.add("reward-info");
        var s = document.createElement("div");
        s.classList.add("centering-container"), this.__value = document.createElement("span"), this.$_value = $(this.__value), this.__value.classList.add("value"), s.appendChild(this.__value), this.__type = document.createElement("span"), this.$_type = $(this.__type), this.__type.classList.add("type"), s.appendChild(this.__type), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCReward.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__image = null, this.$_image = null, this.__value = null, this.$_value = null, this.__type = null, this.$_type = null
}, components.SBCReward.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCReward.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCReward.PACK_ID_CLASS_TABLE = {
    1: "bronze",
    2: "silver",
    3: "gold"
}, components.SBCReward.prototype.destroy = function() {
    this.destroyGeneratedElements()
}, components.SBCReward.prototype.render = function() {
    if (utils.JS.isValid(this.data)) {
        switch (this.$_type.text(this.data.buildString()), this.data.type) {
            case enums.AwardType.COIN:
                this.$_value.text(gLocalization.lNum(this.data.value) + " ");
                break;
            case enums.AwardType.PACK:
                utils.JS.isValid(components.SBCReward.PACK_ID_CLASS_TABLE[this.data.halId]) && this.$_image.addClass(components.SBCReward.PACK_ID_CLASS_TABLE[this.data.halId]);
                break;
            case enums.AwardType.ITEM:
                var item = this.data.itemData;
                item.getStaticData();
                if (this.$_image.addClass(utils.JS.find(components.ItemFUTBase.SHELL_TYPE_LOOKUP, function(type) {
                        return type.key === item.rareflag
                    }).value), item.isCommon() || item.isRare()) {
                    var t;
                    t = item.isBronzeRating() ? components.ItemFUTBase.QUALITY.BRONZE : item.isSilverRating() ? components.ItemFUTBase.QUALITY.SILVER : components.ItemFUTBase.QUALITY.GOLD, this.$_image.addClass(t)
                }
        }
        this.$_image.removeClass("coin item pack"), this.$_image.addClass(this.data.type)
    }
}, NamespaceManager.Register("components"), components.SBCRewards = function() {
    this._data = null, this._rewards = [], this._generate()
}, components.SBCRewards.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("ul");
        t.classList.add("sbc-rewards"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCRewards.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.SBCRewards.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCRewards.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCRewards.prototype.destroy = function() {
    for (; this._rewards.length > 0;) this._rewards.pop().destroy();
    this.destroyGeneratedElements()
}, components.SBCRewards.prototype.setData = function(data) {
    for (this._data = data; this._rewards.length > 0;) this._rewards.pop().destroy();
    utils.JS.isValid(this._data) && (this._rewards = this._data.map(function(t) {
        return new components.SBCReward(t)
    }, this))
}, components.SBCRewards.prototype.getData = function() {
    return this._data
}, components.SBCRewards.prototype.render = function() {
    utils.JS.isValid(this._data) && (this.getRoot().empty(), this._rewards.forEach(function(t, i) {
        this.getRoot().append(t.getRoot()), t.render()
    }, this))
}, NamespaceManager.Register("components"), components.SBCTimerLabel = function() {
    this._endTime = 0, this._canExpire = !1, this._updateInterval = 0, this._generate()
}, components.SBCTimerLabel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("span");
        t.classList.add("label"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCTimerLabel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, components.SBCTimerLabel.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCTimerLabel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCTimerLabel.DEFAULT_UPDATE_TIME = 2e4, components.SBCTimerLabel.prototype.destroy = function() {
    this.stop(), this.destroyGeneratedElements()
}, components.SBCTimerLabel.prototype.setData = function(data) {
    this._endTime = data.endTime || 0, this._canExpire = !data.notExpirable
}, components.SBCTimerLabel.prototype.start = function(t) {
    function onUpdate() {
        var i = this._endTime - Math.round(Date.now() / 1e3);
        i > 0 ? (i < 120 && t > 1e3 && setTimeout(function() {
            this.start(1e3)
        }.bind(this), 0), this.getRoot().text(gLocalization.lText("sbc.sets.expiresIn") + ": " + gLocalization.lTimeRemainingCondensed(i))) : (this.getRoot().addClass("no-expire"), this.getRoot().text(gLocalization.lText("sbc.sets.expired")))
    }
    this.stop(), this._canExpire ? (t = utils.JS.isNumber(t) ? t : components.SBCTimerLabel.DEFAULT_UPDATE_TIME, this._endTime + 60 * gSettingsModel.getConfigsByKey(models.SettingsModel.SBC_GRACE_PERIOD_MINUTES) > Math.round(Date.now() / 1e3) ? (onUpdate.call(this), this._updateInterval = setInterval(onUpdate.bind(this), t)) : this.getRoot().text(gLocalization.lText("sbc.sets.expired"))) : (this.getRoot().addClass("no-expire"), this.getRoot().text(gLocalization.lText("sbc.status.noexpire")))
}, components.SBCTimerLabel.prototype.stop = function() {
    clearInterval(this._updateInterval)
}, views.buttons.SBCFavoriteButton = function SBCFavoriteButton() {
    views.buttons.ToggleButton.call(this), this._data = null, this._isToggling = !1, this._generate()
}, utils.JS.inherits(views.buttons.SBCFavoriteButton, views.buttons.ToggleButton), views.buttons.SBCFavoriteButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("btn-toggle"), t.classList.add("btn"), this.__text = document.createElement("span"), this.$_text = $(this.__text), this.__text.classList.add("btn-text"), t.appendChild(this.__text), this.__subtext = document.createElement("span"), this.$_subtext = $(this.__subtext), this.__subtext.classList.add("btn-subtext"), t.appendChild(this.__subtext), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.buttons.SBCFavoriteButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__text = null, this.$_text = null, this.__subtext = null, this.$_subtext = null
}, views.buttons.SBCFavoriteButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.buttons.SBCFavoriteButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.buttons.SBCFavoriteButton.prototype.setData = function setData(data) {
    this._data = data, this.setChecked(this._data.isFavourite)
}, views.buttons.SBCFavoriteButton.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(e), e.stopPropagation(), this._data.isComplete() || this._isToggling || (this._isToggling = !0, this.setChecked(!this._data.isFavourite), this.watchSBCSet(), setTimeout(function() {
        utils.JS.isValid(this._isToggling) && (this._isToggling = !1)
    }.bind(this), 500))
}, views.buttons.SBCFavoriteButton.prototype.watchSBCSet = function watchSBCSet() {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING), this._data.tag().observe(this, function onSBCSetWatched(t, i, errorCode) {
        if (t.unobserve(this), i) services.Notification.queue([gLocalization.lText("notification.sbcSets.successfulTag" + (this._data.isFavourite ? "2" : "0")), enums.UINotificationType.NEUTRAL]);
        else {
            var s = "sbc.notification.disabled";
            errorCode === enums.NetworkError.SERVICE_IS_DISABLED ? NavManager.requestGoBackScreen() : s = "notification.sbcSets.failedToTag" + (this._data.isFavourite ? "2" : "0"), services.Notification.queue([gLocalization.lText(s), enums.UINotificationType.NEGATIVE])
        }
        gClickShield.hideShield(components.ClickShield.SHIELD.LOADING)
    })
}, NamespaceManager.Register("components"), components.SBCSetTile = function SBCSetTileView() {
    views.tiles.BaseTile.call(this), this._data = null, this._generate()
}, utils.JS.inherits(components.SBCSetTile, views.tiles.BaseTile), components.SBCSetTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("col-1-2"), t.classList.add("tile"), t.classList.add("sbc-set"), t.classList.add("sbc-tile");
        var i = document.createElement("div");
        i.classList.add("content-container");
        var s = document.createElement("div");
        s.classList.add("text-content"), this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileHeader"), s.appendChild(this.__tileTitle), this.__tileContent = document.createElement("div"), this.$_tileContent = $(this.__tileContent), this.__tileContent.classList.add("tileContent"), s.appendChild(this.__tileContent), this._progressBar = new components.SBCProgressBar, s.appendChild(this._progressBar.getRootElement()), i.appendChild(s), this._setImage = new components.ImageLoader, this._setImage.getRootElement().classList.add("set-image"), i.appendChild(this._setImage.getRootElement()), t.appendChild(i), this.__rewardsHeader = document.createElement("span"), this.$_rewardsHeader = $(this.__rewardsHeader), this.__rewardsHeader.classList.add("secondary"), this.__rewardsHeader.classList.add("rewards-header"), t.appendChild(this.__rewardsHeader), this._rewards = new components.SBCRewards, t.appendChild(this._rewards.getRootElement());
        var o = document.createElement("div");
        o.classList.add("sbc-status-container"), this.__repeatableStatus = document.createElement("div"), this.$_repeatableStatus = $(this.__repeatableStatus), this.__repeatableStatus.classList.add("repeat"), this.__repeatableStatus.classList.add("status"), this.__repeatableLabel = document.createElement("span"), this.$_repeatableLabel = $(this.__repeatableLabel), this.__repeatableLabel.classList.add("label"), this.__repeatableLabel.appendChild(document.createTextNode("Repeatable")), this.__repeatableStatus.appendChild(this.__repeatableLabel), o.appendChild(this.__repeatableStatus), this.__expireStatus = document.createElement("div"), this.$_expireStatus = $(this.__expireStatus), this.__expireStatus.classList.add("expires"), this.__expireStatus.classList.add("status"), this._expiresLabel = new components.SBCTimerLabel, this.__expireStatus.appendChild(this._expiresLabel.getRootElement()), o.appendChild(this.__expireStatus), this._watchBtn = new views.buttons.SBCFavoriteButton, this._watchBtn.getRootElement().classList.add("favoriteButton"), o.appendChild(this._watchBtn.getRootElement()), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCSetTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__tileContent = null, this.$_tileContent = null, this._progressBar.destroy(), this._progressBar = null, this._setImage.destroy(), this._setImage = null, this.__rewardsHeader = null, this.$_rewardsHeader = null, this._rewards.destroy(), this._rewards = null, this.__repeatableStatus = null, this.$_repeatableStatus = null, this.__repeatableLabel = null, this.$_repeatableLabel = null, this.__expireStatus = null, this.$_expireStatus = null, this._expiresLabel.destroy(), this._expiresLabel = null, this._watchBtn.destroy(), this._watchBtn = null
}, components.SBCSetTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCSetTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCSetTile.prototype.init = function init() {
    this.superclass(), this._watchBtn.init()
}, components.SBCSetTile.prototype.dealloc = function dealloc() {
    this.superclass(), this._data = null
}, components.SBCSetTile.prototype.setData = function setData(data) {
    this._rewards.setData(data.awards), this._data = data, this.setInteractionState(!this._data.isComplete()), DOMKit.toggleClass(this.__tileContent, enums.UIText.SECONDARY, this._data.isComplete()), this._progressBar.setData(data), this._watchBtn.setData(data), this.toggleClass("production-tagged", this._data.isFeatured)
}, components.SBCSetTile.prototype.getData = function getData() {
    return this._data
}, components.SBCSetTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, components.SBCSetTile.prototype.render = function render() {
    this._rewards.render(), this._progressBar.render(), utils.JS.isValid(this._data) && (this.__tileContent.textContent = this._data.description, this.__rewardsHeader.textContent = gLocalization.lText("sbc.rewards.title"), this._data.repeatable ? this.__repeatableLabel.textContent = gLocalization.lText("tile.sbcSets.repeatable") : (DOMKit.addClass(this.__repeatableStatus, "no-repeat"), this.__repeatableLabel.textContent = gLocalization.lText("sbc.status.notrepeatable")), DOMKit.toggleClass(this.__expireStatus, "no-expire", this._data.notExpirable), this._setImage.setResource(utils.AssetLocator.getSBCImageURI(utils.AssetLocator.IMAGE_TYPE_SBC_SETS, enums.Year.ASSET, this._data.assetId), !0).observe(this, function onResourceLoaded(t, i, s, path) {
        t.unobserve(this), i || this._setImage.setLocalResource("images/sbc/sbcDefaultSetTile.png")
    }), this._data.isComplete() ? this.addClass("complete") : (this._expiresLabel.setData(this._data), this._expiresLabel.start()))
}, Screens.Register("SBC_HUB", "SBCHub", Screens.APP_SECTION.SBC, "Hub - SBC"), pages.SBCHub = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.DEFAULT_CHILD_PAGE : components.Header.CURRENCY | components.Header.FIFA_POINTS, gLocalization.lText("navbar.label.sbcHub")), this._sbcSetsTiles = [], this._generate()
}, utils.JS.inherits(pages.SBCHub, pages.ScreenBase), pages.SBCHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("SBCHub"), this._SBCCategoriesTM = new components.TabMenu, t.appendChild(this._SBCCategoriesTM.getRootElement());
        var i = document.createElement("div");
        i.classList.add("container"), this.__favoritesTile = document.createElement("div"), this.$_favoritesTile = $(this.__favoritesTile), this.__favoritesTile.classList.add("no-favorites-tile"), this.__favoritesHeader = document.createElement("h1"), this.$_favoritesHeader = $(this.__favoritesHeader), this.__favoritesTile.appendChild(this.__favoritesHeader), this.__favoritesInfo = document.createElement("p"), this.$_favoritesInfo = $(this.__favoritesInfo), this.__favoritesTile.appendChild(this.__favoritesInfo), i.appendChild(this.__favoritesTile), this.__sbcSetsTiles = document.createElement("div"), this.$_sbcSetsTiles = $(this.__sbcSetsTiles), this.__sbcSetsTiles.classList.add("layout-hub"), this.__sbcSetsTiles.classList.add("TileSection"), i.appendChild(this.__sbcSetsTiles), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SBCHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._SBCCategoriesTM.destroy(), this._SBCCategoriesTM = null, this.__favoritesTile = null, this.$_favoritesTile = null, this.__favoritesHeader = null, this.$_favoritesHeader = null, this.__favoritesInfo = null, this.$_favoritesInfo = null, this.__sbcSetsTiles = null, this.$_sbcSetsTiles = null
}, pages.SBCHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SBCHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.SBCHub.EVENT_CATEGORY_CHANGED = "pages.SBCHub.EVENT_CATEGORY_CHANGED", pages.SBCHub.EVENT_SBC_SET_TAPPED = "pages.SBCHub.EVENT_SBC_SET_TAPPED", pages.SBCHub.prototype.init = function init() {
    pages.SBCHub.superClass_.init.call(this), this._SBCCategoriesTM.setDisplay(!1), this._SBCCategoriesTM.addTarget(this, function _eTabSelected(sender, event, data) {
        this.dispatch(pages.SBCHub.EVENT_CATEGORY_CHANGED, data.index)
    }, enums.Event.TAP), this.__favoritesHeader.textContent = gLocalization.lText("sbc.favorites.title"), this.__favoritesInfo.textContent = gLocalization.lText("sbc.favorites.info")
}, pages.SBCHub.prototype.destroy = function destroy() {
    pages.SBCHub.superClass_.destroy.call(this), this.clearTiles()
}, pages.SBCHub.prototype.populateNavigation = function populateNavigation(t, i) {
    if (t.length > 0) {
        this._SBCCategoriesTM.setDisplay(!0);
        t.forEach(function(t, i) {
            t.displayable && this._SBCCategoriesTM.addTab(i, t.name)
        }, this), this._SBCCategoriesTM.setActiveTab(i), this._SBCCategoriesTM.layoutSubviews()
    }
}, pages.SBCHub.prototype.clearTiles = function clearTiles() {
    this._sbcSetsTiles.forEach(function(t) {
        t.dealloc()
    }), this._sbcSetsTiles = []
}, pages.SBCHub.prototype.populateTiles = function populateTiles(t, i) {
    this.$_sbcSetsTiles.empty(), this.clearTiles(), t = t.filter(function(set) {
        return set.isDisplayable()
    }), utils.JS.isValid(i) && this.$_favoritesTile.toggle(0 === t.length && i.type === enums.SBC.CATEGORY_TYPE.CUSTOM_FAVOURITE), t.forEach(function _generateTile(set) {
        var t = new components.SBCSetTile;
        t.init(), t.setTitle(set.name), t.setData(set), t.addTarget(this, this._onSBCSetTileTapped, enums.Event.TAP), this._sbcSetsTiles.push(t), this.__sbcSetsTiles.appendChild(t.getRootElement()), t.render()
    }, this), this.getRoot().toggleClass("single-set", t.length <= 1)
}, pages.SBCHub.prototype._onSBCSetTileTapped = function _onSBCSetTileTapped(sender, event, data) {
    this.dispatch(pages.SBCHub.EVENT_SBC_SET_TAPPED, sender.getData())
}, NamespaceManager.Register("viewmodels"), viewmodels.SBCSets = function(t, i) {
    this._sets = new FUTHashTable({}), t.forEach(function(set) {
        this._sets.set(set.id, set)
    }, this), this._categoriesIterator = new FUTIterator(this._areTutorialSetsComplete() ? i : [])
}, viewmodels.SBCSets.prototype._getTutorialSets = function() {
    return this._sets.filter(function(set) {
        return set.tutorial
    })
}, viewmodels.SBCSets.prototype._areTutorialSetsComplete = function() {
    var t = this._getTutorialSets();
    if (0 === t.length) return !0;
    var i = utils.JS.find(t, function(set) {
        return !set.isComplete()
    });
    return !utils.JS.isValid(i)
}, viewmodels.SBCSets.prototype.resetCollections = function(t, i) {
    this._sets.clear(), t.forEach(function(set) {
        this._sets.set(set.id, set)
    }, this);
    var s = this._areTutorialSetsComplete() ? i : [];
    this._categoriesIterator.resetCollection(s)
}, viewmodels.SBCSets.prototype.setCurrentCategoryIndex = function(value) {
    utils.JS.isValid(this._categoriesIterator.get(value)) && this._categoriesIterator.setIndex(value)
}, viewmodels.SBCSets.prototype.getCurrentCategoryIndex = function() {
    return this._categoriesIterator.getIndex()
}, viewmodels.SBCSets.prototype.getCurrentCategory = function() {
    return this._categoriesIterator.current()
}, viewmodels.SBCSets.prototype.getSetsByCurrentCategory = function() {
    function sortSets(a, b) {
        if (a.isComplete() !== b.isComplete()) {
            if (!a.isComplete() && b.isComplete()) return -1;
            if (!b.isComplete() && a.isComplete()) return 1
        }
        if (a.isFeatured !== b.isFeatured) {
            if (a.isFeatured && !b.isFeatured) return -1;
            if (b.isFeatured && !a.isFeatured) return 1
        }
        if (a.priority !== b.priority) {
            if (a.priority < b.priority) return -1;
            if (b.priority < a.priority) return 1
        }
        if (a.notExpirable !== b.notExpirable) {
            if (!a.notExpirable && b.notExpirable) return -1;
            if (!b.notExpirable && a.notExpirable) return 1
        }
        if (a.endTime !== b.endTime) {
            if (a.endTime < b.endTime) return -1;
            if (b.endTime < a.endTime) return 1
        }
        return 0
    }
    var t = [],
        i = this._getTutorialSets();
    return i.length > 0 && utils.JS.find(i, function(set) {
        return !set.isComplete()
    }) ? t = i.sort(sortSets) : (this._categoriesIterator.current().setIds.forEach(function(i) {
        var set = this._sets.get(i);
        utils.JS.isValid(set) && t.push(set)
    }, this), t.sort(sortSets)), t
}, viewmodels.SBCSets.prototype.getCategoryById = function(id) {
    return this._categoriesIterator.get(id)
}, viewmodels.SBCSets.prototype.getCategories = function() {
    return this._categoriesIterator.values()
}, pages.controllers.SBCHubController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._viewModel = null
}, utils.JS.inherits(pages.controllers.SBCHubController, pages.controllers.ScreenControllerBase), pages.controllers.SBCHubController.prototype.destroy = function() {
    this._viewModel = null, pages.controllers.SBCHubController.superClass_.destroy.call(this)
}, pages.controllers.SBCHubController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.SBCHubController.superClass_.onScreenInitialized.call(this, data, t), TelemetryManager.trackPage(TelemetryManager.Sections.SBC, gNavManager.getCurrentScreen().getScreenId()), t && t.viewModel && (this._viewModel = t.viewModel), repositories.SBC.getSets().observe(this, this._onRetrieveSBCSetsComplete)
}, pages.controllers.SBCHubController.prototype.onScreenStarted = function() {
    pages.controllers.SBCHubController.superClass_.onScreenStarted.call(this), this.getView().addListener(pages.SBCHub.EVENT_CATEGORY_CHANGED, this, this._onCategoriesDropDownChanged), this.getView().addListener(pages.SBCHub.EVENT_SBC_SET_TAPPED, this, this._onSBCSetTapped)
}, pages.controllers.SBCHubController.prototype.onScreenStopped = function() {
    pages.controllers.SBCHubController.superClass_.onScreenStopped.call(this), this.getView().clearListenersByScope(this)
}, pages.controllers.SBCHubController.prototype.getDataCache = function() {
    return {
        viewModel: this._viewModel
    }
}, pages.controllers.SBCHubController.prototype._onRetrieveSBCSetsComplete = function(t, i, data, errorCode) {
    if (t.unobserve(this), i) {
        if (this._viewModel) {
            var s = this._viewModel.getCurrentCategoryIndex();
            this._viewModel.resetCollections(data.sets, data.categories), this._viewModel.setCurrentCategoryIndex(s)
        } else this._viewModel = new viewmodels.SBCSets(data.sets, data.categories);
        this.getView().populateNavigation(this._viewModel.getCategories(), this._viewModel.getCurrentCategoryIndex()), this.getView().populateTiles(this._viewModel.getSetsByCurrentCategory(), this._viewModel.getCurrentCategory())
    } else {
        var o = errorCode === enums.NetworkError.SERVICE_IS_DISABLED ? "sbc.notification.disabled" : "notification.sbcSets.failedToLoad";
        services.Notification.queue([gLocalization.lText(o), enums.UINotificationType.NEGATIVE]), NavManager.requestRootScreen(Screens.getView("HOME"), null, !0)
    }
}, pages.controllers.SBCHubController.prototype._onCategoriesDropDownChanged = function(sender, t) {
    gTelemetryManager.trackEvent(TelemetryManager.Sections.SBC, TelemetryManager.Categories.BUTTON_PRESS, "SBC - Select Filter"), t !== this._viewModel.getCurrentCategoryIndex() && (this._viewModel.setCurrentCategoryIndex(t), this.getView().populateTiles(this._viewModel.getSetsByCurrentCategory(), this._viewModel.getCurrentCategory()), TelemetryManager.trackPage(TelemetryManager.Sections.SBC, "SBC Set List - " + this._viewModel.getCategoryById(t).name))
}, pages.controllers.SBCHubController.prototype._onSBCSetTapped = function(sender, set) {
    function goToChallenge(i, s, data, errorCode) {
        i.unobserve(this), s ? (this.getView().setInteractionsEnabled(!0), NavManager.requestChildScreen(Screens.getView("SBC_SQUAD"), {
            set: set,
            cid: t.id
        })) : sbcFailure.call(this, errorCode)
    }

    function sbcFailure(errorCode) {
        this.getView().setInteractionsEnabled(!0);
        var t = errorCode === enums.NetworkError.SERVICE_IS_DISABLED ? "sbc.notification.disabled" : "notification.sbcChallenges.failedToLoad";
        services.Notification.queue([gLocalization.lText(t), enums.UINotificationType.NEGATIVE])
    }
    var t = null;
    this.getView().setInteractionsEnabled(!1), repositories.SBC.requestChallengesBySetId(set.id).observe(this, function onRetrieveChallengesComplete(i, s, data, errorCode) {
        i.unobserve(this), s && data.challenges.length > 0 ? set.hidden ? (t = data.challenges[0]).load().observe(this, goToChallenge) : (this.getView().setInteractionsEnabled(!0), NavManager.requestChildScreen(Screens.getView("SBC_CHALLENGES"), set)) : sbcFailure.call(this, errorCode)
    })
}, services.URL.registerDeepLinkID(enums.DeepLinkSections.SBC, function(t) {
    function goToSBCHub() {
        isPhone() ? (NavManager.pushScreenOntoStack(null, Screens.getView("HOME")), NavManager.requestChildScreen(Screens.getView("SBC_HUB"))) : NavManager.requestRootScreen(Screens.getView("SBC_HUB"))
    }

    function onRetrieveChallengesComplete(t, s, data, errorCode) {
        t.unobserve(this), s && data.challenges.length > 0 ? set.hidden ? (i = data.challenges[0]).load().observe(this, goToChallenge) : (NavManager.pushScreenOntoStack(null, Screens.getView("HOME")), NavManager.requestChildScreen(Screens.getView("SBC_CHALLENGES"), set)) : goToSBCHub()
    }

    function goToChallenge(t, s, data, errorCode) {
        t.unobserve(this), s ? (NavManager.pushScreenOntoStack(null, Screens.getView("HOME")), NavManager.requestChildScreen(Screens.getView("SBC_SQUAD"), {
            set: set,
            cid: i.id
        })) : goToSBCHub()
    }
    if (gSettingsModel.isSBCEnabled()) {
        var i = null,
            set = null;
        NavManager.clearScreenStack(), 0 === t.length ? goToSBCHub() : repositories.SBC.getSets().observe(this, function goToSet(i, s, data, errorCode) {
            if (i.unobserve(this), s) {
                var o = data.sets.filter(function(set) {
                        return set.tutorial
                    }),
                    l = utils.JS.find(o, function(set) {
                        return !set.isComplete()
                    });
                if (!utils.JS.isValid(l)) {
                    var u = parseInt(t[0], 10);
                    if (set = utils.JS.find(data.sets, function(t) {
                            return t.id === u
                        }), utils.JS.isValid(set) && !set.isComplete()) return void repositories.SBC.requestChallengesBySetId(set.id).observe(this, onRetrieveChallengesComplete)
                }
            }
            goToSBCHub()
        }.bind(this))
    } else NavManager.requestRootScreen(Screens.getView("HOME"))
}), NamespaceManager.Register("components"), components.PseudoPack = function() {
    components.BaseComponent.call(this), this._generate()
}, utils.JS.inherits(components.PseudoPack, components.BaseComponent), components.PseudoPack.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("pseudo-pack"), this._packBackgroundImage = new components.ImageLoader, this._packBackgroundImage.getRootElement().classList.add("packBackgroundImage"), t.appendChild(this._packBackgroundImage.getRootElement()), this._packForegroundImage = new components.ImageLoader, this._packForegroundImage.getRootElement().classList.add("packForegroundImage"), t.appendChild(this._packForegroundImage.getRootElement()), this._packLogoImage = new components.ImageLoader, this._packLogoImage.getRootElement().classList.add("packLogoImage"), t.appendChild(this._packLogoImage.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.PseudoPack.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._packBackgroundImage.destroy(), this._packBackgroundImage = null, this._packForegroundImage.destroy(), this._packForegroundImage = null, this._packLogoImage.destroy(), this._packLogoImage = null
}, components.PseudoPack.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.PseudoPack.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.PseudoPack.prototype.render = function(t) {
    var i = utils.PackUtils.getForegroundId(t);
    i > -1 && this._packForegroundImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_FOREGROUND, enums.Year.ASSET, t, i)), this._packBackgroundImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_BACKGROUND, enums.Year.ASSET, t, t)), this._packLogoImage.setResource(utils.AssetLocator.getImage(utils.AssetLocator.IMAGE_TYPE_PACKS_LOGO, enums.Year.ASSET, t))
}, components.RewardsCarousel = function() {
    this._playerItem = null, this._pack = null, this.checkCoins = !1, this.checkUnassigned = !1, this.checkMyPacks = !1, this._generate()
}, components.RewardsCarousel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("rewards-carousel"), this.__tapAreaLeft = document.createElement("a"), this.$_tapAreaLeft = $(this.__tapAreaLeft), this.__tapAreaLeft.classList.add("tapLeft"), t.appendChild(this.__tapAreaLeft), this._slickCarousel = new views.SlickContainer, this._slickCarousel.getRootElement().classList.add("rewards-slick-container"), t.appendChild(this._slickCarousel.getRootElement()), this.__tapAreaRight = document.createElement("a"), this.$_tapAreaRight = $(this.__tapAreaRight), this.__tapAreaRight.classList.add("tapRight"), t.appendChild(this.__tapAreaRight), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.RewardsCarousel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tapAreaLeft = null, this.$_tapAreaLeft = null, this._slickCarousel.destroy(), this._slickCarousel = null, this.__tapAreaRight = null, this.$_tapAreaRight = null
}, components.RewardsCarousel.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.RewardsCarousel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.RewardsCarousel.COIN_CLASS = "coin-reward", components.RewardsCarousel.ITEM_CLASS = "item-reward", components.RewardsCarousel.PACK_CLASS = "pack-reward", components.RewardsCarousel.REWARD_CLASS = "reward", components.RewardsCarousel.prototype.setup = function setup(data) {
    data.forEach(function(t) {
        var i = components.RewardsCarousel.REWARD_CLASS,
            s = new components.TextField,
            o = [];
        t.isCoin && (this.checkCoins = !0, i += " " + components.RewardsCarousel.COIN_CLASS, s.setText(gLocalization.lNum(t.value))), t.isItem && (this.checkUnassigned = !0, i += " " + components.RewardsCarousel.ITEM_CLASS, this._playerItem = factories.ItemView.createLargeItem(t.itemData), o.push(this._playerItem.getRoot()), this._playerItem.init(), this._playerItem.render(t.itemData), s.setText(t.buildString())), t.isPack && (this.checkMyPacks = !0, i += " " + components.RewardsCarousel.PACK_CLASS, this._pack = new components.PseudoPack, this._pack.render(t instanceof transferobjects.ObjectiveReward ? t.assetId : t.halId), o.push(this._pack.getRoot()), s.setText(t.buildString())), o.push(s.getRoot()), this._slickCarousel.appendElem(o, i)
    }, this), this._slickCarousel.afterChange(function toggleArrows(t) {
        this.$_tapAreaLeft.css("opacity", 0 === t ? 0 : 1), this.$_tapAreaRight.css("opacity", t === data.length - 1 ? 0 : 1)
    }.bind(this)), utils.JS.isValid(this.$_tapAreaLeft) && this.$_tapAreaLeft.css("opacity", 0), utils.JS.isValid(this.$_tapAreaRight) && this.$_tapAreaRight.css("opacity", 1 === data.length ? 0 : 1)
}, components.RewardsCarousel.prototype.destroy = function destroy() {
    utils.JS.isValid(this._playerItem) && (this._playerItem.destroy(), this._playerItem = null), utils.JS.isValid(this._pack) && (this._pack.destroy(), this._pack = null), this.destroyGeneratedElements()
}, components.RewardsCarousel.prototype.slick = function slick() {
    this._slickCarousel.slick(new transferobjects.SlickProperties(!0, !1, !1)), this._slickCarousel.attachArrows(this.$_tapAreaLeft, this.$_tapAreaRight)
}, components.RewardsCarousel.prototype.reset = function reset() {
    this._slickCarousel.clear(), this._slickCarousel.unslick()
}, components.RewardsCarousel.prototype.isSlicked = function isSlicked() {
    return this._slickCarousel.isSlicked()
}, NamespaceManager.Register("views.squads"), views.squads.SBCChallengeRequirements = function SBCChallengeRequirementsView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.squads.SBCChallengeRequirements, FUIView), views.squads.SBCChallengeRequirements.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("requirements-container"), this.__requirementsTitle = document.createElement("span"), this.$_requirementsTitle = $(this.__requirementsTitle), this.__requirementsTitle.classList.add("secondary"), this.__requirementsTitle.classList.add("title"), t.appendChild(this.__requirementsTitle), this.__requirements = document.createElement("ul"), this.$_requirements = $(this.__requirements), this.__requirements.classList.add("requirements"), t.appendChild(this.__requirements), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SBCChallengeRequirements.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__requirementsTitle = null, this.$_requirementsTitle = null, this.__requirements = null, this.$_requirements = null
}, views.squads.SBCChallengeRequirements.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SBCChallengeRequirements.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SBCChallengeRequirements.prototype._generateRequirementListRow = function _generateRequirementListRow(text, t, i) {
    var s = document.createElement("li");
    return s.textContent = text, t && s.classList.add("complete"), utils.JS.isNumber(i) && i > -1 && s.setAttribute("data-after", "(" + i + ")"), s
}, views.squads.SBCChallengeRequirements.prototype.renderChallengeRequirements = function renderChallengeRequirements(challenge, t) {
    requestAnimationFrame(function _renderChallengeRequirements() {
        this.$_requirementsTitle.text(gLocalization.lText("sbc.requirements.challenge")), this.$_requirements.empty();
        var i = challenge.squad,
            s = challenge.eligibilityRequirements.map(function(t) {
                return this._generateRequirementListRow(t.buildString(), challenge.isRequirementMet(t), challenge.getRequirementCounter(t))
            }, this);
        if (i && t) {
            var text = gLocalization.lText("sbc.requirements.numplayers") + " " + i.getNumOfRequiredPlayers();
            s.push(this._generateRequirementListRow(text, i.isSquadFull()))
        }
        this.$_requirements.append(s)
    }.bind(this))
}, NamespaceManager.Register("views.squads"), views.squads.SBCChallengeDetails = function SBCChallengeDetailsView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.squads.SBCChallengeDetails, FUIView), views.squads.SBCChallengeDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("challenge-details"), this.__description = document.createElement("div"), this.$_description = $(this.__description), this.__description.classList.add("description"), t.appendChild(this.__description), this._requirements = new views.squads.SBCChallengeRequirements, t.appendChild(this._requirements.getRootElement());
        var i = document.createElement("section");
        i.classList.add("rewards-container"), this.__rewardsTitle = document.createElement("span"), this.$_rewardsTitle = $(this.__rewardsTitle), this.__rewardsTitle.classList.add("secondary"), this.__rewardsTitle.classList.add("title"), i.appendChild(this.__rewardsTitle), this._rewardsCarousel = new components.RewardsCarousel, this._rewardsCarousel.getRootElement().classList.add("light"), i.appendChild(this._rewardsCarousel.getRootElement()), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SBCChallengeDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__description = null, this.$_description = null, this._requirements.destroy(), this._requirements = null, this.__rewardsTitle = null, this.$_rewardsTitle = null, this._rewardsCarousel.destroy(), this._rewardsCarousel = null
}, views.squads.SBCChallengeDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SBCChallengeDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SBCChallengeDetails.prototype.render = function render(challenge, t, i) {
    this.$_description.html(challenge.description);
    var s = t.length > 0 ? t : challenge.awards,
        o = t.length > 0 ? "sbc.rewards.title" : "sbc.rewards.challenge";
    this.$_rewardsTitle.text(gLocalization.lText(o)), this.setAwards(s), this._requirements.renderChallengeRequirements(challenge, i)
}, views.squads.SBCChallengeDetails.prototype.setAwards = function setAwards(t) {
    this._rewardsCarousel.isSlicked() && this._rewardsCarousel.reset(), this._rewardsCarousel.setup(t), this._rewardsCarousel.slick()
}, views.squads.SBCChallengeDetails.prototype.setChallengeRequirements = function setChallengeRequirements(challenge, t) {
    this._requirements.renderChallengeRequirements(challenge, t)
}, NamespaceManager.Register("views.popups"), views.popups.SBCChallenge = function SBCChallengeViewPopup() {
    FUIView.call(this), this.onConfirm = new FUTObservable, Object.defineProperty(this, "onConfirm", {
        writable: !1
    }), this.onCancel = new FUTObservable, Object.defineProperty(this, "onCancel", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.popups.SBCChallenge, FUIView), views.popups.SBCChallenge.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "SBCChallengeOverlay");
        var i = document.createElement("header");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), i.appendChild(this.__title), this._exitBtn = new components.ImageButton, this._exitBtn.getRootElement().classList.add("exit-btn"), i.appendChild(this._exitBtn.getRootElement()), t.appendChild(i), this._challengeDetails = new views.squads.SBCChallengeDetails, t.appendChild(this._challengeDetails.getRootElement());
        var s = document.createElement("footer");
        this._btnConfirm = new views.buttons.DefaultButton, this._btnConfirm.getRootElement().classList.add("call-to-action"), s.appendChild(this._btnConfirm.getRootElement()), t.appendChild(s), this.__expiry = document.createElement("div"), this.$_expiry = $(this.__expiry), this.__expiry.setAttribute("id", "SBCChallengeOverlayExpiry"), t.appendChild(this.__expiry), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.SBCChallenge.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this._exitBtn.destroy(), this._exitBtn = null, this._challengeDetails.destroy(), this._challengeDetails = null, this._btnConfirm.destroy(), this._btnConfirm = null, this.__expiry = null, this.$_expiry = null
}, views.popups.SBCChallenge.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.SBCChallenge.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.SBCChallenge.prototype.init = function init() {
    this._btnConfirm.init(), this._btnConfirm.addTarget(this.onConfirm, this.onConfirm.notify, enums.Event.TAP), this._exitBtn.init(), this._exitBtn.addTarget(this.onCancel, this.onCancel.notify, enums.Event.TAP)
}, views.popups.SBCChallenge.prototype.dealloc = function dealloc() {
    this.onCancel.dealloc(), this.onConfirm.dealloc(), this.onCancel = null, this.onConfirm = null, this.superclass()
}, views.popups.SBCChallenge.prototype.render = function render(challenge, t, i) {
    this.$_title.html(challenge.name), this._challengeDetails.render(challenge, t, i);
    var s = "sbc.overlay.btn.startChallenge";
    challenge.isInProgress() && (s = "sbc.overlay.btn.submitChallenge", challenge.hasExpired(!0) ? (s = "sbc.sets.expired", this._btnConfirm.setInteractionState(!1)) : challenge.meetsRequirements() || this._btnConfirm.setInteractionState(!1)), this._btnConfirm.setText(gLocalization.lText(s))
}, controllers.views.popups.SBCChallenge = function SBCChallengePopupController(set, t, i) {
    controllers.views.popups.BasePopup.call(this), this._challenge = set.challenges.get(t), Object.defineProperty(this, "_challenge", {
        writable: !1
    }), this._setAwards = set.hidden ? set.awards : [], Object.defineProperty(this, "_setAwards", {
        writable: !1
    }), this._showCustomReq = i, Object.defineProperty(this, "_showCustomReq", {
        writable: !1
    }), this.onConfirm = new FUTObservable, Object.defineProperty(this, "onConfirm", {
        writable: !1
    })
}, utils.JS.inherits(controllers.views.popups.SBCChallenge, controllers.views.popups.BasePopup), controllers.views.popups.SBCChallenge.prototype.init = function init() {
    var view = this.getView();
    view.onCancel.observe(this, this.closePopup.bind(this)), view.onConfirm.observe(this, this.onConfirmChallenge.bind(this)), view.render(this._challenge, this._setAwards, this._showCustomReq), this.superclass()
}, controllers.views.popups.SBCChallenge.prototype.dealloc = function dealloc() {
    this.onConfirm.dealloc(), this.onConfirm = null, this.superclass()
}, controllers.views.popups.SBCChallenge.prototype.onConfirmChallenge = function onConfirmChallenge() {
    this.onConfirm.notify(this._challenge), this.onExit.notify()
}, controllers.views.popups.SBCChallenge.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.SBCChallenge
}, NamespaceManager.Register("factories"), factories.SBC = function() {
    function SBCFactory() {}
    return SBCFactory.prototype.createRequirements = function(t) {
        var i, s, o = [];
        return t.forEach(function(data) {
            if (s !== data.eligibilitySlot) s = data.eligibilitySlot, (i = new FUTHashTable([])).set(data.type, data), o[s] = i;
            else {
                var t = (i = o[s]).get(data.type);
                utils.JS.isValid(t) ? t.eligibilityValue = [].concat(t.eligibilityValue, data.eligibilityValue) : i.set(data.type, data)
            }
        }, this), o.reduce(function(t, i) {
            return utils.JS.isValid(i) && t.push(new transferobjects.SBCEligibility(i.values())), t
        }, [])
    }, new SBCFactory
}(), communication.SBCLoadChallengeDelegate = function(t, i) {
    communication.BaseFUTDelegate.call(this), this._url = communication.BaseFUTDelegate.REQUEST_ROOT + "sbs/challenge/" + t, i ? (this._url += "/squad", this._requestType = models.CommunicationModel.METHOD.GET) : this._requestType = models.CommunicationModel.METHOD.POST, this._dataType = models.CommunicationModel.RESPONSE.TEXT_JSON, this._contentType = models.CommunicationModel.CONTENT_TYPE.JSON
}, utils.JS.inherits(communication.SBCLoadChallengeDelegate, communication.BaseFUTDelegate), communication.SBCLoadChallengeDelegate.prototype.onFail = function(errorCode) {
    errorCode === enums.NetworkError.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.SBC_ENABLED), communication.SBCLoadChallengeDelegate.superClass_.onFail.call(this, errorCode)
}, communication.SBCSaveChallengeDelegate = function(t, i) {
    communication.BaseFUTDelegate.call(this);
    var s = {};
    s.players = i.getPlayers().map(function(t) {
        var item = t.getItem();
        return {
            index: t.getIndex(),
            itemData: {
                id: item.id,
                dream: item.concept
            }
        }
    }), this.setData(s), this.setRequest(communication.BaseFUTDelegate.REQUEST_ROOT + "sbs/challenge/" + t + "/squad", models.CommunicationModel.METHOD.PUT, models.CommunicationModel.RESPONSE.NONE, models.CommunicationModel.CONTENT_TYPE.JSON)
}, utils.JS.inherits(communication.SBCSaveChallengeDelegate, communication.BaseFUTDelegate), communication.SBCSaveChallengeDelegate.prototype.onFail = function(errorCode) {
    errorCode === enums.NetworkError.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.SBC_ENABLED), communication.SBCSaveChallengeDelegate.superClass_.onFail.call(this, errorCode)
}, NamespaceManager.Register("entities"), entities.SBCChallenge = function(data) {
    this.id = data.challengeId, Object.defineProperty(this, "id", {
        writable: !1,
        enumerable: !0
    }), this.name = data.name, Object.defineProperty(this, "name", {
        writable: !1,
        enumerable: !0
    }), this.description = data.description, Object.defineProperty(this, "description", {
        writable: !1,
        enumerable: !0
    }), this.endTime = utils.JS.isNumber(data.endTime) && data.endTime > 0 ? data.endTime + Math.round((new Date).getTime() / 1e3) : 0, Object.defineProperty(this, "endTime", {
        writable: !1,
        enumerable: !0
    }), this.notExpirable = 0 === this.endTime, Object.defineProperty(this, "notExpirable", {
        writable: !1,
        enumerable: !0
    }), this.priority = data.priority, Object.defineProperty(this, "priority", {
        writable: !1,
        enumerable: !0
    }), this.repeatable = data.repeatable, Object.defineProperty(this, "repeatable", {
        writable: !1,
        enumerable: !0
    }), this.setId = data.setId, Object.defineProperty(this, "setId", {
        writable: !1,
        enumerable: !0
    });
    var t = new valueobjects.AlphanumericVO;
    Object.defineProperty(this, "assetId", {
        get: t.get.bind(t),
        set: t.set.bind(t),
        enumerable: !0
    }), this.assetId = utils.JS.isEmpty(data.challengeImageId) ? data.trophyId : data.challengeImageId, this.formation = data.formation, Object.defineProperty(this, "formation", {
        writable: !1,
        enumerable: !0
    }), this.type = data.type, Object.defineProperty(this, "type", {
        writable: !1,
        enumerable: !0
    });
    var i;
    Object.defineProperty(this, "status", {
        get: function() {
            return i
        },
        set: function(t) {
            var key;
            for (key in enums.SBC.CHALLENGE_STATUS)
                if (enums.SBC.CHALLENGE_STATUS.hasOwnProperty(key) && enums.SBC.CHALLENGE_STATUS[key] === t) return void(i = t);
            utils.Debug.Assert(!1, "Invalid assignment to entity: SBCChallenge.status")
        }
    }), this.status = data.status, this.timesCompleted = data.timesCompleted, Object.defineProperty(this, "timesCompleted", {
        writable: !0
    }), this.awards = utils.JS.isValid(data.awards) ? data.awards.map(function(t) {
        return new transferobjects.SBCReward(t)
    }, this) : [], this.awards.sort(function awardSort(a, b) {
        return a.getPriority() < b.getPriority() ? -1 : a.getPriority() > b.getPriority() ? 1 : 0
    }), Object.defineProperty(this, "awards", {
        writable: !1,
        enumerable: !0
    }), this._eligibilityOperation = data.elgOperation === enums.SBC.ELG_OPERATION.AND || data.elgOperation === enums.SBC.ELG_OPERATION.OR ? data.elgOperation : enums.SBC.ELG_OPERATION.AND, Object.defineProperty(this, "_eligibilityOperation", {
        writable: !1,
        enumerable: !1
    }), this.eligibilityRequirements = factories.SBC.createRequirements(data.elgReq), Object.defineProperty(this, "eligibilityRequirements", {
        writable: !1,
        enumerable: !0
    }), this.squad = null, Object.defineProperty(this, "squad", {
        writable: !0
    }), this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1,
        enumerable: !0
    }), this.onSave = new FUTObservable, Object.defineProperty(this, "onSave", {
        writable: !1,
        enumerable: !0
    })
}, entities.SBCChallenge.prototype.reset = function reset() {
    this.status = enums.SBC.CHALLENGE_STATUS.NOT_STARTED, this.squad = null, this.onDataChange.notify({
        status: this.status,
        squad: this.squad
    })
}, entities.SBCChallenge.prototype.hasNotStarted = function hasNotStarted() {
    return this.status === enums.SBC.CHALLENGE_STATUS.NOT_STARTED
}, entities.SBCChallenge.prototype.isInProgress = function isInProgress() {
    return this.status === enums.SBC.CHALLENGE_STATUS.IN_PROGRESS
}, entities.SBCChallenge.prototype.isCompleted = function isCompleted() {
    return this.status === enums.SBC.CHALLENGE_STATUS.COMPLETED
}, entities.SBCChallenge.prototype.isBrickChallenge = function isBrickChallenge() {
    return this.type === enums.SBC.CHALLENGE_TYPE.BRICK || this.type === enums.SBC.CHALLENGE_TYPE.CUSTOM_BRICK
}, entities.SBCChallenge.prototype.hasExpired = function hasExpired(t) {
    if (this.notExpirable) return !1;
    var i = this.endTime - Math.round((new Date).getTime() / 1e3);
    return t && (i += 60 * gSettingsModel.getConfigsByKey(models.SettingsModel.SBC_GRACE_PERIOD_MINUTES)), i < 0
}, entities.SBCChallenge.prototype._getApplicableSlotsForCombinedReq = function _getApplicableSlotsForCombinedReq(t) {
    var i = [];
    return t.kvPairs.keys().forEach(function(key) {
        key = parseInt(key, 10);
        var value = t.getFirstValue(key);
        switch (key) {
            case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
                i = i.concat(this.squad.getSlotIndicesByNation(value));
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
                i = i.concat(this.squad.getSlotIndicesByLeague(value));
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
                i = i.concat(this.squad.getSlotIndicesByClub(value));
                break;
            default:
                utils.Debug.Assert(!1, "Reached invalid combined case: " + key)
        }
    }, this), i
}, entities.SBCChallenge.prototype._hasMultipleValues = function _hasMultipleValues(t, key) {
    return !!t.kvPairs.has(key) && t.kvPairs.get(key).length > 1
}, entities.SBCChallenge.prototype.isRequirementMet = function isRequirementMet(t) {
    var i, s = t.kvPairs.keys().length,
        o = 0,
        l = 0;
    if (!this.squad || this.eligibilityRequirements.indexOf(t) < 0) return !1;
    if (t.isCombinedRequirement) {
        l = t.count;
        var u = {};
        this._getApplicableSlotsForCombinedReq(t).forEach(function(t) {
            u[t] ? (u[t] += 1, u[t] === s && o++) : u[t] = 1
        }, t)
    } else {
        if (1 !== s) return utils.Debug.Assert(!1, "Requirement is empty or invalid."), !1;
        var key = t.getFirstKey(),
            value = this._hasMultipleValues(t, key) ? t.getValue(key) : t.getFirstValue(key);
        switch (l = value, key) {
            case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_STAR_RATING:
                o = this.squad.getStarRating();
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_RATING:
                o = this.squad.getRating();
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_TEAM_CHEMISTRY:
                o = this.squad.getChemistry();
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_QUALITY:
                o = -1;
                var h = this.squad.getPlayersPerQualityTier().keys();
                if (0 === h.length) break;
                t.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_GREATER ? o = Math.min.apply(Math, h) : t.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_LOWER ? o = Math.max.apply(Math, h) : 1 === h.length && (o = parseInt(h[0], 10));
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
                l = t.count, o = this.squad.getNumberOfPlayersByQualityTier(value);
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_NATION_COUNT:
                i = this.squad.getPlayersPerNation();
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_LEAGUE_COUNT:
                i = this.squad.getPlayersPerLeague();
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_SAME_CLUB_COUNT:
                i = this.squad.getPlayersPerClub();
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
                o = this.squad.getPopularNationalities().length;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
                o = this.squad.getPopularLeagues().length;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
                o = this.squad.getPopularClubs().length;
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
                l = t.count, o = this.squad.getNumberOfPlayersByNation(value);
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
                l = t.count, o = this.squad.getNumberOfPlayersByLeague(value);
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
                l = t.count, o = this.squad.getNumberOfPlayersByClub(value);
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_LEGEND_COUNT:
                o = this.squad.getNumberOfLegends();
                break;
            case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
                l = t.count, o = this.squad.getNumberOfPlayersByRarity(value);
                break;
            default:
                utils.Debug.Assert(!1, "Reached default case: " + key)
        }
    }
    return t.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_GREATER ? (utils.JS.isValid(i) && (o = Math.max.apply(Math, i.values())), o >= l) : t.scope === enums.SBC.ELG_SCOPE.FUT_ELGRULE_SCOPE_LOWER ? (utils.JS.isValid(i) && (o = Math.max.apply(Math, i.values())), o <= l) : (utils.JS.isValid(i) && (o = i.find(function(t) {
        return t === l
    })), o === l)
}, entities.SBCChallenge.prototype.meetsRequirements = function meetsRequirements() {
    if (this.squad && !this.squad.isSquadFull()) return !1;
    for (var t = this.eligibilityRequirements.length; t-- > 0;) {
        var i = this.isRequirementMet(this.eligibilityRequirements[t]);
        if (!i && this._eligibilityOperation === enums.SBC.ELG_OPERATION.AND) return !1;
        if (i && this._eligibilityOperation === enums.SBC.ELG_OPERATION.OR) return !0
    }
    return !0
}, entities.SBCChallenge.prototype.canSubmit = function canSubmit() {
    return !this.hasExpired(!0) && this.meetsRequirements() && this.squad.isSBCSquadEligible()
}, entities.SBCChallenge.prototype.hasUntradeableItems = function hasUntradeableItems() {
    return utils.JS.isValid(utils.JS.find(this.squad.getNonBrickSlots(), function(t) {
        return t.getItem().untradeable
    }))
}, entities.SBCChallenge.prototype.getRequirementCounter = function getRequirementCounter(t) {
    var i = 0;
    if (!this.isInProgress() || !this.squad || this.eligibilityRequirements.indexOf(t) < 0) return -1;
    if (t.isCombinedRequirement) return -1;
    var key = t.getFirstKey(),
        value = this._hasMultipleValues(t, key) ? t.getValue(key) : t.getFirstValue(key);
    switch (key) {
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_COUNT:
            i += this.squad.getPopularNationalities().length;
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_COUNT:
            i += this.squad.getPopularLeagues().length;
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_COUNT:
            i += this.squad.getPopularClubs().length;
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_NATION_ID:
            i += this.squad.getNumberOfPlayersByNation(value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_LEAGUE_ID:
            i += this.squad.getNumberOfPlayersByLeague(value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_CLUB_ID:
            i += this.squad.getNumberOfPlayersByClub(value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_LEVEL:
            i += this.squad.getNumberOfPlayersByQualityTier(value);
            break;
        case enums.SBC.ELG_KEY.FUT_ELGRULE_PLAYER_RARITY:
            i += this.squad.getNumberOfPlayersByRarity(value);
            break;
        default:
            return -1
    }
    return i
}, entities.SBCChallenge.prototype.getNumberOfRequirementsMet = function getNumberOfRequirementsMet() {
    var t = 0;
    return this.squad.isSquadFull() && t++, this.eligibilityRequirements.forEach(function(i) {
        this.isRequirementMet(i) && t++
    }, this), t
}, entities.SBCChallenge.prototype._delegateFailHandler = function _delegateFailHandler(sender, event, t, error) {
    sender.clearListenersByScope(this), error.getCode() === enums.NetworkError.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.SBC_ENABLED), NetworkErrorManager.handle(error, !1, function() {
        event.notify(!1, t, error.getCode())
    }.bind(this))
}, entities.SBCChallenge.prototype.load = function load() {
    var event = new FUTObservable,
        t = {
            hasExpired: !1
        };
    if (this.hasExpired(!0) || this.hasNotStarted() && this.hasExpired()) return t.hasExpired = !0, event.notify(!1, t), event;
    var i = new communication.SBCLoadChallengeDelegate(this.id, this.isInProgress());
    return i.setImportant(!0), i.addListener(communication.BaseDelegate.SUCCESS, this, function loadSuccess(sender, result) {
        sender.clearListenersByScope(this), this.squad = factories.Squad.createSBCSquad(result.squad, result.playerRequirements);
        var i = {
            squad: this.squad
        };
        this.hasNotStarted() && (this.status = enums.SBC.CHALLENGE_STATUS.IN_PROGRESS, i.status = this.status), this.onDataChange.notify(i), event.notify(!0, t)
    }), i.addListener(communication.BaseDelegate.FAIL, this, function delegateFail(sender, error) {
        this._delegateFailHandler(sender, event, t, error)
    }), i.send(), event
}, entities.SBCChallenge.prototype.save = function save() {
    var event = new FUTObservable,
        t = {
            hasExpired: !1
        };
    if (this.hasExpired(!0)) return t.hasExpired = !0, event.notify(!1, t), event;
    var i = new communication.SBCSaveChallengeDelegate(this.id, this.squad);
    return i.addListener(communication.BaseDelegate.SUCCESS, this, function _onSaveChallengeSuccess(sender) {
        sender.clearListenersByScope(this), this.onSave.notify(), event.notify(!0, t)
    }), i.addListener(communication.BaseDelegate.FAIL, this, function _onSaveChallengeFail(sender, error) {
        this._delegateFailHandler(sender, event, t, error)
    }), i.setImportant(!0), i.send(), event
}, entities.SBCChallenge.prototype.submit = function submit() {
    function submitSuccess(sender, result) {
        sender.clearListenersByScope(this), this.timesCompleted++, this.status = enums.SBC.CHALLENGE_STATUS.COMPLETED, t.success = !0, t.credits = result.credits || 0, t.preOrderPacks = result.preOrderPacks || 0, t.recoveredPacks = result.recoveredPacks || 0, this.onDataChange.notify({
            status: this.status,
            timesCompleted: this.timesCompleted
        }), event.notify(t)
    }

    function delegateFail(sender, error) {
        sender.clearListenersByScope(this), t.error = error, event.notify(t)
    }
    var event = new FUTObservable,
        t = {
            success: !1,
            hasExpired: !1,
            credits: 0,
            recoveredPacks: 0,
            preOrderPacks: 0,
            error: null
        };
    return this.hasExpired(!0) ? (t.hasExpired = !0, event.notify(t), event) : (this.save().observe(this, function(t, response) {
        t.unobserve(this);
        var i = new communication.SBCSubmitChallengeDelegate(this.id);
        i.setImportant(!0), i.addListener(communication.BaseDelegate.SUCCESS, this, submitSuccess), i.addListener(communication.BaseDelegate.FAIL, this, delegateFail), i.send()
    }), event)
}, transferobjects.SBCReward = function(data) {
    transferobjects.Reward.call(this, data), this.loan = data.loan, Object.defineProperty(this, "loan", {
        writable: !1
    })
}, utils.JS.inherits(transferobjects.SBCReward, transferobjects.Reward), NamespaceManager.Register("entities"), entities.SBCSet = function(data) {
    this.id = data.setId, Object.defineProperty(this, "id", {
        writable: !1
    }), this.name = data.name, Object.defineProperty(this, "name", {
        writable: !1
    }), this.description = data.description, Object.defineProperty(this, "description", {
        writable: !1
    }), this.endTime = utils.JS.isNumber(data.endTime) && data.endTime > 0 ? data.endTime + Math.round((new Date).getTime() / 1e3) : 0, Object.defineProperty(this, "endTime", {
        writable: !1
    }), this.notExpirable = 0 === this.endTime, Object.defineProperty(this, "notExpirable", {
        writable: !1
    }), this.priority = data.priority, Object.defineProperty(this, "priority", {
        writable: !1
    }), this.repeatable = data.repeatable, Object.defineProperty(this, "repeatable", {
        writable: !1
    });
    var t = new valueobjects.AlphanumericVO;
    Object.defineProperty(this, "assetId", {
        get: t.get.bind(t),
        set: t.set.bind(t)
    }), this.assetId = utils.JS.isEmpty(data.setImageId) ? data.trophyId : data.setImageId, this.challengesCount = data.challengesCount, Object.defineProperty(this, "challengesCount", {
        writable: !1
    }), this.challengesCompletedCount = data.challengesCompletedCount, Object.defineProperty(this, "challengesCompletedCount", {
        writable: !0
    }), this.timesCompleted = data.timesCompleted, Object.defineProperty(this, "timesCompleted", {
        writable: !0
    }), this.isFeatured = data.taggedByProduction, Object.defineProperty(this, "isFeatured", {
        writable: !1
    }), this.isFavourite = data.taggedByUser, Object.defineProperty(this, "isFavourite", {
        writable: !0
    }), this.awards = data.awards.map(function(t) {
        return new transferobjects.SBCReward(t)
    }, this), this.awards.sort(function awardSort(a, b) {
        return a.getPriority() < b.getPriority() ? -1 : a.getPriority() > b.getPriority() ? 1 : 0
    }), Object.defineProperty(this, "awards", {
        writable: !1
    }), this.hidden = data.hidden, Object.defineProperty(this, "hidden", {
        writable: !1
    }), this.tutorial = data.tutorial, Object.defineProperty(this, "tutorial", {
        writable: !1
    }), this.challenges = new FUTHashTable({}), Object.defineProperty(this, "challenges", {
        writable: !1
    }), this.onTag = new FUTObservable, Object.defineProperty(this, "onTag", {
        writable: !1
    })
}, entities.SBCSet.prototype.isComplete = function() {
    return this.challengesCount === this.challengesCompletedCount
}, entities.SBCSet.prototype.isDisplayable = function() {
    return !this.hasExpired()
}, entities.SBCSet.prototype.hasExpired = function(t) {
    if (this.notExpirable) return !1;
    var i = this.endTime - Math.round((new Date).getTime() / 1e3);
    return t && (i += 60 * gSettingsModel.getConfigsByKey(models.SettingsModel.SBC_GRACE_PERIOD_MINUTES)), i < 0
}, entities.SBCSet.prototype.addChallenge = function(t) {
    this.challenges.set(t.id, t)
}, entities.SBCSet.prototype.getChallenge = function(t) {
    return this.challenges.get(t)
}, entities.SBCSet.prototype.submitChallenge = function(t) {
    var event = new FUTObservable,
        i = {
            success: !1,
            hasExpired: !1,
            set: null,
            credits: 0,
            recoveredPacks: 0,
            preOrderPacks: 0,
            error: null
        };
    return this.getChallenge(t).submit().observe(this, function _onChallengeSubmitComplete(t, data) {
        t.unobserve(this), data.success && (this.challengesCompletedCount++, this.isComplete() && (this.timesCompleted++, this.repeatable ? (this.challengesCompletedCount = 0, this.challenges.forEach(function(c) {
            c.reset()
        }, this)) : this.isFavourite && this.tag(), i.set = this), i.credits = data.credits, i.recoveredPacks = data.recoveredPacks, i.preOrderPacks = data.preOrderPacks), i.success = data.success, i.hasExpired = data.hasExpired, i.error = data.error, event.notify(i)
    }), event
}, entities.SBCSet.prototype.tag = function() {
    var event = new FUTObservable,
        t = new communication.SBCTagSetsDelegate(this.id, !this.isFavourite);
    return t.addListener(communication.BaseDelegate.SUCCESS, this, function delegateSuccess(sender) {
        sender.clearListenersByScope(this), this.isFavourite = !this.isFavourite, this.onTag.notify({
            sid: this.id,
            taggedByUser: this.isFavourite
        }), event.notify(!0)
    }), t.addListener(communication.BaseDelegate.FAIL, this, function delegateFail(sender, error) {
        sender.clearListenersByScope(this), error.getCode() === enums.NetworkError.SERVICE_IS_DISABLED && gSettingsModel.disableService(models.SettingsModel.SBC_ENABLED), NetworkErrorManager.handle(error, !1, function() {
            event.notify(!1, error.getCode())
        }.bind(this))
    }), t.send(), event
}, NamespaceManager.Register("components"), components.SBCProgressBar = function() {
    views.ProgressBar.call(this), this._challengesCount = 0, this._challengesCompletedCount = 0, this._generate()
}, utils.JS.inherits(components.SBCProgressBar, views.ProgressBar), components.SBCProgressBar.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("progress-bar-self-labeled"), t.classList.add("sbc-progress-bar"), this.__progressText = document.createElement("span"), this.$_progressText = $(this.__progressText), this.__progressText.classList.add("progressText"), t.appendChild(this.__progressText), this.__bar = document.createElement("div"), this.$_bar = $(this.__bar), this.__bar.classList.add("bar"), this.__bg = document.createElement("div"), this.$_bg = $(this.__bg), this.__bg.classList.add("bg"), this.__fill = document.createElement("div"), this.$_fill = $(this.__fill), this.__fill.classList.add("fill"), this.__bg.appendChild(this.__fill), this.__bar.appendChild(this.__bg), t.appendChild(this.__bar), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCProgressBar.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__progressText = null, this.$_progressText = null, this.__bar = null, this.$_bar = null, this.__bg = null, this.$_bg = null, this.__fill = null, this.$_fill = null
}, components.SBCProgressBar.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCProgressBar.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCProgressBar.prototype.setData = function(data) {
    this._challengesCount = data.challengesCount, this._challengesCompletedCount = data.challengesCompletedCount, this.setProgress(this._challengesCompletedCount / this._challengesCount * 100)
}, components.SBCProgressBar.prototype.render = function() {
    components.SBCProgressBar.superClass_.render.call(this), this.$_progressText.text(this._challengesCompletedCount + "/" + this._challengesCount + " " + gLocalization.lText("sbc.sets.challengesComplete"))
}, NamespaceManager.Register("components"), components.SBCSetInfoTile = function() {
    this._generate()
}, components.SBCSetInfoTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("sbc-set-info"), t.classList.add("sbc-tile"), this.__status = document.createElement("h1"), this.$_status = $(this.__status), this.__status.classList.add("secondary"), this.__status.classList.add("status-header"), t.appendChild(this.__status), this._progressBar = new components.SBCProgressBar, t.appendChild(this._progressBar.getRootElement()), this.__rewardsHeader = document.createElement("h1"), this.$_rewardsHeader = $(this.__rewardsHeader), this.__rewardsHeader.classList.add("secondary"), this.__rewardsHeader.classList.add("rewards-header"), t.appendChild(this.__rewardsHeader), this._rewards = new components.SBCRewards, t.appendChild(this._rewards.getRootElement());
        var i = document.createElement("div");
        i.classList.add("sbc-status-container"), this.__repeatableStatus = document.createElement("div"), this.$_repeatableStatus = $(this.__repeatableStatus), this.__repeatableStatus.classList.add("repeat"), this.__repeatableStatus.classList.add("status"), this.__repeatableLabel = document.createElement("span"), this.$_repeatableLabel = $(this.__repeatableLabel), this.__repeatableLabel.classList.add("label"), this.__repeatableStatus.appendChild(this.__repeatableLabel), i.appendChild(this.__repeatableStatus), this.__expireStatus = document.createElement("div"), this.$_expireStatus = $(this.__expireStatus), this.__expireStatus.classList.add("expires"), this.__expireStatus.classList.add("status"), this._expiresLabel = new components.SBCTimerLabel, this.__expireStatus.appendChild(this._expiresLabel.getRootElement()), i.appendChild(this.__expireStatus), this._watchBtn = new views.buttons.SBCFavoriteButton, this._watchBtn.getRootElement().classList.add("favoriteButton"), i.appendChild(this._watchBtn.getRootElement()), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCSetInfoTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__status = null, this.$_status = null, this._progressBar.destroy(), this._progressBar = null, this.__rewardsHeader = null, this.$_rewardsHeader = null, this._rewards.destroy(), this._rewards = null, this.__repeatableStatus = null, this.$_repeatableStatus = null, this.__repeatableLabel = null, this.$_repeatableLabel = null, this.__expireStatus = null, this.$_expireStatus = null, this._expiresLabel.destroy(), this._expiresLabel = null, this._watchBtn.destroy(), this._watchBtn = null
}, components.SBCSetInfoTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCSetInfoTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCSetInfoTile.prototype.init = function() {
    this._watchBtn.init()
}, components.SBCSetInfoTile.prototype.destroy = function() {
    this.destroyGeneratedElements(), this._viewModel = null
}, components.SBCSetInfoTile.prototype.render = function(data) {
    this._rewards.setData(data.awards), this._progressBar.setData(data), this._expiresLabel.setData(data), this._watchBtn.setData(data), this.$_status.text(gLocalization.lText("sbc.status.title")), this.$_rewardsHeader.text(gLocalization.lText("sbc.rewards.title")), this.$_repeatableLabel.text(data.repeatable ? gLocalization.lText("tile.sbcSets.repeatable") : gLocalization.lText("tile.sbcSets.nonrepeatable")), this.$_repeatableStatus.toggleClass("no-repeat", !data.repeatable), this.$_expireStatus.toggleClass("no-expire", data.notExpirable), this._rewards.render(), this._progressBar.render(), this._expiresLabel.start()
}, NamespaceManager.Register("components"), components.SBCChallengeTile = function SBCChallengeTileView() {
    views.tiles.BaseTile.call(this), this._data = null, this._generate()
}, utils.JS.inherits(components.SBCChallengeTile, views.tiles.BaseTile), components.SBCChallengeTile.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("col-1-2"), t.classList.add("col-mobile-1-2"), t.classList.add("sbc-challenge"), t.classList.add("sbc-tile"), t.classList.add("tile");
        var i = document.createElement("div");
        i.classList.add("loadingSpinner"), t.appendChild(i);
        var s = document.createElement("header");
        this.__tileTitle = document.createElement("h1"), this.$_tileTitle = $(this.__tileTitle), this.__tileTitle.classList.add("tileTitle"), s.appendChild(this.__tileTitle), this.__subTitle = document.createElement("h2"), this.$_subTitle = $(this.__subTitle), this.__subTitle.classList.add("subTitle"), s.appendChild(this.__subTitle), t.appendChild(s), this.__tileContent = document.createElement("div"), this.$_tileContent = $(this.__tileContent), this.__tileContent.classList.add("tileContent"), this.__tileDisabled = document.createElement("div"), this.$_tileDisabled = $(this.__tileDisabled), this.__tileDisabled.classList.add("tileDisabled"), this._tileDisabledMessage = new components.TextField, this._tileDisabledMessage.getRootElement().classList.add("tileDisabledMessage"), this.__tileDisabled.appendChild(this._tileDisabledMessage.getRootElement()), this.__tileContent.appendChild(this.__tileDisabled), this._challengeImage = new components.ImageLoader, this._challengeImage.getRootElement().classList.add("challengeImage"), this.__tileContent.appendChild(this._challengeImage.getRootElement()), t.appendChild(this.__tileContent), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.SBCChallengeTile.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__tileTitle = null, this.$_tileTitle = null, this.__subTitle = null, this.$_subTitle = null, this.__tileContent = null, this.$_tileContent = null, this.__tileDisabled = null, this.$_tileDisabled = null, this._tileDisabledMessage.destroy(), this._tileDisabledMessage = null, this._challengeImage.destroy(), this._challengeImage = null
}, components.SBCChallengeTile.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.SBCChallengeTile.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.SBCChallengeTile.prototype.dealloc = function dealloc() {
    this.superclass(), this._data = null
}, components.SBCChallengeTile.prototype.setData = function setData(data) {
    this._data = data, this.setInteractionState(!data.isCompleted())
}, components.SBCChallengeTile.prototype.getData = function getData() {
    return this._data
}, components.SBCChallengeTile.prototype.render = function render() {
    if (utils.JS.isValid(this._data)) {
        var t = this._data.isInProgress(),
            i = this._data.isCompleted();
        this.toggleClass("complete", i), this.toggleClass("in-progress", t), this._challengeImage.setResource(utils.AssetLocator.getSBCImageURI(utils.AssetLocator.IMAGE_TYPE_SBC_CHALLENGES, enums.Year.ASSET, this._data.assetId), !0).observe(this, function onResourceLoaded(t, i, s, path) {
            t.unobserve(this), i || this._challengeImage.setLocalResource("images/sbc/sbcDefaultChallengeTile.png")
        }), this._data.hasNotStarted() ? this.__subTitle.textContent = gLocalization.lText("sbc.challenge.status.notStarted") : t ? this.__subTitle.textContent = gLocalization.lText("sbc.challenge.status.inProgress") : i && (this.__subTitle.textContent = gLocalization.lText("sbc.challenge.status.complete"))
    }
}, components.SBCChallengeTile.prototype.setTitle = function setTitle(title) {
    this.superclass(title), this.__tileTitle.textContent = title
}, Screens.Register("SBC_CHALLENGES", "SBCChallenges", Screens.APP_SECTION.SBC, "SBC - Challenges"), pages.SBCChallenges = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, ""), this._sbcChallengesTiles = [], this._requirementsOverlay = null, this._generate()
}, utils.JS.inherits(pages.SBCChallenges, pages.ScreenBase), pages.SBCChallenges.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("SBCChallenges"), this._setInfoTile = new components.SBCSetInfoTile, this._setInfoTile.getRootElement().classList.add("setInfoTile"), t.appendChild(this._setInfoTile.getRootElement()), this.__challenges = document.createElement("div"), this.$_challenges = $(this.__challenges), this.__challenges.classList.add("challenges"), t.appendChild(this.__challenges), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SBCChallenges.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._setInfoTile.destroy(), this._setInfoTile = null, this.__challenges = null, this.$_challenges = null
}, pages.SBCChallenges.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SBCChallenges.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.SBCChallenges.EVENT_SBC_CHALLENGE_TAPPED = "pages.SBCChallenges.EVENT_SBC_CHALLENGE_TAPPED", pages.SBCChallenges.REQUIREMENTS_OVERLAY_READY = "pages.SBCChallenges.REQUIREMENTS_OVERLAY_READY", pages.SBCChallenges.prototype.destroy = function destroy() {
    pages.SBCChallenges.superClass_.destroy.call(this), this.clearChallenges()
}, pages.SBCChallenges.prototype.clearChallenges = function clearChallenges() {
    this._sbcChallengesTiles.forEach(function(t) {
        t.dealloc()
    }), this._sbcChallengesTiles = []
}, pages.SBCChallenges.prototype.setup = function setup(set) {
    this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, set.name), this._setInfoTile.init(), this._setInfoTile.render(set), this.clearChallenges();
    set.challenges.forEach(function(t, i) {
        var s = new components.SBCChallengeTile;
        s.init(), s.setData(t), s.setTitle(t.name), s._index = i, s.render(), s.addTarget(this, this._eChallengeTileSelected, enums.Event.TAP), this._sbcChallengesTiles.push(s), this.$_challenges.append(s.getRoot())
    }, this)
}, pages.SBCChallenges.prototype._eChallengeTileSelected = function _eChallengeTileSelected(sender, event, data) {
    this.dispatch(pages.SBCChallenges.EVENT_SBC_CHALLENGE_TAPPED, sender.getData().id)
}, pages.SBCChallenges.prototype.getRequirementsOverlay = function getRequirementsOverlay() {
    return this._requirementsOverlay
}, pages.SBCChallenges.prototype.setupRequirementsOverlay = function setupRequirementsOverlay(set, t) {
    this._requirementsOverlay = new controllers.views.popups.SBCChallenge(set, t, !1), gPopupClickShield.setActivePopup(this._requirementsOverlay), this.dispatch(pages.SBCChallenges.REQUIREMENTS_OVERLAY_READY)
}, pages.SBCChallenges.prototype.destroyRequirementsOverlay = function destroyRequirementsOverlay() {
    utils.JS.isValid(this._requirementsOverlay) && (this._requirementsOverlay.closePopup(), this._requirementsOverlay = null)
}, pages.controllers.SBCChallengesController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._set = null
}, utils.JS.inherits(pages.controllers.SBCChallengesController, pages.controllers.ScreenControllerBase), pages.controllers.SBCChallengesController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.SBCChallengesController.superClass_.onScreenInitialized.call(this, data, t), this.getView().addListener(pages.SBCChallenges.EVENT_SBC_CHALLENGE_TAPPED, this, this.onChallengeTapped), data instanceof entities.SBCSet ? (this._set = data, TelemetryManager.trackPage(TelemetryManager.Sections.SBC, "SBC Challenges - " + this._set.id), this.getView().setup(this._set)) : (utils.Debug.Assert(!1, "No Set ID given. Can't populate challenges."), services.Notification.queue([gLocalization.lText("notification.sbcChallenges.failedToLoad"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen())
}, pages.controllers.SBCChallengesController.prototype.onScreenStopped = function() {
    pages.controllers.SBCChallengesController.superClass_.onScreenStopped.call(this);
    var view = this.getView();
    view.clearListenersByScope(this), utils.JS.isValid(view.getRequirementsOverlay()) && view.getRequirementsOverlay().clearListenersByScope(this)
}, pages.controllers.SBCChallengesController.prototype.onChallengeTapped = function(sender, t) {
    function onGoToChallengeComplete(i, s, data, errorCode) {
        if (i.unobserve(this), s) NavManager.requestChildScreen(Screens.getView("SBC_SQUAD"), {
            set: this._set,
            cid: t
        });
        else {
            var o = errorCode === enums.NetworkError.SERVICE_IS_DISABLED,
                l = data.hasExpired ? "notification.sbcChallenges.expired" : o ? "sbc.notification.disabled" : "notification.sbcChallenges.failedToStart";
            services.Notification.queue([gLocalization.lText(l), enums.UINotificationType.NEGATIVE]), o ? NavManager.requestGoBackToScreenId(Screens.getView("HOME")) : data.hasExpired && NavManager.requestGoBackScreen()
        }
    }

    function onStartChallenge(t) {
        t.unobserve(this), challenge.load().observe(this, onGoToChallengeComplete), this.getView().destroyRequirementsOverlay(), gTelemetryManager.trackEvent(TelemetryManager.Sections.SBC, TelemetryManager.Categories.BUTTON_PRESS, "SBC - Start Challenge")
    }
    var challenge = this._set.challenges.get(t);
    if (challenge.hasNotStarted()) {
        var view = this.getView();
        view.clearListenersByEvent(pages.SBCChallenges.REQUIREMENTS_OVERLAY_READY), view.addListener(pages.SBCChallenges.REQUIREMENTS_OVERLAY_READY, this, function onRequirementsOverlayReady(sender) {
            this.getView().getRequirementsOverlay().onExit.observe(this, this.getView().destroyRequirementsOverlay.bind(this.getView())), this.getView().getRequirementsOverlay().onConfirm.observe(this, onStartChallenge)
        }), view.setupRequirementsOverlay(this._set, t)
    } else challenge.load().observe(this, onGoToChallengeComplete)
}, Screens.Register("SBC_SQUAD", "SBCSquad", Screens.APP_SECTION.SBC, "SBC - Squad"), pages.SBCSquad = function() {
    pages.ScreenBase.call(this);
    var t = isPhone() ? components.Header.DEFAULT_CHILD_PAGE | components.Header.HAMBURGER_BUTTON : components.Header.DEFAULT_CHILD_PAGE;
    this.updateHeader(t, gLocalization.lText("navbar.label.SBCSquad")), this._generate()
}, utils.JS.inherits(pages.SBCSquad, pages.ScreenBase), pages.SBCSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SBCSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.SBCSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SBCSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.popups"), views.popups.SBCRewards = function SBCRewardsPopupView() {
    FUIView.call(this), this.onConfirm = new FUTObservable, Object.defineProperty(this, "onConfirm", {
        writable: !1
    }), this.onCancel = new FUTObservable, Object.defineProperty(this, "onCancel", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.popups.SBCRewards, FUIView), views.popups.SBCRewards.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "SBCRewardsOverlay");
        var i = document.createElement("header"),
            s = document.createElement("strong");
        this.__title = document.createElement("h1"), this.$_title = $(this.__title), s.appendChild(this.__title), i.appendChild(s), t.appendChild(i);
        var o = document.createElement("div");
        o.classList.add("content-container"), this.__description = document.createElement("div"), this.$_description = $(this.__description), this.__description.classList.add("description"), o.appendChild(this.__description);
        var l = document.createElement("section");
        l.classList.add("rewards-container"), this._rewardsCarousel = new components.RewardsCarousel, l.appendChild(this._rewardsCarousel.getRootElement()), o.appendChild(l), t.appendChild(o);
        var u = document.createElement("footer");
        this._btnConfirm = new views.buttons.DefaultButton, this._btnConfirm.getRootElement().classList.add("call-to-action"), u.appendChild(this._btnConfirm.getRootElement()), t.appendChild(u), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.SBCRewards.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__description = null, this.$_description = null, this._rewardsCarousel.destroy(), this._rewardsCarousel = null, this._btnConfirm.destroy(), this._btnConfirm = null
}, views.popups.SBCRewards.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.SBCRewards.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.SBCRewards.prototype.init = function init() {
    this._btnConfirm.init(), this._btnConfirm.addTarget(this.onConfirm, this.onConfirm.notify, enums.Event.TAP)
}, views.popups.SBCRewards.prototype.render = function render(name, description, t) {
    this._btnConfirm.setText(gLocalization.lText("sbc.rewards.claim")), this.setup(name, description, t)
}, views.popups.SBCRewards.prototype.dealloc = function dealloc() {
    this.onConfirm.dealloc(), this.onCancel.dealloc(), this.superclass()
}, views.popups.SBCRewards.prototype.reset = function reset() {
    this._rewardsCarousel.reset()
}, views.popups.SBCRewards.prototype.slick = function slick() {
    this._rewardsCarousel.slick()
}, views.popups.SBCRewards.prototype.setup = function setup(title, description, t) {
    this.$_title.html(title), this.$_description.html(description), this._rewardsCarousel.setup(t)
}, controllers.views.popups.SBCRewards = function SBCRewardsPopupController(t, data) {
    controllers.views.popups.BasePopup.call(this), this._challenge = t, this._set = data.set, this.checkCoins = !1, this.checkUnassigned = !1, this.checkMyPacks = !1
}, utils.JS.inherits(controllers.views.popups.SBCRewards, controllers.views.popups.BasePopup), controllers.views.popups.SBCRewards.DEFAULT_DELAY = 400, controllers.views.popups.SBCRewards.prototype.init = function init() {
    var t, name, description, view = this.getView();
    this._challenge.awards.length > 0 ? (t = this._challenge.awards, name = this._challenge.name, description = this._challenge.description) : utils.JS.isValid(this._set) ? (t = this._set.awards, name = this._set.name, description = this._set.description) : utils.Debug.Assert(!1, "controllers.views.popups.SBCRewards::init. We don't have rewards to display."), this._checkAwards(t), view.onConfirm.observe(this, this._onClaimRewards.bind(this)), view.onCancel.observe(this, this._onClaimRewards.bind(this)), view.render(name, description, t), view.slick(), this.superclass()
}, controllers.views.popups.SBCRewards.prototype.dealloc = function dealloc() {
    this._challenge = null, this._set = null, this.superclass()
}, controllers.views.popups.SBCRewards.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.SBCRewards
}, controllers.views.popups.SBCRewards.prototype._onClaimRewards = function _onClaimRewards() {
    if (gTelemetryManager.trackEvent(TelemetryManager.Sections.SBC, TelemetryManager.Categories.BUTTON_PRESS, "SBC - Claim Rewards"), utils.JS.isValid(this._set) && !this._set.hidden) {
        this._checkAwards(this._set.awards);
        var view = this.getView();
        view.getRoot().hide(), NavManager.requestGoBackScreen(), view.reset(), view.render(this._set.name, this._set.description, this._set.awards), this._set = null, setTimeout(function() {
            this.getView().getRoot().show(), this.getView().slick()
        }.bind(this), controllers.views.popups.SBCRewards.DEFAULT_DELAY)
    } else this.onExit.notify({
        checkUnassigned: this.checkUnassigned,
        checkMyPacks: this.checkMyPacks,
        checkCoins: this.checkCoins
    })
}, controllers.views.popups.SBCRewards.prototype._checkAwards = function _checkAwards(t) {
    t.forEach(function(t) {
        t.isCoin && (this.checkCoins = !0), t.isItem && (this.checkUnassigned = !0), t.isPack && (this.checkMyPacks = !0)
    }, this)
}, NamespaceManager.Register("views.squads"), views.squads.SBCSummaryProgress = function SBCSummaryProgressView() {
    views.buttons.ToggleButton.call(this), this._generate()
}, utils.JS.inherits(views.squads.SBCSummaryProgress, views.buttons.ToggleButton), views.squads.SBCSummaryProgress.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("progress-container"), this.__requirementsLabel = document.createElement("span"), this.$_requirementsLabel = $(this.__requirementsLabel), this.__requirementsLabel.classList.add("secondary"), this.__requirementsLabel.classList.add("requirements-label"), t.appendChild(this.__requirementsLabel);
        var i = document.createElement("div");
        i.classList.add("progress-bar-container"), this._progressBar = new views.ProgressBar, this._progressBar.getRootElement().classList.add("sbc-mini"), i.appendChild(this._progressBar.getRootElement()), this.__progressCount = document.createElement("span"), this.$_progressCount = $(this.__progressCount), this.__progressCount.classList.add("progress-count"), i.appendChild(this.__progressCount), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SBCSummaryProgress.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__requirementsLabel = null, this.$_requirementsLabel = null, this._progressBar.destroy(), this._progressBar = null, this.__progressCount = null, this.$_progressCount = null
}, views.squads.SBCSummaryProgress.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SBCSummaryProgress.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SBCSummaryProgress.prototype.init = function init() {
    this.superclass(), this.setAllText(gLocalization.lText("sbc.requirements.challenge.condensed")), this.$_progressCount.text("0/0"), this.setInteractionState(!0)
}, views.squads.SBCSummaryProgress.prototype.setProgress = function setProgress(t, i) {
    this.$_progressCount.text(t + "/" + i), this._progressBar.setProgress(t / i * 100), this._progressBar.render()
}, views.squads.SBCSummaryProgress.prototype.setText = function setText(text) {
    this.__requirementsLabel.textContent = text
}, NamespaceManager.Register("views.squads"), views.squads.SBCSummaryBanner = function SBCSquadSummaryBannerView() {
    views.squads.SummaryBanner.call(this), this.onRequirementsSelect = new FUTObservable, Object.defineProperty(this, "onRequirementsSelect", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(views.squads.SBCSummaryBanner, views.squads.SummaryBanner), views.squads.SBCSummaryBanner.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("SBCSquadSummary"), this._reqProgress = new views.squads.SBCSummaryProgress, t.appendChild(this._reqProgress.getRootElement()), this._squadStats = new components.SquadStats, t.appendChild(this._squadStats.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SBCSummaryBanner.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._reqProgress.destroy(), this._reqProgress = null, this._squadStats.destroy(), this._squadStats = null
}, views.squads.SBCSummaryBanner.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SBCSummaryBanner.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SBCSummaryBanner.prototype.init = function init() {
    this.superclass(), this._reqProgress.init(), this._reqProgress.addTarget(this, function() {
        this.onRequirementsSelect.notify()
    }, enums.Event.TAP)
}, views.squads.SBCSummaryBanner.prototype.dealloc = function dealloc() {
    this.onRequirementsSelect.dealloc(), this.superclass()
}, views.squads.SBCSummaryBanner.prototype.setChallengeProgress = function setChallengeProgress(t, i) {
    this._reqProgress.setProgress(t, i)
}, views.squads.SBCSummaryBanner.prototype.getRequirementsButton = function getRequirementsButton() {
    return this._reqProgress
}, views.squads.SBCSquadOverview = function SBCSquadOverviewView() {
    views.squads.SquadOverview.call(this)
}, utils.JS.inherits(views.squads.SBCSquadOverview, views.squads.SquadOverview), views.squads.SBCSquadOverview.prototype.init = function init() {
    this.superclass(), this.renderManager = !1
}, views.squads.SBCSquadOverview.prototype.getSummaryPanel = function getSummaryPanel() {
    return this._summaryPanel || (this._summaryPanel = new views.squads.SBCSummaryBanner, this._summaryPanel.onRequirementsSelect.observe(this, this._eRequirementsSelected)), this._summaryPanel
}, views.squads.SBCSquadOverview.prototype.setSquad = function setSquad(t) {
    this._summaryPanel && this._summaryPanel.setChemistryAndRating(t.getChemistry(), t.getRating());
    var i = this.getSelectedSlot(),
        selectedIndex = i ? i.getIndex() : -1,
        s = this.renderManager ? t.getFieldPlayers().concat(t.getManager()) : t.getFieldPlayers();
    this._pitch.setSlots(s, this.renderConcepts, this.renderChemistry), this._pitch.setLockedSlots(t.getAllBrickIndices()), this._leftDock && this._leftDock.setSlots(t.getSubPlayers().concat(t.getReservePlayers()), this.renderConcepts), this._slotViews = this._getDropSlotViews(), this._slotViews.forEach(function(t) {
        t.addTarget(this, this._eSlotTapped, enums.Event.TAP), t.addTarget(this, this._eSlotMouseEnter, enums.Event.MOUSEENTER), t.addTarget(this, this._eSlotMouseLeave, enums.Event.MOUSELEAVE)
    }, this), selectedIndex >= 0 && this.selectSlot(selectedIndex), this.setFormation(t.getFormation(), t.getChemistryLinks())
}, views.squads.SBCSquadOverview.prototype._setDockLocalization = function _setDockLocalization() {
    this._leftDock && this._leftDock.setInstructions(gLocalization.lText("dock.label.workAreaInstructions"))
}, views.squads.SBCSquadOverview.prototype._initTabViews = function _initTabViews() {
    this._rightTab = new views.buttons.SquadTabButton, this._leftDock = new views.squads.SlotDock, this._leftTab = new views.buttons.SquadTabButton, this._leftTab.init(), this._rightTab.init(), this._leftDock.init(), this._leftTab.addTarget(this, this._onDockBtnPressed.bind(this, this._leftDock, this._leftTab, this._dropAreas.LEFT_DOCK, this._rightDock), enums.Event.TAP), this._leftTab.setText(gLocalization.lText("dock.label.workArea")), this._leftTab.assignLeft(), this._rightTab.setText(gLocalization.lText("sbc.squad.button.submit")), this._rightTab.getRoot().addClass(enums.UIButtonState.CALL_TO_ACTION), this._rightTab.setType(enums.UISquadTabTypes.ACTION_TAB), this._rightTab.assignRight(), this._leftTab.setType(enums.UISquadTabTypes.WORK_AREA), this._leftDock.setIsSBC(!0), this._setDockLocalization(), this.addSubview(this._leftTab, this.$_draggableArea), this.addSubview(this._leftDock, this.$_draggableArea), this.addSubview(this._rightTab, this.$_draggableArea), this.layoutSubviews()
}, views.squads.SBCSquadOverview.prototype.updateChallenge = function updateChallenge(challenge) {
    this.getSummaryPanel().setChallengeProgress(challenge.getNumberOfRequirementsMet(), challenge.eligibilityRequirements.length + 1), this._rightTab && (this._rightTab.setText(gLocalization.lText(challenge.hasExpired(!0) ? "sbc.sets.expired" : "sbc.squad.button.submit")), this._rightTab.setInteractionState(challenge.canSubmit()))
}, views.squads.SBCSquadOverview.prototype._eRequirementsSelected = function _eRequirementsSelected(t) {
    this._triggerActions("sbcRequirementSelect")
}, views.squads.SBCSquadOverview.prototype.getRequirementsButton = function getRequirementsButton() {
    return this._summaryPanel.getRequirementsButton()
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SBCSquadOverview = function SBCSquadOverviewViewController() {
    controllers.squads.SquadOverview.call(this), this._set = null, this._challenge = null
}, utils.JS.inherits(controllers.squads.SBCSquadOverview, controllers.squads.SquadOverview), controllers.squads.SBCSquadOverview.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        isPhone() && view.addTarget(this, this._eRequirementsSelected, "sbcRequirementSelect"), view.getRightTab().addTarget(this, this._eSubmitSelected, enums.Event.TAP)
    }
}, controllers.squads.SBCSquadOverview.prototype.initWithSBCSet = function initWithSBCSet(set, t) {
    this.initialized || (utils.Debug.Assert(set instanceof entities.SBCSet, "Initialization expected an SBC Set entity."), utils.Debug.Assert(utils.JS.isNumber(t) && t >= 0, "Initialization expected a valid SBC Challenge ID."), this._set = set, this._challenge = set.getChallenge(t), utils.Debug.Assert(this._challenge instanceof entities.SBCChallenge, "Initialization expected a valid SBC Challenge."), this.initWithSquad(this._challenge.squad))
}, controllers.squads.SBCSquadOverview.prototype.dealloc = function dealloc() {
    this._challenge.onSave.unobserve(this), this.superclass(), this._set = null, this._challenge = null
}, controllers.squads.SBCSquadOverview.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SBCSquadOverview
}, controllers.squads.SBCSquadOverview.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._challenge && gHeader.setTitle(this._challenge.name)
}, controllers.squads.SBCSquadOverview.prototype._pushSquadToView = function _pushSquadToView(t) {
    this.superclass(t);
    var view = this.getView();
    view.setMode(enums.SquadPitchModes.SBC);
    var challenge = this._set ? this._set.getChallenge(this._challenge.id) : null;
    challenge && view.updateChallenge(challenge)
}, controllers.squads.SBCSquadOverview.prototype._submitChallenge = function _submitChallenge() {
    services.SBC.submitChallenge(this._challenge, this._set).observe(this, function(t, data) {
        t.unobserve(this), data.success ? NavManager.requestGoBackScreen() : data.isFeatureDisabled ? NavManager.requestGoBackToScreenId(Screens.getView("HOME")) : this._challenge.hasExpired && NavManager.requestGoBackToScreenId(Screens.getView("SBC_HUB"))
    })
}, controllers.squads.SBCSquadOverview.prototype._gotoDetailsView = function _gotoDetailsView(index) {
    var t = this.getNavigationController();
    if (t) {
        var i = new controllers.navigation.SquadItemDetails;
        this._challenge ? i.initWithSBCChallenge(this._challenge, index) : i.init(), i.setNavigationStyle(enums.UINavigationBarStyle.SECONDARY), t.pushViewController(i)
    } else this.getParentViewController() || NavManager.requestChildScreen(Screens.getView("DETAIL_SLOT_VIEW"), {
        challenge: this._challenge,
        slot: index
    })
}, controllers.squads.SBCSquadOverview.prototype._eItemSwap = function _eItemSwap(sender, event, data) {
    var a = utils.JS.isNumber(data.swapFrom) ? data.swapFrom : -1,
        b = utils.JS.isNumber(data.swapTo) ? data.swapTo : -1;
    this._squad.swapPlayersByIndex(a, b), this._set && services.SBC.saveChallenge(this._challenge).observe(this, function(t, data) {
        t.unobserve(this), data.success && this.getView().updateChallenge(this._challenge)
    }), this.onItemSwap.notify(a, b), this.getView().updatePitchChemistry(this._squad.getFieldPlayers(), this._squad.getChemistryLinks())
}, controllers.squads.SBCSquadOverview.prototype._eRequirementsSelected = function _eRequirementsSelected(sender, event, data) {
    var t = new controllers.views.popups.SBCChallenge(this._set, this._challenge.id, !0);
    t.onExit.observe(this, this._ePopupClosed), t.onConfirm.observe(this, this._ePopupSubmitSelected), gPopupClickShield.setActivePopup(t)
}, controllers.squads.SBCSquadOverview.prototype._ePopupSubmitSelected = function _ePopupSubmitSelected(t) {
    this._submitChallenge()
}, controllers.squads.SBCSquadOverview.prototype._ePopupClosed = function _ePopupClosed(t) {
    this.getView().getRequirementsButton().setChecked(!1)
}, controllers.squads.SBCSquadOverview.prototype._eSubmitSelected = function _eSubmitSelected(sender, event, data) {
    this._submitChallenge()
}, controllers.squads.SBCSquadOverview.prototype._eSquadDataChange = function _eSquadDataChange(t, data) {
    this._squad && this._pushSquadToView(this._squad)
}, NamespaceManager.Register("views.squads"), views.squads.SBCSquadDetailPanel = function SBCSquadDetailPanelView() {
    FUIView.call(this), this._generate()
}, utils.JS.inherits(views.squads.SBCSquadDetailPanel, FUIView), views.squads.SBCSquadDetailPanel.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("SquadPanel"), t.classList.add("SBCSquadPanel"), this.__content = document.createElement("div"), this.$_content = $(this.__content), this.__content.classList.add("flush-top"), this.__content.classList.add("layout-article"), this.__content.classList.add("challenge-content"), this._challengeDetails = new views.squads.SBCChallengeDetails, this._challengeDetails.getRootElement().classList.add("flush"), this.__content.appendChild(this._challengeDetails.getRootElement()), this._btnExchange = new views.buttons.DefaultButton, this._btnExchange.getRootElement().classList.add("call-to-action"), this.__content.appendChild(this._btnExchange.getRootElement()), this._btnSquadBuilder = new views.buttons.DefaultButton, this.__content.appendChild(this._btnSquadBuilder.getRootElement()), this._btnClearSquad = new views.buttons.DefaultButton, this.__content.appendChild(this._btnClearSquad.getRootElement()), t.appendChild(this.__content), this.__statusContainer = document.createElement("footer"), this.$_statusContainer = $(this.__statusContainer), this.__statusContainer.classList.add("sbc-status-container"), this.__repeatableStatus = document.createElement("div"), this.$_repeatableStatus = $(this.__repeatableStatus), this.__repeatableStatus.classList.add("repeat"), this.__repeatableStatus.classList.add("status"), this.__repeatableLabel = document.createElement("span"), this.$_repeatableLabel = $(this.__repeatableLabel), this.__repeatableLabel.classList.add("label"), this.__repeatableLabel.appendChild(document.createTextNode("Repeatable")), this.__repeatableStatus.appendChild(this.__repeatableLabel), this.__statusContainer.appendChild(this.__repeatableStatus), this.__expireStatus = document.createElement("div"), this.$_expireStatus = $(this.__expireStatus), this.__expireStatus.classList.add("expires"), this.__expireStatus.classList.add("status"), this._expiresLabel = new components.SBCTimerLabel, this.__expireStatus.appendChild(this._expiresLabel.getRootElement()), this.__statusContainer.appendChild(this.__expireStatus), t.appendChild(this.__statusContainer), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SBCSquadDetailPanel.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__content = null, this.$_content = null, this._challengeDetails.destroy(), this._challengeDetails = null, this._btnExchange.destroy(), this._btnExchange = null, this._btnSquadBuilder.destroy(), this._btnSquadBuilder = null, this._btnClearSquad.destroy(), this._btnClearSquad = null, this.__statusContainer = null, this.$_statusContainer = null, this.__repeatableStatus = null, this.$_repeatableStatus = null, this.__repeatableLabel = null, this.$_repeatableLabel = null, this.__expireStatus = null, this.$_expireStatus = null, this._expiresLabel.destroy(), this._expiresLabel = null
}, views.squads.SBCSquadDetailPanel.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SBCSquadDetailPanel.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SBCSquadDetailPanel.prototype.init = function init() {
    this.superclass(), this._btnSquadBuilder.init(), this._btnClearSquad.init(), this._btnExchange.init(), this._btnSquadBuilder.setText(gLocalization.lText("infopanel.button.squadbuilder")), this._btnClearSquad.setText(gLocalization.lText("infopanel.button.clear")), this._btnExchange.setText(gLocalization.lText("sbc.overlay.btn.submitChallenge")), isPhone() && this._btnExchange.hide()
}, views.squads.SBCSquadDetailPanel.prototype.setAwards = function setAwards(t) {
    this._challengeDetails.setAwards(t)
}, views.squads.SBCSquadDetailPanel.prototype.setChallengeRequirements = function setRequirements(challenge, t) {
    this._challengeDetails.setChallengeRequirements(challenge, t)
}, views.squads.SBCSquadDetailPanel.prototype.render = function render(challenge, t, i) {
    this._challengeDetails.render(challenge, t, i), this._expiresLabel.setData(challenge), this._expiresLabel.start(), challenge.repeatable ? this.$_repeatableLabel.text(gLocalization.lText("tile.sbcSets.repeatable")) : (this.$_repeatableStatus.addClass("no-repeat"), this.$_repeatableLabel.text(gLocalization.lText("sbc.status.notrepeatable"))), this.$_expireStatus.toggleClass("no-expire", challenge.notExpirable)
}, views.squads.SBCSquadDetailPanel.prototype.toggleExchangeState = function toggleExchangeState(value) {
    this._btnExchange.setInteractionState(value)
}, views.squads.SBCSquadDetailPanel.prototype.toggleClearState = function toggleClearState(value) {
    this._btnClearSquad.setInteractionState(value)
}, views.squads.SBCSquadDetailPanel.prototype.getSquadBuilderButton = function getSquadBuilderButton() {
    return this._btnSquadBuilder
}, views.squads.SBCSquadDetailPanel.prototype.getClearSquadButton = function getClearSquadButton() {
    return this._btnClearSquad
}, views.squads.SBCSquadDetailPanel.prototype.getExchangeButton = function getExchangeButton() {
    return this._btnExchange
}, NamespaceManager.Register("services"), services.SBC = function() {
    function SBCService() {}
    return SBCService.prototype.saveChallenge = function saveChallenge(challenge) {
        var t = new FUTObservable;
        return challenge.save().observe(this, function _saveChallengeComplete(i, s, data, errorCode) {
            i.unobserve(this);
            var o = !1;
            if (!s) {
                o = errorCode === enums.NetworkError.SERVICE_IS_DISABLED;
                var l = data.hasExpired ? "notification.sbcChallenges.expired" : o ? "sbc.notification.disabled" : "notification.sbcChallenges.failedToSave";
                services.Notification.queue([gLocalization.lText(l), enums.UINotificationType.NEGATIVE])
            }
            t.notify({
                success: s,
                isFeatureDisabled: o
            })
        }), t
    }, SBCService.prototype.submitChallenge = function submitChallenge(challenge, set) {
        function _completeChallengeSubmission(i, data) {
            if (i.unobserve(this), data.success) {
                gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
                    type: PinManager.PAGEVIEW_EVT_TYPE,
                    pgid: "SBC - Rewards Overlay"
                }));
                var s = t.getFieldPlayers().map(function(t) {
                    return t.getItem()
                });
                repositories.Item.remove(s), repositories.User.getCurrent().setNumUnopenedPacks(data.recoveredPacks + data.preOrderPacks), data.credits > 0 && gUserModel.setCredits(data.credits, !0);
                var o = new controllers.views.popups.SBCRewards(challenge, data);
                o.onExit.observe(o, function _showRewards(t, i) {
                    t.unobserve(this), i.checkUnassigned && (services.Notification.queue([gLocalization.lText("notification.item.added"), enums.UINotificationType.POSITIVE]), repositories.Item.setDirty(enums.FUTItemPile.PURCHASED)), i.checkMyPacks && services.Notification.queue([gLocalization.lText("notification.pack.added"), enums.UINotificationType.POSITIVE]), i.checkCoins && services.Notification.queue([gLocalization.lText("notification.coins.added"), enums.UINotificationType.POSITIVE])
                }), gPopupClickShield.setActivePopup(o), set.repeatable && 1 === set.timesCompleted && repositories.SBC.reset()
            } else {
                var l = !!data.error && data.error.getCode() === enums.NetworkError.SERVICE_IS_DISABLED,
                    u = data.hasExpired ? "notification.sbcChallenges.expired" : l ? "sbc.notification.disabled" : "notification.sbcChallenges.failedToSubmit";
                services.Notification.queue([gLocalization.lText(u), enums.UINotificationType.NEGATIVE])
            }
            event.notify({
                success: data.success,
                isFeatureDisabled: l
            })
        }
        var event = new FUTObservable,
            t = challenge.squad;
        return gTelemetryManager.trackEvent(TelemetryManager.Sections.SBC, TelemetryManager.Categories.BUTTON_PRESS, "SBC - Submit Challenge"), challenge.canSubmit() ? !gSettingsModel.getConfigsByKey(models.SettingsModel.SBC_ALLOW_UNTRADEABLE) && challenge.hasUntradeableItems() ? utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.SBC_UNTRADEABLE_NOT_ALLOWED) : set ? utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.SUBMIT_CHALLENGE, null, function _confirmChallengeSubmit() {
            set.submitChallenge(challenge.id).observe(this, _completeChallengeSubmission)
        }.bind(this), function() {}) : services.Notification.queue([gLocalization.lText("notification.sbcChallenges.failedToSubmit"), enums.UINotificationType.NEGATIVE]) : utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.SBC_INELIGIBLE_SQUAD), event
    }, new SBCService
}(), NamespaceManager.Register("controllers.squads"), controllers.squads.SBCSquadDetailPanel = function SBCSquadDetailPanelViewController() {
    FUIViewController.call(this), this._set = null, this._challenge = null
}, utils.JS.inherits(controllers.squads.SBCSquadDetailPanel, FUIViewController), controllers.squads.SBCSquadDetailPanel.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.getSquadBuilderButton().addTarget(this, this._eSquadBuilderSelected, enums.Event.TAP), view.getClearSquadButton().addTarget(this, this._eSquadClearSelected, enums.Event.TAP), view.getExchangeButton().addTarget(this, this._eSquadExchange, enums.Event.TAP)
    }
}, controllers.squads.SBCSquadDetailPanel.prototype.initWithSBCSet = function initWithChallenge(set, t) {
    this.initialized || (utils.Debug.Assert(set instanceof entities.SBCSet, "Initialization expected an SBC set entity."), utils.Debug.Assert(utils.JS.isNumber(t), "Initialization expected Challenge ID to be a number."), this._set = set, this._challenge = set.challenges.get(t), utils.Debug.Assert(this._challenge instanceof entities.SBCChallenge, "Initialization expected a valid SBC challenge."), this._challenge.onDataChange.observe(this, this._eChallengeUpdated), this._challenge.onSave.observe(this, this._eChallengeUpdated), this.getView().toggleExchangeState(this._challenge.canSubmit()), this.getView().toggleClearState(!this._challenge.squad.isSquadEmpty()), this.init())
}, controllers.squads.SBCSquadDetailPanel.prototype.dealloc = function dealloc() {
    this._challenge.onDataChange.unobserve(this), this._challenge.onSave.unobserve(this), this.superclass(), this._set = null, this._challenge = null
}, controllers.squads.SBCSquadDetailPanel.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SBCSquadDetailPanel
}, controllers.squads.SBCSquadDetailPanel.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().render(this._challenge, this._set.hidden ? this._set.awards : [], !0), this.getNavigationController().setNavigationVisibility(!1)
}, controllers.squads.SBCSquadDetailPanel.prototype._eChallengeUpdated = function _eChallengeUpdated(t, data) {
    this.getView().setChallengeRequirements(this._challenge, !0), this.getView().toggleExchangeState(this._challenge.canSubmit()), this.getView().toggleClearState(this._challenge.squad && !this._challenge.squad.isSquadEmpty())
}, controllers.squads.SBCSquadDetailPanel.prototype._eSquadBuilderSelected = function _eSquadBuilderSelected(sender, t) {
    var i = new controllers.squads.SquadBuilder;
    this._challenge ? i.initWithChallenge(this._challenge) : i.init(), this.getNavigationController().pushViewController(i, !0)
}, controllers.squads.SBCSquadDetailPanel.prototype._eSquadClearSelected = function _eSquadClearSelected(sender, t) {
    utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.CLEAR_SQUAD, null, function _onClearConfirm() {
        this._challenge.squad.removeAllItems() && services.SBC.saveChallenge(this._challenge).observe(this, function(t) {
            t.unobserve(this), services.Notification.queue([gLocalization.lText("notification.squad.cleared"), enums.UINotificationType.NEUTRAL])
        })
    }.bind(this))
}, controllers.squads.SBCSquadDetailPanel.prototype._eSquadExchange = function _eSquadExchange(sender, t) {
    services.SBC.submitChallenge(this._challenge, this._set).observe(this, function(t, data) {
        t.unobserve(this), data.success ? NavManager.requestGoBackScreen() : data.isFeatureDisabled ? NavManager.requestGoBackToScreenId(Screens.getView("HOME")) : this._challenge.hasExpired && NavManager.requestGoBackToScreenId(Screens.getView("SBC_HUB"))
    })
}, NamespaceManager.Register("controllers.navigation"), controllers.navigation.SBCSquadDetails = function SBCSquadDetailNavigationController(t, toolbar) {
    FUINavigationController.call(this, t, toolbar), this.onSearchStarted = new FUTObservable, Object.defineProperty(this, "onSearchStarted", {
        writable: !1
    }), this.onSearchEnded = new FUTObservable, Object.defineProperty(this, "onSearchEnded", {
        writable: !1
    })
}, utils.JS.inherits(controllers.navigation.SBCSquadDetails, FUINavigationController), controllers.navigation.SBCSquadDetails.prototype.initWithSBCSet = function initWithSBCSet(set, t) {
    if (!this.initialized) {
        utils.Debug.Assert(set instanceof entities.SBCSet, "Initialization expected an SBC set entity."), utils.Debug.Assert(utils.JS.isNumber(t), "Initialization expected Challenge ID to be a number.");
        var i = this._getRootControllerInstance();
        i.initWithSBCSet(set, t), this.initWithRootController(i)
    }
}, controllers.navigation.SBCSquadDetails.prototype.dealloc = function dealloc() {
    this.onSearchStarted.dealloc(), this.onSearchEnded.dealloc(), this.superclass(), this.onSearchStarted = null, this.onSearchEnded = null
}, controllers.navigation.SBCSquadDetails.prototype._getRootControllerInstance = function _getRootControllerInstance() {
    return new controllers.squads.SBCSquadDetailPanel
}, controllers.navigation.SBCSquadDetails.prototype._showController = function _showController(t, i) {
    this.superclass(t, i), t instanceof controllers.squads.SquadBuilder ? this.onSearchStarted.notify() : t instanceof controllers.squads.SBCSquadDetailPanel && this.onSearchEnded.notify()
}, NamespaceManager.Register("views.squads"), views.squads.SBCRequirementsNotification = function SBCRequirementsNotificationView() {
    FUITargetActionView.call(this), this._generate()
}, utils.JS.inherits(views.squads.SBCRequirementsNotification, FUITargetActionView), views.squads.SBCRequirementsNotification.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("SBCRequirementsNotification"), this._requirements = new views.squads.SBCChallengeRequirements, t.appendChild(this._requirements.getRootElement());
        var i = document.createElement("div");
        i.classList.add("requirements-background"), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.squads.SBCRequirementsNotification.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._requirements.destroy(), this._requirements = null
}, views.squads.SBCRequirementsNotification.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.squads.SBCRequirementsNotification.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.squads.SBCRequirementsNotification.prototype.renderChallengeRequirements = function renderChallengeRequirements(challenge, t) {
    this._requirements.renderChallengeRequirements(challenge, t)
}, views.squads.SBCRequirementsNotification.prototype.setNotificationDisplay = function setNotificationDisplay(display) {
    this.setInteractionState(display), this.toggleClass("show", display)
}, views.squads.SBCRequirementsNotification.prototype._tapDetected = function _tapDetected(e) {
    this.superclass(), this._triggerActions(enums.Event.TAP)
}, NamespaceManager.Register("controllers.squads"), controllers.squads.SBCRequirementsNotification = function SBCRequirementsNotificationController() {
    FUIViewController.call(this), this._challenge = null
}, utils.JS.inherits(controllers.squads.SBCRequirementsNotification, FUIViewController), controllers.squads.SBCRequirementsNotification.prototype.initWithSBCChallenge = function initWithSBCChallenge(challenge) {
    this.initialized || (utils.Debug.Assert(challenge instanceof entities.SBCChallenge, "Initialization expected an Challenge entity."), this._challenge = challenge, this._challenge.onDataChange.observe(this, this._eChallengeUpdated), this._challenge.onSave.observe(this, this._eChallengeUpdated), this.init())
}, controllers.squads.SBCRequirementsNotification.prototype.dealloc = function dealloc() {
    this._challenge.onDataChange.unobserve(this), this._challenge.onSave.unobserve(this), this.superclass(), this._challenge = null
}, controllers.squads.SBCRequirementsNotification.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.squads.SBCRequirementsNotification
}, controllers.squads.SBCRequirementsNotification.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().renderChallengeRequirements(this._challenge, !0)
}, controllers.squads.SBCRequirementsNotification.prototype._eChallengeUpdated = function _eChallengeUpdated(t, data) {
    this.getView().renderChallengeRequirements(this._challenge, !0)
}, controllers.squads.SBCSquadLandscape = function SBCSquadSplitViewController() {
    controllers.squads.BaseSquadLandscape.call(this), this._challengeDetailsController = null, this._set = null, this._challengeId = 0, this._requirementsNotification = new controllers.squads.SBCRequirementsNotification, this._searchFlowActive = !1
}, utils.JS.inherits(controllers.squads.SBCSquadLandscape, controllers.squads.BaseSquadLandscape), controllers.squads.SBCSquadLandscape.REQUIREMENTS_AUTO_OPEN = !0, controllers.squads.SBCSquadLandscape.prototype.init = function init() {
    this.initialized || (this.superclass(), this._challengeDetailsController = new controllers.navigation.SBCSquadDetails, this._set ? this._challengeDetailsController.initWithSBCSet(this._set, this._challengeId) : this._challengeDetailsController.init(), this.addChildViewController(this._challengeDetailsController), this._challengeDetailsController.onSearchStarted.observe(this, this._eSearchStarted), this._challengeDetailsController.onSearchEnded.observe(this, this._eSearchEnded))
}, controllers.squads.SBCSquadLandscape.prototype.initWithSBCSet = function initWithSBCSet(set, t) {
    if (!this.initialized) {
        utils.Debug.Assert(set instanceof entities.SBCSet, "Initialization expected an SBC Set entity."), utils.Debug.Assert(utils.JS.isNumber(t) && t >= 0, "Initialization expected a valid SBC Challenge ID."), this._set = set, this._challengeId = t;
        var challenge = this._set.challenges.get(this._challengeId);
        this._requirementsNotification.initWithSBCChallenge(challenge), this._requirementsNotification.getView().addTarget(this, this._eRequirementsNotificationTap, enums.Event.TAP), this.initWithSquad(challenge.squad)
    }
}, controllers.squads.SBCSquadLandscape.prototype.dealloc = function dealloc() {
    this.superclass(), this._challengeDetailsController.dealloc(), this._requirementsNotification.dealloc(), this._challengeDetailsController = null, this._requirementsNotification = null, this._set = null, this._challengeId = 0
}, controllers.squads.SBCSquadLandscape.prototype._generateSquadOverview = function _generateSquadOverview() {
    var t = null;
    if (this._set) {
        (t = new controllers.squads.SBCSquadOverview).initWithSBCSet(this._set, this._challengeId);
        var view = t.getView();
        view.getRequirementsButton().addTarget(this, this._eRequirementsTap, enums.Event.TAP), view.addSubview(this._requirementsNotification.getView()), view.layoutSubviews(), this._requirementsNotification.viewDidAppear()
    } else t = this.superclass();
    return t
}, controllers.squads.SBCSquadLandscape.prototype._generateItemDetails = function _generateItemDetails(index) {
    var challenge = this._set.challenges.get(this._challengeId),
        t = new controllers.navigation.SquadItemDetails;
    return t.onSearchStarted.observe(this, this._eSearchStarted), t.onSearchEnded.observe(this, this._eSearchEnded), challenge ? t.initWithSBCChallenge(challenge, index) : t.init(), t
}, controllers.squads.SBCSquadLandscape.prototype.getDefaultPanel = function getDefaultPanel() {
    return this._challengeDetailsController
}, controllers.squads.SBCSquadLandscape.prototype._eSearchStarted = function _eSearchStarted(t) {
    this._searchFlowActive = !0, controllers.squads.SBCSquadLandscape.REQUIREMENTS_AUTO_OPEN && (this._requirementsNotification.getView().setNotificationDisplay(!0), this._overviewController.getView().getRequirementsButton().setChecked(!0))
}, controllers.squads.SBCSquadLandscape.prototype._eSearchEnded = function _eSearchEnded(t) {
    this._searchFlowActive = !1, this._requirementsNotification.getView().setNotificationDisplay(!1), this._overviewController.getView().getRequirementsButton().setChecked(!1)
}, controllers.squads.SBCSquadLandscape.prototype._eRequirementsNotificationTap = function _eRequirementsNotificationTap(sender, event, data) {
    sender.setNotificationDisplay(!1), this._searchFlowActive && (controllers.squads.SBCSquadLandscape.REQUIREMENTS_AUTO_OPEN = !1), this._overviewController.getView().getRequirementsButton().setChecked(!1)
}, controllers.squads.SBCSquadLandscape.prototype._eRequirementsTap = function _eRequirementsTap(sender, event, data) {
    var t = sender.getChecked();
    this._searchFlowActive && (controllers.squads.SBCSquadLandscape.REQUIREMENTS_AUTO_OPEN = t), this._requirementsNotification.getView().setNotificationDisplay(t)
}, pages.controllers.SBCSquadController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null, this._set = null, this._challenge = null
}, utils.JS.inherits(pages.controllers.SBCSquadController, pages.controllers.ScreenControllerBase), pages.controllers.SBCSquadController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, this._set = null, this._challenge = null, pages.controllers.SBCSquadController.superClass_.destroy.call(this)
}, pages.controllers.SBCSquadController.prototype.getDataCache = function getDataCache() {
    return {
        set: this._set,
        challenge: this._challenge
    }
}, pages.controllers.SBCSquadController.prototype.onScreenInitialized = function(data, t) {
    function _initController() {
        isPhone() ? this._controller = new controllers.squads.SBCSquadOverview : this._controller = new controllers.squads.SBCSquadLandscape, this._controller.initWithSBCSet(this._set, this._challenge.id), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
    }

    function _onInitFail() {
        services.Notification.queue([gLocalization.lText("notification.squad.failedToLoad"), enums.UINotificationType.NEGATIVE]), NavManager.requestGoBackScreen() || setTimeout(function() {
            NavManager.requestGoBackScreen()
        }, 500)
    }
    if (t && t.set && t.challenge) this._set = t.set, this._challenge = t.challenge, _initController.call(this);
    else if (data && data.set && data.set instanceof entities.SBCSet && utils.JS.isNumber(data.cid)) {
        if (this._set = data.set, this._challenge = this._set.getChallenge(data.cid), utils.Debug.Assert(this._challenge instanceof entities.SBCChallenge, "Expected a valid SBC Challenge."), !this._challenge) return void _onInitFail();
        TelemetryManager.trackPage(TelemetryManager.Sections.SBC, "SBC Squad Screen - " + this._challenge.id), _initController.call(this)
    } else utils.Debug.Assert(!1, "Initialization expected an SBC set and challenge ID."), _onInitFail()
}, pages.controllers.SBCSquadController.prototype.onScreenStarted = function onScreenStarted() {
    pages.controllers.SBCSquadController.superClass_.onScreenStarted.call(this), gHeader.onHamburgerPress.observe(this, this._onHamburgerPressed)
}, pages.controllers.SBCSquadController.prototype.onScreenStopped = function onScreenStopped() {
    pages.controllers.SBCSquadController.superClass_.onScreenStopped.call(this), gHeader.onHamburgerPress.unobserve(this)
}, pages.controllers.SBCSquadController.prototype._onHamburgerPressed = function _onHamburgerPressed() {
    NavManager.requestChildScreen(Screens.getView("SBC_SQUAD_DETAILS"), {
        set: this._set,
        cid: this._challenge.id
    })
}, Screens.Register("SQUAD_DETAILS", "SquadDetails", Screens.APP_SECTION.SQUADS, "Squad Details"), pages.SquadDetails = function() {
    pages.ScreenBase.call(this), this._generate(), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("squads.detail.title"))
}, utils.JS.inherits(pages.SquadDetails, pages.ScreenBase), pages.SquadDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "SquadDetails"), t.classList.add("nativeScrolling"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SquadDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.SquadDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SquadDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, Screens.Register("SBC_SQUAD_DETAILS", "SBCSquadDetails", Screens.APP_SECTION.SBC, "SBC Squad Details"), pages.SBCSquadDetails = function() {
    pages.SquadDetails.call(this)
}, utils.JS.inherits(pages.SBCSquadDetails, pages.SquadDetails), pages.controllers.SBCSquadDetailsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.navigation.SBCSquadDetails
}, utils.JS.inherits(pages.controllers.SBCSquadDetailsController, pages.controllers.ScreenControllerBase), pages.controllers.SBCSquadDetailsController.prototype.destroy = function destroy() {
    pages.controllers.SBCSquadDetailsController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.SBCSquadDetailsController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    data && data.set && data.cid ? this._controller.initWithSBCSet(data.set, data.cid) : this._controller.init(), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, NamespaceManager.Register("views.popups"), views.popups.NameSquad = function NameSquad() {
    FUIView.call(this), this.onTextChange = new FUTObservable, Object.defineProperty(this, "onTextChange", {
        writable: !1
    }), this.onConfirm = new FUTObservable, Object.defineProperty(this, "onConfirm", {
        writable: !1
    }), this.onCancel = new FUTObservable, Object.defineProperty(this, "onCancel", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.popups.NameSquad, FUIView), views.popups.NameSquad.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("NameSquad");
        var i = document.createElement("header");
        this.__titleText = document.createElement("h1"), this.$_titleText = $(this.__titleText), i.appendChild(this.__titleText), t.appendChild(i);
        var s = document.createElement("div");
        s.classList.add("layout-article"), s.classList.add("bodySection"), this._squadNameInput = new views.TextInput, this._squadNameInput.getRootElement().classList.add("round"), s.appendChild(this._squadNameInput.getRootElement()), this.__hint = document.createElement("span"), this.$_hint = $(this.__hint), this.__hint.classList.add("secondary"), this.__hint.classList.add("info"), s.appendChild(this.__hint), t.appendChild(s);
        var o = document.createElement("div");
        o.classList.add("btn-container"), this._cancelBtn = new components.FlatButton, this._cancelBtn.getRootElement().classList.add("call-to-action"), o.appendChild(this._cancelBtn.getRootElement()), this._confirmBtn = new components.FlatButton, this._confirmBtn.getRootElement().classList.add("call-to-action"), o.appendChild(this._confirmBtn.getRootElement()), t.appendChild(o), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.popups.NameSquad.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__titleText = null, this.$_titleText = null, this._squadNameInput.destroy(), this._squadNameInput = null, this.__hint = null, this.$_hint = null, this._cancelBtn.destroy(), this._cancelBtn = null, this._confirmBtn.destroy(), this._confirmBtn = null
}, views.popups.NameSquad.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.popups.NameSquad.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.popups.NameSquad.prototype.init = function init() {
    this._cancelBtn.init(), this._cancelBtn.setText(gLocalization.lText("common.dialog.cancel")), this._cancelBtn.setEnabled(!0), this._confirmBtn.init(), this._confirmBtn.setEnabled(!1), this._confirmBtn.addListener(components.BaseButton.CLICKED, this, this.onConfirm.notify.bind(this.onConfirm)), this._cancelBtn.addListener(components.BaseButton.CLICKED, this, this.onCancel.notify.bind(this.onCancel)), this._squadNameInput.init(), this._squadNameInput.onChange.observe(this, this.onSquadTextChanged), this._squadNameInput.setMaxLength(15)
}, views.popups.NameSquad.prototype.dealloc = function dealloc() {
    this.onTextChange.dealloc(), this.onCancel.dealloc(), this.onConfirm.dealloc(), this._confirmBtn.clearListenersByScope(this), this._cancelBtn.clearListenersByScope(this), this.superclass()
}, views.popups.NameSquad.prototype.focus = function focus() {
    this._squadNameInput.getRoot().focus()
}, views.popups.NameSquad.prototype.render = function render(title, t) {
    this.$_titleText.text(title), this._confirmBtn.setText(t), this.$_hint.text(gLocalization.lPrint("renamesquad.hint", [15]))
}, views.popups.NameSquad.prototype.onSquadTextChanged = function onSquadTextChanged() {
    this.onTextChange.notify(this._squadNameInput.value)
}, views.popups.NameSquad.prototype.getSquadText = function getSquadText() {
    return this._squadNameInput.value
}, views.popups.NameSquad.prototype.setSquadText = function setSquadText(t) {
    this._squadNameInput.value = t, this.onTextChange.notify(this._squadNameInput.value)
}, views.popups.NameSquad.prototype.setConfirmButtonEnabled = function setConfirmButtonEnabled(enabled) {
    this._confirmBtn.setEnabled(enabled)
}, views.popups.NameSquad.prototype.onBackButton = function onBackButton() {
    return !0
}, NamespaceManager.Register("controllers.views.popups"), controllers.views.popups.NameSquad = function NameSquad(t, title, i) {
    controllers.views.popups.BasePopup.call(this), this._title = utils.JS.isValid(title) ? title : gLocalization.lText("manage.squadlist.createsquad"), this._buttonTxt = utils.JS.isValid(i) ? i : gLocalization.lText("infopanel.button.create"), this._defaultName = t, Object.defineProperty(this, "_defaultName", {
        writable: !1
    }), this.onConfirm = new FUTObservable, Object.defineProperty(this, "onConfirm", {
        writable: !1
    }), this.animate = !0
}, utils.JS.inherits(controllers.views.popups.NameSquad, controllers.views.popups.BasePopup), controllers.views.popups.NameSquad.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    view.onConfirm.observe(this, this._eConfirm), view.onCancel.observe(this, this._eCancel), view.onTextChange.observe(this, this.updateConfirmButtonStatus), view.render(this._title, this._buttonTxt), view.setSquadText(this._defaultName)
}, controllers.views.popups.NameSquad.prototype.dealloc = function dealloc() {
    this.onConfirm.dealloc(), this.superclass()
}, controllers.views.popups.NameSquad.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this.getView().focus()
}, controllers.views.popups.NameSquad.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.popups.NameSquad
}, controllers.views.popups.NameSquad.prototype._confirmName = function _confirmName() {
    var view = this.getView(),
        t = utils.TextUtils.cleanString(view.getSquadText());
    view.setInteractionState(!1), repositories.Squad.getSquads().observe(this, function(i, data) {
        i.unobserve(this), utils.TextUtils.squadNameExists(t, data) ? (utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.DUPLICATE_SQUAD_NAME), view.setInteractionState(!0)) : (this.onConfirm.notify(t), this.onExit.notify(enums.UIDialogOptions.OK))
    })
}, controllers.views.popups.NameSquad.prototype._eConfirm = function _eConfirm(t) {
    this._confirmName()
}, controllers.views.popups.NameSquad.prototype._eCancel = function _eCancel(t) {
    this.onExit.notify(enums.UIDialogOptions.CANCEL)
}, controllers.views.popups.NameSquad.prototype.updateConfirmButtonStatus = function updateConfirmButtonStatus(t, i) {
    var enabled = !0,
        s = utils.TextUtils.restrictSpecialCharacters(i);
    s !== i && this.getView().setSquadText(s), enabled = utils.TextUtils.isValidNameSquad(i), this.getView().setConfirmButtonEnabled(enabled)
}, controllers.views.popups.NameSquad.prototype.handleKeyUpEvent = function handleKeyUpEvent(e) {
    e.key === enums.KeyboardKey.ESCAPE || e.key === enums.KeyboardKey.MS_ESCAPE ? this.onExit.notify(enums.UIDialogOptions.CANCEL) : e.key === enums.KeyboardKey.ENTER && this._confirmName()
}, pages.controllers.SquadDetailsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.navigation.SquadDetails(!1)
}, utils.JS.inherits(pages.controllers.SquadDetailsController, pages.controllers.ScreenControllerBase), pages.controllers.SquadDetailsController.prototype.init = function init() {
    pages.controllers.SquadDetailsController.superClass_.init.call(this), this._controller.init()
}, pages.controllers.SquadDetailsController.prototype.destroy = function destroy() {
    pages.controllers.SquadDetailsController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.SquadDetailsController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.SquadDetailsController.superClass_.onScreenInitialized.call(this, data, t), data && data.squad && this._controller.setSquad(data.squad), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, Screens.Register("SHOW_OFF_SQUAD_DETAILS", "ShowOffSquadDetails", Screens.APP_SECTION.SQUADS), pages.ShowOffSquadDetails = function() {
    pages.ScreenBase.call(this), this._generate();
    var t = isPhone() ? components.Header.UNAUTHENTICATED | components.Header.BACK_BUTTON : components.Header.UNAUTHENTICATED;
    this.updateHeader(t, "")
}, utils.JS.inherits(pages.ShowOffSquadDetails, pages.ScreenBase), pages.ShowOffSquadDetails.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.classList.add("ShowOff"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ShowOffSquadDetails.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ShowOffSquadDetails.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ShowOffSquadDetails.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("pages.controllers"), pages.controllers.ShowOffSquadDetailsController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._summaryPanel = new controllers.squads.ShowOffSquadActions
}, utils.JS.inherits(pages.controllers.ShowOffSquadDetailsController, pages.controllers.ScreenControllerBase), pages.controllers.ShowOffSquadDetailsController.prototype.init = function() {}, pages.controllers.ShowOffSquadDetailsController.prototype.onScreenInitialized = function(data, t) {
    this.getView().getRoot().append(this._summaryPanel.getView().getRoot()), this._summaryPanel.initWithSquad(data.squad), gHeader.setTitle(data.squad.getName())
}, pages.controllers.ShowOffSquadDetailsController.prototype.destroy = function() {
    this._summaryPanel.dealloc(), this._summaryPanel = null
}, Screens.Register("NO_SECURITY_QUESTION", "NoSecurityQuestion", Screens.APP_SECTION.LOGIN), pages.NoSecurityQuestion = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.SETTINGS_BUTTON : components.Header.NO_HEADER, gLocalization.lText("title.securityquestion")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "No Security Question"), this._generate()
}, utils.JS.inherits(pages.NoSecurityQuestion, pages.ScreenBase), pages.NoSecurityQuestion.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.NoSecurityQuestion.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.NoSecurityQuestion.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.NoSecurityQuestion.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.NoSecurityQuestion = function() {
    views.bootFlow.BootFlow.call(this), this._generate()
}, utils.JS.inherits(views.bootFlow.NoSecurityQuestion, views.bootFlow.BootFlow), views.bootFlow.NoSecurityQuestion.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-noQuestion"), i.classList.add("l-noQuestion"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content");
        var u = document.createElement("div");
        u.classList.add("page-controller-icon"), l.appendChild(u), o.appendChild(l), s.appendChild(o);
        var h = document.createElement("div");
        h.classList.add("boot-primary-content");
        var p = document.createElement("div");
        p.classList.add("boot-content"), p.classList.add("layout-article"), this.__title = document.createElement("p"), this.$_title = $(this.__title), this.__title.classList.add("title"), p.appendChild(this.__title), this.__message1 = document.createElement("p"), this.$_message1 = $(this.__message1), p.appendChild(this.__message1), h.appendChild(p), s.appendChild(h), i.appendChild(s), t.appendChild(i), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.NoSecurityQuestion.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this.__title = null, this.$_title = null, this.__message1 = null, this.$_message1 = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.NoSecurityQuestion.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.NoSecurityQuestion.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.NoSecurityQuestion.prototype.init = function init() {
    this.superclass(), this.$_title.html(gLocalization.lText("noquestionsetup.header")), this.$_message1.html(gLocalization.lText("noquestionsetup.message1"))
}, views.bootFlow.NoSecurityQuestion.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.NoSecurityQuestion = function NoSecurityQuestionViewController() {
    controllers.bootFlow.BootFlow.call(this), this._personaController = null
}, utils.JS.inherits(controllers.bootFlow.NoSecurityQuestion, controllers.bootFlow.BootFlow), controllers.bootFlow.NoSecurityQuestion.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews()
}, controllers.bootFlow.NoSecurityQuestion.prototype.dealloc = function dealloc() {
    this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.bootFlow.NoSecurityQuestion.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.NoSecurityQuestion
}, controllers.bootFlow.NoSecurityQuestion.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear()
}, pages.controllers.NoSecurityQuestionController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.NoSecurityQuestion
}, utils.JS.inherits(pages.controllers.NoSecurityQuestionController, pages.controllers.ScreenControllerBase), pages.controllers.NoSecurityQuestionController.prototype.init = function() {
    this._controller.init()
}, pages.controllers.NoSecurityQuestionController.prototype.destroy = function() {
    pages.controllers.NoSecurityQuestionController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.NoSecurityQuestionController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.NoSecurityQuestionController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, Screens.Register("LICENSE", "License", Screens.APP_SECTION.LOGIN), pages.License = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.NO_HEADER, gLocalization.lText("gettingstarted.welcome")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "Legal"), this._generate()
}, utils.JS.inherits(pages.License, pages.ScreenBase), pages.License.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("section");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.License.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.License.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.License.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.License = function LicenseView() {
    FUITargetActionView.call(this), this._cbLicenseImageLoad = null, this._generate()
}, utils.JS.inherits(views.bootFlow.License, FUITargetActionView), views.bootFlow.License.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-license"), i.classList.add("l-license"), i.classList.add("boot-box");
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-primary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content");
        var u = document.createElement("header");
        this.__licenseLogo = document.createElement("img"), this.$_licenseLogo = $(this.__licenseLogo), this.__licenseLogo.classList.add("licenseLogo"), u.appendChild(this.__licenseLogo), l.appendChild(u), this.__licenseTitle = document.createElement("strong"), this.$_licenseTitle = $(this.__licenseTitle), this.__licenseTitle.classList.add("licenseTitle"), l.appendChild(this.__licenseTitle), this.__licenseText1 = document.createElement("p"), this.$_licenseText1 = $(this.__licenseText1), this.__licenseText1.classList.add("licenseBody"), l.appendChild(this.__licenseText1), this.__licenseText2 = document.createElement("p"), this.$_licenseText2 = $(this.__licenseText2), this.__licenseText2.classList.add("licenseBody"), l.appendChild(this.__licenseText2), o.appendChild(l), s.appendChild(o), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.License.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__licenseLogo = null, this.$_licenseLogo = null, this.__licenseTitle = null, this.$_licenseTitle = null, this.__licenseText1 = null, this.$_licenseText1 = null, this.__licenseText2 = null, this.$_licenseText2 = null
}, views.bootFlow.License.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.License.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.License.prototype.init = function init() {
    this._cbLicenseImageLoad = this._eLicenseImageLoad.bind(this), this.__licenseLogo.addEventListener(enums.Event.LOAD, this._cbLicenseImageLoad, !1), this.__licenseTitle.textContent = gLocalization.lText("license.text.header").toUpperCase(), this.__licenseText1.textContent = gLocalization.lText("license.text.body1"), this.__licenseText2.textContent = gLocalization.lText("license.text.body2"), DOMKit.toggleDisplayStyle(this.__licenseLogo, !1), this.__licenseLogo.src = utils.AssetLocator.getLicenseLogoURI(gLocalization.getLanguage()), this.superclass()
}, views.bootFlow.License.prototype.dealloc = function dealloc() {
    this._clearLoadEventListener(), this.superclass()
}, views.bootFlow.License.prototype._clearLoadEventListener = function _clearLoadEventListener() {
    this._cbLicenseImageLoad && (this.__licenseLogo.removeEventListener(enums.Event.LOAD, this._cbLicenseImageLoad, !1), this._cbLicenseImageLoad = null)
}, views.bootFlow.License.prototype._eLicenseImageLoad = function _eLicenseImageLoad(e) {
    this._clearLoadEventListener(), DOMKit.addClass(this.__licenseLogo, "fade-in-screen"), DOMKit.toggleDisplayStyle(this.__licenseLogo, !0), this._triggerActions(enums.Event.LOAD)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.License = function() {
    FUIViewController.call(this), this._completedFlags = 0, this._hasLowMemory = !1, this._setTimerFlagTimeout = 0
}, utils.JS.inherits(controllers.bootFlow.License, FUIViewController), controllers.bootFlow.License.FLAGS = {
    TIMER: 1,
    MEMORY: 2
}, controllers.bootFlow.License.LOW_MEMORY_LIMIT = 25600, controllers.bootFlow.License.prototype.init = function init() {
    this.superclass(), this.getView().addTarget(this, this._eLicenseImageLoad, enums.Event.LOAD), this._preloadAssets()
}, controllers.bootFlow.License.prototype.dealloc = function dealloc() {
    clearTimeout(this._setTimerFlagTimeout), this.superclass()
}, controllers.bootFlow.License.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.License
}, controllers.bootFlow.License.prototype._eLicenseImageLoad = function _eLicenseImageLoad(sender, event, data) {
    this.checkFreeDiskSpace(), this._startDisplayTimer()
}, controllers.bootFlow.License.prototype.onAppPaused = function onAppPaused() {
    clearTimeout(this._setTimerFlagTimeout)
}, controllers.bootFlow.License.prototype.onAppResumed = function onAppResumed() {
    this._completedFlags & controllers.bootFlow.License.FLAGS.TIMER || this._startDisplayTimer()
}, controllers.bootFlow.License.prototype._startDisplayTimer = function _startDisplayTimer() {
    clearTimeout(this._setTimerFlagTimeout), this._setTimerFlagTimeout = setTimeout(this._setContinueFlag.bind(this, controllers.bootFlow.License.FLAGS.TIMER), 3e3)
}, controllers.bootFlow.License.prototype._checkFlagState = function _checkFlagState() {
    this._completedFlags === (controllers.bootFlow.License.FLAGS.TIMER | controllers.bootFlow.License.FLAGS.MEMORY) && (this._hasLowMemory ? utils.PopupManager.ShowAlert(utils.PopupManager.Alerts.LOW_MEMORY, this.transitionToLogin.bind(this)) : this.transitionToLogin())
}, controllers.bootFlow.License.prototype._setContinueFlag = function _setContinueFlag(t) {
    utils.Debug.Assert(!(this._completedFlags & t), "Flag has already been set."), this._completedFlags = this._completedFlags | t, this._checkFlagState()
}, controllers.bootFlow.License.prototype._preloadAssets = function _preloadAssets() {
    getAppMain().getImgPreloader().preloadImages(["images/PackAnimation/PackAnimationVignetteLandscape.png", "images/PackAnimation/PackAnimationVignette.png", "images/PackAnimation/PackAnimationConfetti.png", "images/PackAnimation/PackAnimationBronze@1x.png", "images/PackAnimation/PackAnimationBronze@2x.png", "images/PackAnimation/PackAnimationBronze@3x.png", "images/PackAnimation/PackAnimationFUTChamps@1x.png", "images/PackAnimation/PackAnimationFUTChamps@2x.png", "images/PackAnimation/PackAnimationFUTChamps@3x.png", "images/PackAnimation/PackAnimationGold@1x.png", "images/PackAnimation/PackAnimationGold@2x.png", "images/PackAnimation/PackAnimationGold@3x.png", "images/PackAnimation/PackAnimationLegends@1x.png", "images/PackAnimation/PackAnimationLegends@2x.png", "images/PackAnimation/PackAnimationLegends@3x.png", "images/PackAnimation/PackAnimationLoan@1x.png", "images/PackAnimation/PackAnimationLoan@2x.png", "images/PackAnimation/PackAnimationLoan@3x.png", "images/PackAnimation/PackAnimationPoints@1x.png", "images/PackAnimation/PackAnimationPoints@2x.png", "images/PackAnimation/PackAnimationPoints@3x.png", "images/PackAnimation/PackAnimationSBC@1x.png", "images/PackAnimation/PackAnimationSBC@2x.png", "images/PackAnimation/PackAnimationSBC@3x.png", "images/PackAnimation/PackAnimationSilver@1x.png", "images/PackAnimation/PackAnimationSilver@2x.png", "images/PackAnimation/PackAnimationSilver@3x.png", "images/PackAnimation/PackAnimationSpecial@1x.png", "images/PackAnimation/PackAnimationSpecial@2x.png", "images/PackAnimation/PackAnimationSpecial@3x.png", "images/PackAnimation/PackAnimationStarter@1x.png", "images/PackAnimation/PackAnimationStarter@2x.png", "images/PackAnimation/PackAnimationStarter@3x.png", "images/PackAnimation/PackAnimationStoryMode@1x.png", "images/PackAnimation/PackAnimationStoryMode@2x.png", "images/PackAnimation/PackAnimationStoryMode@3x.png"])
}, controllers.bootFlow.License.prototype.checkFreeDiskSpace = function checkFreeDiskSpace() {
    function _onRetrieveFreeSpaceFail() {
        this._setContinueFlag(controllers.bootFlow.License.FLAGS.MEMORY)
    }
    isChrome() ? _onRetrieveFreeSpaceFail.call(this) : window.plugins.utilities.getFreeDiskSpace(function _onRetrieveFreeSpaceSuccess(memory) {
        this._hasLowMemory = memory < controllers.bootFlow.License.LOW_MEMORY_LIMIT, this._setContinueFlag(controllers.bootFlow.License.FLAGS.MEMORY)
    }.bind(this), _onRetrieveFreeSpaceFail.bind(this))
}, controllers.bootFlow.License.prototype.transitionToLogin = function transitionToLogin() {
    NavManager.requestRootScreen(Screens.getView("LOGIN"))
}, pages.controllers.LicenseController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.License
}, utils.JS.inherits(pages.controllers.LicenseController, pages.controllers.ScreenControllerBase), pages.controllers.LicenseController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.LicenseController.prototype.destroy = function destroy() {
    pages.controllers.LicenseController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.LicenseController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.LicenseController.superClass_.onScreenInitialized.call(this, data, t), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement())
}, pages.controllers.LicenseController.prototype.onAppPaused = function onAppPaused() {
    this._controller.onAppPaused()
}, pages.controllers.LicenseController.prototype.onAppResumed = function onAppResumed() {
    this._controller.onAppResumed()
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.EULA = function() {
    controllers.bootFlow.BootFlow.call(this), this._nextScreen = "", this._nextScreenData = null
}, utils.JS.inherits(controllers.bootFlow.EULA, controllers.bootFlow.BootFlow), controllers.bootFlow.EULA.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        view.getAcceptButton().addTarget(this, this._eAcceptButtonPressed, enums.Event.TAP), view.getCancelButton().addTarget(this, this._eCancelButtonPressed, enums.Event.TAP), view.getEULALink().addTarget(this, this._eEulaLinkPressed, enums.Event.TAP), view.getPrivacyLink().addTarget(this, this._ePrivacyLinkPressed, enums.Event.TAP)
    }
}, controllers.bootFlow.EULA.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.EULA
}, controllers.bootFlow.EULA.prototype.setNextScreen = function setNextScreen(screen, data) {
    this._nextScreen = screen, this._nextScreenData = data
};
controllers.bootFlow.EULA.prototype._eAcceptButtonPressed = function _eAcceptButtonPressed(sender, t) {
    gUserSettingsModel.checkUserItemBool(models.UserSettingsModel.EULA_ACCEPTED, !0), this._nextScreen.length > 0 ? NavManager.requestRootScreen(this._nextScreen, this._nextScreenData) : NavManager.attemptHomeScreenTransition()
}, controllers.bootFlow.EULA.prototype._eCancelButtonPressed = function _eCancelButtonPressed(sender, t) {
    gAuthenticationModel.logout()
}, controllers.bootFlow.EULA.prototype._eEulaLinkPressed = function _eEulaLinkPressed(sender, e) {
    services.URL.process(gLocalization.lText(enums.BaseURLHALString.USER_AGREEMENT))
}, controllers.bootFlow.EULA.prototype._ePrivacyLinkPressed = function _ePrivacyLinkPressed(sender, e) {
    services.URL.process(gLocalization.lText(enums.BaseURLHALString.PRIVACY_POLICY))
}, Screens.Register("EULA", "EULA", Screens.APP_SECTION.LOGIN), pages.EULA = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.NO_HEADER, gLocalization.lText("EULA.view")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "EULA"), this._generate()
}, utils.JS.inherits(pages.EULA, pages.ScreenBase), pages.EULA.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.EULA.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.EULA.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.EULA.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.EULAController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.EULA, this._cache = null
}, utils.JS.inherits(pages.controllers.EULAController, pages.controllers.ScreenControllerBase), pages.controllers.EULAController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.EULAController.prototype.destroy = function destroy() {
    pages.controllers.EULAController.superClass_.destroy.call(this), this._controller.dealloc(), this._controller = null
}, pages.controllers.EULAController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.EULAController.superClass_.onScreenInitialized.call(this, data, t), this._cache = t || data || null, this._cache && this._cache.nextScreen && this._controller.setNextScreen(this._cache.nextScreen, this._cache.nextScreenData), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, pages.controllers.EULAController.prototype.getDataCache = function getDataCache() {
    return this._cache
}, NamespaceManager.Register("components"), components.ListRowPersona = function() {
    this._data = {
        persona: null,
        club: null
    }, this._touchHandler = new FUTTouchHandler, this._generate()
}, components.ListRowPersona.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("li");
        t.classList.add("rowContent"), t.classList.add("personaRow"), this.__personaIcon = document.createElement("div"), this.$_personaIcon = $(this.__personaIcon), this.__personaIcon.classList.add("icon"), t.appendChild(this.__personaIcon);
        var i = document.createElement("header");
        this.__personaName = document.createElement("h1"), this.$_personaName = $(this.__personaName), i.appendChild(this.__personaName), this.__clubName = document.createElement("h2"), this.$_clubName = $(this.__clubName), this.__clubName.classList.add("secondary"), i.appendChild(this.__clubName), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ListRowPersona.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaIcon = null, this.$_personaIcon = null, this.__personaName = null, this.$_personaName = null, this.__clubName = null, this.$_clubName = null
}, components.ListRowPersona.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ListRowPersona.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ListRowPersona.prototype.destroy = function() {
    this._touchHandler.stopTouchHandling(), this.destroyGeneratedElements()
}, components.ListRowPersona.prototype.setData = function(data) {
    this._data = data
}, components.ListRowPersona.prototype.getData = function() {
    return this._data
}, components.ListRowPersona.prototype.render = function() {
    var t = "";
    switch (this._data.club.platform) {
        case enums.Platform.XBO:
            t = enums.UIPlatform.XBO;
            break;
        case enums.Platform.XBX:
            t = enums.UIPlatform.XBX;
            break;
        case enums.Platform.PS4:
            t = enums.UIPlatform.PS4;
            break;
        case enums.Platform.PS3:
            t = enums.UIPlatform.PS3;
            break;
        case enums.Platform.PC:
            t = enums.UIPlatform.PC;
            break;
        case enums.Platform.SWI:
            t = enums.UIPlatform.SWI;
            break;
        default:
            utils.Debug.Assert(!1, "[components.ListRowPersona] Unrecognized gameSku.")
    }
    this.$_clubName.html(this._data.club.name), this.$_personaName.html(this._data.persona.name), this.$_personaIcon.addClass(t)
}, components.ListRowPersona.prototype.setDataComponent = function(t) {}, components.ListRowPersona.prototype.setAction = function(style, t) {}, components.ListRowPersona.prototype.setTapCallback = function(t) {
    var i = this.getRoot(),
        s = 0;
    i.addClass(enums.UIListRowState.HAS_TAP_CALLBACK), this._touchHandler.handleTouch(i), this._touchHandler.bubbleEvent = !1, this._touchHandler.touchstart.observe(this, function(t, e) {
        s = setTimeout(function() {
            utils.JS.isValid(i) && i.addClass("active")
        }, 75)
    }), this._touchHandler.touchmove.observe(this, function(t, e) {
        clearTimeout(s), i.removeClass("active")
    }), this._touchHandler.tap.observe(this, function(o, e) {
        i.hasClass("active") ? i.removeClass("active") : (i.addClass("active"), s = setTimeout(function() {
            utils.JS.isValid(i) && i.removeClass("active")
        }, 100)), t(this._data)
    })
}, Screens.Register("SETTINGS_PERSONA_SELECTOR", "SettingsPersonaSelector", Screens.APP_SECTION.SETTINGS, "Settings - Persona Selector"), pages.SettingsPersonaSelector = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.BACK_BUTTON, gLocalization.lText("navbar.label.personaselector")), gTelemetryManager.trackPage(TelemetryManager.Sections.HOME, "Persona Selector"), this._personaRows = [], this._generate()
}, utils.JS.inherits(pages.SettingsPersonaSelector, pages.ScreenBase), pages.SettingsPersonaSelector.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "scrollWrapper"), t.classList.add("panel-list"), t.classList.add("layout-article"), t.classList.add("nativeScrolling"), this._currentPersonaTitle = new components.SectionHeader, t.appendChild(this._currentPersonaTitle.getRootElement()), this._selectedPersona = new components.ListRowPersona, t.appendChild(this._selectedPersona.getRootElement()), this.__helpText = document.createElement("p"), this.$_helpText = $(this.__helpText), this.__helpText.classList.add("secondary"), this.__helpText.classList.add("help-txt"), t.appendChild(this.__helpText), this._personaSelectorTitle = new components.SectionHeader, t.appendChild(this._personaSelectorTitle.getRootElement()), this.__personaSelectorList = document.createElement("ul"), this.$_personaSelectorList = $(this.__personaSelectorList), this.__personaSelectorList.classList.add("personaSelectorList"), t.appendChild(this.__personaSelectorList), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.SettingsPersonaSelector.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._currentPersonaTitle.destroy(), this._currentPersonaTitle = null, this._selectedPersona.destroy(), this._selectedPersona = null, this.__helpText = null, this.$_helpText = null, this._personaSelectorTitle.destroy(), this._personaSelectorTitle = null, this.__personaSelectorList = null, this.$_personaSelectorList = null
}, pages.SettingsPersonaSelector.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.SettingsPersonaSelector.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.SettingsPersonaSelector.PERSONA_DISPLAY_LIMIT = 20, pages.SettingsPersonaSelector.prototype.init = function(data, t) {
    this._personaSelectorTitle.setText(gLocalization.lText("title.personaselector")), this._currentPersonaTitle.setText(gLocalization.lText("title.selectedpersona")), this.$_helpText.text(gLocalization.lText("persona.helptext")), this._currentPersonaTitle.hideButton(), this._personaSelectorTitle.hideButton()
}, pages.SettingsPersonaSelector.prototype.destroy = function() {
    this._personaRows.forEach(function(t) {
        t.destroy()
    }), this._personaRows = [], pages.SettingsPersonaSelector.superClass_.destroy.call(this)
}, pages.SettingsPersonaSelector.prototype.render = function(t, list) {
    this._selectedPersona.setData({
        persona: t,
        club: t.getCurrentClub()
    }), this._selectedPersona.render(), this._personaRows.forEach(function(t) {
        t.destroy()
    }), this._personaRows = [], this.$_personaSelectorList.empty(), list.slice(0, pages.SettingsPersonaSelector.PERSONA_DISPLAY_LIMIT).forEach(function(i) {
        var s = i.persona;
        i.clubs.forEach(function(i) {
            if (t.id !== s.id || t.sku !== i.sku) {
                var o = new components.ListRowPersona;
                o.setData({
                    persona: s,
                    club: i
                }), o.render(), o.setTapCallback(this._onPersonaSelect.bind(this)), this._personaRows.push(o), this.$_personaSelectorList.append(o.getRoot())
            }
        }, this)
    }, this)
}, pages.SettingsPersonaSelector.prototype._onPersonaSelect = function(data) {
    this.setInteractionsEnabled(!1), utils.PopupManager.ShowConfirmation(utils.PopupManager.Confirmations.CHANGE_PERSONA, null, function changePersona() {
        hasConnection() ? (data.persona.sku = data.club.sku, this.dispatch(pages.SettingsPersonaSelector.EVENT_PERSONA_CLICKED, data.persona), gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.BUTTON_PRESS, "Change Persona")) : utils.PopupManager.showNoInternetConnectionPopup()
    }.bind(this), function() {
        this.setInteractionsEnabled(!0)
    }.bind(this))
}, pages.SettingsPersonaSelector.EVENT_PERSONA_CLICKED = "pages.SettingsPersonaSelector.EVENT_PERSONA_CLICKED", pages.controllers.SettingsPersonaSelectorController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._viewmodel = null
}, utils.JS.inherits(pages.controllers.SettingsPersonaSelectorController, pages.controllers.ScreenControllerBase), pages.controllers.SettingsPersonaSelectorController.prototype.init = function() {}, pages.controllers.SettingsPersonaSelectorController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.SettingsPersonaSelectorController.superClass_.onScreenInitialized.call(this, data, t);
    var i = gAuthenticationModel.getUser();
    this._viewmodel = utils.JS.isValid(data) && data.viewmodel ? data.viewmodel : new viewmodels.PersonaSelector(i.personas.values()), this._view.render(i.getSelectedPersona(), this._viewmodel.getClubs())
}, pages.controllers.SettingsPersonaSelectorController.prototype.onScreenStarted = function() {
    this._view.addListener(pages.SettingsPersonaSelector.EVENT_PERSONA_CLICKED, this, this.onPersonaClicked)
}, pages.controllers.SettingsPersonaSelectorController.prototype.onScreenStopped = function() {
    this._view.clearListenersByScope(this)
}, pages.controllers.SettingsPersonaSelectorController.prototype.onDailyGift = function(t, i, data) {
    t.unobserve(this)
}, pages.controllers.SettingsPersonaSelectorController.prototype.onPersonaClicked = function(sender, t) {
    gAuthenticationModel.switchPersona(t)
}, Screens.Register("SIGNED_ON_CONSOLE", "LoggedOnConsole", Screens.APP_SECTION.LOGIN), pages.LoggedOnConsole = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.SETTINGS_BUTTON : components.Header.NO_HEADER, gLocalization.lText("signedontoanotherdevice.title")), TelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "Logged in on Console"), this._generate()
}, utils.JS.inherits(pages.LoggedOnConsole, pages.ScreenBase), pages.LoggedOnConsole.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.LoggedOnConsole.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.LoggedOnConsole.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.LoggedOnConsole.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("utils"), utils.TEA = {}, utils.TEA.encrypt = function(t, password) {
    if (0 === t.length) return "";
    var i = utils.TEA.strToLongs(Utf8.encode(t));
    i.length <= 1 && (i[1] = 0);
    for (var s, e, o = utils.TEA.strToLongs(Utf8.encode(password).slice(0, 16)), n = i.length, z = i[n - 1], y = i[0], l = Math.floor(6 + 52 / n), u = 0; l-- > 0;) {
        e = (u += 2654435769) >>> 2 & 3;
        var h = 0;
        for (h = 0; h < n; h++) s = (z >>> 5 ^ (y = i[(h + 1) % n]) << 2) + (y >>> 3 ^ z << 4) ^ (u ^ y) + (o[3 & h ^ e] ^ z), z = i[h] += s
    }
    var ciphertext = utils.TEA.longsToStr(i);
    return Base64.encode(ciphertext)
}, utils.TEA.decrypt = function(ciphertext, password) {
    if (0 === ciphertext.length) return "";
    for (var t, e, i = utils.TEA.strToLongs(Base64.decode(ciphertext)), s = utils.TEA.strToLongs(Utf8.encode(password).slice(0, 16)), n = i.length, z = i[n - 1], y = i[0], o = 2654435769 * Math.floor(6 + 52 / n); 0 !== o;) {
        e = o >>> 2 & 3;
        var l = n - 1;
        for (l = n - 1; l >= 0; l--) t = ((z = i[l > 0 ? l - 1 : n - 1]) >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (o ^ y) + (s[3 & l ^ e] ^ z), y = i[l] -= t;
        o -= 2654435769
    }
    var u = utils.TEA.longsToStr(i);
    return u = u.replace(/\0+$/, ""), Utf8.decode(u)
}, utils.TEA.strToLongs = function(t) {
    var i = [],
        s = 0;
    for (s = 0; s < Math.ceil(t.length / 4); s++) i[s] = t.charCodeAt(4 * s) + (t.charCodeAt(4 * s + 1) << 8) + (t.charCodeAt(4 * s + 2) << 16) + (t.charCodeAt(4 * s + 3) << 24);
    return i
}, utils.TEA.longsToStr = function(t) {
    var a = new Array(t.length),
        i = 0;
    for (i = 0; i < t.length; i++) a[i] = String.fromCharCode(255 & t[i], t[i] >>> 8 & 255, t[i] >>> 16 & 255, t[i] >>> 24 & 255);
    return a.join("")
};
var Base64 = {};
Base64.code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", Base64.encode = function(t) {
    var i, s, o, l, u, c, h, p, e = [],
        pad = "",
        m = Base64.code;
    if (h = t, (c = h.length % 3) > 0)
        for (; c++ < 3;) pad += "=", h += "\0";
    for (c = 0; c < h.length; c += 3) s = (i = h.charCodeAt(c) << 16 | h.charCodeAt(c + 1) << 8 | h.charCodeAt(c + 2)) >> 18 & 63, o = i >> 12 & 63, l = i >> 6 & 63, u = 63 & i, e[c / 3] = m.charAt(s) + m.charAt(o) + m.charAt(l) + m.charAt(u);
    return p = e.join(""), p = p.slice(0, p.length - pad.length) + pad
}, Base64.decode = function(t) {
    var i, s, o, l, u, h, p, d = [],
        m = Base64.code;
    p = t;
    var c = 0;
    for (c = 0; c < p.length; c += 4) i = (h = m.indexOf(p.charAt(c)) << 18 | m.indexOf(p.charAt(c + 1)) << 12 | (l = m.indexOf(p.charAt(c + 2))) << 6 | (u = m.indexOf(p.charAt(c + 3)))) >>> 16 & 255, s = h >>> 8 & 255, o = 255 & h, d[c / 4] = String.fromCharCode(i, s, o), 64 === u && (d[c / 4] = String.fromCharCode(i, s)), 64 === l && (d[c / 4] = String.fromCharCode(i));
    return d.join("")
};
var Utf8 = {};
Utf8.encode = function(t) {
    var i = (t = t.toString()).replace(/[\u0080-\u07ff]/g, function(c) {
        var t = c.charCodeAt(0);
        return String.fromCharCode(192 | t >> 6, 128 | 63 & t)
    });
    return i = i.replace(/[\u0800-\uffff]/g, function(c) {
        var t = c.charCodeAt(0);
        return String.fromCharCode(224 | t >> 12, 128 | t >> 6 & 63, 128 | 63 & t)
    })
}, Utf8.decode = function(t) {
    var i = (t = t.toString()).replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g, function(c) {
        var t = (15 & c.charCodeAt(0)) << 12 | (63 & c.charCodeAt(1)) << 6 | 63 & c.charCodeAt(2);
        return String.fromCharCode(t)
    });
    return i = i.replace(/[\u00c0-\u00df][\u0080-\u00bf]/g, function(c) {
        var t = (31 & c.charCodeAt(0)) << 6 | 63 & c.charCodeAt(1);
        return String.fromCharCode(t)
    })
}, utils.TEA.KEY = "2d1dc222-1fff-412f-9752-0deb5508c4ac", NamespaceManager.Register("models"), models.UserSettingsModel = function() {}, models.UserSettingsModel.prototype.setItem = function(key, value) {
    utils.JS.isValid(value) ? value = utils.TEA.encrypt(value.toString(), utils.TEA.KEY) : utils.Debug.Assert(!1, "cannot encrypt empty value: " + value), getStorage().setItem(key, value)
}, models.UserSettingsModel.prototype.getItem = function(key, defaultValue) {
    var value = getStorage().getItem(key);
    return value = utils.JS.isValid(value) ? utils.TEA.decrypt(value, utils.TEA.KEY) : defaultValue
}, models.UserSettingsModel.prototype.removeItem = function(key) {
    getStorage().removeItem(key)
}, models.UserSettingsModel.prototype.setUserItem = function(key, value) {
    this.setItem(this._createUserKey(key), value)
}, models.UserSettingsModel.prototype.getUserItem = function(key, defaultValue) {
    var value = this.getItem(this._createUserKey(key), null);
    return utils.JS.isValid(value) || (value = defaultValue), value
}, models.UserSettingsModel.prototype.removeUserItem = function(key) {
    this.removeItem(this._createUserKey(key))
}, models.UserSettingsModel.prototype.checkUserItemBool = function(key, t) {
    var i = this._parseBool(this.getUserItem(key, "false"));
    return utils.JS.isBoolean(t) && (t ? this.setUserItem(key, !0) : this.removeUserItem(key)), i
}, models.UserSettingsModel.prototype.getUserKeyEncrypted = function() {
    var value = this.getItem(models.UserSettingsModel.KEY, null);
    return utils.JS.isValid(value) || (value = ""), value
}, models.UserSettingsModel.prototype.getUserKey = function() {
    var value = this.getItem(models.UserSettingsModel.KEY, null);
    return utils.JS.isValid(value) ? utils.JS.isValid(value) ? value = utils.TEA.decrypt(value, utils.TEA.KEY) : utils.Debug.Assert(!1, "cannot decrypt empty value: " + value) : value = "", value
}, models.UserSettingsModel.prototype.setUserKey = function(value) {
    value = value.toString().toLowerCase(), utils.JS.isValid(value) ? this.getUserKey() !== value && (value = utils.TEA.encrypt(value, utils.TEA.KEY), this.setItem(models.UserSettingsModel.KEY, value)) : utils.Debug.Assert(!1, "cannot encrypt empty value: " + value)
}, models.UserSettingsModel.prototype.clearUserKey = function() {
    this.removeItem(models.UserSettingsModel.KEY)
}, models.UserSettingsModel.prototype.setUsageSharingEnabled = function(value) {
    this.setUserItem(models.UserSettingsModel.USAGE_SHARING, value)
}, models.UserSettingsModel.prototype.getUsageSharingEnabled = function() {
    return this._parseBool(this.getUserItem(models.UserSettingsModel.USAGE_SHARING, "true"))
}, models.UserSettingsModel.prototype.setAssetsVersion = function(value) {
    getStorage().setItem(models.UserSettingsModel.ASSETS_VERSION, parseInt(value, 10))
}, models.UserSettingsModel.prototype.getAssetsVersion = function() {
    var t = getStorage().getItem(models.UserSettingsModel.ASSETS_VERSION);
    return utils.JS.isValid(t) || (t = 0), parseInt(t, 10)
}, models.UserSettingsModel.prototype.setLocalStorageVersion = function(value) {
    getStorage().setItem(models.UserSettingsModel.LOCALSTORAGEVERSION, value)
}, models.UserSettingsModel.prototype.getLocalStorageVersion = function() {
    var t = getStorage().getItem(models.UserSettingsModel.LOCALSTORAGEVERSION);
    return utils.JS.isValid(t) || (t = 0), parseInt(t, 10)
}, models.UserSettingsModel.prototype.checkLocalStorageVersion = function() {
    var t = gConfigurationModel.getConfigNumber(models.ConfigurationModel.KEY_LOCAL_STORAGE_VERSION),
        i = this.getLocalStorageVersion(),
        s = 0;
    for (s = ++i; s <= t; s++) {
        try {
            this.upgradeLocalStorageVersion(s)
        } catch (t) {
            this._clearLocalStorage()
        }
        this.setLocalStorageVersion(s)
    }
}, models.UserSettingsModel.prototype.upgradeLocalStorageVersion = function(version) {
    switch (version) {
        case 1:
            var t = getStorage(),
                i = 0,
                s = t.length,
                o = [];
            for (i = 0; i < s; i++) {
                var l = t.key(i),
                    u = {
                        key: l,
                        val: t[l]
                    };
                o.push(u), u = null
            }
            for (this._clearLocalStorage(), i = 0; i < o.length; i++) {
                var h, newValue, key = o[i].key,
                    value = o[i].val,
                    p = [];
                h = (p = key.split(":")).length > 1 ? utils.TEA.encrypt(p[0], utils.TEA.KEY) + ":" + p[1] : key, newValue = key === models.UserSettingsModel.KEY ? utils.TEA.encrypt(utils.TEA.encrypt(value.toString(), utils.TEA.KEY), utils.TEA.KEY) : utils.TEA.encrypt(value.toString(), utils.TEA.KEY), t.setItem(h, newValue)
            }
            o = null;
            break;
        default:
            throw "wrong localStorage version number!"
    }
}, models.UserSettingsModel.prototype._clearLocalStorage = function() {
    var t = getStorage();
    t instanceof FUTStorageAlternative || t.clear()
}, models.UserSettingsModel.prototype._createUserKey = function(t) {
    return this.getUserKeyEncrypted() + ":" + t
}, models.UserSettingsModel.prototype._parseBool = function(t) {
    return "true" === t.toLowerCase()
}, models.UserSettingsModel.KEY = "EMAIL_KEY", models.UserSettingsModel.SELECTED_PLATFORM_ID = "SELECTED_PLATFORM_ID", models.UserSettingsModel.SELECTED_PERSONA_ID = "SELECTED_PERSONA_ID", models.UserSettingsModel.SECURITY_TOKEN = "SECURITY_TOKEN", models.UserSettingsModel.EULA_ACCEPTED = "EULA_ACCEPTED", models.UserSettingsModel.ASSETS_VERSION = "AssetsVersion", models.UserSettingsModel.LOCALSTORAGEVERSION = "LocalStorageVersion", models.UserSettingsModel.USAGE_SHARING = "usagesharing", models.UserSettingsModel.BOOTFLOW_POPUP = "BOOTFLOW_POPUP", models.UserSettingsModel.DRAFT_SQUAD_CHANGES = "DRAFT_SQUAD_CHANGES";
var gUserSettingsModel = new models.UserSettingsModel;
NamespaceManager.Register("views.bootFlow"), views.bootFlow.LoggedOnConsole = function UTLoggedOnConsoleView() {
    views.bootFlow.BootFlow.call(this), this.onRetryTap = new FUTObservable, Object.defineProperty(this, "onImageLoaded", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.bootFlow.LoggedOnConsole, views.bootFlow.BootFlow), views.bootFlow.LoggedOnConsole.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base"), t.classList.add("LoggedOnConsole");
        var i = document.createElement("div");
        i.classList.add("p-LoggedOnConsole"), i.classList.add("l-LoggedOnConsole"), i.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), i.appendChild(this.__personaSelectorContainer);
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content"), o.appendChild(l), s.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("boot-primary-content");
        var h = document.createElement("div");
        h.classList.add("boot-content"), h.classList.add("layout-article"), this.__longOnTitle = document.createElement("h2"), this.$_longOnTitle = $(this.__longOnTitle), h.appendChild(this.__longOnTitle), this.__message1 = document.createElement("p"), this.$_message1 = $(this.__message1), h.appendChild(this.__message1), this.__message2 = document.createElement("p"), this.$_message2 = $(this.__message2), h.appendChild(this.__message2), this._btnRetry = new views.buttons.DefaultButton, this._btnRetry.getRootElement().classList.add("call-to-action"), h.appendChild(this._btnRetry.getRootElement()), u.appendChild(h), s.appendChild(u), i.appendChild(s), t.appendChild(i), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.LoggedOnConsole.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this.__longOnTitle = null, this.$_longOnTitle = null, this.__message1 = null, this.$_message1 = null, this.__message2 = null, this.$_message2 = null, this._btnRetry.destroy(), this._btnRetry = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.LoggedOnConsole.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.LoggedOnConsole.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.LoggedOnConsole.prototype.init = function init() {
    this.$_longOnTitle.html(gLocalization.lText("signedontoanotherdevice.title")), this.$_message1.html(gLocalization.lText("signedontoanotherdevice.message1")), this.$_message2.html(gLocalization.lText("signedontoanotherdevice.message2")), this._btnRetry.init(), this._btnRetry.setText(gLocalization.lText("common.dialog.retry")), this._btnRetry.addTarget(this.onRetryTap, this.onRetryTap.notify, enums.Event.TAP), this.superclass()
}, views.bootFlow.LoggedOnConsole.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.LoggedOnConsole = function LoggedOnConsoleViewController() {
    controllers.bootFlow.BootFlow.call(this), this._personaController = null
}, utils.JS.inherits(controllers.bootFlow.LoggedOnConsole, controllers.bootFlow.BootFlow), controllers.bootFlow.LoggedOnConsole.prototype.init = function init() {
    this.superclass();
    var view = this.getView();
    view.onRetryTap.observe(this, this._onRetryAuth), this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews()
}, controllers.bootFlow.LoggedOnConsole.prototype.dealloc = function dealloc() {
    this.superclass(), this._personaController && (this._personaController.dealloc(), this._personaController = null)
}, controllers.bootFlow.LoggedOnConsole.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.LoggedOnConsole
}, controllers.bootFlow.LoggedOnConsole.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear()
}, controllers.bootFlow.LoggedOnConsole.prototype._onRetryAuth = function _onRetryAuth() {
    this.getView().setInteractionState(!1), gAuthenticationModel.login(!0)
}, pages.controllers.LoggedOnConsoleController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.LoggedOnConsole
}, utils.JS.inherits(pages.controllers.LoggedOnConsoleController, pages.controllers.ScreenControllerBase), pages.controllers.LoggedOnConsoleController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.LoggedOnConsoleController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.LoggedOnConsoleController.superClass_.destroy.call(this)
}, pages.controllers.LoggedOnConsoleController.prototype.onScreenInitialized = function onScreenInitialized(data, t) {
    pages.controllers.LoggedOnConsoleController.superClass_.onScreenInitialized.call(this, data, t), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, Screens.Register("GETTING_STARTED", "GettingStarted", Screens.APP_SECTION.LOGIN), pages.GettingStarted = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.SETTINGS_BUTTON : components.Header.NO_HEADER, gLocalization.lText("navbar.label.gettingstarted")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "No FUT Data"), this._generate()
}, utils.JS.inherits(pages.GettingStarted, pages.ScreenBase), pages.GettingStarted.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.GettingStarted.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.GettingStarted.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.GettingStarted.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.GettingStarted = function() {
    views.bootFlow.BootFlow.call(this), this._generate()
}, utils.JS.inherits(views.bootFlow.GettingStarted, views.bootFlow.BootFlow), views.bootFlow.GettingStarted.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base"), this.__bootBox = document.createElement("div"), this.$_bootBox = $(this.__bootBox), this.__bootBox.classList.add("p-gettingstarted"), this.__bootBox.classList.add("l-gettingstarted"), this.__bootBox.classList.add("boot-box"), this.__personaSelectorContainer = document.createElement("div"), this.$_personaSelectorContainer = $(this.__personaSelectorContainer), this.__bootBox.appendChild(this.__personaSelectorContainer);
        var i = document.createElement("div");
        i.classList.add("boot-content-container");
        var s = document.createElement("div");
        s.classList.add("boot-secondary-content");
        var o = document.createElement("div");
        o.classList.add("boot-content"), this._futLogo = new views.bootFlow.FUTLogo, o.appendChild(this._futLogo.getRootElement()), s.appendChild(o), i.appendChild(s);
        var l = document.createElement("div");
        l.classList.add("layout-article"), l.classList.add("boot-primary-content");
        var u = document.createElement("div");
        u.classList.add("flat"), u.classList.add("layout-article"), u.classList.add("boot-content"), this.__infoTitle = document.createElement("h2"), this.$_infoTitle = $(this.__infoTitle), u.appendChild(this.__infoTitle), this.__description = document.createElement("p"), this.$_description = $(this.__description), this.__description.classList.add("description"), u.appendChild(this.__description), this.__steps = document.createElement("ul"), this.$_steps = $(this.__steps), this.__steps.classList.add("isolated-section"), this.__steps.classList.add("steps");
        var h = document.createElement("li");
        this.__step1 = document.createElement("span"), this.$_step1 = $(this.__step1), h.appendChild(this.__step1), this.__steps.appendChild(h);
        var p = document.createElement("li");
        this.__step2 = document.createElement("span"), this.$_step2 = $(this.__step2), p.appendChild(this.__step2), this.__steps.appendChild(p);
        var m = document.createElement("li");
        this.__step3 = document.createElement("span"), this.$_step3 = $(this.__step3), m.appendChild(this.__step3), this.__steps.appendChild(m), u.appendChild(this.__steps), this.__subHeader = document.createElement("h2"), this.$_subHeader = $(this.__subHeader), this.__subHeader.classList.add("webstartaccess"), u.appendChild(this.__subHeader), this.__webstartAccessOverText = document.createElement("p"), this.$_webstartAccessOverText = $(this.__webstartAccessOverText), this.__webstartAccessOverText.classList.add("webstartaccess"), u.appendChild(this.__webstartAccessOverText), this.__joinTheClub = document.createElement("p"), this.$_joinTheClub = $(this.__joinTheClub), this.__joinTheClub.classList.add("webstartaccess"), u.appendChild(this.__joinTheClub), this._learnMore = new views.buttons.DefaultButton, this._learnMore.getRootElement().classList.add("call-to-action"), u.appendChild(this._learnMore.getRootElement()), l.appendChild(u), i.appendChild(l), this.__bootBox.appendChild(i), t.appendChild(this.__bootBox), this._settingsBtn = new views.buttons.FlatButton, this._settingsBtn.getRootElement().classList.add("settings-btn"), t.appendChild(this._settingsBtn.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.GettingStarted.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__bootBox = null, this.$_bootBox = null, this.__personaSelectorContainer = null, this.$_personaSelectorContainer = null, this._futLogo.destroy(), this._futLogo = null, this.__infoTitle = null, this.$_infoTitle = null, this.__description = null, this.$_description = null, this.__steps = null, this.$_steps = null, this.__step1 = null, this.$_step1 = null, this.__step2 = null, this.$_step2 = null, this.__step3 = null, this.$_step3 = null, this.__subHeader = null, this.$_subHeader = null, this.__webstartAccessOverText = null, this.$_webstartAccessOverText = null, this.__joinTheClub = null, this.$_joinTheClub = null, this._learnMore.destroy(), this._learnMore = null, this._settingsBtn.destroy(), this._settingsBtn = null
}, views.bootFlow.GettingStarted.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.GettingStarted.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.GettingStarted.prototype.init = function init() {
    this.superclass(), this._learnMore.init(), this._learnMore.setText(gLocalization.lText("gettingstarted.learnmore")), this.$_infoTitle.html(gLocalization.lText("navbar.label.gettingstarted")), this.$_webstartAccessOverText.html(gLocalization.lText("webstartaccessover.text")), this.$_subHeader.html(gLocalization.lText("gettingstarted.fifa14")), this.$_joinTheClub.html(gLocalization.lText("gettingstarted.jointheclub")), this._futLogo.init()
}, views.bootFlow.GettingStarted.prototype.appendPersonaSelector = function appendPersonaSelector(view) {
    this.getRoot().addClass("has-persona-selector"), this.addSubview(view, this.$_personaSelectorContainer)
}, views.bootFlow.GettingStarted.prototype.setDescription = function setDescription(type) {
    var description = "";
    switch (type) {
        case enums.GettingStartedTypes.ACCESS_TRIAL:
            description = "gettingStartedFifa.contentTrial";
            break;
        case enums.GettingStartedTypes.FREE_TRIAL:
            description = "gettingStartedFifa.freeTrial";
            break;
        case enums.GettingStartedTypes.FUT:
            description = "gettingstarted.futcontent1";
            break;
        case enums.GettingStartedTypes.PLATFORM_SWITCH:
            description = "gettingstarted.switchcontent1";
            break;
        case enums.GettingStartedTypes.NO_SKU:
            description = "gettingstarted.nosku";
            break;
        default:
            description = "gettingStartedFifa.content1"
    }
    this.$_description.text(gLocalization.lText(description)), type === enums.GettingStartedTypes.PLATFORM_SWITCH ? this.__steps.parentNode.removeChild(this.__steps) : type === enums.GettingStartedTypes.FUT ? (this.$_step1.text(gLocalization.lText("gettingstarted.futstep1")), this.$_step2.text(gLocalization.lText("gettingstarted.futstep2")), this.$_step3.text(gLocalization.lText("gettingstarted.futstep3"))) : (this.$_step1.text(gLocalization.lText("gettingStartedFifa.content2")), this.$_step2.text(gLocalization.lText("gettingStartedFifa.content3")), this.$_step3.text(gLocalization.lText("gettingStartedFifa.content4")))
}, views.bootFlow.GettingStarted.prototype.getLearnMoreButton = function getLearnMoreButton() {
    return this._learnMore
}, views.bootFlow.GettingStarted.prototype.renderWebstartAccess = function renderWebstartAccess() {
    this.$_bootBox.addClass("display-webstart-access")
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.GettingStarted = function() {
    controllers.bootFlow.BootFlow.call(this);
    var type;
    Object.defineProperty(this, "type", {
        get: function() {
            return type
        },
        set: function(t) {
            var i, s = enums.GettingStartedTypes;
            for (i in s)
                if (s.hasOwnProperty(i) && s[i] === t) return void(type = t);
            utils.Debug.Assert(!1, "[controllers.bootFlow.GettingStarted] Invalid getting started page type: " + t)
        }
    }), this.type = enums.GettingStartedTypes.FIFA, this._personaController = null
}, utils.JS.inherits(controllers.bootFlow.GettingStarted, controllers.bootFlow.BootFlow), controllers.bootFlow.GettingStarted.prototype.init = function init() {
    this.initialized || (this.superclass(), this.getView().getLearnMoreButton().addTarget(this, this._eLearnMoreSelected, enums.Event.TAP))
}, controllers.bootFlow.GettingStarted.prototype.dealloc = function dealloc() {
    this.superclass(), utils.JS.isValid(this._personaController) && (this._personaController.dealloc(), this._personaController = null)
}, controllers.bootFlow.GettingStarted.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.GettingStarted
}, controllers.bootFlow.GettingStarted.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._personaController && this._personaController.viewDidAppear()
}, controllers.bootFlow.GettingStarted.prototype.setType = function setType(type) {
    this.type = type;
    var t = gAuthenticationModel.getFUTState() === enums.FUTAuthState.NO_DATA || !gAuthenticationModel.getUser().getSelectedPersona().hasClubForCurrentYear,
        i = this.type !== enums.GettingStartedTypes.FIFA && !t;
    this.getView().setDescription(this.type), i && this._generatePersonaController()
}, controllers.bootFlow.GettingStarted.prototype._generatePersonaController = function _generatePersonaController() {
    if (!this._personaController) {
        var view = this.getView();
        this._personaController = new controllers.views.Persona, this._personaController.init(), this.addChildViewController(this._personaController), view.appendPersonaSelector(this._personaController.getView()), view.layoutSubviews()
    }
}, controllers.bootFlow.GettingStarted.prototype._eLearnMoreSelected = function _eLearnMoreSelected(sender, t) {
    var url;
    if (this.type !== enums.GettingStartedTypes.FIFA) switch (gLocalization.getLocale()) {
        case utils.Localization.LOCALE_EN_US:
            url = gLocalization.lText("link.gettingstartedfut.en_us");
            break;
        case utils.Localization.LOCALE_EN_CA:
            url = gLocalization.lText("link.gettingstartedfut.en_ca");
            break;
        case utils.Localization.LOCALE_EN_AU:
            url = gLocalization.lText("link.gettingstartedfut.en_au");
            break;
        default:
            url = gLocalization.lText("link.gettingstartedfut")
    } else url = gLocalization.lText("link.gettingstartedfifa");
    services.URL.process(url)
}, pages.controllers.GettingStartedController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.bootFlow.GettingStarted
}, utils.JS.inherits(pages.controllers.GettingStartedController, pages.controllers.ScreenControllerBase), pages.controllers.GettingStartedController.prototype.init = function init() {
    this._controller.init()
}, pages.controllers.GettingStartedController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.GettingStartedController.superClass_.destroy.call(this)
}, pages.controllers.GettingStartedController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.GettingStartedController.superClass_.onScreenInitialized.call(this, data, t);
    var type = data;
    type === enums.GettingStartedTypes.FREE_TRIAL && this.getView().updateHeader(components.Header.SETTINGS_BUTTON, gLocalization.lText("navbar.label.futtrial")), this._controller.setType(type), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, Screens.Register("ABOUT", "About", Screens.APP_SECTION.SETTINGS, "Settings - About"), pages.About = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.BACK_BUTTON, gLocalization.lText("navbar.label.about")), this._generate()
}, utils.JS.inherits(pages.About, pages.ScreenBase), pages.About.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "About"), t.classList.add("nativeScrolling");
        var i = document.createElement("div");
        i.classList.add("pagePadding"), i.classList.add("copy"), this.__gamename = document.createElement("p"), this.$_gamename = $(this.__gamename), i.appendChild(this.__gamename), this.__publisher = document.createElement("p"), this.$_publisher = $(this.__publisher), i.appendChild(this.__publisher), this.__message1 = document.createElement("p"), this.$_message1 = $(this.__message1), i.appendChild(this.__message1), this.__message2 = document.createElement("p"), this.$_message2 = $(this.__message2), i.appendChild(this.__message2), this.__message3 = document.createElement("p"), this.$_message3 = $(this.__message3), i.appendChild(this.__message3), this.__version = document.createElement("p"), this.$_version = $(this.__version), i.appendChild(this.__version), this.__support = document.createElement("p"), this.$_support = $(this.__support), i.appendChild(this.__support), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.About.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__gamename = null, this.$_gamename = null, this.__publisher = null, this.$_publisher = null, this.__message1 = null, this.$_message1 = null, this.__message2 = null, this.$_message2 = null, this.__message3 = null, this.$_message3 = null, this.__version = null, this.$_version = null, this.__support = null, this.$_support = null
}, pages.About.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.About.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.About.prototype.init = function(data, t) {
    var i = "about.gamename";
    i += ".web";
    var s = "about.message1.";
    s += "web";
    var o, l = "";
    for (o = 1; o <= 3; o++) l += gLocalization.lText("about.message3.part" + o + ".web") + " ";
    this.$_gamename.html(gLocalization.lText(i)), this.$_message1.html(gLocalization.lText(s)), this.$_message2.html(gLocalization.lText("about.message2")), this.$_message3.html(l), this.$_support.html(gLocalization.lText("about.support"));
    var version = getAppVersion(),
        u = null !== gClientUpdate.getAppliedPatch() ? ".p" + gClientUpdate.getAppliedPatch() : "";
    this.$_version.html("v" + version + u + " (" + gConfigurationModel.getConfigString(models.ConfigurationModel.KEY_CHANGELIST) + ")"), gLocalization.replaceHtmlLinks(this.$_message3)
}, pages.About.prototype.destroy = function() {
    this.destroyHtmlLinks(this.$_message1), this.clearListeners(), this.destroyGeneratedElements()
}, pages.controllers.AboutController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view)
}, utils.JS.inherits(pages.controllers.AboutController, pages.controllers.ScreenControllerBase), pages.controllers.AboutController.prototype.init = function() {}, Screens.Register("LANGUAGE_SELECT", "LanguageSelect", Screens.APP_SECTION.LOGIN), pages.LanguageSelect = function() {
    pages.ScreenBase.call(this);
    var t = NavManager.isStackEmpty() ? components.Header.NO_HEADER : components.Header.BACK_BUTTON;
    this.updateHeader(t, gLocalization.lText("title.languageselect")), gTelemetryManager.trackPage(TelemetryManager.Sections.LOGIN, "Language Select"), this._generate()
}, utils.JS.inherits(pages.LanguageSelect, pages.ScreenBase), pages.LanguageSelect.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("l-content-container"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.LanguageSelect.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.LanguageSelect.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.LanguageSelect.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("components"), components.ImageListButton = function UTImageListButton() {
    FUIButton.call(this), this._generate()
}, utils.JS.inherits(components.ImageListButton, FUIButton), components.ImageListButton.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("button");
        t.classList.add("img-list-btn"), this._imageLoader = new components.ImageLoader, t.appendChild(this._imageLoader.getRootElement()), this.__text = document.createElement("span"), this.$_text = $(this.__text), t.appendChild(this.__text), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, components.ImageListButton.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._imageLoader.destroy(), this._imageLoader = null, this.__text = null, this.$_text = null
}, components.ImageListButton.prototype.getRoot = function getRoot() {
    return this.$_root
}, components.ImageListButton.prototype.getRootElement = function getRootElement() {
    return this.__root
}, components.ImageListButton.prototype.setText = function setText(text) {
    this.__text.textContent = text
}, components.ImageListButton.prototype.setLocalImageUrl = function setLocalImageUrl(url) {
    this._imageLoader.setLocalResource(url)
}, components.ImageListButton.prototype.setExternalImageUrl = function setExternalImageUrl(url) {
    this._imageLoader.setResource(url)
}, NamespaceManager.Register("views.bootFlow"), views.bootFlow.LanguageSelect = function() {
    FUIView.call(this), this.onLanguageSelected = new FUTObservable, Object.defineProperty(this, "onLanguageSelected", {
        writable: !1
    }), this._generate()
}, utils.JS.inherits(views.bootFlow.LanguageSelect, FUIView), views.bootFlow.LanguageSelect.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("p-boot-base"), t.classList.add("l-boot-base");
        var i = document.createElement("div");
        i.classList.add("p-language"), i.classList.add("l-language"), i.classList.add("boot-box");
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-secondary-content");
        var l = document.createElement("div");
        l.classList.add("boot-content"), this._futLogo = new views.bootFlow.FUTLogo, l.appendChild(this._futLogo.getRootElement()), o.appendChild(l), s.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("boot-primary-content");
        var h = document.createElement("div");
        h.classList.add("boot-content"), this._english = new components.ImageListButton, h.appendChild(this._english.getRootElement()), this._french = new components.ImageListButton, h.appendChild(this._french.getRootElement()), this._italian = new components.ImageListButton, h.appendChild(this._italian.getRootElement()), this._german = new components.ImageListButton, h.appendChild(this._german.getRootElement()), this._spanish = new components.ImageListButton, h.appendChild(this._spanish.getRootElement()), this._dutch = new components.ImageListButton, h.appendChild(this._dutch.getRootElement()), this._portuguese = new components.ImageListButton, h.appendChild(this._portuguese.getRootElement()), u.appendChild(h), s.appendChild(u), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.bootFlow.LanguageSelect.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._futLogo.destroy(), this._futLogo = null, this._english.destroy(), this._english = null, this._french.destroy(), this._french = null, this._italian.destroy(), this._italian = null, this._german.destroy(), this._german = null, this._spanish.destroy(), this._spanish = null, this._dutch.destroy(), this._dutch = null, this._portuguese.destroy(), this._portuguese = null
}, views.bootFlow.LanguageSelect.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.bootFlow.LanguageSelect.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.bootFlow.LanguageSelect.prototype.init = function init() {
    this.superclass(), this._english.init(), this._french.init(), this._italian.init(), this._german.init(), this._spanish.init(), this._dutch.init(), this._portuguese.init(), this._english.setText("English"), this._french.setText("Français"), this._italian.setText("Italiano"), this._german.setText("Deutsch"), this._spanish.setText("Español"), this._dutch.setText("Nederlands"), this._portuguese.setText("Português do Brasil"), this._english.addTarget(this, function() {
        this._eLanguageSelected(enums.Language.ENGLISH)
    }, enums.Event.TAP), this._french.addTarget(this, function() {
        this._eLanguageSelected(enums.Language.FRENCH)
    }, enums.Event.TAP), this._italian.addTarget(this, function() {
        this._eLanguageSelected(enums.Language.ITALIAN)
    }, enums.Event.TAP), this._german.addTarget(this, function() {
        this._eLanguageSelected(enums.Language.GERMAN)
    }, enums.Event.TAP), this._spanish.addTarget(this, function() {
        this._eLanguageSelected(enums.Language.SPANISH)
    }, enums.Event.TAP), this._dutch.addTarget(this, function() {
        this._eLanguageSelected(enums.Language.DUTCH)
    }, enums.Event.TAP), this._portuguese.addTarget(this, function() {
        this._eLanguageSelected(enums.Language.PORTUGUESE)
    }, enums.Event.TAP), this._english.setLocalImageUrl("images/flags/EN.jpg"), this._french.setLocalImageUrl("images/flags/FR.jpg"), this._italian.setLocalImageUrl("images/flags/IT.jpg"), this._german.setLocalImageUrl("images/flags/DE.jpg"), this._spanish.setLocalImageUrl("images/flags/ES.jpg"), this._dutch.setLocalImageUrl("images/flags/NL.jpg"), this._portuguese.setLocalImageUrl("images/flags/PT.jpg"), this._futLogo.init()
}, views.bootFlow.LanguageSelect.prototype.dealloc = function dealloc() {
    this.onLanguageSelected.dealloc(), this.onLanguageSelected = null, this.superclass()
}, views.bootFlow.LanguageSelect.prototype._eLanguageSelected = function _eLanguageSelected(language) {
    this.setInteractionState(!1), this.onLanguageSelected.notify(language)
}, NamespaceManager.Register("controllers.bootFlow"), controllers.bootFlow.LanguageSelect = function() {
    FUIViewController.call(this)
}, utils.JS.inherits(controllers.bootFlow.LanguageSelect, FUIViewController), controllers.bootFlow.LanguageSelect.prototype.init = function init() {
    this.superclass(), this.getView().onLanguageSelected.observe(this, this.onLanguageSelected)
}, controllers.bootFlow.LanguageSelect.prototype.dealloc = function dealloc() {
    this.getView().onLanguageSelected.unobserve(this), this.superclass()
}, controllers.bootFlow.LanguageSelect.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.bootFlow.LanguageSelect
}, controllers.bootFlow.LanguageSelect.prototype.onLanguageSelected = function onLanguageSelected(t, language) {
    gClickShield.showShield(components.ClickShield.SHIELD.LOADING), getStorage().setItem(STORAGE_LOCALE_KEY, gLocalization.getEffectiveLocale(language)), gLocalization.setLanguage(language, getAppMain().onLanguageLoaded.bind(getAppMain())), this.getView().setInteractionState(!0), gFooter.hide()
}, pages.controllers.LanguageSelectController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._viewController = new controllers.bootFlow.LanguageSelect
}, utils.JS.inherits(pages.controllers.LanguageSelectController, pages.controllers.ScreenControllerBase), pages.controllers.LanguageSelectController.prototype.init = function() {
    this._viewController.init(), this.getView().getRoot().append(this._viewController.getView().getRoot())
}, pages.controllers.LanguageSelectController.prototype.destroy = function() {
    this._viewController.dealloc(), this._viewController = null
}, pages.controllers.LanguageSelectController.prototype.onDailyGift = function(t, i, data) {
    t.unobserve(this)
}, NamespaceManager.Register("views.club"), views.club.ConsumablesHub = function ClubHubView() {
    FUIView.call(this), this._textFields = [], this._generate()
}, utils.JS.inherits(views.club.ConsumablesHub, FUIView), views.club.ConsumablesHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        t.setAttribute("id", "ConsumableHub"), t.classList.add("TileSection"), t.classList.add("layout-hub"), this._trainingTile = new views.tiles.Tile, this._trainingTile.getRootElement().classList.add("col-mobile-1-2"), this._trainingTile.getRootElement().classList.add("col-1-2"), this._trainingTile.getRootElement().classList.add("training-tile"), this._trainingTile.getRootElement().classList.add("consumable-tile"), t.appendChild(this._trainingTile.getRootElement()), this._contractsTile = new views.tiles.Tile, this._contractsTile.getRootElement().classList.add("col-mobile-1-2"), this._contractsTile.getRootElement().classList.add("col-1-2"), this._contractsTile.getRootElement().classList.add("contracts-tile"), this._contractsTile.getRootElement().classList.add("consumable-tile"), t.appendChild(this._contractsTile.getRootElement()), this._fitnessTile = new views.tiles.Tile, this._fitnessTile.getRootElement().classList.add("col-mobile-1-2"), this._fitnessTile.getRootElement().classList.add("col-1-3"), this._fitnessTile.getRootElement().classList.add("fitness-tile"), this._fitnessTile.getRootElement().classList.add("consumable-tile"), t.appendChild(this._fitnessTile.getRootElement()), this._healingTile = new views.tiles.Tile, this._healingTile.getRootElement().classList.add("col-mobile-1-2"), this._healingTile.getRootElement().classList.add("col-1-3"), this._healingTile.getRootElement().classList.add("healing-tile"), this._healingTile.getRootElement().classList.add("consumable-tile"), t.appendChild(this._healingTile.getRootElement()), this._positioningTile = new views.tiles.Tile, this._positioningTile.getRootElement().classList.add("col-mobile-1-2"), this._positioningTile.getRootElement().classList.add("col-1-3"), this._positioningTile.getRootElement().classList.add("positioning-tile"), this._positioningTile.getRootElement().classList.add("consumable-tile"), t.appendChild(this._positioningTile.getRootElement()), this._chemistryTile = new views.tiles.Tile, this._chemistryTile.getRootElement().classList.add("col-mobile-1-2"), this._chemistryTile.getRootElement().classList.add("col-1-2"), this._chemistryTile.getRootElement().classList.add("chemistry-tile"), this._chemistryTile.getRootElement().classList.add("consumable-tile"), t.appendChild(this._chemistryTile.getRootElement()), this._managerLeagueTile = new views.tiles.Tile, this._managerLeagueTile.getRootElement().classList.add("col-1-2"), this._managerLeagueTile.getRootElement().classList.add("managerLeague-tile"), this._managerLeagueTile.getRootElement().classList.add("consumable-tile"), t.appendChild(this._managerLeagueTile.getRootElement()), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, views.club.ConsumablesHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this._trainingTile.destroy(), this._trainingTile = null, this._contractsTile.destroy(), this._contractsTile = null, this._fitnessTile.destroy(), this._fitnessTile = null, this._healingTile.destroy(), this._healingTile = null, this._positioningTile.destroy(), this._positioningTile = null, this._chemistryTile.destroy(), this._chemistryTile = null, this._managerLeagueTile.destroy(), this._managerLeagueTile = null
}, views.club.ConsumablesHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, views.club.ConsumablesHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, views.club.ConsumablesHub.prototype.init = function init() {
    this.superclass(), this._contractsTile.setTitle(gLocalization.lText("card.title.contract")), this._fitnessTile.setTitle(gLocalization.lText("devtype.fitness")), this._healingTile.setTitle(gLocalization.lText("card.title.healing")), this._managerLeagueTile.setTitle(gLocalization.lText("card.title.leagueModifier")), this._chemistryTile.setTitle(gLocalization.lText("trainingtype.playStyle")), this._positioningTile.setTitle(gLocalization.lText("card.title.advtraining")), this._trainingTile.setTitle(gLocalization.lText("search.filters.training"))
}, views.club.ConsumablesHub.prototype.dealloc = function dealloc() {
    this.superclass(), this._textFields.forEach(function(t) {
        t.destroy()
    }, this), this._textFields = []
}, views.club.ConsumablesHub.prototype.render = function render(t) {
    function _setupCategoryTile(t, i) {
        var s = new components.TextField;
        s.setText(i), this._textFields.push(s), t.init(), t.appendContent(s.getRoot()), 0 === i && t.setInteractionState(!1)
    }
    _setupCategoryTile.call(this, this._contractsTile, t.contracts), _setupCategoryTile.call(this, this._fitnessTile, t.fitness), _setupCategoryTile.call(this, this._healingTile, t.healing), _setupCategoryTile.call(this, this._managerLeagueTile, t.managerLeagueModifier), _setupCategoryTile.call(this, this._chemistryTile, t.playStyle), _setupCategoryTile.call(this, this._positioningTile, t.position), _setupCategoryTile.call(this, this._trainingTile, t.training)
}, views.club.ConsumablesHub.prototype.getTrainingTile = function getTrainingTile() {
    return this._trainingTile
}, views.club.ConsumablesHub.prototype.getContractsTile = function getContractsTile() {
    return this._contractsTile
}, views.club.ConsumablesHub.prototype.getFitnessTile = function getFitnessTile() {
    return this._fitnessTile
}, views.club.ConsumablesHub.prototype.getHealingTile = function getHealingTile() {
    return this._healingTile
}, views.club.ConsumablesHub.prototype.getPositioningTile = function getTrainingTile() {
    return this._positioningTile
}, views.club.ConsumablesHub.prototype.getManagerLeagueTile = function getManagerLeagueTile() {
    return this._managerLeagueTile
}, views.club.ConsumablesHub.prototype.getChemistryStyleTile = function getChemistryStyleTile() {
    return this._chemistryTile
}, NamespaceManager.Register("controllers.club"), controllers.club.ConsumablesHub = function() {
    FUIViewController.call(this), this._viewmodel = null
}, utils.JS.inherits(controllers.club.ConsumablesHub, FUIViewController), controllers.club.ConsumablesHub.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), TelemetryManager.trackPage(TelemetryManager.Sections.CLUB, "Club Consumables Hub");
        var view = this.getView();
        view.getTrainingTile().addTarget(this, this._eTrainingTileSelected, enums.Event.TAP), view.getContractsTile().addTarget(this, this._eContractsTileSelected, enums.Event.TAP), view.getFitnessTile().addTarget(this, this._eFitnessTileSelected, enums.Event.TAP), view.getHealingTile().addTarget(this, this._eHealingTileSelected, enums.Event.TAP), view.getPositioningTile().addTarget(this, this._ePositioningTileSelected, enums.Event.TAP), view.getManagerLeagueTile().addTarget(this, this._eManagerLeagueTileSelected, enums.Event.TAP), view.getChemistryStyleTile().addTarget(this, this._eChemistryStyleTileSelected, enums.Event.TAP);
        var t = new transferobjects.SearchCriteria;
        t.type = enums.SearchType.CONSUMABLES_DEVELOPMENT, repositories.Item.getClubItems(t).observe(this, function _onGetConsumables(t, data) {
            if (t.unobserve(this), !data.success) return services.Notification.queue([gLocalization.lText("notification.error.loadConsumables"), enums.UINotificationType.NEGATIVE]), void(NavManager.requestGoBackScreen() || setTimeout(function() {
                NavManager.requestGoBackScreen()
            }, 500));
            this._viewmodel = new viewmodels.ConsumableCategories(data.items), view.render(this._viewmodel.getTotals())
        })
    }
}, controllers.club.ConsumablesHub.prototype.dealloc = function dealloc() {
    this.superclass(), this._viewmodel = null
}, controllers.club.ConsumablesHub.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ConsumablesHub
}, controllers.club.ConsumablesHub.prototype._goToSection = function _goToSection(t) {
    var i = this._viewmodel.getItems(t);
    NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        consumables: i
    })
}, controllers.club.ConsumablesHub.prototype._eTrainingTileSelected = function _eTrainingTileSelected(sender, event, data) {
    this._goToSection(enums.UIConsumableCategory.TRAINING)
}, controllers.club.ConsumablesHub.prototype._eContractsTileSelected = function _eContractsTileSelected(sender, event, data) {
    this._goToSection(enums.UIConsumableCategory.CONTRACTS)
}, controllers.club.ConsumablesHub.prototype._eFitnessTileSelected = function _eFitnessTileSelected(sender, event, data) {
    this._goToSection(enums.UIConsumableCategory.FITNESS)
}, controllers.club.ConsumablesHub.prototype._eHealingTileSelected = function _eHealingTileSelected(sender, event, data) {
    this._goToSection(enums.UIConsumableCategory.HEALING)
}, controllers.club.ConsumablesHub.prototype._ePositioningTileSelected = function _ePositioningTileSelected(sender, event, data) {
    this._goToSection(enums.UIConsumableCategory.POSITION)
}, controllers.club.ConsumablesHub.prototype._eManagerLeagueTileSelected = function _eManagerLeagueTileSelected(sender, event, data) {
    this._goToSection(enums.UIConsumableCategory.LEAGUEMOD)
}, controllers.club.ConsumablesHub.prototype._eChemistryStyleTileSelected = function _eChemistryStyleTileSelected(sender, event, data) {
    this._goToSection(enums.UIConsumableCategory.PLAYSTYLE)
}, Screens.Register("CONSUMABLES_HUB", "ConsumablesHub", Screens.APP_SECTION.FUT, "Club - Consumables"), pages.ConsumablesHub = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.CURRENCY | components.Header.FIFA_POINTS | components.Header.BACK_BUTTON, gLocalization.lText("navbar.label.clubconsumables"), components.Header.FUT_CLASS), this._generate()
}, utils.JS.inherits(pages.ConsumablesHub, pages.ScreenBase), pages.ConsumablesHub.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("article");
        this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.ConsumablesHub.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.ConsumablesHub.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.ConsumablesHub.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.ConsumablesHubController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = new controllers.club.ConsumablesHub
}, utils.JS.inherits(pages.controllers.ConsumablesHubController, pages.controllers.ScreenControllerBase), pages.controllers.ConsumablesHubController.prototype.destroy = function destroy() {
    this._controller.dealloc(), this._controller = null, pages.controllers.ConsumablesHubController.superClass_.destroy.call(this)
}, pages.controllers.ConsumablesHubController.prototype.onScreenStarted = function onScreenStarted() {
    pages.controllers.ConsumablesHubController.superClass_.init.call(this), this._controller.init(), this.getView().getRoot().append(this._controller.getView().getRoot())
}, Screens.Register("MY_CLUB_SEARCH", "MyClubSearch", Screens.APP_SECTION.CLUB), pages.MyClubSearch = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, ""), this._generate()
}, utils.JS.inherits(pages.MyClubSearch, pages.ScreenBase), pages.MyClubSearch.prototype._generate = function _generate() {
    this._generated || (this.__myClubSearchDiv = document.createElement("div"), this.$_myClubSearchDiv = $(this.__myClubSearchDiv), this.__myClubSearchDiv.setAttribute("id", "MyClubSearch"), this.__root = this.__myClubSearchDiv, this.$_root = $(this.$_myClubSearchDiv), this._generated = !0)
}, pages.MyClubSearch.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__myClubSearchDiv = null, this.$_myClubSearchDiv = null
}, pages.MyClubSearch.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.MyClubSearch.prototype.getRootElement = function getRootElement() {
    return this.__root
}, NamespaceManager.Register("controllers.club"), controllers.club.ClubSearchResults = function ClubSearchResultsController() {
    FUIViewController.call(this), this._viewmodel = null, this._searchCriteria = new transferobjects.SearchCriteria, this._consumable = null, this._pinnedListItem = null, this.displayAsDetails = !1, this.onItemSelected = new FUTObservable, Object.defineProperty(this, "onItemSelected", {
        writable: !1,
        enumerable: !0
    }), this.onDataChange = new FUTObservable, Object.defineProperty(this, "onDataChange", {
        writable: !1,
        enumerable: !0
    })
}, utils.JS.inherits(controllers.club.ClubSearchResults, FUIViewController), controllers.club.ClubSearchResults.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass();
        var view = this.getView();
        this._setupHeader(), this._setupTelemetry(), this._searchCriteria.count = MAX_ITEMS_REQUEST + 1, this._viewmodel.sort = this._searchCriteria.sort, view.onSearch.observe(this, this.onSearch), view.addTarget(this, this._eRowSelected, enums.UIListEvent.ROW_SELECT), view.addTarget(this, this._eRowActionSelected, enums.UIListEvent.ROW_ACTION), view.addTarget(this, this._eNextPage, enums.UIPaginationEvent.NEXT), view.addTarget(this, this._ePrevPage, enums.UIPaginationEvent.PREVIOUS), getDefaultDispatcher().addObserver(enums.AppNotification.ITEM_ACTIVATE, this, this._eUpdateClubHeader)
    }
}, controllers.club.ClubSearchResults.prototype.initWithSearchCriteria = function initWithSearchCriteria(t) {
    this.initialized || (this._viewmodel = utils.JS.isValid(this._viewmodel) ? this._viewmodel : new viewmodels.Club([]), this._searchCriteria = t, this._viewmodel.sort = this._searchCriteria.sort, this.init())
}, controllers.club.ClubSearchResults.prototype.initWithConsumables = function initWithConsumables(t) {
    this.initialized || (utils.Debug.Assert(Array.isArray(t), "Initialization expected an array of item entities."), this._viewmodel = utils.JS.isValid(this._viewmodel) ? this._viewmodel : new viewmodels.ConsumableCategories(t), this._viewmodel.isFull = !0, this._searchCriteria.type = t.length > 0 ? t[0].getSearchType() : enums.SearchType.ANY, this.init())
}, controllers.club.ClubSearchResults.prototype.dealloc = function dealloc() {
    this.getView().onSearch.unobserve(this), getDefaultDispatcher().removeObserver(enums.AppNotification.ITEM_ACTIVATE, this), this.superclass(), this._viewmodel = null, this._searchCriteria = null, this._consumable = null, this.onItemSelected.dealloc(), this.onDataChange.dealloc(), this.onItemSelected = null, this.onDataChange = null, utils.JS.isValid(this._pinnedListItem) && (this._pinnedListItem.dealloc(), this._pinnedListItem = null)
}, controllers.club.ClubSearchResults.prototype._getViewInstanceFromData = function _getViewInstanceFromData() {
    return new views.club.ClubSearchResults
}, controllers.club.ClubSearchResults.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._viewmodel.canShowPage() ? this._updateItemList(this._viewmodel.getPageItems()) : this._requestItems();
    var view = this.getView();
    this._consumable && (this._generatePinnedItemView(), view.setPinnedItemData(this._consumable)), this._pinnedListItem && this._pinnedListItem.viewDidAppear(), view.updateListTopPosition()
}, controllers.club.ClubSearchResults.prototype.getNavigationTitle = function getNavigationTitle() {
    return utils.JS.isValid(this._consumable) ? gLocalization.lText("panel.applyitem.button") : gLocalization.lText("navbar.label.club")
}, controllers.club.ClubSearchResults.prototype._generatePinnedItemView = function _generatePinnedItemView() {
    this._pinnedListItem || (this._pinnedListItem = new controllers.views.PinnedListItem, this._pinnedListItem.initWithItem(this._consumable), this.addChildViewController(this._pinnedListItem), this.getView().appendPinnedItemView(this._pinnedListItem.getView()))
}, controllers.club.ClubSearchResults.prototype.setIterator = function setIterator(iterator) {
    this._viewmodel = iterator
}, controllers.club.ClubSearchResults.prototype.getIterator = function getIterator() {
    return this._viewmodel
}, controllers.club.ClubSearchResults.prototype.setConsumableToApply = function setConsumableToApply(t) {
    this._consumable = t
}, controllers.club.ClubSearchResults.prototype._getItemTypeFromCriteria = function _getItemTypeFromCriteria() {
    switch (this._searchCriteria.type) {
        case enums.SearchType.PLAYER:
            return enums.ItemType.PLAYER;
        case enums.SearchType.STAFF:
            return enums.ItemType.MANAGER;
        case enums.SearchType.CLUB_INFO:
            return this._searchCriteria.category === enums.SearchCategory.KIT ? enums.ItemType.KIT : this._searchCriteria.category === enums.SearchCategory.BADGE ? enums.ItemType.BADGE : (utils.Debug.Assert(!1, "controllers.club.ClubSearchResults::_getItemTypeFromCriteria. Unsupported criteria category."), enums.ItemType.NONE);
        case enums.SearchType.BALL:
            return enums.ItemType.BALL;
        case enums.SearchType.STADIUM:
            return enums.ItemType.STADIUM;
        case enums.SearchType.CONSUMABLES_DEVELOPMENT:
        case enums.SearchType.CONSUMABLES_TRAINING:
            return enums.ItemType.TRAINING;
        case enums.SearchType.ANY:
            return enums.ItemType.NONE;
        default:
            return utils.Debug.Assert(!1, "controllers.club.ClubSearchResults::_getItemTypeFromCriteria. Criteria type hasn't been defined."), enums.ItemType.NONE
    }
}, controllers.club.ClubSearchResults.prototype._updateClubHeader = function _updateClubHeader() {
    var t, view = this.getView(),
        images = [],
        itemType = this._getItemTypeFromCriteria();
    switch (itemType) {
        case enums.ItemType.PLAYER:
        case enums.ItemType.MANAGER:
            images.push(new components.ImageLoader);
            break;
        case enums.ItemType.KIT:
            t = enums.UIActiveItemImgType.HOME_KIT, images.push(this._viewmodel.getActiveItemImg(t)), t = enums.UIActiveItemImgType.AWAY_KIT;
            break;
        case enums.ItemType.BADGE:
            t = enums.UIActiveItemImgType.BADGE_NORMAL;
            break;
        case enums.ItemType.BALL:
            t = enums.UIActiveItemImgType.BALL;
            break;
        case enums.ItemType.STADIUM:
            t = enums.UIActiveItemImgType.STADIUM
    }
    t && images.push(this._viewmodel.getActiveItemImg(t)), !utils.JS.isValid(this._consumable) && images.length > 0 && view.setItemTypeHeader(itemType, images)
}, controllers.club.ClubSearchResults.prototype._setupHeader = function _setupHeader() {
    if (!utils.JS.isValid(this._consumable)) {
        this._updateClubHeader();
        var itemType = this._getItemTypeFromCriteria(),
            t = "navbar.label.club";
        if (itemType === enums.ItemType.PLAYER) t += "players";
        else if (itemType === enums.ItemType.MANAGER) t += "staff";
        else if (itemType === enums.ItemType.TRAINING) {
            var item = this._viewmodel.get(0);
            utils.JS.isValid(item) ? item.isContract() ? t = "card.title.contract" : item.isPlayerPositionModifier() ? t = "card.title.advtraining" : item.isStyleModifier() ? t = "trainingtype.playStyle" : item.isManagerLeagueModifier() ? t = "card.title.leagueModifier" : item.isInjuryHealing() ? t = "card.title.healing" : item.isFitness() ? t = "devtype.fitness" : item.isTraining() && (t = "search.filters.training") : t += "consumables"
        } else itemType !== enums.ItemType.NONE && (t += "items");
        gHeader.setTitle(gLocalization.lText(t))
    }
}, controllers.club.ClubSearchResults.prototype._setupTelemetry = function _setupTelemetry() {
    var itemType = this._getItemTypeFromCriteria();
    if (itemType !== enums.ItemType.NONE) {
        var page = "Club - ";
        itemType === enums.ItemType.PLAYER ? page += "Players" : itemType === enums.ItemType.MANAGER ? page += "Staff" : itemType === enums.ItemType.TRAINING ? page += "Consumables" : page += "Club Items", page += " - List View", gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.PAGE_VIEW, {
            type: PinManager.PAGEVIEW_EVT_TYPE,
            pgid: page
        })), TelemetryManager.trackPage(TelemetryManager.Sections.CLUB, page)
    }
}, controllers.club.ClubSearchResults.prototype._requestItems = function _requestItems(t) {
    repositories.Item.getClubItems(this._searchCriteria).observe(this, function _onClubItemRetrievalComplete(i, data) {
        if (i.unobserve(this), data.success) {
            var index = this._viewmodel.getIndex();
            this._viewmodel.addArray(data.items), this._viewmodel.isFull = data.retrievedAll, this._viewmodel.setIndex(index), this._updateItemList(this._viewmodel.getPageItems(), t)
        } else services.Notification.queue([gLocalization.lText("notification.club.failedToLoad"), enums.UINotificationType.NEGATIVE]), this.getNavigationController() ? this.getNavigationController().popViewController(!0) : NavManager.requestGoBackScreen() || setTimeout(function() {
            NavManager.requestGoBackScreen()
        }, 500)
    })
}, controllers.club.ClubSearchResults.prototype._updateItemList = function _updateItemList(t, i) {
    var view = this.getView();
    if (utils.JS.isBoolean(i) && !i || this.onDataChange.notify({
            items: t
        }), t.length > 0) {
        var s;
        utils.JS.isValid(this._consumable) && (s = t.map(function(item) {
            return this._consumable.canApplyTo(item)
        }, this)), view.setItems(t, s), view.toggleHeaderSearchBtn(t.length > 0 && this._getItemTypeFromCriteria() !== enums.ItemType.BALL), this.displayAsDetails || isPhone() || view.selectListRow(this._viewmodel.current().id), this._setRowsCallback()
    } else view.setEmptyListMessage(this._searchCriteria.isModified()), view.toggleHeaderSearchBtn(!1);
    view.setPaginationState(this._viewmodel.hasPreviousPage(), this._viewmodel.hasNextPage()), this._refreshPinnedItem()
}, controllers.club.ClubSearchResults.prototype.refreshList = function refreshList() {
    this._getItemTypeFromCriteria() === enums.ItemType.TRAINING && this._viewmodel.removeEmptyConsumables(), this._viewmodel.shouldRequestItems() ? (this._searchCriteria.offset += this._searchCriteria.count, this._requestItems(!1)) : this._updateItemList(this._viewmodel.getPageItems(), !1)
}, controllers.club.ClubSearchResults.prototype._refreshPinnedItem = function _refreshPinnedItem() {
    utils.JS.isValid(this._pinnedListItem) && this._pinnedListItem.refresh()
}, controllers.club.ClubSearchResults.prototype._setRowsCallback = function _setRowsCallback() {
    utils.JS.isValid(this._consumable) ? this.getView().setRowActionCallback(null) : this.getView().setRowTapCallback(null)
}, controllers.club.ClubSearchResults.prototype.onSearch = function onSearch() {
    if (utils.JS.isValid(this._consumable)) this.getNavigationController().popViewController();
    else {
        var view = this.getView();
        NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH_FILTERS"), {
            clubViewmodel: this._viewmodel,
            searchCriteria: this._searchCriteria,
            clubHeaderTitle: view.getHeaderTitle(),
            clubHeaderImage: view.getHeaderImageData()
        })
    }
}, controllers.club.ClubSearchResults.prototype._ePrevPage = function _ePrevPage(sender, event, data) {
    this._viewmodel.hasPreviousPage() && this._updateItemList(this._viewmodel.previousPage())
}, controllers.club.ClubSearchResults.prototype._eNextPage = function _eNextPage(sender, event, data) {
    this._viewmodel.hasNextPage() && (this._viewmodel.nextPage(), this._viewmodel.shouldRequestItems() ? (this._searchCriteria.offset += this._searchCriteria.count, this._requestItems()) : this._updateItemList(this._viewmodel.getPageItems()))
}, controllers.club.ClubSearchResults.prototype._eRowActionSelected = function _eRowActionSelected(sender, event, data) {
    var item = data.item || null;
    utils.JS.isValid(this._consumable) && item && services.Item.applyTo(this._consumable, item).observe(this, function(t, data) {
        t.unobserve(this);
        var i = this.getNavigationController();
        i && i.popToRootViewController(!0)
    })
}, controllers.club.ClubSearchResults.prototype._eRowSelected = function _eRowSelected(sender, event, data) {
    var item = data.item || null,
        index = this._viewmodel.indexOf(function(a) {
            return a.id === item.id
        });
    if (item) {
        var t = index !== this._viewmodel.getIndex();
        t && this._viewmodel.setIndex(index), this.getParentViewController() || utils.JS.isValid(this._consumable) ? t && (this.onItemSelected.notify(item), this.getView().selectListRow(item.id)) : NavManager.requestChildScreen(Screens.getView("ITEM_DETAILS"), {
            iterator: this._viewmodel
        })
    }
}, controllers.club.ClubSearchResults.prototype._eUpdateClubHeader = function _eUpdateClubHeader(t, sender, data) {
    this._updateClubHeader()
}, NamespaceManager.Register("controllers.club"), controllers.club.ClubSearchResultsLandscape = function ClubSearchResultsSplitViewController() {
    FUISplitViewController.call(this), this._itemDetailController = new controllers.navigation.ItemDetails, this._listController = new controllers.club.ClubSearchResults, this._viewmodel = this._listController.getIterator(), Object.defineProperty(this, "_viewmodel", {
        get: function() {
            return this._listController.getIterator()
        },
        set: function(t) {
            this._listController.setIterator(t)
        }
    }), this._searchCriteria = this._listController._searchCriteria, Object.defineProperty(this, "_searchCriteria", {
        get: function() {
            return this._listController._searchCriteria
        },
        set: function(t) {
            this._listController._searchCriteria = t
        }
    })
}, utils.JS.inherits(controllers.club.ClubSearchResultsLandscape, FUISplitViewController), controllers.club.ClubSearchResultsLandscape.prototype.init = function init() {
    if (!this.initialized) {
        this.superclass(), this._listController.init(), this._listController.onDataChange.observe(this, this._eListDataChanged), this._listController.onItemSelected.observe(this, this._eItemSelected), this._itemDetailController.initWithIterator(this._listController.getIterator()), this.addChildViewController(this._listController), this.addChildViewController(this._itemDetailController);
        var t = getDefaultDispatcher();
        t.addObserver(enums.AppNotification.ITEM_ACTIVATE, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_APPLY, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_DISCARD, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_LIST, this, this._onItemDetailsUpdate), t.addObserver(enums.AppNotification.ITEM_MOVE, this, this._onItemDetailsUpdate)
    }
}, controllers.club.ClubSearchResultsLandscape.prototype.initWithSearchCriteria = function initWithSearchCriteria(t) {
    this.initialized || (this._listController.initWithSearchCriteria(t), this.init())
}, controllers.club.ClubSearchResultsLandscape.prototype.initWithConsumables = function initWithConsumables(t) {
    this.initialized || (this._listController.initWithConsumables(t), this.init())
}, controllers.club.ClubSearchResultsLandscape.prototype.dealloc = function dealloc() {
    this._itemDetailController.dealloc(), this._itemDetailController = null, this._listController.dealloc(), this._listController = null;
    var t = getDefaultDispatcher();
    t.removeObserver(enums.AppNotification.ITEM_ACTIVATE, this), t.removeObserver(enums.AppNotification.ITEM_APPLY, this), t.removeObserver(enums.AppNotification.ITEM_DISCARD, this), t.removeObserver(enums.AppNotification.ITEM_LIST, this), t.removeObserver(enums.AppNotification.ITEM_MOVE, this), this.superclass()
}, controllers.club.ClubSearchResultsLandscape.prototype.viewDidAppear = function viewDidAppear() {
    this.superclass(), this._setLeftController(this._listController)
}, controllers.club.ClubSearchResultsLandscape.prototype.setConsumableToApply = function setConsumableToApply(t) {
    this._listController.setConsumableToApply(t)
}, controllers.club.ClubSearchResultsLandscape.prototype._eItemSelected = function _eItemSelected(t, index) {
    this._itemDetailController.setIndex(index)
}, controllers.club.ClubSearchResultsLandscape.prototype._eListDataChanged = function _eListDataChanged(t, data) {
    data.items && (data.items.length > 0 ? (this._setRightController(this._itemDetailController), this._itemDetailController.enableSwiping(!1), this._itemDetailController.setIndex(this._listController.getIterator().getIndex())) : this.hideRightController())
}, controllers.club.ClubSearchResultsLandscape.prototype._onItemDetailsUpdate = function _onItemDetailsUpdate(t, sender, data) {
    this._listController.refreshList()
}, pages.controllers.MyClubSearchController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._controller = null
}, utils.JS.inherits(pages.controllers.MyClubSearchController, pages.controllers.ScreenControllerBase), pages.controllers.MyClubSearchController.prototype.destroy = function() {
    this._controller.dealloc(), this._controller = null, pages.controllers.MyClubSearchController.superClass_.destroy.call(this)
}, pages.controllers.MyClubSearchController.prototype.getDataCache = function getDataCache() {
    return {
        viewmodel: this._controller._viewmodel,
        searchCriteria: this._controller._searchCriteria
    }
}, pages.controllers.MyClubSearchController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.MyClubSearchController.superClass_.onScreenInitialized.call(this, data, t), TelemetryManager.trackPage(TelemetryManager.Sections.CLUB, NavManager.getCurrentScreen().getScreenId());
    var i = data && data.consumableToApply;
    isPhone() || i ? this._controller = new controllers.club.ClubSearchResults : this._controller = new controllers.club.ClubSearchResultsLandscape, t ? (t.viewmodel && (this._controller._viewmodel = t.viewmodel), t.viewmodel instanceof viewmodels.ConsumableCategories ? this._controller.initWithConsumables(t.viewmodel.values()) : t.searchCriteria && this._controller.initWithSearchCriteria(t.searchCriteria)) : data && (data.searchCriteria || data.consumables) ? (data.consumableToApply && this._controller.setConsumableToApply(data.consumableToApply), data.searchCriteria ? this._controller.initWithSearchCriteria(data.searchCriteria) : data.consumables && this._controller.initWithConsumables(data.consumables)) : utils.Debug.Assert(!1, "pages.controllers.MyClubSearchController::onScreenInitialized. Expected a valid initialization parameter to define our search."), this._controller.viewWillAppear(), this.getView().getRootElement().appendChild(this._controller.getView().getRootElement()), this._controller.viewDidAppear()
}, Screens.Register("MY_CLUB_SEARCH_FILTERS", "MyClubSearchFilters", Screens.APP_SECTION.CLUB), pages.MyClubSearchFilters = function() {
    pages.ScreenBase.call(this), this.updateHeader(components.Header.DEFAULT_CHILD_PAGE, gLocalization.lText("navbar.label.clubsearch")), this.onFilterChange = new FUTObservable, Object.defineProperty(this, "onFilterChange", {
        writable: !1,
        enumerable: !0
    }), this._generate()
}, utils.JS.inherits(pages.MyClubSearchFilters, pages.ScreenBase), pages.MyClubSearchFilters.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.classList.add("MyClubSearchFilters"), this.__pinnedDiv = document.createElement("div"), this.$_pinnedDiv = $(this.__pinnedDiv), this.__pinnedDiv.classList.add("pinnedDiv"), t.appendChild(this.__pinnedDiv), this.__scrollerDiv = document.createElement("div"), this.$_scrollerDiv = $(this.__scrollerDiv), this.__scrollerDiv.classList.add("nativeScrolling");
        var i = document.createElement("div");
        i.classList.add("layout-article"), i.classList.add("searchContainer");
        var s = document.createElement("div");
        s.classList.add("layout-flex-bar"), this._btnResetTop = new views.buttons.DefaultButton, s.appendChild(this._btnResetTop.getRootElement()), this._btnSearchTop = new views.buttons.DefaultButton, this._btnSearchTop.getRootElement().classList.add("call-to-action"), s.appendChild(this._btnSearchTop.getRootElement()), i.appendChild(s), this._sortOptions = new views.controls.SortOptions, i.appendChild(this._sortOptions.getRootElement()), this._searchFilters = new views.items.ItemSearch, this._searchFilters.getRootElement().classList.add("flush-sides"), i.appendChild(this._searchFilters.getRootElement());
        var o = document.createElement("div");
        o.classList.add("bottom-bar"), o.classList.add("layout-flex-bar"), this._btnResetBottom = new views.buttons.DefaultButton, o.appendChild(this._btnResetBottom.getRootElement()), this._btnSearchBottom = new views.buttons.DefaultButton, this._btnSearchBottom.getRootElement().classList.add("call-to-action"), o.appendChild(this._btnSearchBottom.getRootElement()), i.appendChild(o), this.__scrollerDiv.appendChild(i), t.appendChild(this.__scrollerDiv), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.MyClubSearchFilters.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__pinnedDiv = null, this.$_pinnedDiv = null, this.__scrollerDiv = null, this.$_scrollerDiv = null, this._btnResetTop.destroy(), this._btnResetTop = null, this._btnSearchTop.destroy(), this._btnSearchTop = null, this._sortOptions.destroy(), this._sortOptions = null, this._searchFilters.destroy(), this._searchFilters = null, this._btnResetBottom.destroy(), this._btnResetBottom = null, this._btnSearchBottom.destroy(), this._btnSearchBottom = null
}, pages.MyClubSearchFilters.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.MyClubSearchFilters.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.MyClubSearchFilters.EVENT_RESET_BUTTON_SELECTED = "pages.MyClubSearchFilters.EVENT_RESET_BUTTON_SELECTED", pages.MyClubSearchFilters.EVENT_SEARCH_BUTTON_SELECTED = "pages.MyClubSearchFilters.EVENT_SEARCH_BUTTON_SELECTED", pages.MyClubSearchFilters.prototype.init = function init(data, t) {
    this._btnResetTop.init(), this._btnResetTop.setText(gLocalization.lText("search.pagination.reset")), this._btnResetTop.addTarget(this, this._eReset, enums.Event.TAP), this._btnSearchTop.init(), this._btnSearchTop.setText(gLocalization.lText("button.search")), this._btnSearchTop.addTarget(this, this._eSearch, enums.Event.TAP), this._btnResetBottom.init(), this._btnResetBottom.setText(gLocalization.lText("search.pagination.reset")), this._btnResetBottom.addTarget(this, this._eReset, enums.Event.TAP), this._btnSearchBottom.init(), this._btnSearchBottom.setText(gLocalization.lText("button.search")), this._btnSearchBottom.addTarget(this, this._eSearch, enums.Event.TAP), gHeader.setTitle(data.clubHeaderTitle), this._sortOptions.init(), this._sortOptions.addSlider(enums.UISortOptionType.UNTRADEABLE, gLocalization.lText("search.sort.header")), this._sortOptions.addSlider(enums.UISortOptionType.DISCARD, gLocalization.lText("search.sort.discardValue")), this._sortOptions.layoutSubviews(), this._searchFilters.init(), this._searchFilters.onFilterChange.observe(this, this._eFilterChanged)
}, pages.MyClubSearchFilters.prototype.pinListItem = function(t) {
    if (utils.JS.isValid(this.$_pinnedDiv) || utils.JS.isValid(this.$_scrollerDiv)) {
        var i = $("<ul></ul>"),
            s = new components.ListRowItem;
        s.setData(t), s.render(), i.append(s.getRoot()), this.$_pinnedDiv.append(i), this.$_scrollerDiv.css("top", parseInt(this.$_pinnedDiv.height(), 10))
    }
}, pages.MyClubSearchFilters.prototype.destroy = function destroy() {
    this.onFilterChange.dealloc(), this._searchFilters.onFilterChange.unobserve(this), this._btnResetTop.removeTarget(this, this._eReset, enums.Event.TAP), this._btnSearchTop.removeTarget(this, this._eSearch, enums.Event.TAP), this._btnResetBottom.removeTarget(this, this._eReset, enums.Event.TAP), this._btnSearchBottom.removeTarget(this, this._eSearch, enums.Event.TAP), this.clearListeners(), this.destroyGeneratedElements()
}, pages.MyClubSearchFilters.prototype.getSortOptions = function getSortOptions() {
    return this._sortOptions
}, pages.MyClubSearchFilters.prototype.getPlayerNameSearch = function getPlayerNameSearch() {
    return this._searchFilters.getPlayerNameSearch()
}, pages.MyClubSearchFilters.prototype.setFilters = function setFilters(t, i) {
    this._searchFilters.setFilters(t, i), this._searchFilters.togglePlayerNameRow(t.searchCriteria.type === enums.SearchType.PLAYER && !t.isGenerationsSearch && !t.isMarketSearch)
}, pages.MyClubSearchFilters.prototype.setFilterValue = function setFilterValue(filter, value) {
    this._searchFilters.setFilterValue(filter, value)
}, pages.MyClubSearchFilters.prototype.setFilterDefaultValue = function setFilterValue(filter, value) {
    this._searchFilters.setFilterDefaultValue(filter, value)
}, pages.MyClubSearchFilters.prototype.setFilterLock = function setFilterValue(filter, t) {
    this._searchFilters.setFilterLock(filter, t)
}, pages.MyClubSearchFilters.prototype._eFilterChanged = function _eFilterChanged(t, i, id, value) {
    this.onFilterChange.notify(i, id, value)
}, pages.MyClubSearchFilters.prototype._eReset = function _eReset() {
    this.dispatch(pages.MyClubSearchFilters.EVENT_RESET_BUTTON_SELECTED)
}, pages.MyClubSearchFilters.prototype._eSearch = function _eSearch() {
    this.dispatch(pages.MyClubSearchFilters.EVENT_SEARCH_BUTTON_SELECTED)
}, pages.controllers.MyClubSearchFiltersController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view), this._searchViewmodel = new viewmodels.ItemSearch, this._clubViewmodel = null, this._searchCriteria = null, this._consumable = null
}, utils.JS.inherits(pages.controllers.MyClubSearchFiltersController, pages.controllers.ScreenControllerBase), pages.controllers.MyClubSearchFiltersController.CONSUMABLE_TYPE_CLUB = "club", pages.controllers.MyClubSearchFiltersController.CONSUMABLE_TYPE_AUCTION = "auction", pages.controllers.MyClubSearchFiltersController.prototype.init = function() {
    var view = this.getView();
    view.addListener(pages.MyClubSearchFilters.EVENT_RESET_BUTTON_SELECTED, this, this._onResetBtn), view.addListener(pages.MyClubSearchFilters.EVENT_SEARCH_BUTTON_SELECTED, this, this._onSearchBtn), view.getSortOptions().addTarget(this, this._eSortToggled, enums.Event.CHANGE)
}, pages.controllers.MyClubSearchFiltersController.prototype.destroy = function() {
    this.getView().onFilterChange.unobserve(this), pages.controllers.MyClubSearchFiltersController.superClass_.destroy.call(this)
}, pages.controllers.MyClubSearchFiltersController.prototype.getDataCache = function() {
    return {
        searchViewmodel: this._searchViewmodel,
        searchCriteria: this._searchCriteria,
        consumable: this._consumable
    }
}, pages.controllers.MyClubSearchFiltersController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.MyClubSearchFiltersController.superClass_.onScreenInitialized.call(this, data, t), t ? (t.searchViewmodel && (this._searchViewmodel = t.searchViewmodel), t.searchCriteria && (this._searchCriteria = t.searchCriteria), t.consumable && (this._consumable = t.consumable)) : data ? (data.searchCriteria && (this._searchViewmodel.defaultSearchCriteria.type = data.searchCriteria.type, data.searchCriteria.type !== enums.SearchType.STAFF && (this._searchViewmodel.defaultSearchCriteria.category = data.searchCriteria.category), this._searchCriteria = data.searchCriteria, this._searchViewmodel.updateSearchCriteria(data.searchCriteria)), data.consumable && (this._consumable = data.consumable)) : this._searchCriteria = new transferobjects.SearchCriteria;
    var i = this._searchViewmodel.defaultSearchCriteria;
    utils.JS.isValid(this._consumable) && (this._consumable.isManagerConsumable() || this._consumable.isManagerLeagueModifier()) && (i.category = enums.SearchCategory.MANAGER, this._searchViewmodel.updateSearchCriteria(i));
    var view = this.getView(),
        s = utils.JS.isValid(this._consumable) && (this._consumable.isPlayerTraining() || this._consumable.isPlayerStyleModifier());
    view.setFilters(this._searchViewmodel, s), s && (this._searchViewmodel.searchCriteria.zone = ZONE_NO_GK_VALUE, i.zone = ZONE_NO_GK_VALUE), view.onFilterChange.observe(this, this._eFilterChanged), view.getPlayerNameSearch().addTarget(this, this._ePlayerNameChange, enums.Event.CHANGE);
    var type = this._searchViewmodel.searchCriteria.type;
    if (type === enums.SearchType.STADIUM || type === enums.SearchType.BALL || type === enums.SearchType.CLUB_INFO) {
        var o = type === enums.SearchType.CLUB_INFO ? this._searchViewmodel.searchCriteria.category : type;
        view.setFilterDefaultValue(enums.UISearchFilters.TYPE, o), view.setFilterLock(enums.UISearchFilters.TYPE, !0)
    }
    utils.JS.isValid(this._consumable) ? (view.pinListItem(this._consumable), this._adjustFiltersForConsumable(this._consumable)) : (utils.Debug.Assert(data.clubViewmodel, "pages.controllers.MyClubSearchFiltersController: No clubViewmodel declared in onScreenInitialized()"), this._clubViewmodel = data.clubViewmodel, this._searchViewmodel.searchCriteria.untradeables = enums.SearchUntradeables.DEFAULT, this._searchViewmodel.sort = enums.SearchSort.DESCENDING)
}, pages.controllers.MyClubSearchFiltersController.prototype._adjustFiltersForConsumable = function(c) {
    var view = this.getView();
    gLocalization.lText("label.apply");
    c.isPlayerTraining() || c.isGKTraining() ? (gLocalization.lText("search.filters.training"), c.isGKTraining() && (view.setFilterDefaultValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterLock(enums.UISearchFilters.POSITION, !0))) : c.isContract() ? (gLocalization.lText("card.title.contract"), c.isManagerContract() && view.setFilterLock(enums.UISearchFilters.TYPE, !0)) : c.isFitness() ? gLocalization.lText("devtype.fitness") : c.isInjuryHealing() ? gLocalization.lText("card.title.healing") : c.isPlayerPositionModifier() ? (gLocalization.lText("card.title.advtraining"), view.setFilterDefaultValue(enums.UISearchFilters.POSITION, c.getStaticData().trainPosFrom), view.setFilterValue(enums.UISearchFilters.POSITION, c.getStaticData().trainPosFrom), view.setFilterLock(enums.UISearchFilters.POSITION, !0)) : c.isStyleModifier() ? (gLocalization.lText("trainingtype.playStyle"), c.isGKStyleModifier() && (view.setFilterDefaultValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterValue(enums.UISearchFilters.POSITION, enums.PlayerPositions.GK), view.setFilterLock(enums.UISearchFilters.POSITION, !0))) : c.isManagerLeagueModifier() && (gLocalization.lText("card.title.leagueModifier"), view.setFilterLock(enums.UISearchFilters.TYPE, !0))
}, pages.controllers.MyClubSearchFiltersController.prototype._onResetBtn = function() {
    this._searchViewmodel.resetSearch();
    var view = this.getView(),
        t = utils.JS.isValid(this._consumable) && (this._consumable.isPlayerTraining() || this._consumable.isPlayerStyleModifier());
    view.setFilters(this._searchViewmodel, t), view.getPlayerNameSearch().clearInput()
}, pages.controllers.MyClubSearchFiltersController.prototype._onSearchBtn = function() {
    utils.JS.isValid(this._consumable) ? NavManager.requestChildScreen(Screens.getView("MY_CLUB_SEARCH"), {
        searchCriteria: this._searchViewmodel.searchCriteria,
        consumableToApply: this._consumable
    }) : (this._searchCriteria.update(this._searchViewmodel.searchCriteria), this._searchCriteria.offset = 0, this._clubViewmodel.resetCollection([]), NavManager.requestGoBackScreen())
}, pages.controllers.MyClubSearchFiltersController.prototype._ePlayerNameChange = function _ePlayerNameChange(sender, t) {
    var i = this.getView().getPlayerNameSearch().getSelected(),
        view = this.getView();
    utils.JS.isValid(i) ? this._searchViewmodel.setPlayerData(i) : this._searchViewmodel.clearPlayerData(), view.setFilters(this._searchViewmodel), utils.JS.isValid(i) && (view.setFilterValue(enums.UISearchFilters.NATION, -1), view.setFilterValue(enums.UISearchFilters.LEAGUE, -1), view.setFilterValue(enums.UISearchFilters.CLUB, -1))
}, pages.controllers.MyClubSearchFiltersController.prototype._eSortToggled = function _eSortToggled(sender, t, data) {
    switch (data.id) {
        case enums.UISortOptionType.DISCARD:
            this._searchViewmodel.sort = data.checked ? enums.SearchSort.ASCENDING : enums.SearchSort.DESCENDING;
            break;
        case enums.UISortOptionType.UNTRADEABLE:
            this._searchViewmodel.searchCriteria.untradeables = data.checked ? enums.SearchUntradeables.ONLY : enums.SearchUntradeables.DEFAULT
    }
}, pages.controllers.MyClubSearchFiltersController.prototype._eFilterChanged = function _eFilterChanged(t, i, id, value) {
    this._searchViewmodel.updateFromFilterChange(i, id, value), this.getView().setFilters(this._searchViewmodel)
}, pages.controllers.MyClubSearchFiltersController.prototype._ePlayerNameSearchCleared = function _ePlayerNameSearchCleared(t) {
    this._searchViewmodel.clearPlayerData()
}, pages.controllers.MyClubSearchFiltersController.prototype._ePlayerNameSearchSelected = function _ePlayerNameSearchSelected(t) {
    NavManager.requestChildScreen(Screens.getView("SEARCH_PLAYER_NAME"), {
        viewmodel: this._searchViewmodel
    })
}, Screens.Register("WEBSTART_ACCESS_OVER", "WebstartAccessOver", Screens.APP_SECTION.HOME), pages.WebstartAccessOver = function() {
    pages.GettingStarted.call(this), this.updateHeader(components.Header.SETTINGS_BUTTON, gLocalization.lText("webstartaccessover.title")), this._generate()
}, utils.JS.inherits(pages.WebstartAccessOver, pages.GettingStarted), pages.WebstartAccessOver.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "GettingStarted"), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.WebstartAccessOver.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null
}, pages.WebstartAccessOver.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.WebstartAccessOver.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.controllers.WebstartAccessOverController = function(view) {
    pages.controllers.GettingStartedController.call(this, view)
}, utils.JS.inherits(pages.controllers.WebstartAccessOverController, pages.controllers.GettingStartedController), pages.controllers.WebstartAccessOverController.prototype.onScreenInitialized = function(data, t) {
    pages.controllers.WebstartAccessOverController.superClass_.onScreenInitialized.call(this, data, t), this._controller.getView().renderWebstartAccess()
}, Screens.Register("WEB_CLIENT_UPDATE", "WebClientUpdate", Screens.APP_SECTION.HOME), pages.WebClientUpdate = function() {
    pages.ScreenBase.call(this), this.updateHeader(isPhone() ? components.Header.HIDE_ON_LANDSCAPE : components.Header.NO_HEADER, gLocalization.lText("clientupdate.title")), gFooter.hide(), gTelemetryManager.trackPage(TelemetryManager.Sections.MISC, "Web App - Update Screen"), this._generate()
}, utils.JS.inherits(pages.WebClientUpdate, pages.ScreenBase), pages.WebClientUpdate.prototype._generate = function _generate() {
    if (!this._generated) {
        var t = document.createElement("div");
        t.setAttribute("id", "WebClientUpdate"), t.classList.add("p-boot-base"), t.classList.add("l-boot-base"), t.classList.add("patchScreen"), t.classList.add("client-update-screen");
        var i = document.createElement("div");
        i.classList.add("p-patchscreen"), i.classList.add("l-patchscreen"), i.classList.add("boot-box");
        var s = document.createElement("div");
        s.classList.add("boot-content-container");
        var o = document.createElement("div");
        o.classList.add("boot-primary-content");
        var l = document.createElement("div");
        l.setAttribute("id", "patchIcon"), o.appendChild(l), s.appendChild(o);
        var u = document.createElement("div");
        u.classList.add("boot-secondary-content");
        var h = document.createElement("div");
        h.classList.add("layout-article"), h.classList.add("boot-content"), this.__title = document.createElement("p"), this.$_title = $(this.__title), this.__title.classList.add("title"), h.appendChild(this.__title), this.__message = document.createElement("p"), this.$_message = $(this.__message), this.__message.classList.add("patchMessage"), h.appendChild(this.__message), this._progress = new views.ProgressBar, h.appendChild(this._progress.getRootElement()), this._actionButton = new views.buttons.DefaultButton, this._actionButton.getRootElement().classList.add("call-to-action"), h.appendChild(this._actionButton.getRootElement()), u.appendChild(h), s.appendChild(u), i.appendChild(s), t.appendChild(i), this.__root = t, this.$_root = $(t), this._generated = !0
    }
}, pages.WebClientUpdate.prototype.destroyGeneratedElements = function destroyGeneratedElements() {
    this.$_root.off(), this.$_root.remove(), this.__root = null, this.$_root = null, this.__title = null, this.$_title = null, this.__message = null, this.$_message = null, this._progress.destroy(), this._progress = null, this._actionButton.destroy(), this._actionButton = null
}, pages.WebClientUpdate.prototype.getRoot = function getRoot() {
    return this.$_root
}, pages.WebClientUpdate.prototype.getRootElement = function getRootElement() {
    return this.__root
}, pages.WebClientUpdate.prototype.init = function init(data, t) {
    this._actionButton.init()
}, pages.WebClientUpdate.prototype.destroy = function destroy() {
    this.destroyGeneratedElements()
}, pages.WebClientUpdate.prototype.start = function start() {
    this._actionButton.addTarget(this, this._eRestartSelected, enums.Event.TAP), this._actionButton.setText(gLocalization.lText("clientupdate.button.ready")), this.$_title.html(gLocalization.lText("clientupdate.message.title")), this.$_message.html(gLocalization.lText("clientupdate.message.ready"))
}, pages.WebClientUpdate.prototype.stop = function() {
    this.clearListeners()
}, pages.WebClientUpdate.prototype._eRestartSelected = function _eRestartSelected(sender, event, data) {
    this._actionButton.setInteractionState(!1), this._actionButton.removeTarget(this, this._eRestartSelected, enums.Event.TAP), this.dispatch(pages.WebClientUpdate.RESTART_APP)
}, pages.WebClientUpdate.RESTART_APP = "pages.webclientupdate.RESTART_APP", pages.controllers.WebClientUpdateController = function(view) {
    pages.controllers.ScreenControllerBase.call(this, view)
}, utils.JS.inherits(pages.controllers.WebClientUpdateController, pages.controllers.ScreenControllerBase), pages.controllers.WebClientUpdateController.prototype.init = function() {
    gClientUpdate.disablePolling(), this.getView().addListener(pages.WebClientUpdate.RESTART_APP, this, this.onRestartApp)
}, pages.controllers.WebClientUpdateController.prototype.destroy = function() {
    this.getView().clearListenersByScope(this)
}, pages.controllers.WebClientUpdateController.prototype.onRestartApp = function() {
    gPinManager.trigger(utils.PinFactory.createEvent(enums.PIN.EVENT.BOOT_START, {
        status: enums.PIN.BOOT_START_EVT_STATUS.SOURCE_UPDATE,
        source: enums.PIN.BOOT_START_EVT_SOURCE.UPGRADE
    }), !0), gTelemetryManager.trackEvent(TelemetryManager.Sections.MISC, TelemetryManager.Categories.BUTTON_PRESS, "Web App Update Button"), gClickShield.showShield(components.ClickShield.SHIELD.LOADING), setTimeout(function() {
        services.URL.hasDeepLinkURL() && getStorage().setItem("deepLinkURL", services.URL.getDeepLinkURL()), repositories.Squad.hasExternalShowOffSquad() && getStorage().setItem("showOffId", repositories.Squad.unauthenticatedShowOffId), gClientUpdate.updateClient()
    }, 1e3)
};
